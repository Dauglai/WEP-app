@line-height-l: 1.25rem;

.textfield-host() {
    .text-basic();
    position: relative;
    display: block;
    border-radius: var(--tui-radius-m);
    text-align: left;

    &[data-size='s'] {
        height: var(--tui-height-s);
        min-height: var(--tui-height-s);
        max-height: var(--tui-height-s);
    }

    &[data-size='m'] {
        height: var(--tui-height-m);
        min-height: var(--tui-height-m);
        max-height: var(--tui-height-m);
    }

    &[data-size='l'] {
        height: var(--tui-height-l);
        min-height: var(--tui-height-l);
        max-height: var(--tui-height-l);
        font: var(--tui-font-text-m);
        line-height: @line-height-l;
    }
}

.textfield-content() {
    display: flex;
    height: 100%;
    width: 100%;
    padding: 0 var(--tui-padding-m);
    box-sizing: border-box;
    align-items: center;
    overflow: hidden;

    :host[data-size='s'] & {
        padding: 0 var(--tui-padding-s);
    }

    :host[data-size='l'] & {
        padding: 0 var(--tui-padding-l);
    }

    &:after {
        content: '';
        margin-right: -0.25rem;
    }

    :host[data-size='m'] &:after {
        display: none;
    }
}

.textfield-input() {
    .text-basic();
    .clearinput();
    .fullsize();
    padding: 0 var(--tui-padding-m);
    border: solid transparent;
    border-width: 0 var(--border-end, 0) 0 var(--border-start, 0);
    border-inline-start-width: var(--border-start, 0);
    border-inline-end-width: var(--border-end, 0);
    text-indent: var(--text-indent);
    text-align: inherit;
    box-sizing: border-box;
    white-space: nowrap;
    overflow: hidden;
    text-transform: inherit;
    resize: none;

    :host[data-mode='onDark'] &,
    :host-context(tui-primitive-textfield[data-mode='onDark']),
    :host-context(tui-text-area[data-mode='onDark']) {
        .autofill(dark);
    }

    :host[data-size='s'] &,
    :host-context(tui-primitive-textfield[data-size='s']):not(tui-primitive-textfield),
    :host-context(tui-text-area[data-size='s']):not(tui-text-area) {
        padding: 0 var(--tui-padding-s);
    }

    :host[data-size='l'] &,
    :host-context(tui-primitive-textfield[data-size='l']):not(tui-primitive-textfield),
    :host-context(tui-text-area[data-size='l']):not(tui-text-area) {
        padding: 0 var(--tui-padding-l);
    }

    :host._disabled &,
    :host-context(tui-primitive-textfield._disabled),
    :host-context(tui-text-area._disabled) {
        // @bad TODO: research why you can reach disabled textfield with mask inside a label without that
        pointer-events: none;
    }

    :host[data-size='l']:not(._label-outside) &,
    :host-context(tui-primitive-textfield[data-size='l']:not(._label-outside)):not(tui-primitive-textfield) {
        padding-top: @line-height-l;

        // Workaround for raising placeholder in temporary autofill
        &:-webkit-autofill + .t-content .t-placeholder {
            font-size: 0.8156rem;
            transform: translateY(-0.625rem);
        }
    }

    :host[data-size='m']:not(._label-outside) &,
    :host-context(tui-primitive-textfield[data-size='m']:not(._label-outside)):not(tui-primitive-textfield) {
        padding-top: 1.125rem;

        // Workaround for raising placeholder in temporary autofill
        &:-webkit-autofill + .t-content .t-placeholder {
            font-size: 0.69rem;
            transform: translateY(-0.5rem);
        }
    }

    :host._hidden input&,
    :host-context(tui-primitive-textfield._hidden) {
        opacity: 0;
        text-indent: -10em; // Hide blinking caret even in IE
        -webkit-user-select: none; // Hide blinking caret in mobile safari
    }
}

.textfield-wrapper() {
    flex: 1;
    min-width: 0;
    padding-right: 0.25rem;
    padding-inline-end: 0.25rem;
    padding-inline-start: 0;

    & + * {
        margin: 0;
    }
}

.textfield-placeholder() {
    .transition(~'transform, font-size, color, letter-spacing');
    .text-basic();
    .text-overflow();
    display: block;
    width: 100%;
    user-select: none;
    color: var(--tui-text-02);
    pointer-events: none;
    will-change: transform;
    transform: translateY(0);

    &_raised {
        transform: translateY(-0.625rem);

        :host[data-size='m'] & {
            font: var(--tui-font-text-xs);
            transform: translateY(-0.5rem);
            letter-spacing: 0.025rem;
        }

        :host._invalid:not(._focused) &,
        :host._invalid:not(._focused):hover & {
            color: var(--tui-error-fill);
        }

        :host[data-mode='onDark']._invalid:not(._focused) &,
        :host[data-mode='onDark']._invalid:not(._focused):hover & {
            color: var(--tui-error-fill-night);
        }
    }

    :host._focused &,
    :host[data-size='m']._focused._label-outside &,
    :host[data-size='l']._focused._label-outside & {
        color: var(--tui-text-03);
    }

    :host[data-size='l'] & {
        font-size: 0.9375rem;

        &_raised {
            font-size: 0.8156rem;
        }
    }

    :host[data-size='m']._focused:not(._label-outside) &,
    :host[data-size='l']._focused:not(._label-outside) & {
        color: var(--tui-text-01);
    }

    /* stylelint-disable selector-max-specificity */
    // textfield-light
    :host[data-mode='onDark'] & {
        color: var(--tui-text-02-night);
    }

    :host[data-size='m'][data-mode='onDark']._focused:not(._label-outside) &,
    :host[data-size='l'][data-mode='onDark']._focused:not(._label-outside) & {
        color: var(--tui-text-01-night);
    }

    :host[data-mode='onDark']._focused &,
    :host[data-size='m'][data-mode='onDark']._focused._label-outside &,
    :host[data-size='l'][data-mode='onDark']._focused._label-outside & {
        color: var(--tui-text-02-night);
    }
    /* stylelint-enable selector-max-specificity */

    @supports (-webkit-hyphens: none) {
        & {
            will-change: unset;
            transition-property: transform, color, letter-spacing;
        }
    }
}

.input-icon() {
    position: relative;
    display: flex;
    width: 1.5rem;
    height: 1.5rem;
    margin: 0 0 0 0.25rem;
    margin-inline-start: 0.25rem;
    margin-inline-end: 0;
    align-items: center;
    justify-content: center;
    box-sizing: border-box;
    cursor: pointer;
}

.icon-button() {
    .input-icon();

    :host._readonly &,
    :host._disabled & {
        pointer-events: none;
    }
}

.textfield() {
    :host {
        .textfield-host();
    }

    .t-input {
        .textfield-input();
    }

    .t-content {
        .textfield-content();
    }

    .t-wrapper {
        .textfield-wrapper();
    }

    .t-placeholder {
        .textfield-placeholder();
    }

    .t-cleaner {
        .icon-button();
    }

    // @bad TODO: Refactor this and interactive icons together
    .t-icon {
        .input-icon();
        pointer-events: none;

        &_left {
            margin: 0 0.375rem 0 -0.25rem;
            margin-inline-start: -0.25rem;
            margin-inline-end: 0.375rem;

            :host[data-size='l'] & {
                margin: 0 0.5rem 0 -0.25rem;
                margin-inline-start: -0.25rem;
                margin-inline-end: 0.5rem;
            }
        }
    }
}
