import { ElementRef, Sanitizer } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { TuiStaticRequestService } from '@taiga-ui/cdk';
import { TuiSvgService } from '@taiga-ui/core/services';
import { Observable } from 'rxjs';
import { TuiSvgOptions } from './svg-options';
import * as i0 from "@angular/core";
export declare class TuiSvgComponent {
    private readonly doc;
    private readonly win;
    private readonly options;
    private readonly tuiSanitizer;
    private readonly svgService;
    private readonly staticRequestService;
    private readonly sanitizer;
    private readonly el;
    private readonly src$;
    private icon;
    readonly innerHTML$: Observable<SafeHtml>;
    constructor(doc: Document, win: Window, options: TuiSvgOptions, tuiSanitizer: Sanitizer | null, svgService: TuiSvgService, staticRequestService: TuiStaticRequestService, sanitizer: DomSanitizer, el: ElementRef<Element>);
    set src(src: SafeHtml | string);
    get src(): SafeHtml | string;
    get use(): string;
    get isInnerHTML(): boolean;
    private get isShadowDOM();
    private get isUse();
    private get isExternal();
    private get isUrl();
    private get isSrc();
    private get isName();
    private get isCrossDomain();
    onError(message?: string): void;
    private resolveName;
    private getSafeHtml;
    private process;
    private sanitize;
    private getExternalIcon;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiSvgComponent, [null, null, null, { optional: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiSvgComponent, "tui-svg", never, { "src": "src"; }, {}, never, never>;
}
