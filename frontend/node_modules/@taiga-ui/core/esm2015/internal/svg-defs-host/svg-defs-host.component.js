import { isPlatformServer } from '@angular/common';
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, PLATFORM_ID, Self, } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiSvgService } from '@taiga-ui/core/services';
import { takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/core/services";
import * as i3 from "@taiga-ui/cdk";
export class TuiSvgDefsHostComponent {
    constructor(svgService, cdr, destroy$, platformId) {
        this.svgService = svgService;
        this.cdr = cdr;
        this.destroy$ = destroy$;
        this.isBrowser = true;
        this.isBrowser = !isPlatformServer(platformId);
    }
    // @bad TODO: Looks like it could be async piped but it was probably written like that for a reason
    ngOnInit() {
        this.svgService.items$.pipe(takeUntil(this.destroy$)).subscribe(defsMap => {
            this.items = defsMap.values();
            this.cdr.detectChanges();
        });
    }
}
TuiSvgDefsHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSvgDefsHostComponent, deps: [{ token: TuiSvgService }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
TuiSvgDefsHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSvgDefsHostComponent, selector: "tui-svg-defs-host", providers: [TuiDestroyService], ngImport: i0, template: "<svg:svg\n    version=\"1.1\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n>\n    <ng-container *ngIf=\"isBrowser; else server\">\n        <defs\n            *ngFor=\"let def of items\"\n            [innerHTML]=\"def\"\n        ></defs>\n    </ng-container>\n    <ng-template #server>\n        <!--svg[outerHTML] - to support SSR, because there is no support of innerHTML for for defs element in domino-->\n        <defs *ngFor=\"let def of items\">\n            <svg [outerHTML]=\"def\"></svg>\n        </defs>\n    </ng-template>\n</svg:svg>\n", styles: [":host{display:none}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSvgDefsHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-svg-defs-host',
                    templateUrl: './svg-defs-host.template.html',
                    styleUrls: ['./svg-defs-host.style.less'],
                    providers: [TuiDestroyService],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i2.TuiSvgService, decorators: [{
                    type: Inject,
                    args: [TuiSvgService]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLWRlZnMtaG9zdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2ludGVybmFsL3N2Zy1kZWZzLWhvc3Qvc3ZnLWRlZnMtaG9zdC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2ludGVybmFsL3N2Zy1kZWZzLWhvc3Qvc3ZnLWRlZnMtaG9zdC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxNQUFNLEVBRU4sV0FBVyxFQUNYLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3RELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFTekMsTUFBTSxPQUFPLHVCQUF1QjtJQUloQyxZQUM0QyxVQUF5QixFQUNyQixHQUFzQixFQUdqRCxRQUEyQixFQUN2QixVQUFtQztRQUxoQixlQUFVLEdBQVYsVUFBVSxDQUFlO1FBQ3JCLFFBQUcsR0FBSCxHQUFHLENBQW1CO1FBR2pELGFBQVEsR0FBUixRQUFRLENBQW1CO1FBUGhELGNBQVMsR0FBRyxJQUFJLENBQUM7UUFVYixJQUFJLENBQUMsU0FBUyxHQUFHLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVELG1HQUFtRztJQUNuRyxRQUFRO1FBQ0osSUFBSSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDdEUsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUM7WUFDOUIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsQ0FBQztRQUM3QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O3FIQXJCUSx1QkFBdUIsa0JBS3BCLGFBQWEsYUFDYixpQkFBaUIsYUFFakIsaUJBQWlCLHlCQUVqQixXQUFXO3lHQVZkLHVCQUF1Qiw0Q0FIckIsQ0FBQyxpQkFBaUIsQ0FBQywwQkNuQmxDLG1sQkFrQkE7NEZESWEsdUJBQXVCO2tCQVBuQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxtQkFBbUI7b0JBQzdCLFdBQVcsRUFBRSwrQkFBK0I7b0JBQzVDLFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO29CQUN6QyxTQUFTLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQztvQkFDOUIsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOzswQkFNUSxNQUFNOzJCQUFDLGFBQWE7OzBCQUNwQixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLElBQUk7OzBCQUNKLE1BQU07MkJBQUMsaUJBQWlCOzswQkFFeEIsTUFBTTsyQkFBQyxXQUFXIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtpc1BsYXRmb3JtU2VydmVyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgSW5qZWN0LFxuICAgIE9uSW5pdCxcbiAgICBQTEFURk9STV9JRCxcbiAgICBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2FmZUh0bWx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVN2Z1NlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3NlcnZpY2VzJztcbmltcG9ydCB7dGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXN2Zy1kZWZzLWhvc3QnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zdmctZGVmcy1ob3N0LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3N2Zy1kZWZzLWhvc3Quc3R5bGUubGVzcyddLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpU3ZnRGVmc0hvc3RDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGl0ZW1zITogSXRlcmFibGVJdGVyYXRvcjxTYWZlSHRtbD47XG4gICAgaXNCcm93c2VyID0gdHJ1ZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aVN2Z1NlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgc3ZnU2VydmljZTogVHVpU3ZnU2VydmljZSxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmLFxuICAgICAgICBAU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZGVzdHJveSQ6IFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcbiAgICApIHtcbiAgICAgICAgdGhpcy5pc0Jyb3dzZXIgPSAhaXNQbGF0Zm9ybVNlcnZlcihwbGF0Zm9ybUlkKTtcbiAgICB9XG5cbiAgICAvLyBAYmFkIFRPRE86IExvb2tzIGxpa2UgaXQgY291bGQgYmUgYXN5bmMgcGlwZWQgYnV0IGl0IHdhcyBwcm9iYWJseSB3cml0dGVuIGxpa2UgdGhhdCBmb3IgYSByZWFzb25cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdmdTZXJ2aWNlLml0ZW1zJC5waXBlKHRha2VVbnRpbCh0aGlzLmRlc3Ryb3kkKSkuc3Vic2NyaWJlKGRlZnNNYXAgPT4ge1xuICAgICAgICAgICAgdGhpcy5pdGVtcyA9IGRlZnNNYXAudmFsdWVzKCk7XG4gICAgICAgICAgICB0aGlzLmNkci5kZXRlY3RDaGFuZ2VzKCk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiIsIjxzdmc6c3ZnXG4gICAgdmVyc2lvbj1cIjEuMVwiXG4gICAgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiXG4gICAgeG1sbnM6eGxpbms9XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCJcbj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXNCcm93c2VyOyBlbHNlIHNlcnZlclwiPlxuICAgICAgICA8ZGVmc1xuICAgICAgICAgICAgKm5nRm9yPVwibGV0IGRlZiBvZiBpdGVtc1wiXG4gICAgICAgICAgICBbaW5uZXJIVE1MXT1cImRlZlwiXG4gICAgICAgID48L2RlZnM+XG4gICAgPC9uZy1jb250YWluZXI+XG4gICAgPG5nLXRlbXBsYXRlICNzZXJ2ZXI+XG4gICAgICAgIDwhLS1zdmdbb3V0ZXJIVE1MXSAtIHRvIHN1cHBvcnQgU1NSLCBiZWNhdXNlIHRoZXJlIGlzIG5vIHN1cHBvcnQgb2YgaW5uZXJIVE1MIGZvciBmb3IgZGVmcyBlbGVtZW50IGluIGRvbWluby0tPlxuICAgICAgICA8ZGVmcyAqbmdGb3I9XCJsZXQgZGVmIG9mIGl0ZW1zXCI+XG4gICAgICAgICAgICA8c3ZnIFtvdXRlckhUTUxdPVwiZGVmXCI+PC9zdmc+XG4gICAgICAgIDwvZGVmcz5cbiAgICA8L25nLXRlbXBsYXRlPlxuPC9zdmc6c3ZnPlxuIl19