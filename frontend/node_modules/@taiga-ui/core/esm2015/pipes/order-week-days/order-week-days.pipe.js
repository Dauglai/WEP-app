import { Inject, Pipe } from '@angular/core';
import { TUI_FIRST_DAY_OF_WEEK } from '@taiga-ui/core/tokens';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiOrderWeekDaysPipe {
    constructor(firstDayOfWeekIndex) {
        this.firstDayOfWeekIndex = firstDayOfWeekIndex;
    }
    transform(mondayFirstWeekDays$) {
        return mondayFirstWeekDays$.pipe(map(convertToSundayFirstWeekFormat), map(weekDays => [
            ...weekDays.slice(this.firstDayOfWeekIndex),
            ...weekDays.slice(0, this.firstDayOfWeekIndex),
        ]));
    }
}
TuiOrderWeekDaysPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOrderWeekDaysPipe, deps: [{ token: TUI_FIRST_DAY_OF_WEEK }], target: i0.ɵɵFactoryTarget.Pipe });
TuiOrderWeekDaysPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOrderWeekDaysPipe, name: "tuiOrderWeekDays" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOrderWeekDaysPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: `tuiOrderWeekDays`,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FIRST_DAY_OF_WEEK]
                }] }]; } });
function convertToSundayFirstWeekFormat(weekDaysNames) {
    const sundayIndex = weekDaysNames.length - 1;
    return [
        weekDaysNames[sundayIndex],
        ...weekDaysNames.slice(0, sundayIndex),
    ];
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3JkZXItd2Vlay1kYXlzLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3BpcGVzL29yZGVyLXdlZWstZGF5cy9vcmRlci13ZWVrLWRheXMucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFFMUQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFNUQsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOztBQU9uQyxNQUFNLE9BQU8sb0JBQW9CO0lBQzdCLFlBRXFCLG1CQUVoQjtRQUZnQix3QkFBbUIsR0FBbkIsbUJBQW1CLENBRW5DO0lBQ0YsQ0FBQztJQUVKLFNBQVMsQ0FBSSxvQkFBNkM7UUFDdEQsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQzVCLEdBQUcsQ0FBQyw4QkFBOEIsQ0FBQyxFQUNuQyxHQUFHLENBQ0MsUUFBUSxDQUFDLEVBQUUsQ0FDUDtZQUNJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUM7WUFDM0MsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxJQUFJLENBQUMsbUJBQW1CLENBQUM7U0FDbEMsQ0FDdkIsQ0FDSixDQUFDO0lBQ04sQ0FBQzs7a0hBbkJRLG9CQUFvQixrQkFFakIscUJBQXFCO2dIQUZ4QixvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFIaEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsa0JBQWtCO2lCQUMzQjs7MEJBR1EsTUFBTTsyQkFBQyxxQkFBcUI7O0FBb0JyQyxTQUFTLDhCQUE4QixDQUFJLGFBQTBCO0lBQ2pFLE1BQU0sV0FBVyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO0lBRTdDLE9BQU87UUFDSCxhQUFhLENBQUMsV0FBVyxDQUFDO1FBQzFCLEdBQUcsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsV0FBVyxDQUFDO0tBQzFCLENBQUM7QUFDckIsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpSW5qZWN0aW9uVG9rZW5UeXBlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0ZJUlNUX0RBWV9PRl9XRUVLfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbnR5cGUgV2Vla0RheXM8VD4gPSBbVCwgVCwgVCwgVCwgVCwgVCwgVF07XG5cbkBQaXBlKHtcbiAgICBuYW1lOiBgdHVpT3JkZXJXZWVrRGF5c2AsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU9yZGVyV2Vla0RheXNQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0ZJUlNUX0RBWV9PRl9XRUVLKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGZpcnN0RGF5T2ZXZWVrSW5kZXg6IFR1aUluamVjdGlvblRva2VuVHlwZTxcbiAgICAgICAgICAgIHR5cGVvZiBUVUlfRklSU1RfREFZX09GX1dFRUtcbiAgICAgICAgPixcbiAgICApIHt9XG5cbiAgICB0cmFuc2Zvcm08VD4obW9uZGF5Rmlyc3RXZWVrRGF5cyQ6IE9ic2VydmFibGU8V2Vla0RheXM8VD4+KTogT2JzZXJ2YWJsZTxXZWVrRGF5czxUPj4ge1xuICAgICAgICByZXR1cm4gbW9uZGF5Rmlyc3RXZWVrRGF5cyQucGlwZShcbiAgICAgICAgICAgIG1hcChjb252ZXJ0VG9TdW5kYXlGaXJzdFdlZWtGb3JtYXQpLFxuICAgICAgICAgICAgbWFwKFxuICAgICAgICAgICAgICAgIHdlZWtEYXlzID0+XG4gICAgICAgICAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLndlZWtEYXlzLnNsaWNlKHRoaXMuZmlyc3REYXlPZldlZWtJbmRleCksXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi53ZWVrRGF5cy5zbGljZSgwLCB0aGlzLmZpcnN0RGF5T2ZXZWVrSW5kZXgpLFxuICAgICAgICAgICAgICAgICAgICBdIGFzIFdlZWtEYXlzPFQ+LFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnRUb1N1bmRheUZpcnN0V2Vla0Zvcm1hdDxUPih3ZWVrRGF5c05hbWVzOiBXZWVrRGF5czxUPik6IFdlZWtEYXlzPFQ+IHtcbiAgICBjb25zdCBzdW5kYXlJbmRleCA9IHdlZWtEYXlzTmFtZXMubGVuZ3RoIC0gMTtcblxuICAgIHJldHVybiBbXG4gICAgICAgIHdlZWtEYXlzTmFtZXNbc3VuZGF5SW5kZXhdLFxuICAgICAgICAuLi53ZWVrRGF5c05hbWVzLnNsaWNlKDAsIHN1bmRheUluZGV4KSxcbiAgICBdIGFzIFdlZWtEYXlzPFQ+O1xufVxuIl19