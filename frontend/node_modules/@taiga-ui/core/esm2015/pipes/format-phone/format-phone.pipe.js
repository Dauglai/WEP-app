import { Pipe } from '@angular/core';
import { CHAR_PLUS, tuiAssert } from '@taiga-ui/cdk';
import { tuiFormatPhone } from '@taiga-ui/core/utils/format';
import * as i0 from "@angular/core";
export class TuiFormatPhonePipe {
    /**
     * Formats phone number string of +7XXXXXXXXXX format with adding separator symbols
     * @param value
     * @param countryCode
     * @param phoneMask
     * @return formatted phone number string +7(XXX)XXX-XX-XX
     */
    transform(value, countryCode = `${CHAR_PLUS}7`, phoneMask = `(###) ###-##-##`) {
        ngDevMode &&
            tuiAssert.assert(value !== undefined, `Undefined was passed to tuiFormatPhone pipe`);
        return tuiFormatPhone(value, countryCode, phoneMask);
    }
}
TuiFormatPhonePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFormatPhonePipe, deps: [], target: i0.ɵɵFactoryTarget.Pipe });
TuiFormatPhonePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFormatPhonePipe, name: "tuiFormatPhone" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFormatPhonePipe, decorators: [{
            type: Pipe,
            args: [{ name: `tuiFormatPhone` }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LXBob25lLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3BpcGVzL2Zvcm1hdC1waG9uZS9mb3JtYXQtcGhvbmUucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUMsU0FBUyxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sNkJBQTZCLENBQUM7O0FBRzNELE1BQU0sT0FBTyxrQkFBa0I7SUFDM0I7Ozs7OztPQU1HO0lBQ0gsU0FBUyxDQUNMLEtBQWEsRUFDYixjQUFzQixHQUFHLFNBQVMsR0FBRyxFQUNyQyxZQUFvQixpQkFBaUI7UUFFckMsU0FBUztZQUNMLFNBQVMsQ0FBQyxNQUFNLENBQ1osS0FBSyxLQUFLLFNBQVMsRUFDbkIsNkNBQTZDLENBQ2hELENBQUM7UUFFTixPQUFPLGNBQWMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3pELENBQUM7O2dIQXBCUSxrQkFBa0I7OEdBQWxCLGtCQUFrQjs0RkFBbEIsa0JBQWtCO2tCQUQ5QixJQUFJO21CQUFDLEVBQUMsSUFBSSxFQUFFLGdCQUFnQixFQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q0hBUl9QTFVTLCB0dWlBc3NlcnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHt0dWlGb3JtYXRQaG9uZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMvZm9ybWF0JztcblxuQFBpcGUoe25hbWU6IGB0dWlGb3JtYXRQaG9uZWB9KVxuZXhwb3J0IGNsYXNzIFR1aUZvcm1hdFBob25lUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIC8qKlxuICAgICAqIEZvcm1hdHMgcGhvbmUgbnVtYmVyIHN0cmluZyBvZiArN1hYWFhYWFhYWFggZm9ybWF0IHdpdGggYWRkaW5nIHNlcGFyYXRvciBzeW1ib2xzXG4gICAgICogQHBhcmFtIHZhbHVlXG4gICAgICogQHBhcmFtIGNvdW50cnlDb2RlXG4gICAgICogQHBhcmFtIHBob25lTWFza1xuICAgICAqIEByZXR1cm4gZm9ybWF0dGVkIHBob25lIG51bWJlciBzdHJpbmcgKzcoWFhYKVhYWC1YWC1YWFxuICAgICAqL1xuICAgIHRyYW5zZm9ybShcbiAgICAgICAgdmFsdWU6IHN0cmluZyxcbiAgICAgICAgY291bnRyeUNvZGU6IHN0cmluZyA9IGAke0NIQVJfUExVU303YCxcbiAgICAgICAgcGhvbmVNYXNrOiBzdHJpbmcgPSBgKCMjIykgIyMjLSMjLSMjYCxcbiAgICApOiBzdHJpbmcge1xuICAgICAgICBuZ0Rldk1vZGUgJiZcbiAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICAgICAgdmFsdWUgIT09IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgdG8gdHVpRm9ybWF0UGhvbmUgcGlwZWAsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0dWlGb3JtYXRQaG9uZSh2YWx1ZSwgY291bnRyeUNvZGUsIHBob25lTWFzayk7XG4gICAgfVxufVxuIl19