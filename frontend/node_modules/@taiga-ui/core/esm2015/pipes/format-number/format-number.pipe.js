import { Inject, Pipe } from '@angular/core';
import { TUI_NUMBER_FORMAT } from '@taiga-ui/core/tokens';
import { tuiFormatNumber } from '@taiga-ui/core/utils/format';
import * as i0 from "@angular/core";
export class TuiFormatNumberPipe {
    constructor(numberFormat) {
        this.numberFormat = numberFormat;
    }
    /**
     * Formats number adding thousand separators and correct decimal separator
     * padding decimal part with zeroes to given length
     * @param value number
     * @param settings See {@link TuiNumberFormatSettings}
     */
    transform(value, settings = {}) {
        return tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), settings));
    }
}
TuiFormatNumberPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFormatNumberPipe, deps: [{ token: TUI_NUMBER_FORMAT }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFormatNumberPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFormatNumberPipe, name: "tuiFormatNumber" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFormatNumberPipe, decorators: [{
            type: Pipe,
            args: [{ name: `tuiFormatNumber` }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0LW51bWJlci5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9waXBlcy9mb3JtYXQtbnVtYmVyL2Zvcm1hdC1udW1iZXIucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFFMUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDZCQUE2QixDQUFDOztBQUc1RCxNQUFNLE9BQU8sbUJBQW1CO0lBQzVCLFlBRXFCLFlBQXFDO1FBQXJDLGlCQUFZLEdBQVosWUFBWSxDQUF5QjtJQUN2RCxDQUFDO0lBRUo7Ozs7O09BS0c7SUFDSCxTQUFTLENBQUMsS0FBYSxFQUFFLFdBQTZDLEVBQUU7UUFDcEUsT0FBTyxlQUFlLENBQUMsS0FBSyxrQ0FBTSxJQUFJLENBQUMsWUFBWSxHQUFLLFFBQVEsRUFBRSxDQUFDO0lBQ3ZFLENBQUM7O2lIQWRRLG1CQUFtQixrQkFFaEIsaUJBQWlCOytHQUZwQixtQkFBbUI7NEZBQW5CLG1CQUFtQjtrQkFEL0IsSUFBSTttQkFBQyxFQUFDLElBQUksRUFBRSxpQkFBaUIsRUFBQzs7MEJBR3RCLE1BQU07MkJBQUMsaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlOdW1iZXJGb3JtYXRTZXR0aW5nc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvaW50ZXJmYWNlcyc7XG5pbXBvcnQge1RVSV9OVU1CRVJfRk9STUFUfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHt0dWlGb3JtYXROdW1iZXJ9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3V0aWxzL2Zvcm1hdCc7XG5cbkBQaXBlKHtuYW1lOiBgdHVpRm9ybWF0TnVtYmVyYH0pXG5leHBvcnQgY2xhc3MgVHVpRm9ybWF0TnVtYmVyUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9OVU1CRVJfRk9STUFUKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IG51bWJlckZvcm1hdDogVHVpTnVtYmVyRm9ybWF0U2V0dGluZ3MsXG4gICAgKSB7fVxuXG4gICAgLyoqXG4gICAgICogRm9ybWF0cyBudW1iZXIgYWRkaW5nIHRob3VzYW5kIHNlcGFyYXRvcnMgYW5kIGNvcnJlY3QgZGVjaW1hbCBzZXBhcmF0b3JcbiAgICAgKiBwYWRkaW5nIGRlY2ltYWwgcGFydCB3aXRoIHplcm9lcyB0byBnaXZlbiBsZW5ndGhcbiAgICAgKiBAcGFyYW0gdmFsdWUgbnVtYmVyXG4gICAgICogQHBhcmFtIHNldHRpbmdzIFNlZSB7QGxpbmsgVHVpTnVtYmVyRm9ybWF0U2V0dGluZ3N9XG4gICAgICovXG4gICAgdHJhbnNmb3JtKHZhbHVlOiBudW1iZXIsIHNldHRpbmdzOiBQYXJ0aWFsPFR1aU51bWJlckZvcm1hdFNldHRpbmdzPiA9IHt9KTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHR1aUZvcm1hdE51bWJlcih2YWx1ZSwgey4uLnRoaXMubnVtYmVyRm9ybWF0LCAuLi5zZXR0aW5nc30pO1xuICAgIH1cbn1cbiJdfQ==