import { Inject, Pipe } from '@angular/core';
import { DAYS_IN_WEEK } from '@taiga-ui/cdk';
import { TUI_FIRST_DAY_OF_WEEK } from '@taiga-ui/core/tokens';
import { getDayFromMonthRowCol } from './utils';
import * as i0 from "@angular/core";
const CALENDAR_ROWS_COUNT = 6;
export class TuiCalendarSheetPipe {
    constructor(firstDayOfWeek) {
        this.firstDayOfWeek = firstDayOfWeek;
        this.currentMonth = null;
        this.currentSheet = [];
    }
    transform(month, showAdjacentDays = false) {
        var _a;
        if ((_a = this.currentMonth) === null || _a === void 0 ? void 0 : _a.monthSame(month)) {
            return this.currentSheet;
        }
        const sheet = [];
        for (let rowIndex = 0; rowIndex < CALENDAR_ROWS_COUNT; rowIndex++) {
            const row = [];
            for (let colIndex = 0; colIndex < DAYS_IN_WEEK; colIndex++) {
                const day = getDayFromMonthRowCol({
                    month,
                    rowIndex,
                    colIndex,
                    firstDayOfWeek: this.firstDayOfWeek,
                });
                const isPrevMonthDay = (day, relativeToMonth = month) => day.year < relativeToMonth.year || day.month < relativeToMonth.month;
                const isNextMonthDay = (day, relativeToMonth = month) => day.year > relativeToMonth.year || day.month > relativeToMonth.month;
                if (isPrevMonthDay(day) && !showAdjacentDays) {
                    continue;
                }
                if (isNextMonthDay(day) && !showAdjacentDays) {
                    break;
                }
                row.push(day);
            }
            sheet.push(row);
        }
        this.currentSheet = sheet.filter(row => row.length);
        this.currentMonth = month;
        return this.currentSheet;
    }
}
TuiCalendarSheetPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarSheetPipe, deps: [{ token: TUI_FIRST_DAY_OF_WEEK }], target: i0.ɵɵFactoryTarget.Pipe });
TuiCalendarSheetPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarSheetPipe, name: "tuiCalendarSheet" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarSheetPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: `tuiCalendarSheet`,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FIRST_DAY_OF_WEEK]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItc2hlZXQucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvcGlwZXMvY2FsZW5kYXItc2hlZXQvY2FsZW5kYXItc2hlZXQucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLFlBQVksRUFBaUMsTUFBTSxlQUFlLENBQUM7QUFDM0UsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFNUQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sU0FBUyxDQUFDOztBQUU5QyxNQUFNLG1CQUFtQixHQUFHLENBQUMsQ0FBQztBQUs5QixNQUFNLE9BQU8sb0JBQW9CO0lBSTdCLFlBRXFCLGNBQTRCO1FBQTVCLG1CQUFjLEdBQWQsY0FBYyxDQUFjO1FBTHpDLGlCQUFZLEdBQW9CLElBQUksQ0FBQztRQUNyQyxpQkFBWSxHQUFxQyxFQUFFLENBQUM7SUFLekQsQ0FBQztJQUVKLFNBQVMsQ0FDTCxLQUFlLEVBQ2YsbUJBQTRCLEtBQUs7O1FBRWpDLElBQUksTUFBQSxJQUFJLENBQUMsWUFBWSwwQ0FBRSxTQUFTLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDckMsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO1NBQzVCO1FBRUQsTUFBTSxLQUFLLEdBQTZCLEVBQUUsQ0FBQztRQUUzQyxLQUFLLElBQUksUUFBUSxHQUFHLENBQUMsRUFBRSxRQUFRLEdBQUcsbUJBQW1CLEVBQUUsUUFBUSxFQUFFLEVBQUU7WUFDL0QsTUFBTSxHQUFHLEdBQWEsRUFBRSxDQUFDO1lBRXpCLEtBQUssSUFBSSxRQUFRLEdBQUcsQ0FBQyxFQUFFLFFBQVEsR0FBRyxZQUFZLEVBQUUsUUFBUSxFQUFFLEVBQUU7Z0JBQ3hELE1BQU0sR0FBRyxHQUFHLHFCQUFxQixDQUFDO29CQUM5QixLQUFLO29CQUNMLFFBQVE7b0JBQ1IsUUFBUTtvQkFDUixjQUFjLEVBQUUsSUFBSSxDQUFDLGNBQWM7aUJBQ3RDLENBQUMsQ0FBQztnQkFFSCxNQUFNLGNBQWMsR0FBRyxDQUFDLEdBQVcsRUFBRSxlQUFlLEdBQUcsS0FBSyxFQUFXLEVBQUUsQ0FDckUsR0FBRyxDQUFDLElBQUksR0FBRyxlQUFlLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxLQUFLLEdBQUcsZUFBZSxDQUFDLEtBQUssQ0FBQztnQkFFekUsTUFBTSxjQUFjLEdBQUcsQ0FBQyxHQUFXLEVBQUUsZUFBZSxHQUFHLEtBQUssRUFBVyxFQUFFLENBQ3JFLEdBQUcsQ0FBQyxJQUFJLEdBQUcsZUFBZSxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsS0FBSyxHQUFHLGVBQWUsQ0FBQyxLQUFLLENBQUM7Z0JBRXpFLElBQUksY0FBYyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7b0JBQzFDLFNBQVM7aUJBQ1o7Z0JBRUQsSUFBSSxjQUFjLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtvQkFDMUMsTUFBTTtpQkFDVDtnQkFFRCxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ2pCO1lBRUQsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNuQjtRQUVELElBQUksQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztRQUUxQixPQUFPLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDN0IsQ0FBQzs7a0hBdERRLG9CQUFvQixrQkFLakIscUJBQXFCO2dIQUx4QixvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFIaEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsa0JBQWtCO2lCQUMzQjs7MEJBTVEsTUFBTTsyQkFBQyxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RBWVNfSU5fV0VFSywgVHVpRGF5LCBUdWlEYXlPZldlZWssIFR1aU1vbnRofSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0ZJUlNUX0RBWV9PRl9XRUVLfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuXG5pbXBvcnQge2dldERheUZyb21Nb250aFJvd0NvbH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IENBTEVOREFSX1JPV1NfQ09VTlQgPSA2O1xuXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aUNhbGVuZGFyU2hlZXRgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlDYWxlbmRhclNoZWV0UGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuICAgIHByaXZhdGUgY3VycmVudE1vbnRoOiBUdWlNb250aCB8IG51bGwgPSBudWxsO1xuICAgIHByaXZhdGUgY3VycmVudFNoZWV0OiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFR1aURheVtdPiA9IFtdO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0ZJUlNUX0RBWV9PRl9XRUVLKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGZpcnN0RGF5T2ZXZWVrOiBUdWlEYXlPZldlZWssXG4gICAgKSB7fVxuXG4gICAgdHJhbnNmb3JtKFxuICAgICAgICBtb250aDogVHVpTW9udGgsXG4gICAgICAgIHNob3dBZGphY2VudERheXM6IGJvb2xlYW4gPSBmYWxzZSxcbiAgICApOiBSZWFkb25seUFycmF5PHJlYWRvbmx5IFR1aURheVtdPiB7XG4gICAgICAgIGlmICh0aGlzLmN1cnJlbnRNb250aD8ubW9udGhTYW1lKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFNoZWV0O1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc2hlZXQ6IEFycmF5PHJlYWRvbmx5IFR1aURheVtdPiA9IFtdO1xuXG4gICAgICAgIGZvciAobGV0IHJvd0luZGV4ID0gMDsgcm93SW5kZXggPCBDQUxFTkRBUl9ST1dTX0NPVU5UOyByb3dJbmRleCsrKSB7XG4gICAgICAgICAgICBjb25zdCByb3c6IFR1aURheVtdID0gW107XG5cbiAgICAgICAgICAgIGZvciAobGV0IGNvbEluZGV4ID0gMDsgY29sSW5kZXggPCBEQVlTX0lOX1dFRUs7IGNvbEluZGV4KyspIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkYXkgPSBnZXREYXlGcm9tTW9udGhSb3dDb2woe1xuICAgICAgICAgICAgICAgICAgICBtb250aCxcbiAgICAgICAgICAgICAgICAgICAgcm93SW5kZXgsXG4gICAgICAgICAgICAgICAgICAgIGNvbEluZGV4LFxuICAgICAgICAgICAgICAgICAgICBmaXJzdERheU9mV2VlazogdGhpcy5maXJzdERheU9mV2VlayxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIGNvbnN0IGlzUHJldk1vbnRoRGF5ID0gKGRheTogVHVpRGF5LCByZWxhdGl2ZVRvTW9udGggPSBtb250aCk6IGJvb2xlYW4gPT5cbiAgICAgICAgICAgICAgICAgICAgZGF5LnllYXIgPCByZWxhdGl2ZVRvTW9udGgueWVhciB8fCBkYXkubW9udGggPCByZWxhdGl2ZVRvTW9udGgubW9udGg7XG5cbiAgICAgICAgICAgICAgICBjb25zdCBpc05leHRNb250aERheSA9IChkYXk6IFR1aURheSwgcmVsYXRpdmVUb01vbnRoID0gbW9udGgpOiBib29sZWFuID0+XG4gICAgICAgICAgICAgICAgICAgIGRheS55ZWFyID4gcmVsYXRpdmVUb01vbnRoLnllYXIgfHwgZGF5Lm1vbnRoID4gcmVsYXRpdmVUb01vbnRoLm1vbnRoO1xuXG4gICAgICAgICAgICAgICAgaWYgKGlzUHJldk1vbnRoRGF5KGRheSkgJiYgIXNob3dBZGphY2VudERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgaWYgKGlzTmV4dE1vbnRoRGF5KGRheSkgJiYgIXNob3dBZGphY2VudERheXMpIHtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgcm93LnB1c2goZGF5KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2hlZXQucHVzaChyb3cpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jdXJyZW50U2hlZXQgPSBzaGVldC5maWx0ZXIocm93ID0+IHJvdy5sZW5ndGgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRNb250aCA9IG1vbnRoO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRTaGVldDtcbiAgICB9XG59XG4iXX0=