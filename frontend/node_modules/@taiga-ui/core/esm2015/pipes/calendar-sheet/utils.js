import { DAYS_IN_WEEK, tuiAssert, TuiDay, tuiInRange, } from '@taiga-ui/cdk';
/**
 * Computes day of week offset of the beginning of the month
 */
const getMonthStartDaysOffset = (month, firstDayOfWeek) => {
    const startMonthOffsetFromSunday = new Date(month.year, month.month, 1).getDay();
    return startMonthOffsetFromSunday >= firstDayOfWeek
        ? startMonthOffsetFromSunday - firstDayOfWeek
        : DAYS_IN_WEEK - (firstDayOfWeek - startMonthOffsetFromSunday);
};
/**
 * Calculated day on a calendar grid
 * @return resulting day on these coordinates (could exceed passed month)
 */
export const getDayFromMonthRowCol = ({ month, rowIndex, colIndex, firstDayOfWeek, }) => {
    ngDevMode && tuiAssert.assert(Number.isInteger(rowIndex));
    ngDevMode && tuiAssert.assert(tuiInRange(rowIndex, 0, 6));
    ngDevMode && tuiAssert.assert(Number.isInteger(colIndex));
    ngDevMode && tuiAssert.assert(tuiInRange(colIndex, 0, DAYS_IN_WEEK));
    let day = rowIndex * DAYS_IN_WEEK +
        colIndex -
        getMonthStartDaysOffset(month, firstDayOfWeek) +
        1;
    if (day > month.daysCount) {
        day -= month.daysCount;
        month = month.append({ month: 1 });
    }
    if (day <= 0) {
        month = month.append({ month: -1 });
        day = month.daysCount + day;
    }
    return new TuiDay(month.year, month.month, day);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3BpcGVzL2NhbGVuZGFyLXNoZWV0L3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxZQUFZLEVBQ1osU0FBUyxFQUNULE1BQU0sRUFFTixVQUFVLEdBRWIsTUFBTSxlQUFlLENBQUM7QUFFdkI7O0dBRUc7QUFDSCxNQUFNLHVCQUF1QixHQUFHLENBQzVCLEtBQWUsRUFDZixjQUE0QixFQUN0QixFQUFFO0lBQ1IsTUFBTSwwQkFBMEIsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLENBQUM7SUFFakYsT0FBTywwQkFBMEIsSUFBSSxjQUFjO1FBQy9DLENBQUMsQ0FBQywwQkFBMEIsR0FBRyxjQUFjO1FBQzdDLENBQUMsQ0FBQyxZQUFZLEdBQUcsQ0FBQyxjQUFjLEdBQUcsMEJBQTBCLENBQUMsQ0FBQztBQUN2RSxDQUFDLENBQUM7QUFFRjs7O0dBR0c7QUFDSCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBRyxDQUFDLEVBQ2xDLEtBQUssRUFDTCxRQUFRLEVBQ1IsUUFBUSxFQUNSLGNBQWMsR0FlakIsRUFBVSxFQUFFO0lBQ1QsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzFELFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUQsU0FBUyxJQUFJLFNBQVMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzFELFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFFckUsSUFBSSxHQUFHLEdBQ0gsUUFBUSxHQUFHLFlBQVk7UUFDdkIsUUFBUTtRQUNSLHVCQUF1QixDQUFDLEtBQUssRUFBRSxjQUFjLENBQUM7UUFDOUMsQ0FBQyxDQUFDO0lBRU4sSUFBSSxHQUFHLEdBQUcsS0FBSyxDQUFDLFNBQVMsRUFBRTtRQUN2QixHQUFHLElBQUksS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUN2QixLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEtBQUssRUFBRSxDQUFDLEVBQUMsQ0FBQyxDQUFDO0tBQ3BDO0lBRUQsSUFBSSxHQUFHLElBQUksQ0FBQyxFQUFFO1FBQ1YsS0FBSyxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ2xDLEdBQUcsR0FBRyxLQUFLLENBQUMsU0FBUyxHQUFHLEdBQUcsQ0FBQztLQUMvQjtJQUVELE9BQU8sSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsS0FBSyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ3BELENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgREFZU19JTl9XRUVLLFxuICAgIHR1aUFzc2VydCxcbiAgICBUdWlEYXksXG4gICAgVHVpRGF5T2ZXZWVrLFxuICAgIHR1aUluUmFuZ2UsXG4gICAgVHVpTW9udGgsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG4vKipcbiAqIENvbXB1dGVzIGRheSBvZiB3ZWVrIG9mZnNldCBvZiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBtb250aFxuICovXG5jb25zdCBnZXRNb250aFN0YXJ0RGF5c09mZnNldCA9IChcbiAgICBtb250aDogVHVpTW9udGgsXG4gICAgZmlyc3REYXlPZldlZWs6IFR1aURheU9mV2Vlayxcbik6IG51bWJlciA9PiB7XG4gICAgY29uc3Qgc3RhcnRNb250aE9mZnNldEZyb21TdW5kYXkgPSBuZXcgRGF0ZShtb250aC55ZWFyLCBtb250aC5tb250aCwgMSkuZ2V0RGF5KCk7XG5cbiAgICByZXR1cm4gc3RhcnRNb250aE9mZnNldEZyb21TdW5kYXkgPj0gZmlyc3REYXlPZldlZWtcbiAgICAgICAgPyBzdGFydE1vbnRoT2Zmc2V0RnJvbVN1bmRheSAtIGZpcnN0RGF5T2ZXZWVrXG4gICAgICAgIDogREFZU19JTl9XRUVLIC0gKGZpcnN0RGF5T2ZXZWVrIC0gc3RhcnRNb250aE9mZnNldEZyb21TdW5kYXkpO1xufTtcblxuLyoqXG4gKiBDYWxjdWxhdGVkIGRheSBvbiBhIGNhbGVuZGFyIGdyaWRcbiAqIEByZXR1cm4gcmVzdWx0aW5nIGRheSBvbiB0aGVzZSBjb29yZGluYXRlcyAoY291bGQgZXhjZWVkIHBhc3NlZCBtb250aClcbiAqL1xuZXhwb3J0IGNvbnN0IGdldERheUZyb21Nb250aFJvd0NvbCA9ICh7XG4gICAgbW9udGgsXG4gICAgcm93SW5kZXgsXG4gICAgY29sSW5kZXgsXG4gICAgZmlyc3REYXlPZldlZWssXG59OiB7XG4gICAgbW9udGg6IFR1aU1vbnRoO1xuICAgIC8qKlxuICAgICAqIHJvdyBpbiBhIGNhbGVuZGFyXG4gICAgICovXG4gICAgcm93SW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBjb2x1bW4gaW4gYSBjYWxlbmRhclxuICAgICAqL1xuICAgIGNvbEluZGV4OiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogZmlyc3QgZGF5IG9mIHRoZSB3ZWVrIGluZGV4IChTdW5kYXkgLSAwLCBTYXR1cmRheSAtIDYpXG4gICAgICovXG4gICAgZmlyc3REYXlPZldlZWs6IFR1aURheU9mV2Vlaztcbn0pOiBUdWlEYXkgPT4ge1xuICAgIG5nRGV2TW9kZSAmJiB0dWlBc3NlcnQuYXNzZXJ0KE51bWJlci5pc0ludGVnZXIocm93SW5kZXgpKTtcbiAgICBuZ0Rldk1vZGUgJiYgdHVpQXNzZXJ0LmFzc2VydCh0dWlJblJhbmdlKHJvd0luZGV4LCAwLCA2KSk7XG4gICAgbmdEZXZNb2RlICYmIHR1aUFzc2VydC5hc3NlcnQoTnVtYmVyLmlzSW50ZWdlcihjb2xJbmRleCkpO1xuICAgIG5nRGV2TW9kZSAmJiB0dWlBc3NlcnQuYXNzZXJ0KHR1aUluUmFuZ2UoY29sSW5kZXgsIDAsIERBWVNfSU5fV0VFSykpO1xuXG4gICAgbGV0IGRheSA9XG4gICAgICAgIHJvd0luZGV4ICogREFZU19JTl9XRUVLICtcbiAgICAgICAgY29sSW5kZXggLVxuICAgICAgICBnZXRNb250aFN0YXJ0RGF5c09mZnNldChtb250aCwgZmlyc3REYXlPZldlZWspICtcbiAgICAgICAgMTtcblxuICAgIGlmIChkYXkgPiBtb250aC5kYXlzQ291bnQpIHtcbiAgICAgICAgZGF5IC09IG1vbnRoLmRheXNDb3VudDtcbiAgICAgICAgbW9udGggPSBtb250aC5hcHBlbmQoe21vbnRoOiAxfSk7XG4gICAgfVxuXG4gICAgaWYgKGRheSA8PSAwKSB7XG4gICAgICAgIG1vbnRoID0gbW9udGguYXBwZW5kKHttb250aDogLTF9KTtcbiAgICAgICAgZGF5ID0gbW9udGguZGF5c0NvdW50ICsgZGF5O1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgVHVpRGF5KG1vbnRoLnllYXIsIG1vbnRoLm1vbnRoLCBkYXkpO1xufTtcbiJdfQ==