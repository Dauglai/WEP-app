import { Inject, Pipe } from '@angular/core';
import { TUI_SVG_OPTIONS } from '@taiga-ui/core/components/svg';
import { TUI_CACHE_BUSTING_PAYLOAD } from '@taiga-ui/core/constants';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import * as i0 from "@angular/core";
export class TuiFlagPipe {
    constructor(svgOptions) {
        this.svgOptions = svgOptions;
        this.staticPath = this.svgOptions
            .path(`tuiIcon`)
            .replace(`tuiIcon.svg#tuiIcon`, ``)
            .replace(`tuiIcon.svg${TUI_CACHE_BUSTING_PAYLOAD}#tuiIcon`, ``);
    }
    transform(countryIsoCode) {
        if (!countryIsoCode) {
            return null;
        }
        switch (countryIsoCode) {
            case TuiCountryIsoCode.BL:
            case TuiCountryIsoCode.BQ:
            case TuiCountryIsoCode.CW:
            case TuiCountryIsoCode.GF:
            case TuiCountryIsoCode.GP:
            case TuiCountryIsoCode.MF:
            case TuiCountryIsoCode.MQ:
            case TuiCountryIsoCode.NC:
            case TuiCountryIsoCode.RE:
            case TuiCountryIsoCode.YT:
                return `${this.staticPath}${TuiCountryIsoCode.FR}.png`;
            case TuiCountryIsoCode.SX:
                return `${this.staticPath}${TuiCountryIsoCode.NL}.png`;
            default:
                return `${this.staticPath}${countryIsoCode}.png`;
        }
    }
}
TuiFlagPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFlagPipe, deps: [{ token: TUI_SVG_OPTIONS }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFlagPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFlagPipe, name: "tuiFlag" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFlagPipe, decorators: [{
            type: Pipe,
            args: [{ name: `tuiFlag` }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_SVG_OPTIONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZy5waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9waXBlcy9mbGFnL2ZsYWcucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLGVBQWUsRUFBZ0IsTUFBTSwrQkFBK0IsQ0FBQztBQUM3RSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFHakQsTUFBTSxPQUFPLFdBQVc7SUFNcEIsWUFBc0QsVUFBeUI7UUFBekIsZUFBVSxHQUFWLFVBQVUsQ0FBZTtRQUw5RCxlQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVU7YUFDeEMsSUFBSSxDQUFDLFNBQVMsQ0FBQzthQUNmLE9BQU8sQ0FBQyxxQkFBcUIsRUFBRSxFQUFFLENBQUM7YUFDbEMsT0FBTyxDQUFDLGNBQWMseUJBQXlCLFVBQVUsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUVjLENBQUM7SUFJbkYsU0FBUyxDQUFDLGNBQWtEO1FBQ3hELElBQUksQ0FBQyxjQUFjLEVBQUU7WUFDakIsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELFFBQVEsY0FBYyxFQUFFO1lBQ3BCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRSxDQUFDO1lBQzFCLEtBQUssaUJBQWlCLENBQUMsRUFBRTtnQkFDckIsT0FBTyxHQUFHLElBQUksQ0FBQyxVQUFVLEdBQUcsaUJBQWlCLENBQUMsRUFBRSxNQUFNLENBQUM7WUFDM0QsS0FBSyxpQkFBaUIsQ0FBQyxFQUFFO2dCQUNyQixPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxFQUFFLE1BQU0sQ0FBQztZQUMzRDtnQkFDSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxjQUFjLE1BQU0sQ0FBQztTQUN4RDtJQUNMLENBQUM7O3lHQWhDUSxXQUFXLGtCQU1BLGVBQWU7dUdBTjFCLFdBQVc7NEZBQVgsV0FBVztrQkFEdkIsSUFBSTttQkFBQyxFQUFDLElBQUksRUFBRSxTQUFTLEVBQUM7OzBCQU9OLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBQaXBlLCBQaXBlVHJhbnNmb3JtfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VFVJX1NWR19PUFRJT05TLCBUdWlTdmdPcHRpb25zfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb21wb25lbnRzL3N2Zyc7XG5pbXBvcnQge1RVSV9DQUNIRV9CVVNUSU5HX1BBWUxPQUR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbnN0YW50cyc7XG5pbXBvcnQge1R1aUNvdW50cnlJc29Db2RlfSBmcm9tICdAdGFpZ2EtdWkvaTE4bic7XG5cbkBQaXBlKHtuYW1lOiBgdHVpRmxhZ2B9KVxuZXhwb3J0IGNsYXNzIFR1aUZsYWdQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdGF0aWNQYXRoID0gdGhpcy5zdmdPcHRpb25zXG4gICAgICAgIC5wYXRoKGB0dWlJY29uYClcbiAgICAgICAgLnJlcGxhY2UoYHR1aUljb24uc3ZnI3R1aUljb25gLCBgYClcbiAgICAgICAgLnJlcGxhY2UoYHR1aUljb24uc3ZnJHtUVUlfQ0FDSEVfQlVTVElOR19QQVlMT0FEfSN0dWlJY29uYCwgYGApO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChUVUlfU1ZHX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgc3ZnT3B0aW9uczogVHVpU3ZnT3B0aW9ucykge31cblxuICAgIHRyYW5zZm9ybShjb3VudHJ5SXNvQ29kZTogVHVpQ291bnRyeUlzb0NvZGUgfCBzdHJpbmcpOiBzdHJpbmc7XG4gICAgdHJhbnNmb3JtKGNvdW50cnlJc29Db2RlPzogVHVpQ291bnRyeUlzb0NvZGUgfCBzdHJpbmcgfCBudWxsKTogc3RyaW5nIHwgbnVsbDtcbiAgICB0cmFuc2Zvcm0oY291bnRyeUlzb0NvZGU/OiBUdWlDb3VudHJ5SXNvQ29kZSB8IHN0cmluZyB8IG51bGwpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgaWYgKCFjb3VudHJ5SXNvQ29kZSkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICBzd2l0Y2ggKGNvdW50cnlJc29Db2RlKSB7XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLkJMOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5CUTpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuQ1c6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLkdGOlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5HUDpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuTUY6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLk1ROlxuICAgICAgICAgICAgY2FzZSBUdWlDb3VudHJ5SXNvQ29kZS5OQzpcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuUkU6XG4gICAgICAgICAgICBjYXNlIFR1aUNvdW50cnlJc29Db2RlLllUOlxuICAgICAgICAgICAgICAgIHJldHVybiBgJHt0aGlzLnN0YXRpY1BhdGh9JHtUdWlDb3VudHJ5SXNvQ29kZS5GUn0ucG5nYDtcbiAgICAgICAgICAgIGNhc2UgVHVpQ291bnRyeUlzb0NvZGUuU1g6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke3RoaXMuc3RhdGljUGF0aH0ke1R1aUNvdW50cnlJc29Db2RlLk5MfS5wbmdgO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gYCR7dGhpcy5zdGF0aWNQYXRofSR7Y291bnRyeUlzb0NvZGV9LnBuZ2A7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=