import { Inject, Injectable, NgZone, Optional, Self } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { TuiDestroyService, tuiZoneOptimized } from '@taiga-ui/cdk';
import { EMPTY, merge, Observable, timer } from 'rxjs';
import { distinctUntilChanged, map, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "rxjs";
import * as i3 from "@taiga-ui/cdk";
// TODO: Remove when Angular is update and `RouterLinkActive` has output
export class TuiRouterLinkActiveService extends Observable {
    constructor(routerLinkActive, ngZone, animationFrame$, destroy$) {
        const stream$ = routerLinkActive
            ? merge(timer(0), // SSR (animationFrame$ never emits value during SSR)
            animationFrame$).pipe(map(() => routerLinkActive.isActive), distinctUntilChanged(), tuiZoneOptimized(ngZone), takeUntil(destroy$))
            : EMPTY;
        super(subscriber => stream$.subscribe(subscriber));
    }
}
TuiRouterLinkActiveService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRouterLinkActiveService, deps: [{ token: RouterLinkActive, optional: true }, { token: NgZone }, { token: ANIMATION_FRAME }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Injectable });
TuiRouterLinkActiveService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRouterLinkActiveService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRouterLinkActiveService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.RouterLinkActive, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RouterLinkActive]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i3.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVyLWxpbmstYWN0aXZlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NlcnZpY2VzL3JvdXRlci1saW5rLWFjdGl2ZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbEUsT0FBTyxFQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7OztBQUVwRSx3RUFBd0U7QUFFeEUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLFVBQW1CO0lBQy9ELFlBR0ksZ0JBQXlDLEVBQ3pCLE1BQWMsRUFDTCxlQUFtQyxFQUN6QixRQUEyQjtRQUU5RCxNQUFNLE9BQU8sR0FBRyxnQkFBZ0I7WUFDNUIsQ0FBQyxDQUFDLEtBQUssQ0FDRCxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUscURBQXFEO1lBQy9ELGVBQWUsQ0FDbEIsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUFDLGdCQUFnQixDQUFDLFFBQVEsQ0FBQyxFQUNwQyxvQkFBb0IsRUFBRSxFQUN0QixnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsRUFDeEIsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUN0QjtZQUNILENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFWixLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsQ0FBQzs7d0hBdEJRLDBCQUEwQixrQkFHdkIsZ0JBQWdCLDZCQUVoQixNQUFNLGFBQ04sZUFBZSxhQUNQLGlCQUFpQjs0SEFQNUIsMEJBQTBCOzRGQUExQiwwQkFBMEI7a0JBRHRDLFVBQVU7OzBCQUdGLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFFdkIsTUFBTTsyQkFBQyxNQUFNOzswQkFDYixNQUFNOzJCQUFDLGVBQWU7OzBCQUN0QixJQUFJOzswQkFBSSxNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsLCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyTGlua0FjdGl2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7QU5JTUFUSU9OX0ZSQU1FfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2UsIHR1aVpvbmVPcHRpbWl6ZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtFTVBUWSwgbWVyZ2UsIE9ic2VydmFibGUsIHRpbWVyfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8vIFRPRE86IFJlbW92ZSB3aGVuIEFuZ3VsYXIgaXMgdXBkYXRlIGFuZCBgUm91dGVyTGlua0FjdGl2ZWAgaGFzIG91dHB1dFxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoUm91dGVyTGlua0FjdGl2ZSlcbiAgICAgICAgcm91dGVyTGlua0FjdGl2ZTogUm91dGVyTGlua0FjdGl2ZSB8IG51bGwsXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChBTklNQVRJT05fRlJBTUUpIGFuaW1hdGlvbkZyYW1lJDogT2JzZXJ2YWJsZTxudW1iZXI+LFxuICAgICAgICBAU2VsZigpIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBUdWlEZXN0cm95U2VydmljZSxcbiAgICApIHtcbiAgICAgICAgY29uc3Qgc3RyZWFtJCA9IHJvdXRlckxpbmtBY3RpdmVcbiAgICAgICAgICAgID8gbWVyZ2UoXG4gICAgICAgICAgICAgICAgICB0aW1lcigwKSwgLy8gU1NSIChhbmltYXRpb25GcmFtZSQgbmV2ZXIgZW1pdHMgdmFsdWUgZHVyaW5nIFNTUilcbiAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbkZyYW1lJCxcbiAgICAgICAgICAgICAgKS5waXBlKFxuICAgICAgICAgICAgICAgICAgbWFwKCgpID0+IHJvdXRlckxpbmtBY3RpdmUuaXNBY3RpdmUpLFxuICAgICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgICAgICAgICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQobmdab25lKSxcbiAgICAgICAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICAgIClcbiAgICAgICAgICAgIDogRU1QVFk7XG5cbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiBzdHJlYW0kLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgfVxufVxuIl19