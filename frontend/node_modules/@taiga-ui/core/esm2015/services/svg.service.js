import { Inject, Injectable, Optional, SecurityContext } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { tuiAssert } from '@taiga-ui/cdk';
import { TUI_ICONS, TUI_SANITIZER } from '@taiga-ui/core/tokens';
import { tuiProcessIcon } from '@taiga-ui/core/utils/dom';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
/**
 * Service for reusing SVGs without inlining each instance
 */
export class TuiSvgService {
    constructor(tuiSanitizer, sanitizer, icons) {
        this.tuiSanitizer = tuiSanitizer;
        this.sanitizer = sanitizer;
        this.originals = {};
        this.items$ = new BehaviorSubject(new Map());
        this.define(icons);
    }
    define(icons) {
        const { value } = this.items$;
        Object.keys(icons).forEach(key => {
            this.defineIcon(key, icons[key], value);
        });
        this.items$.next(value);
    }
    getOriginal(name) {
        return this.originals[name] || null;
    }
    defineIcon(name, src, map) {
        if (map.has(name)) {
            return;
        }
        const parsed = this.parseSrc(name, src);
        if (!parsed) {
            ngDevMode && tuiAssert.assert(false, `Unable to parse given SVG src`);
            return;
        }
        map.set(name, parsed);
        this.originals = Object.assign(Object.assign({}, this.originals), { [name]: src });
    }
    parseSrc(name, src) {
        return this.sanitize(tuiProcessIcon(src, name));
    }
    sanitize(src) {
        return this.sanitizer.bypassSecurityTrustHtml((this.tuiSanitizer
            ? this.tuiSanitizer.sanitize(SecurityContext.HTML, src)
            : this.sanitizer.sanitize(SecurityContext.HTML, src)) || ``);
    }
}
TuiSvgService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSvgService, deps: [{ token: TUI_SANITIZER, optional: true }, { token: DomSanitizer }, { token: TUI_ICONS }], target: i0.ɵɵFactoryTarget.Injectable });
TuiSvgService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSvgService, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSvgService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: `root`,
                }]
        }], ctorParameters: function () { return [{ type: i0.Sanitizer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_SANITIZER]
                }] }, { type: i1.DomSanitizer, decorators: [{
                    type: Inject,
                    args: [DomSanitizer]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ICONS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL3NlcnZpY2VzL3N2Zy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBYSxlQUFlLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkYsT0FBTyxFQUFDLFlBQVksRUFBVyxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLFNBQVMsRUFBRSxhQUFhLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMvRCxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDeEQsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7O0FBRXJDOztHQUVHO0FBSUgsTUFBTSxPQUFPLGFBQWE7SUFLdEIsWUFHcUIsWUFBOEIsRUFDUixTQUF1QixFQUMzQyxLQUE2QjtRQUYvQixpQkFBWSxHQUFaLFlBQVksQ0FBa0I7UUFDUixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBUjFELGNBQVMsR0FBMkIsRUFBRSxDQUFDO1FBRXRDLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBd0IsSUFBSSxHQUFHLEVBQUUsQ0FBQyxDQUFDO1FBU3BFLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELE1BQU0sQ0FBQyxLQUE2QjtRQUNoQyxNQUFNLEVBQUMsS0FBSyxFQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUU1QixNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDNUMsQ0FBQyxDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsV0FBVyxDQUFDLElBQVk7UUFDcEIsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztJQUN4QyxDQUFDO0lBRU8sVUFBVSxDQUFDLElBQVksRUFBRSxHQUFXLEVBQUUsR0FBMEI7UUFDcEUsSUFBSSxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ2YsT0FBTztTQUNWO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFFeEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNULFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSwrQkFBK0IsQ0FBQyxDQUFDO1lBRXRFLE9BQU87U0FDVjtRQUVELEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLG1DQUNQLElBQUksQ0FBQyxTQUFTLEtBQ2pCLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxHQUNkLENBQUM7SUFDTixDQUFDO0lBRU8sUUFBUSxDQUFDLElBQVksRUFBRSxHQUFXO1FBQ3RDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQUVPLFFBQVEsQ0FBQyxHQUFXO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQyx1QkFBdUIsQ0FDekMsQ0FBQyxJQUFJLENBQUMsWUFBWTtZQUNkLENBQUMsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQztZQUN2RCxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FDbEUsQ0FBQztJQUNOLENBQUM7OzJHQTNEUSxhQUFhLGtCQU9WLGFBQWEsNkJBRWIsWUFBWSxhQUNaLFNBQVM7K0dBVlosYUFBYSxjQUZWLE1BQU07NEZBRVQsYUFBYTtrQkFIekIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7OzBCQU9RLFFBQVE7OzBCQUNSLE1BQU07MkJBQUMsYUFBYTs7MEJBRXBCLE1BQU07MkJBQUMsWUFBWTs7MEJBQ25CLE1BQU07MkJBQUMsU0FBUyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBPcHRpb25hbCwgU2FuaXRpemVyLCBTZWN1cml0eUNvbnRleHR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtEb21TYW5pdGl6ZXIsIFNhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0lDT05TLCBUVUlfU0FOSVRJWkVSfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHt0dWlQcm9jZXNzSWNvbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMvZG9tJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuLyoqXG4gKiBTZXJ2aWNlIGZvciByZXVzaW5nIFNWR3Mgd2l0aG91dCBpbmxpbmluZyBlYWNoIGluc3RhbmNlXG4gKi9cbkBJbmplY3RhYmxlKHtcbiAgICBwcm92aWRlZEluOiBgcm9vdGAsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVN2Z1NlcnZpY2Uge1xuICAgIHByaXZhdGUgb3JpZ2luYWxzOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+ID0ge307XG5cbiAgICByZWFkb25seSBpdGVtcyQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PE1hcDxzdHJpbmcsIFNhZmVIdG1sPj4obmV3IE1hcCgpKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAT3B0aW9uYWwoKVxuICAgICAgICBASW5qZWN0KFRVSV9TQU5JVElaRVIpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdHVpU2FuaXRpemVyOiBTYW5pdGl6ZXIgfCBudWxsLFxuICAgICAgICBASW5qZWN0KERvbVNhbml0aXplcikgcHJpdmF0ZSByZWFkb25seSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICAgICAgQEluamVjdChUVUlfSUNPTlMpIGljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+LFxuICAgICkge1xuICAgICAgICB0aGlzLmRlZmluZShpY29ucyk7XG4gICAgfVxuXG4gICAgZGVmaW5lKGljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHt2YWx1ZX0gPSB0aGlzLml0ZW1zJDtcblxuICAgICAgICBPYmplY3Qua2V5cyhpY29ucykuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgdGhpcy5kZWZpbmVJY29uKGtleSwgaWNvbnNba2V5XSwgdmFsdWUpO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLml0ZW1zJC5uZXh0KHZhbHVlKTtcbiAgICB9XG5cbiAgICBnZXRPcmlnaW5hbChuYW1lOiBzdHJpbmcpOiBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMub3JpZ2luYWxzW25hbWVdIHx8IG51bGw7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZWZpbmVJY29uKG5hbWU6IHN0cmluZywgc3JjOiBzdHJpbmcsIG1hcDogTWFwPHN0cmluZywgU2FmZUh0bWw+KTogdm9pZCB7XG4gICAgICAgIGlmIChtYXAuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBwYXJzZWQgPSB0aGlzLnBhcnNlU3JjKG5hbWUsIHNyYyk7XG5cbiAgICAgICAgaWYgKCFwYXJzZWQpIHtcbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJiB0dWlBc3NlcnQuYXNzZXJ0KGZhbHNlLCBgVW5hYmxlIHRvIHBhcnNlIGdpdmVuIFNWRyBzcmNgKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgbWFwLnNldChuYW1lLCBwYXJzZWQpO1xuICAgICAgICB0aGlzLm9yaWdpbmFscyA9IHtcbiAgICAgICAgICAgIC4uLnRoaXMub3JpZ2luYWxzLFxuICAgICAgICAgICAgW25hbWVdOiBzcmMsXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZVNyYyhuYW1lOiBzdHJpbmcsIHNyYzogc3RyaW5nKTogU2FmZUh0bWwge1xuICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZSh0dWlQcm9jZXNzSWNvbihzcmMsIG5hbWUpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhbml0aXplKHNyYzogc3RyaW5nKTogU2FmZUh0bWwge1xuICAgICAgICByZXR1cm4gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdEh0bWwoXG4gICAgICAgICAgICAodGhpcy50dWlTYW5pdGl6ZXJcbiAgICAgICAgICAgICAgICA/IHRoaXMudHVpU2FuaXRpemVyLnNhbml0aXplKFNlY3VyaXR5Q29udGV4dC5IVE1MLCBzcmMpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnNhbml0aXplci5zYW5pdGl6ZShTZWN1cml0eUNvbnRleHQuSFRNTCwgc3JjKSkgfHwgYGAsXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19