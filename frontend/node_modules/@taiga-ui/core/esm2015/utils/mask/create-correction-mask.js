import { tuiAssert } from '@taiga-ui/cdk';
import { MASK_CARET_TRAP } from '@taiga-ui/core/constants';
const ASSERTION = `Correction function must return single char or null`;
export function tuiCreateCorrectionMask(allowed, correctionHandler) {
    return rawValue => {
        const mask = rawValue.split(``).reduce((result, char, index) => {
            const corrected = correctionHandler(char, index);
            ngDevMode &&
                tuiAssert.assert(corrected === null || corrected.length === 1, ASSERTION);
            if (!allowed.test(char) && !corrected) {
                return result;
            }
            if (allowed.test(char)) {
                return [...result, allowed];
            }
            if (corrected) {
                return [...result, corrected, MASK_CARET_TRAP];
            }
            return result;
        }, []);
        const lastIndex = mask.lastIndexOf(MASK_CARET_TRAP);
        const filtered = mask.filter((item, index) => item !== MASK_CARET_TRAP || index === lastIndex);
        return filtered.some(item => item !== allowed)
            ? [...filtered, allowed]
            : filtered;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWNvcnJlY3Rpb24tbWFzay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvdXRpbHMvbWFzay9jcmVhdGUtY29ycmVjdGlvbi1tYXNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBT3pELE1BQU0sU0FBUyxHQUFHLHFEQUFxRCxDQUFDO0FBRXhFLE1BQU0sVUFBVSx1QkFBdUIsQ0FDbkMsT0FBZSxFQUNmLGlCQUErQztJQUUvQyxPQUFPLFFBQVEsQ0FBQyxFQUFFO1FBQ2QsTUFBTSxJQUFJLEdBQUcsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQWtCLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM1RSxNQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFFakQsU0FBUztnQkFDTCxTQUFTLENBQUMsTUFBTSxDQUFDLFNBQVMsS0FBSyxJQUFJLElBQUksU0FBUyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUUsU0FBUyxDQUFDLENBQUM7WUFFOUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ25DLE9BQU8sTUFBTSxDQUFDO2FBQ2pCO1lBRUQsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwQixPQUFPLENBQUMsR0FBRyxNQUFNLEVBQUUsT0FBTyxDQUFDLENBQUM7YUFDL0I7WUFFRCxJQUFJLFNBQVMsRUFBRTtnQkFDWCxPQUFPLENBQUMsR0FBRyxNQUFNLEVBQUUsU0FBUyxFQUFFLGVBQWUsQ0FBQyxDQUFDO2FBQ2xEO1lBRUQsT0FBTyxNQUFNLENBQUM7UUFDbEIsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQ1AsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsQ0FBQztRQUNwRCxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUN4QixDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxlQUFlLElBQUksS0FBSyxLQUFLLFNBQVMsQ0FDbkUsQ0FBQztRQUVGLE9BQU8sUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksS0FBSyxPQUFPLENBQUM7WUFDMUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxRQUFRLEVBQUUsT0FBTyxDQUFDO1lBQ3hCLENBQUMsQ0FBQyxRQUFRLENBQUM7SUFDbkIsQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7dHVpQXNzZXJ0fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TUFTS19DQVJFVF9UUkFQfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9jb25zdGFudHMnO1xuaW1wb3J0IHtcbiAgICBUdWlUZXh0TWFza0NvcnJlY3Rpb25IYW5kbGVyLFxuICAgIFR1aVRleHRNYXNrTGlzdCxcbiAgICBUdWlUZXh0TWFza0xpc3RIYW5kbGVyLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9tYXNrJztcblxuY29uc3QgQVNTRVJUSU9OID0gYENvcnJlY3Rpb24gZnVuY3Rpb24gbXVzdCByZXR1cm4gc2luZ2xlIGNoYXIgb3IgbnVsbGA7XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlDcmVhdGVDb3JyZWN0aW9uTWFzayhcbiAgICBhbGxvd2VkOiBSZWdFeHAsXG4gICAgY29ycmVjdGlvbkhhbmRsZXI6IFR1aVRleHRNYXNrQ29ycmVjdGlvbkhhbmRsZXIsXG4pOiBUdWlUZXh0TWFza0xpc3RIYW5kbGVyIHtcbiAgICByZXR1cm4gcmF3VmFsdWUgPT4ge1xuICAgICAgICBjb25zdCBtYXNrID0gcmF3VmFsdWUuc3BsaXQoYGApLnJlZHVjZTxUdWlUZXh0TWFza0xpc3Q+KChyZXN1bHQsIGNoYXIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb3JyZWN0ZWQgPSBjb3JyZWN0aW9uSGFuZGxlcihjaGFyLCBpbmRleCk7XG5cbiAgICAgICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoY29ycmVjdGVkID09PSBudWxsIHx8IGNvcnJlY3RlZC5sZW5ndGggPT09IDEsIEFTU0VSVElPTik7XG5cbiAgICAgICAgICAgIGlmICghYWxsb3dlZC50ZXN0KGNoYXIpICYmICFjb3JyZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoYWxsb3dlZC50ZXN0KGNoYXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5yZXN1bHQsIGFsbG93ZWRdO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoY29ycmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFsuLi5yZXN1bHQsIGNvcnJlY3RlZCwgTUFTS19DQVJFVF9UUkFQXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBtYXNrLmxhc3RJbmRleE9mKE1BU0tfQ0FSRVRfVFJBUCk7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gbWFzay5maWx0ZXIoXG4gICAgICAgICAgICAoaXRlbSwgaW5kZXgpID0+IGl0ZW0gIT09IE1BU0tfQ0FSRVRfVFJBUCB8fCBpbmRleCA9PT0gbGFzdEluZGV4LFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBmaWx0ZXJlZC5zb21lKGl0ZW0gPT4gaXRlbSAhPT0gYWxsb3dlZClcbiAgICAgICAgICAgID8gWy4uLmZpbHRlcmVkLCBhbGxvd2VkXVxuICAgICAgICAgICAgOiBmaWx0ZXJlZDtcbiAgICB9O1xufVxuIl19