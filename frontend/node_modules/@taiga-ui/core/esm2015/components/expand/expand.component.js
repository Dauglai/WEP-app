import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, HostBinding, HostListener, Inject, Input, TemplateRef, ViewChild, } from '@angular/core';
import { TUI_PARENT_ANIMATION, tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk';
import { TUI_EXPAND_LOADED } from '@taiga-ui/core/constants';
import { TuiExpandContentDirective } from './expand-content.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/loader";
import * as i2 from "@angular/common";
var State;
(function (State) {
    State[State["Idle"] = 0] = "Idle";
    State[State["Loading"] = 1] = "Loading";
    State[State["Prepared"] = 2] = "Prepared";
    State[State["Animated"] = 3] = "Animated";
})(State || (State = {}));
const LOADER_HEIGHT = 48;
export class TuiExpandComponent {
    constructor(cdr) {
        this.cdr = cdr;
        this.state = 0 /* Idle */;
        this.async = false;
        this.content = null;
        this.expanded = null;
    }
    set expandedSetter(expanded) {
        if (this.expanded === null) {
            this.expanded = expanded;
            return;
        }
        if (this.state !== 0 /* Idle */) {
            this.expanded = expanded;
            this.state = 3 /* Animated */;
            return;
        }
        this.expanded = expanded;
        this.retrigger(this.async && expanded ? 1 /* Loading */ : 3 /* Animated */);
    }
    get overflow() {
        return this.state !== 0 /* Idle */;
    }
    get loading() {
        return !!this.expanded && this.async && this.state === 1 /* Loading */;
    }
    get height() {
        const { expanded, state, contentWrapper } = this;
        if ((expanded && state === 2 /* Prepared */) ||
            (!expanded && state === 3 /* Animated */)) {
            return 0;
        }
        if (contentWrapper &&
            ((!expanded && state === 2 /* Prepared */) ||
                (expanded && state === 3 /* Animated */))) {
            return contentWrapper.nativeElement.offsetHeight;
        }
        if (contentWrapper && expanded && state === 1 /* Loading */) {
            return Math.max(contentWrapper.nativeElement.offsetHeight, LOADER_HEIGHT);
        }
        return null;
    }
    get contentVisible() {
        return this.expanded || this.state !== 0 /* Idle */;
    }
    onTransitionEnd({ propertyName }) {
        if (propertyName === 'opacity' && this.state === 3 /* Animated */) {
            this.state = 0 /* Idle */;
        }
    }
    onExpandLoaded(event) {
        event.stopPropagation();
        if (this.state === 1 /* Loading */) {
            this.retrigger(3 /* Animated */);
        }
    }
    retrigger(state) {
        this.state = 2 /* Prepared */;
        // We need delay to re-trigger CSS height transition from the correct number
        setTimeout(() => {
            if (this.state !== 2 /* Prepared */) {
                return;
            }
            this.state = state;
            this.cdr.markForCheck();
        });
    }
}
TuiExpandComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiExpandComponent, deps: [{ token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TuiExpandComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiExpandComponent, selector: "tui-expand", inputs: { async: "async", expandedSetter: ["expanded", "expandedSetter"] }, host: { listeners: { "transitionend.self": "onTransitionEnd($event)", "tui-expand-loaded": "onExpandLoaded($event)" }, properties: { "class._expanded": "this.expanded", "attr.aria-expanded": "this.expanded", "class._overflow": "this.overflow", "class._loading": "this.loading", "style.height.px": "this.height" } }, queries: [{ propertyName: "content", first: true, predicate: TuiExpandContentDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "contentWrapper", first: true, predicate: ["wrapper"], descendants: true }], ngImport: i0, template: "<div\n    #wrapper\n    class=\"t-wrapper\"\n    @tuiParentAnimation\n    [@.disabled]=\"overflow\"\n>\n    <ng-container *ngIf=\"contentVisible\">\n        <ng-content></ng-content>\n        <tui-loader\n            *ngIf=\"async; else content\"\n            size=\"l\"\n            [overlay]=\"true\"\n            [showLoader]=\"loading\"\n        >\n            <ng-container [ngTemplateOutlet]=\"content\"></ng-container>\n        </tui-loader>\n    </ng-container>\n</div>\n", styles: [":host{display:block;transition-property:opacity,height,visibility;transition-duration:var(--tui-duration, .3s);opacity:0}:host._overflow{overflow:hidden}:host._expanded{opacity:1;transform:translate(0)}:host._loading{opacity:.99}.t-wrapper:before,.t-wrapper:after{content:\"\";display:table}\n"], components: [{ type: i1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], animations: [TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiExpandComponent.prototype, "async", void 0);
__decorate([
    tuiRequiredSetter()
], TuiExpandComponent.prototype, "expandedSetter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiExpandComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-expand',
                    templateUrl: './expand.template.html',
                    styleUrls: ['./expand.style.less'],
                    animations: [TUI_PARENT_ANIMATION],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; }, propDecorators: { contentWrapper: [{
                type: ViewChild,
                args: ['wrapper']
            }], async: [{
                type: Input
            }], expandedSetter: [{
                type: Input,
                args: ['expanded']
            }], content: [{
                type: ContentChild,
                args: [TuiExpandContentDirective, { read: TemplateRef }]
            }], expanded: [{
                type: HostBinding,
                args: ['class._expanded']
            }, {
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], overflow: [{
                type: HostBinding,
                args: ['class._overflow']
            }], loading: [{
                type: HostBinding,
                args: ['class._loading']
            }], height: [{
                type: HostBinding,
                args: ['style.height.px']
            }], onTransitionEnd: [{
                type: HostListener,
                args: ['transitionend.self', ['$event']]
            }], onExpandLoaded: [{
                type: HostListener,
                args: [TUI_EXPAND_LOADED, ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5kLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9leHBhbmQvZXhwYW5kLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9leHBhbmQvZXhwYW5kLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsaUJBQWlCLEVBQ2pCLFNBQVMsRUFDVCxZQUFZLEVBRVosV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLFdBQVcsRUFDWCxTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLG9CQUFvQixFQUFFLGNBQWMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUzRCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQzs7OztBQUVyRSxJQUFXLEtBS1Y7QUFMRCxXQUFXLEtBQUs7SUFDWixpQ0FBSSxDQUFBO0lBQ0osdUNBQU8sQ0FBQTtJQUNQLHlDQUFRLENBQUE7SUFDUix5Q0FBUSxDQUFBO0FBQ1osQ0FBQyxFQUxVLEtBQUssS0FBTCxLQUFLLFFBS2Y7QUFFRCxNQUFNLGFBQWEsR0FBRyxFQUFFLENBQUM7QUFTekIsTUFBTSxPQUFPLGtCQUFrQjtJQXFDM0IsWUFBd0QsR0FBc0I7UUFBdEIsUUFBRyxHQUFILEdBQUcsQ0FBbUI7UUFqQ3RFLFVBQUssZ0JBQWM7UUFJM0IsVUFBSyxHQUFHLEtBQUssQ0FBQztRQXVCZCxZQUFPLEdBQTZDLElBQUksQ0FBQztRQUl6RCxhQUFRLEdBQW1CLElBQUksQ0FBQztJQUVpRCxDQUFDO0lBekJsRixJQUFJLGNBQWMsQ0FBQyxRQUF3QjtRQUN2QyxJ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OzRGQTVCUSxrQkFBa0I7a0JBUDlCLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLFlBQVk7b0JBQ3RCLFdBQVcsRUFBRSx3QkFBd0I7b0JBQ3JDLFNBQVMsRUFBRSxDQUFDLHFCQUFxQixDQUFDO29CQUNsQyxVQUFVLEVBQUUsQ0FBQyxvQkFBb0IsQ0FBQztvQkFDbEMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOzswQkFzQ2dCLE1BQU07MkJBQUMsaUJBQWlCOzRDQW5DcEIsY0FBYztzQkFEOUIsU0FBUzt1QkFBQyxTQUFTO2dCQU9wQixLQUFLO3NCQUZKLEtBQUs7Z0JBTUYsY0FBYztzQkFGakIsS0FBSzt1QkFBQyxVQUFVO2dCQXFCakIsT0FBTztzQkFETixZQUFZO3VCQUFDLHlCQUF5QixFQUFFLEVBQUMsSUFBSSxFQUFFLFdBQVcsRUFBQztnQkFLNUQsUUFBUTtzQkFGUCxXQUFXO3VCQUFDLGlCQUFpQjs7c0JBQzdCLFdBQVc7dUJBQUMsb0JBQW9CO2dCQU03QixRQUFRO3NCQURYLFdBQVc7dUJBQUMsaUJBQWlCO2dCQU0xQixPQUFPO3NCQURWLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQU16QixNQUFNO3NCQURULFdBQVc7dUJBQUMsaUJBQWlCO2dCQStCOUIsZUFBZTtzQkFEZCxZQUFZO3VCQUFDLG9CQUFvQixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQVE5QyxjQUFjO3NCQURiLFlBQVk7dUJBQUMsaUJBQWlCLEVBQUUsQ0FBQyxRQUFRLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge05nSWZDb250ZXh0fSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgQ29udGVudENoaWxkLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBUZW1wbGF0ZVJlZixcbiAgICBWaWV3Q2hpbGQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfUEFSRU5UX0FOSU1BVElPTiwgdHVpRGVmYXVsdFByb3AsIHR1aVJlcXVpcmVkU2V0dGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX0VYUEFORF9MT0FERUR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL2NvbnN0YW50cyc7XG5cbmltcG9ydCB7VHVpRXhwYW5kQ29udGVudERpcmVjdGl2ZX0gZnJvbSAnLi9leHBhbmQtY29udGVudC5kaXJlY3RpdmUnO1xuXG5jb25zdCBlbnVtIFN0YXRlIHtcbiAgICBJZGxlLFxuICAgIExvYWRpbmcsXG4gICAgUHJlcGFyZWQsXG4gICAgQW5pbWF0ZWQsXG59XG5cbmNvbnN0IExPQURFUl9IRUlHSFQgPSA0ODtcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktZXhwYW5kJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZXhwYW5kLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2V4cGFuZC5zdHlsZS5sZXNzJ10sXG4gICAgYW5pbWF0aW9uczogW1RVSV9QQVJFTlRfQU5JTUFUSU9OXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRXhwYW5kQ29tcG9uZW50IHtcbiAgICBAVmlld0NoaWxkKCd3cmFwcGVyJylcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNvbnRlbnRXcmFwcGVyPzogRWxlbWVudFJlZjxIVE1MRGl2RWxlbWVudD47XG5cbiAgICBwcml2YXRlIHN0YXRlID0gU3RhdGUuSWRsZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBhc3luYyA9IGZhbHNlO1xuXG4gICAgQElucHV0KCdleHBhbmRlZCcpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgZXhwYW5kZWRTZXR0ZXIoZXhwYW5kZWQ6IGJvb2xlYW4gfCBudWxsKSB7XG4gICAgICAgIGlmICh0aGlzLmV4cGFuZGVkID09PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlICE9PSBTdGF0ZS5JZGxlKSB7XG4gICAgICAgICAgICB0aGlzLmV4cGFuZGVkID0gZXhwYW5kZWQ7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuQW5pbWF0ZWQ7XG5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuZXhwYW5kZWQgPSBleHBhbmRlZDtcbiAgICAgICAgdGhpcy5yZXRyaWdnZXIodGhpcy5hc3luYyAmJiBleHBhbmRlZCA/IFN0YXRlLkxvYWRpbmcgOiBTdGF0ZS5BbmltYXRlZCk7XG4gICAgfVxuXG4gICAgQENvbnRlbnRDaGlsZChUdWlFeHBhbmRDb250ZW50RGlyZWN0aXZlLCB7cmVhZDogVGVtcGxhdGVSZWZ9KVxuICAgIGNvbnRlbnQ6IFRlbXBsYXRlUmVmPE5nSWZDb250ZXh0PGJvb2xlYW4+PiB8IG51bGwgPSBudWxsO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fZXhwYW5kZWQnKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5hcmlhLWV4cGFuZGVkJylcbiAgICBleHBhbmRlZDogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgcHJpdmF0ZSByZWFkb25seSBjZHI6IENoYW5nZURldGVjdG9yUmVmKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fb3ZlcmZsb3cnKVxuICAgIGdldCBvdmVyZmxvdygpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGUgIT09IFN0YXRlLklkbGU7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fbG9hZGluZycpXG4gICAgZ2V0IGxvYWRpbmcoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhIXRoaXMuZXhwYW5kZWQgJiYgdGhpcy5hc3luYyAmJiB0aGlzLnN0YXRlID09PSBTdGF0ZS5Mb2FkaW5nO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnc3R5bGUuaGVpZ2h0LnB4JylcbiAgICBnZXQgaGVpZ2h0KCk6IG51bWJlciB8IG51bGwge1xuICAgICAgICBjb25zdCB7ZXhwYW5kZWQsIHN0YXRlLCBjb250ZW50V3JhcHBlcn0gPSB0aGlzO1xuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIChleHBhbmRlZCAmJiBzdGF0ZSA9PT0gU3RhdGUuUHJlcGFyZWQpIHx8XG4gICAgICAgICAgICAoIWV4cGFuZGVkICYmIHN0YXRlID09PSBTdGF0ZS5BbmltYXRlZClcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gMDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIGNvbnRlbnRXcmFwcGVyICYmXG4gICAgICAgICAgICAoKCFleHBhbmRlZCAmJiBzdGF0ZSA9PT0gU3RhdGUuUHJlcGFyZWQpIHx8XG4gICAgICAgICAgICAgICAgKGV4cGFuZGVkICYmIHN0YXRlID09PSBTdGF0ZS5BbmltYXRlZCkpXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnRlbnRXcmFwcGVyLm5hdGl2ZUVsZW1lbnQub2Zmc2V0SGVpZ2h0O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbnRlbnRXcmFwcGVyICYmIGV4cGFuZGVkICYmIHN0YXRlID09PSBTdGF0ZS5Mb2FkaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5tYXgoY29udGVudFdyYXBwZXIubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQsIExPQURFUl9IRUlHSFQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IGNvbnRlbnRWaXNpYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5leHBhbmRlZCB8fCB0aGlzLnN0YXRlICE9PSBTdGF0ZS5JZGxlO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3RyYW5zaXRpb25lbmQuc2VsZicsIFsnJGV2ZW50J10pXG4gICAgb25UcmFuc2l0aW9uRW5kKHtwcm9wZXJ0eU5hbWV9OiBUcmFuc2l0aW9uRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKHByb3BlcnR5TmFtZSA9PT0gJ29wYWNpdHknICYmIHRoaXMuc3RhdGUgPT09IFN0YXRlLkFuaW1hdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gU3RhdGUuSWRsZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoVFVJX0VYUEFORF9MT0FERUQsIFsnJGV2ZW50J10pXG4gICAgb25FeHBhbmRMb2FkZWQoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgIGlmICh0aGlzLnN0YXRlID09PSBTdGF0ZS5Mb2FkaW5nKSB7XG4gICAgICAgICAgICB0aGlzLnJldHJpZ2dlcihTdGF0ZS5BbmltYXRlZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJldHJpZ2dlcihzdGF0ZTogU3RhdGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGF0ZSA9IFN0YXRlLlByZXBhcmVkO1xuXG4gICAgICAgIC8vIFdlIG5lZWQgZGVsYXkgdG8gcmUtdHJpZ2dlciBDU1MgaGVpZ2h0IHRyYW5zaXRpb24gZnJvbSB0aGUgY29ycmVjdCBudW1iZXJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZSAhPT0gU3RhdGUuUHJlcGFyZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgIHRoaXMuY2RyLm1hcmtGb3JDaGVjaygpO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCI8ZGl2XG4gICAgI3dyYXBwZXJcbiAgICBjbGFzcz1cInQtd3JhcHBlclwiXG4gICAgQHR1aVBhcmVudEFuaW1hdGlvblxuICAgIFtALmRpc2FibGVkXT1cIm92ZXJmbG93XCJcbj5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiY29udGVudFZpc2libGVcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgICA8dHVpLWxvYWRlclxuICAgICAgICAgICAgKm5nSWY9XCJhc3luYzsgZWxzZSBjb250ZW50XCJcbiAgICAgICAgICAgIHNpemU9XCJsXCJcbiAgICAgICAgICAgIFtvdmVybGF5XT1cInRydWVcIlxuICAgICAgICAgICAgW3Nob3dMb2FkZXJdPVwibG9hZGluZ1wiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgW25nVGVtcGxhdGVPdXRsZXRdPVwiY29udGVudFwiPjwvbmctY29udGFpbmVyPlxuICAgICAgICA8L3R1aS1sb2FkZXI+XG4gICAgPC9uZy1jb250YWluZXI+XG48L2Rpdj5cbiJdfQ==