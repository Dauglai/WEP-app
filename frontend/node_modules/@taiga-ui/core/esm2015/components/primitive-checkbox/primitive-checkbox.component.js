import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_CHECKBOX_OPTIONS } from './checkbox-options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/svg";
import * as i2 from "@taiga-ui/core/directives/wrapper";
import * as i3 from "@tinkoff/ng-polymorpheus";
export class TuiPrimitiveCheckboxComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.icon = this.options.icons.checked;
        this.value = false;
    }
    set valueSetter(value) {
        if (value !== false) {
            this.setCurrentIcon(value);
        }
        this.value = value;
    }
    get appearance() {
        switch (this.value) {
            case false:
                return this.options.appearances.unchecked;
            case true:
                return this.options.appearances.checked;
            default:
                return this.options.appearances.indeterminate;
        }
    }
    get empty() {
        return this.value === false;
    }
    setCurrentIcon(value) {
        this.icon =
            value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
    }
}
TuiPrimitiveCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxComponent, deps: [{ token: TUI_CHECKBOX_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCheckboxComponent, selector: "tui-primitive-checkbox", inputs: { size: "size", disabled: "disabled", focused: "focused", hovered: "hovered", pressed: "pressed", invalid: "invalid", valueSetter: ["value", "valueSetter"] }, host: { properties: { "attr.data-size": "this.size" } }, ngImport: i0, template: "<div\n    tuiWrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"focused\"\n    [hover]=\"hovered\"\n    [active]=\"pressed\"\n    [invalid]=\"invalid\"\n>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        class=\"t-mark\"\n        [class.t-mark_on]=\"!empty\"\n        [src]=\"src\"\n    ></tui-svg>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size=m]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size=l]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "disabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "focused", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "hovered", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "pressed", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "invalid", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "valueSetter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-checkbox',
                    templateUrl: './primitive-checkbox.template.html',
                    styleUrls: ['./primitive-checkbox.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_CHECKBOX_OPTIONS]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], disabled: [{
                type: Input
            }], focused: [{
                type: Input
            }], hovered: [{
                type: Input
            }], pressed: [{
                type: Input
            }], invalid: [{
                type: Input
            }], valueSetter: [{
                type: Input,
                args: ['value']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtY2hlY2tib3gvcHJpbWl0aXZlLWNoZWNrYm94LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtY2hlY2tib3gvcHJpbWl0aXZlLWNoZWNrYm94LnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFDWCxNQUFNLEVBQ04sS0FBSyxHQUNSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBeUIsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSXJFLE9BQU8sRUFBQyxvQkFBb0IsRUFBcUIsTUFBTSxvQkFBb0IsQ0FBQzs7Ozs7QUFRNUUsTUFBTSxPQUFPLDZCQUE2QjtJQXlDdEMsWUFDbUQsT0FBMkI7UUFBM0IsWUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUF0QzlFLFNBQUksR0FBYSxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQztRQUluQyxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBSWpCLFlBQU8sR0FBRyxLQUFLLENBQUM7UUFJaEIsWUFBTyxHQUFtQixLQUFLLENBQUM7UUFJaEMsWUFBTyxHQUFtQixLQUFLLENBQUM7UUFJaEMsWUFBTyxHQUFHLEtBQUssQ0FBQztRQVloQixTQUFJLEdBQ0EsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBRS9CLFVBQUssR0FBbUIsS0FBSyxDQUFDO0lBSTNCLENBQUM7SUFmSixJQUFJLFdBQVcsQ0FBQyxLQUFxQjtRQUNqQyxJQUFJLEtBQUssS0FBSyxLQUFLLEVBQUU7WUFDakIsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM5QjtRQUVELElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUFXRCxJQUFJLFVBQVU7UUFDVixRQUFRLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDaEIsS0FBSyxLQUFLO2dCQUNOLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDO1lBQzlDLEtBQUssSUFBSTtnQkFDTCxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQztZQUM1QztnQkFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLGFBQWEsQ0FBQztTQUNyRDtJQUNMLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDO0lBQ2hDLENBQUM7SUFFTyxjQUFjLENBQUMsS0FBcUI7UUFDeEMsSUFBSSxDQUFDLElBQUk7WUFDTCxLQUFLLEtBQUssSUFBSTtnQkFDVixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsYUFBYTtnQkFDbEMsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQztJQUN6QyxDQUFDOzsySEFqRVEsNkJBQTZCLGtCQTBDMUIsb0JBQW9COytHQTFDdkIsNkJBQTZCLDhSQ25CMUMsc2FBaUJBO0FETUk7SUFEQyxjQUFjLEVBQUU7MkRBQ2tCO0FBSW5DO0lBREMsY0FBYyxFQUFFOytEQUNBO0FBSWpCO0lBREMsY0FBYyxFQUFFOzhEQUNEO0FBSWhCO0lBREMsY0FBYyxFQUFFOzhEQUNlO0FBSWhDO0lBREMsY0FBYyxFQUFFOzhEQUNlO0FBSWhDO0lBREMsY0FBYyxFQUFFOzhEQUNEO0FBSWhCO0lBREMsY0FBYyxFQUFFO2dFQU9oQjs0RkFsQ1EsNkJBQTZCO2tCQU56QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0I7b0JBQ2xDLFdBQVcsRUFBRSxvQ0FBb0M7b0JBQ2pELFNBQVMsRUFBRSxDQUFDLGlDQUFpQyxDQUFDO29CQUM5QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OzBCQTJDUSxNQUFNOzJCQUFDLG9CQUFvQjs0Q0F0Q2hDLElBQUk7c0JBSEgsS0FBSzs7c0JBQ0wsV0FBVzt1QkFBQyxnQkFBZ0I7Z0JBTTdCLFFBQVE7c0JBRlAsS0FBSztnQkFNTixPQUFPO3NCQUZOLEtBQUs7Z0JBTU4sT0FBTztzQkFGTixLQUFLO2dCQU1OLE9BQU87c0JBRk4sS0FBSztnQkFNTixPQUFPO3NCQUZOLEtBQUs7Z0JBTUYsV0FBVztzQkFGZCxLQUFLO3VCQUFDLE9BQU8iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlDb250ZXh0V2l0aEltcGxpY2l0LCB0dWlEZWZhdWx0UHJvcH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbmltcG9ydCB7VFVJX0NIRUNLQk9YX09QVElPTlMsIFR1aUNoZWNrYm94T3B0aW9uc30gZnJvbSAnLi9jaGVja2JveC1vcHRpb25zJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJpbWl0aXZlLWNoZWNrYm94JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJpbWl0aXZlLWNoZWNrYm94LnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3ByaW1pdGl2ZS1jaGVja2JveC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZUNoZWNrYm94Q29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgPSB0aGlzLm9wdGlvbnMuc2l6ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGZvY3VzZWQgPSBmYWxzZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBob3ZlcmVkOiBib29sZWFuIHwgbnVsbCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHByZXNzZWQ6IGJvb2xlYW4gfCBudWxsID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaW52YWxpZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KCd2YWx1ZScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZXQgdmFsdWVTZXR0ZXIodmFsdWU6IGJvb2xlYW4gfCBudWxsKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q3VycmVudEljb24odmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICAgIH1cblxuICAgIGljb246IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlTaXplTD4+ID1cbiAgICAgICAgdGhpcy5vcHRpb25zLmljb25zLmNoZWNrZWQ7XG5cbiAgICB2YWx1ZTogYm9vbGVhbiB8IG51bGwgPSBmYWxzZTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9DSEVDS0JPWF9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFR1aUNoZWNrYm94T3B0aW9ucyxcbiAgICApIHt9XG5cbiAgICBnZXQgYXBwZWFyYW5jZSgpOiBzdHJpbmcge1xuICAgICAgICBzd2l0Y2ggKHRoaXMudmFsdWUpIHtcbiAgICAgICAgICAgIGNhc2UgZmFsc2U6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlcy51bmNoZWNrZWQ7XG4gICAgICAgICAgICBjYXNlIHRydWU6XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlcy5jaGVja2VkO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLmFwcGVhcmFuY2VzLmluZGV0ZXJtaW5hdGU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgZW1wdHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlID09PSBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNldEN1cnJlbnRJY29uKHZhbHVlOiBib29sZWFuIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICB0aGlzLmljb24gPVxuICAgICAgICAgICAgdmFsdWUgPT09IG51bGxcbiAgICAgICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5pY29ucy5pbmRldGVybWluYXRlXG4gICAgICAgICAgICAgICAgOiB0aGlzLm9wdGlvbnMuaWNvbnMuY2hlY2tlZDtcbiAgICB9XG59XG4iLCI8ZGl2XG4gICAgdHVpV3JhcHBlclxuICAgIFthcHBlYXJhbmNlXT1cImFwcGVhcmFuY2VcIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZFwiXG4gICAgW2ZvY3VzXT1cImZvY3VzZWRcIlxuICAgIFtob3Zlcl09XCJob3ZlcmVkXCJcbiAgICBbYWN0aXZlXT1cInByZXNzZWRcIlxuICAgIFtpbnZhbGlkXT1cImludmFsaWRcIlxuPlxuICAgIDx0dWktc3ZnXG4gICAgICAgICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJpY29uIGFzIHNyYzsgY29udGV4dDogeyRpbXBsaWNpdDogc2l6ZX1cIlxuICAgICAgICBjbGFzcz1cInQtbWFya1wiXG4gICAgICAgIFtjbGFzcy50LW1hcmtfb25dPVwiIWVtcHR5XCJcbiAgICAgICAgW3NyY109XCJzcmNcIlxuICAgID48L3R1aS1zdmc+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9kaXY+XG4iXX0=