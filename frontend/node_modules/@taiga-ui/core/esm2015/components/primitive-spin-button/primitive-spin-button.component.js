import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, Inject, Input, Output, ViewChild, } from '@angular/core';
import { AbstractTuiInteractive, tuiDefaultProp, tuiIsNativeFocused } from '@taiga-ui/cdk';
import { TUI_SPIN_TEXTS } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/button";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/cdk";
import * as i4 from "rxjs";
export class TuiPrimitiveSpinButtonComponent extends AbstractTuiInteractive {
    constructor(spinTexts$) {
        super();
        this.spinTexts$ = spinTexts$;
        this.disabled = false;
        this.mode = "flat" /* Flat */;
        this.leftDisabled = false;
        this.rightDisabled = false;
        this.leftClick = new EventEmitter();
        this.rightClick = new EventEmitter();
    }
    get focused() {
        return !!this.wrapper && tuiIsNativeFocused(this.wrapper.nativeElement);
    }
    get leftComputedDisabled() {
        return this.computedDisabled || this.leftDisabled;
    }
    get rightComputedDisabled() {
        return this.computedDisabled || this.rightDisabled;
    }
    onLeftClick() {
        if (!this.leftComputedDisabled) {
            this.leftClick.emit();
        }
    }
    onRightClick() {
        if (!this.rightComputedDisabled) {
            this.rightClick.emit();
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
}
TuiPrimitiveSpinButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, deps: [{ token: TUI_SPIN_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveSpinButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveSpinButtonComponent, selector: "tui-primitive-spin-button", inputs: { disabled: "disabled", mode: "mode", leftDisabled: "leftDisabled", rightDisabled: "rightDisabled" }, outputs: { leftClick: "leftClick", rightClick: "rightClick" }, viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    *ngIf=\"spinTexts$ | async as texts\"\n    #wrapper\n    tuiPreventDefault=\"mousedown\"\n    class=\"t-wrapper\"\n    (focusin)=\"onFocused(true)\"\n    (focusout)=\"onFocused(false)\"\n    (keydown.arrowLeft)=\"onLeftClick()\"\n    (keydown.arrowRight)=\"onRightClick()\"\n>\n    <button\n        tuiIconButton\n        type=\"button\"\n        size=\"xs\"\n        appearance=\"\"\n        automation-id=\"tui-primitive-spin-button__left\"\n        icon=\"tuiIconChevronLeftLarge\"\n        class=\"t-arrow\"\n        [class.t-arrow_hidden]=\"leftComputedDisabled\"\n        [title]=\"texts[0]\"\n        [focusable]=\"computedFocusable\"\n        (click)=\"onLeftClick()\"\n    ></button>\n    <span class=\"t-content t-calendar-title\">\n        <ng-content></ng-content>\n    </span>\n    <button\n        tuiIconButton\n        type=\"button\"\n        size=\"xs\"\n        appearance=\"\"\n        automation-id=\"tui-primitive-spin-button__right\"\n        icon=\"tuiIconChevronRightLarge\"\n        class=\"t-arrow\"\n        [class.t-arrow_hidden]=\"rightComputedDisabled\"\n        [title]=\"texts[1]\"\n        [focusable]=\"computedFocusable\"\n        (click)=\"onRightClick()\"\n    ></button>\n</div>\n", styles: [":host{display:block;font:var(--tui-font-text-l);text-align:center;font-weight:bold}.t-wrapper{display:flex;align-items:center;justify-content:space-between;outline:none}.t-arrow{margin:0 .25rem}.t-arrow_hidden{visibility:hidden}.t-content{padding:0 .5rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "disabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "mode", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "leftDisabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "rightDisabled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-spin-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './primitive-spin-button.template.html',
                    styleUrls: ['./primitive-spin-button.style.less'],
                }]
        }], ctorParameters: function () { return [{ type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_TEXTS]
                }] }]; }, propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper']
            }], disabled: [{
                type: Input
            }], mode: [{
                type: Input
            }], leftDisabled: [{
                type: Input
            }], rightDisabled: [{
                type: Input
            }], leftClick: [{
                type: Output
            }], rightClick: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJpbWl0aXZlLXNwaW4tYnV0dG9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtc3Bpbi1idXR0b24vcHJpbWl0aXZlLXNwaW4tYnV0dG9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9wcmltaXRpdmUtc3Bpbi1idXR0b24vcHJpbWl0aXZlLXNwaW4tYnV0dG9uLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUVULFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHNCQUFzQixFQUFFLGNBQWMsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6RixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7Ozs7OztBQVNyRCxNQUFNLE9BQU8sK0JBQWdDLFNBQVEsc0JBQXNCO0lBMEJ2RSxZQUNxQyxVQUF3QztRQUV6RSxLQUFLLEVBQUUsQ0FBQztRQUZ5QixlQUFVLEdBQVYsVUFBVSxDQUE4QjtRQXJCN0UsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUlqQixTQUFJLHFCQUFxQztRQUl6QyxpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUlyQixrQkFBYSxHQUFHLEtBQUssQ0FBQztRQUdiLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO1FBR3JDLGVBQVUsR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBTS9DLENBQUM7SUFFRCxJQUFJLE9BQU87UUFDUCxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxJQUFJLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVELElBQUksb0JBQW9CO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxZQUFZLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQUkscUJBQXFCO1FBQ3JCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixJQUFJLElBQUksQ0FBQyxhQUFhLENBQUM7SUFDdkQsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFO1lBQzVCLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7U0FDekI7SUFDTCxDQUFDO0lBRUQsWUFBWTtRQUNSLElBQUksQ0FBQyxJQUFJLENBQUMscUJBQXFCLEVBQUU7WUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUMxQjtJQUNMLENBQUM7SUFFRCxTQUFTLENBQUMsT0FBZ0I7UUFDdEIsSUFBSSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUNoQyxDQUFDO0lBRUQsY0FBYyxDQUFDLFlBQXFCO1FBQ2hDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUMxQyxDQUFDOzs2SEE5RFEsK0JBQStCLGtCQTJCNUIsY0FBYztpSEEzQmpCLCtCQUErQix5V0NyQjVDLCtzQ0F3Q0E7QURiSTtJQURDLGNBQWMsRUFBRTtpRUFDQTtBQUlqQjtJQURDLGNBQWMsRUFBRTs2REFDd0I7QUFJekM7SUFEQyxjQUFjLEVBQUU7cUVBQ0k7QUFJckI7SUFEQyxjQUFjLEVBQUU7c0VBQ0s7NEZBbEJiLCtCQUErQjtrQkFOM0MsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMkJBQTJCO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsV0FBVyxFQUFFLHVDQUF1QztvQkFDcEQsU0FBUyxFQUFFLENBQUMsb0NBQW9DLENBQUM7aUJBQ3BEOzswQkE0QlEsTUFBTTsyQkFBQyxjQUFjOzRDQXpCVCxPQUFPO3NCQUR2QixTQUFTO3VCQUFDLFNBQVM7Z0JBS3BCLFFBQVE7c0JBRlAsS0FBSztnQkFNTixJQUFJO3NCQUZILEtBQUs7Z0JBTU4sWUFBWTtzQkFGWCxLQUFLO2dCQU1OLGFBQWE7c0JBRlosS0FBSztnQkFLRyxTQUFTO3NCQURqQixNQUFNO2dCQUlFLFVBQVU7c0JBRGxCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpSW50ZXJhY3RpdmUsIHR1aURlZmF1bHRQcm9wLCB0dWlJc05hdGl2ZUZvY3VzZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlBcHBlYXJhbmNlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9lbnVtcyc7XG5pbXBvcnQge1RVSV9TUElOX1RFWFRTfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktcHJpbWl0aXZlLXNwaW4tYnV0dG9uJyxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcHJpbWl0aXZlLXNwaW4tYnV0dG9uLnRlbXBsYXRlLmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL3ByaW1pdGl2ZS1zcGluLWJ1dHRvbi5zdHlsZS5sZXNzJ10sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByaW1pdGl2ZVNwaW5CdXR0b25Db21wb25lbnQgZXh0ZW5kcyBBYnN0cmFjdFR1aUludGVyYWN0aXZlIHtcbiAgICBAVmlld0NoaWxkKCd3cmFwcGVyJylcbiAgICBwcml2YXRlIHJlYWRvbmx5IHdyYXBwZXI/OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1vZGU6IFR1aUFwcGVhcmFuY2UgPSBUdWlBcHBlYXJhbmNlLkZsYXQ7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbGVmdERpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgcmlnaHREaXNhYmxlZCA9IGZhbHNlO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgbGVmdENsaWNrID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgcmlnaHRDbGljayA9IG5ldyBFdmVudEVtaXR0ZXI8dm9pZD4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9TUElOX1RFWFRTKSByZWFkb25seSBzcGluVGV4dHMkOiBPYnNlcnZhYmxlPFtzdHJpbmcsIHN0cmluZ10+LFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGdldCBmb2N1c2VkKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLndyYXBwZXIgJiYgdHVpSXNOYXRpdmVGb2N1c2VkKHRoaXMud3JhcHBlci5uYXRpdmVFbGVtZW50KTtcbiAgICB9XG5cbiAgICBnZXQgbGVmdENvbXB1dGVkRGlzYWJsZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkRGlzYWJsZWQgfHwgdGhpcy5sZWZ0RGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgZ2V0IHJpZ2h0Q29tcHV0ZWREaXNhYmxlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcHV0ZWREaXNhYmxlZCB8fCB0aGlzLnJpZ2h0RGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgb25MZWZ0Q2xpY2soKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5sZWZ0Q29tcHV0ZWREaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5sZWZ0Q2xpY2suZW1pdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25SaWdodENsaWNrKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMucmlnaHRDb21wdXRlZERpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLnJpZ2h0Q2xpY2suZW1pdCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25Gb2N1c2VkKGZvY3VzZWQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVGb2N1c2VkKGZvY3VzZWQpO1xuICAgIH1cblxuICAgIG9uRm9jdXNWaXNpYmxlKGZvY3VzVmlzaWJsZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUZvY3VzVmlzaWJsZShmb2N1c1Zpc2libGUpO1xuICAgIH1cbn1cbiIsIjxkaXZcbiAgICAqbmdJZj1cInNwaW5UZXh0cyQgfCBhc3luYyBhcyB0ZXh0c1wiXG4gICAgI3dyYXBwZXJcbiAgICB0dWlQcmV2ZW50RGVmYXVsdD1cIm1vdXNlZG93blwiXG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgIChmb2N1c2luKT1cIm9uRm9jdXNlZCh0cnVlKVwiXG4gICAgKGZvY3Vzb3V0KT1cIm9uRm9jdXNlZChmYWxzZSlcIlxuICAgIChrZXlkb3duLmFycm93TGVmdCk9XCJvbkxlZnRDbGljaygpXCJcbiAgICAoa2V5ZG93bi5hcnJvd1JpZ2h0KT1cIm9uUmlnaHRDbGljaygpXCJcbj5cbiAgICA8YnV0dG9uXG4gICAgICAgIHR1aUljb25CdXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIHNpemU9XCJ4c1wiXG4gICAgICAgIGFwcGVhcmFuY2U9XCJcIlxuICAgICAgICBhdXRvbWF0aW9uLWlkPVwidHVpLXByaW1pdGl2ZS1zcGluLWJ1dHRvbl9fbGVmdFwiXG4gICAgICAgIGljb249XCJ0dWlJY29uQ2hldnJvbkxlZnRMYXJnZVwiXG4gICAgICAgIGNsYXNzPVwidC1hcnJvd1wiXG4gICAgICAgIFtjbGFzcy50LWFycm93X2hpZGRlbl09XCJsZWZ0Q29tcHV0ZWREaXNhYmxlZFwiXG4gICAgICAgIFt0aXRsZV09XCJ0ZXh0c1swXVwiXG4gICAgICAgIFtmb2N1c2FibGVdPVwiY29tcHV0ZWRGb2N1c2FibGVcIlxuICAgICAgICAoY2xpY2spPVwib25MZWZ0Q2xpY2soKVwiXG4gICAgPjwvYnV0dG9uPlxuICAgIDxzcGFuIGNsYXNzPVwidC1jb250ZW50IHQtY2FsZW5kYXItdGl0bGVcIj5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIDwvc3Bhbj5cbiAgICA8YnV0dG9uXG4gICAgICAgIHR1aUljb25CdXR0b25cbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIHNpemU9XCJ4c1wiXG4gICAgICAgIGFwcGVhcmFuY2U9XCJcIlxuICAgICAgICBhdXRvbWF0aW9uLWlkPVwidHVpLXByaW1pdGl2ZS1zcGluLWJ1dHRvbl9fcmlnaHRcIlxuICAgICAgICBpY29uPVwidHVpSWNvbkNoZXZyb25SaWdodExhcmdlXCJcbiAgICAgICAgY2xhc3M9XCJ0LWFycm93XCJcbiAgICAgICAgW2NsYXNzLnQtYXJyb3dfaGlkZGVuXT1cInJpZ2h0Q29tcHV0ZWREaXNhYmxlZFwiXG4gICAgICAgIFt0aXRsZV09XCJ0ZXh0c1sxXVwiXG4gICAgICAgIFtmb2N1c2FibGVdPVwiY29tcHV0ZWRGb2N1c2FibGVcIlxuICAgICAgICAoY2xpY2spPVwib25SaWdodENsaWNrKClcIlxuICAgID48L2J1dHRvbj5cbjwvZGl2PlxuIl19