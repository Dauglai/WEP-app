import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp, tuiIsObserved } from '@taiga-ui/cdk';
import { TUI_CLOSE_WORD, TUI_NOTIFICATION_OPTIONS, } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/svg";
import * as i2 from "@taiga-ui/core/components/button";
import * as i3 from "@angular/common";
import * as i4 from "rxjs";
export const STATUS_ICON = {
    info: 'tuiIconInfo',
    success: 'tuiIconCheckCircle',
    error: 'tuiIconXCircle',
    warning: 'tuiIconAlertCircle',
};
export class TuiNotificationComponent {
    constructor(closeWord$, options) {
        this.closeWord$ = closeWord$;
        this.options = options;
        this.hasIcon = this.options.hasIcon;
        this.status = this.options.status;
        this.hideClose = false;
        this.close = new EventEmitter();
    }
    get icon() {
        return STATUS_ICON[this.status];
    }
    get hasClose() {
        return !this.hideClose && tuiIsObserved(this.close);
    }
}
TuiNotificationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationComponent, deps: [{ token: TUI_CLOSE_WORD }, { token: TUI_NOTIFICATION_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiNotificationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNotificationComponent, selector: "tui-notification", inputs: { hasIcon: "hasIcon", status: "status", hideClose: "hideClose" }, outputs: { close: "close" }, host: { properties: { "class._has-icon": "this.hasIcon", "attr.data-status": "this.status", "class._has-close-button": "this.hasClose" } }, ngImport: i0, template: "<tui-svg\n    *ngIf=\"hasIcon\"\n    automation-id=\"tui-notification__icon\"\n    class=\"t-icon\"\n    [src]=\"icon\"\n></tui-svg>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n<button\n    *ngIf=\"hasClose\"\n    tuiIconButton\n    type=\"button\"\n    automation-id=\"tui-notification__close\"\n    size=\"xs\"\n    icon=\"tuiIconCloseLarge\"\n    appearance=\"icon\"\n    class=\"t-close\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;padding:.75rem 1rem;border-radius:var(--tui-radius-m);background:#fff;background:var(--tui-base-01);box-sizing:border-box;overflow:hidden}:host:after{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";pointer-events:none}:host._has-close-button{padding-right:2rem}:host._has-icon{padding-left:2.75rem}:host[data-status=info]{color:var(--tui-info-fill);background:linear-gradient(var(--tui-info-bg),var(--tui-info-bg)),var(--tui-base-01)}:host[data-status=success]{color:var(--tui-success-fill);background:linear-gradient(var(--tui-success-bg),var(--tui-success-bg)),var(--tui-base-01)}:host[data-status=error]{color:var(--tui-error-fill);background:linear-gradient(var(--tui-error-bg),var(--tui-error-bg)),var(--tui-base-01)}:host[data-status=warning]{color:var(--tui-warning-fill);background:linear-gradient(var(--tui-warning-bg),var(--tui-warning-bg)),var(--tui-base-01)}.t-content{word-wrap:break-word;color:var(--tui-text-01)}.t-icon{position:absolute;top:0;left:1rem;display:flex;width:1rem;height:100%;max-height:3rem;align-items:center}.t-close{position:absolute;top:.625rem;right:.5rem}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "hasIcon", void 0);
__decorate([
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "status", void 0);
__decorate([
    tuiDefaultProp()
], TuiNotificationComponent.prototype, "hideClose", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNotificationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-notification',
                    templateUrl: './notification.template.html',
                    styleUrls: ['./notification.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NOTIFICATION_OPTIONS]
                }] }]; }, propDecorators: { hasIcon: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._has-icon']
            }], status: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-status']
            }], hideClose: [{
                type: Input
            }], close: [{
                type: Output
            }], hasClose: [{
                type: HostBinding,
                args: ['class._has-close-button']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpY2F0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvY29tcG9uZW50cy9ub3RpZmljYXRpb24vbm90aWZpY2F0aW9uLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGNBQWMsRUFBRSxhQUFhLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUNILGNBQWMsRUFDZCx3QkFBd0IsR0FFM0IsTUFBTSx1QkFBdUIsQ0FBQzs7Ozs7O0FBRy9CLE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRztJQUN2QixJQUFJLEVBQUUsYUFBYTtJQUNuQixPQUFPLEVBQUUsb0JBQW9CO0lBQzdCLEtBQUssRUFBRSxnQkFBZ0I7SUFDdkIsT0FBTyxFQUFFLG9CQUFvQjtDQUN2QixDQUFDO0FBUVgsTUFBTSxPQUFPLHdCQUF3QjtJQW1CakMsWUFDcUMsVUFBOEIsRUFFdEQsT0FBc0M7UUFGZCxlQUFVLEdBQVYsVUFBVSxDQUFvQjtRQUV0RCxZQUFPLEdBQVAsT0FBTyxDQUErQjtRQWxCbkQsWUFBTyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO1FBSy9CLFdBQU0sR0FBNkMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUM7UUFJdkUsY0FBUyxHQUFHLEtBQUssQ0FBQztRQUlULFVBQUssR0FBRyxJQUFJLFlBQVksRUFBUSxDQUFDO0lBTXZDLENBQUM7SUFFSixJQUFJLElBQUk7UUFDSixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELElBQ0ksUUFBUTtRQUNSLE9BQU8sQ0FBQyxJQUFJLENBQUMsU0FBUyxJQUFJLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDeEQsQ0FBQzs7c0hBaENRLHdCQUF3QixrQkFvQnJCLGNBQWMsYUFDZCx3QkFBd0I7MEdBckIzQix3QkFBd0IsMlNDOUJyQyxpZkFxQkE7QURhSTtJQURDLGNBQWMsRUFBRTt5REFDYztBQUsvQjtJQURDLGNBQWMsRUFBRTt3REFDc0Q7QUFJdkU7SUFEQyxjQUFjLEVBQUU7MkRBQ0M7NEZBYlQsd0JBQXdCO2tCQU5wQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFdBQVcsRUFBRSw4QkFBOEI7b0JBQzNDLFNBQVMsRUFBRSxDQUFDLDJCQUEyQixDQUFDO29CQUN4QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OzBCQXFCUSxNQUFNOzJCQUFDLGNBQWM7OzBCQUNyQixNQUFNOzJCQUFDLHdCQUF3Qjs0Q0FqQnBDLE9BQU87c0JBSE4sS0FBSzs7c0JBQ0wsV0FBVzt1QkFBQyxpQkFBaUI7Z0JBTzlCLE1BQU07c0JBSEwsS0FBSzs7c0JBQ0wsV0FBVzt1QkFBQyxrQkFBa0I7Z0JBTS9CLFNBQVM7c0JBRlIsS0FBSztnQkFNRyxLQUFLO3NCQUZiLE1BQU07Z0JBZUgsUUFBUTtzQkFEWCxXQUFXO3VCQUFDLHlCQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0QmluZGluZyxcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIHR1aUlzT2JzZXJ2ZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUVUlfQ0xPU0VfV09SRCxcbiAgICBUVUlfTk9USUZJQ0FUSU9OX09QVElPTlMsXG4gICAgVHVpTm90aWZpY2F0aW9uRGVmYXVsdE9wdGlvbnMsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5leHBvcnQgY29uc3QgU1RBVFVTX0lDT04gPSB7XG4gICAgaW5mbzogJ3R1aUljb25JbmZvJyxcbiAgICBzdWNjZXNzOiAndHVpSWNvbkNoZWNrQ2lyY2xlJyxcbiAgICBlcnJvcjogJ3R1aUljb25YQ2lyY2xlJyxcbiAgICB3YXJuaW5nOiAndHVpSWNvbkFsZXJ0Q2lyY2xlJyxcbn0gYXMgY29uc3Q7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLW5vdGlmaWNhdGlvbicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL25vdGlmaWNhdGlvbi50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9ub3RpZmljYXRpb24uc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlOb3RpZmljYXRpb25Db21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5faGFzLWljb24nKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgaGFzSWNvbiA9IHRoaXMub3B0aW9ucy5oYXNJY29uO1xuXG4gICAgQElucHV0KClcbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuZGF0YS1zdGF0dXMnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc3RhdHVzOiAnZXJyb3InIHwgJ2luZm8nIHwgJ3N1Y2Nlc3MnIHwgJ3dhcm5pbmcnID0gdGhpcy5vcHRpb25zLnN0YXR1cztcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBoaWRlQ2xvc2UgPSBmYWxzZTtcblxuICAgIEBPdXRwdXQoKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8tb3V0cHV0LW5hdGl2ZVxuICAgIHJlYWRvbmx5IGNsb3NlID0gbmV3IEV2ZW50RW1pdHRlcjx2b2lkPigpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0NMT1NFX1dPUkQpIHJlYWRvbmx5IGNsb3NlV29yZCQ6IE9ic2VydmFibGU8c3RyaW5nPixcbiAgICAgICAgQEluamVjdChUVUlfTk9USUZJQ0FUSU9OX09QVElPTlMpXG4gICAgICAgIHJlYWRvbmx5IG9wdGlvbnM6IFR1aU5vdGlmaWNhdGlvbkRlZmF1bHRPcHRpb25zLFxuICAgICkge31cblxuICAgIGdldCBpY29uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBTVEFUVVNfSUNPTlt0aGlzLnN0YXR1c107XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5faGFzLWNsb3NlLWJ1dHRvbicpXG4gICAgZ2V0IGhhc0Nsb3NlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gIXRoaXMuaGlkZUNsb3NlICYmIHR1aUlzT2JzZXJ2ZWQodGhpcy5jbG9zZSk7XG4gICAgfVxufVxuIiwiPHR1aS1zdmdcbiAgICAqbmdJZj1cImhhc0ljb25cIlxuICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktbm90aWZpY2F0aW9uX19pY29uXCJcbiAgICBjbGFzcz1cInQtaWNvblwiXG4gICAgW3NyY109XCJpY29uXCJcbj48L3R1aS1zdmc+XG48ZGl2IGNsYXNzPVwidC1jb250ZW50XCI+XG4gICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuPC9kaXY+XG48YnV0dG9uXG4gICAgKm5nSWY9XCJoYXNDbG9zZVwiXG4gICAgdHVpSWNvbkJ1dHRvblxuICAgIHR5cGU9XCJidXR0b25cIlxuICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktbm90aWZpY2F0aW9uX19jbG9zZVwiXG4gICAgc2l6ZT1cInhzXCJcbiAgICBpY29uPVwidHVpSWNvbkNsb3NlTGFyZ2VcIlxuICAgIGFwcGVhcmFuY2U9XCJpY29uXCJcbiAgICBjbGFzcz1cInQtY2xvc2VcIlxuICAgIFt0aXRsZV09XCJjbG9zZVdvcmQkIHwgYXN5bmNcIlxuICAgIChjbGljayk9XCJjbG9zZS5lbWl0KClcIlxuPjwvYnV0dG9uPlxuIl19