import { DOCUMENT } from '@angular/common';
import { ElementRef, Inject, Injectable } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiContainsOrAfter, tuiGetActualTarget, tuiIsCurrentTarget, tuiIsElement, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { tuiGetViewportWidth } from '@taiga-ui/core/utils';
import { merge, Observable } from 'rxjs';
import { filter, map, switchMap, take } from 'rxjs/operators';
import * as i0 from "@angular/core";
const SCROLLBAR_PLACEHOLDER = 17;
export class TuiDialogCloseService extends Observable {
    constructor(win, doc, el) {
        super(subscriber => merge(this.click$, this.esc$, this.mousedown$).subscribe(subscriber));
        this.win = win;
        this.doc = doc;
        this.el = el;
        this.click$ = tuiTypedFromEvent(this.element, `click`).pipe(filter(tuiIsCurrentTarget));
        this.esc$ = tuiTypedFromEvent(this.doc, `keydown`).pipe(filter(event => {
            const key = event.key;
            const target = tuiGetActualTarget(event);
            return (key === `Escape` &&
                tuiIsElement(target) &&
                (this.element.contains(target) ||
                    !tuiContainsOrAfter(this.element, target)));
        }));
        this.mousedown$ = tuiTypedFromEvent(this.doc, `mousedown`).pipe(filter(event => {
            const target = tuiGetActualTarget(event);
            const clientX = event.clientX;
            return (tuiIsElement(target) &&
                tuiGetViewportWidth(this.win) - clientX > SCROLLBAR_PLACEHOLDER &&
                !tuiContainsOrAfter(this.element, target));
        }), switchMap(() => tuiTypedFromEvent(this.doc, `mouseup`).pipe(take(1), map(tuiGetActualTarget), filter(target => tuiIsElement(target) && !tuiContainsOrAfter(this.element, target)))));
    }
    get element() {
        return this.el.nativeElement;
    }
}
TuiDialogCloseService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogCloseService, deps: [{ token: WINDOW }, { token: DOCUMENT }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Injectable });
TuiDialogCloseService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogCloseService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogCloseService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLWNsb3NlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2NvbXBvbmVudHMvZGlhbG9nL2RpYWxvZy1jbG9zZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFDSCxrQkFBa0IsRUFDbEIsa0JBQWtCLEVBQ2xCLGtCQUFrQixFQUNsQixZQUFZLEVBQ1osaUJBQWlCLEdBQ3BCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFNUQsTUFBTSxxQkFBcUIsR0FBRyxFQUFFLENBQUM7QUFHakMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQW1CO0lBMEMxRCxZQUNxQyxHQUFXLEVBQ1QsR0FBYSxFQUNYLEVBQTJCO1FBRWhFLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRSxDQUNmLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FDdkUsQ0FBQztRQU4rQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBQ1QsUUFBRyxHQUFILEdBQUcsQ0FBVTtRQUNYLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBNUNuRCxXQUFNLEdBQUcsaUJBQWlCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQ25FLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxDQUM3QixDQUFDO1FBRWUsU0FBSSxHQUFHLGlCQUFpQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsU0FBUyxDQUFDLENBQUMsSUFBSSxDQUMvRCxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDWCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDO1lBQ3RCLE1BQU0sTUFBTSxHQUFHLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRXpDLE9BQU8sQ0FDSCxHQUFHLEtBQUssUUFBUTtnQkFDaEIsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDcEIsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7b0JBQzFCLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUNqRCxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQ0wsQ0FBQztRQUVlLGVBQVUsR0FBRyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDdkUsTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1gsTUFBTSxNQUFNLEdBQUcsa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDekMsTUFBTSxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztZQUU5QixPQUFPLENBQ0gsWUFBWSxDQUFDLE1BQU0sQ0FBQztnQkFDcEIsbUJBQW1CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLE9BQU8sR0FBRyxxQkFBcUI7Z0JBQy9ELENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxNQUFNLENBQUMsQ0FDNUMsQ0FBQztRQUNOLENBQUMsQ0FBQyxFQUNGLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FDWCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FDdkMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUNQLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBQyxFQUN2QixNQUFNLENBQ0YsTUFBTSxDQUFDLEVBQUUsQ0FDTCxZQUFZLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUN4RSxDQUNKLENBQ0osQ0FDSixDQUFDO0lBVUYsQ0FBQztJQUVELElBQVksT0FBTztRQUNmLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDakMsQ0FBQzs7bUhBdERRLHFCQUFxQixrQkEyQ2xCLE1BQU0sYUFDTixRQUFRLGFBQ1IsVUFBVTt1SEE3Q2IscUJBQXFCOzRGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVU7MERBNENtQyxNQUFNOzBCQUEzQyxNQUFNOzJCQUFDLE1BQU07OEJBQzBCLFFBQVE7MEJBQS9DLE1BQU07MkJBQUMsUUFBUTs7MEJBQ2YsTUFBTTsyQkFBQyxVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtET0NVTUVOVH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7V0lORE9XfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgdHVpQ29udGFpbnNPckFmdGVyLFxuICAgIHR1aUdldEFjdHVhbFRhcmdldCxcbiAgICB0dWlJc0N1cnJlbnRUYXJnZXQsXG4gICAgdHVpSXNFbGVtZW50LFxuICAgIHR1aVR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7dHVpR2V0Vmlld3BvcnRXaWR0aH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZpbHRlciwgbWFwLCBzd2l0Y2hNYXAsIHRha2V9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuY29uc3QgU0NST0xMQkFSX1BMQUNFSE9MREVSID0gMTc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlEaWFsb2dDbG9zZVNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGNsaWNrJCA9IHR1aVR5cGVkRnJvbUV2ZW50KHRoaXMuZWxlbWVudCwgYGNsaWNrYCkucGlwZShcbiAgICAgICAgZmlsdGVyKHR1aUlzQ3VycmVudFRhcmdldCksXG4gICAgKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgZXNjJCA9IHR1aVR5cGVkRnJvbUV2ZW50KHRoaXMuZG9jLCBga2V5ZG93bmApLnBpcGUoXG4gICAgICAgIGZpbHRlcihldmVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCBrZXkgPSBldmVudC5rZXk7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0dWlHZXRBY3R1YWxUYXJnZXQoZXZlbnQpO1xuXG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIGtleSA9PT0gYEVzY2FwZWAgJiZcbiAgICAgICAgICAgICAgICB0dWlJc0VsZW1lbnQodGFyZ2V0KSAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmVsZW1lbnQuY29udGFpbnModGFyZ2V0KSB8fFxuICAgICAgICAgICAgICAgICAgICAhdHVpQ29udGFpbnNPckFmdGVyKHRoaXMuZWxlbWVudCwgdGFyZ2V0KSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pLFxuICAgICk7XG5cbiAgICBwcml2YXRlIHJlYWRvbmx5IG1vdXNlZG93biQgPSB0dWlUeXBlZEZyb21FdmVudCh0aGlzLmRvYywgYG1vdXNlZG93bmApLnBpcGUoXG4gICAgICAgIGZpbHRlcihldmVudCA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXJnZXQgPSB0dWlHZXRBY3R1YWxUYXJnZXQoZXZlbnQpO1xuICAgICAgICAgICAgY29uc3QgY2xpZW50WCA9IGV2ZW50LmNsaWVudFg7XG5cbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdHVpSXNFbGVtZW50KHRhcmdldCkgJiZcbiAgICAgICAgICAgICAgICB0dWlHZXRWaWV3cG9ydFdpZHRoKHRoaXMud2luKSAtIGNsaWVudFggPiBTQ1JPTExCQVJfUExBQ0VIT0xERVIgJiZcbiAgICAgICAgICAgICAgICAhdHVpQ29udGFpbnNPckFmdGVyKHRoaXMuZWxlbWVudCwgdGFyZ2V0KVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSksXG4gICAgICAgIHN3aXRjaE1hcCgoKSA9PlxuICAgICAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5kb2MsIGBtb3VzZXVwYCkucGlwZShcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIG1hcCh0dWlHZXRBY3R1YWxUYXJnZXQpLFxuICAgICAgICAgICAgICAgIGZpbHRlcihcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB0dWlJc0VsZW1lbnQodGFyZ2V0KSAmJiAhdHVpQ29udGFpbnNPckFmdGVyKHRoaXMuZWxlbWVudCwgdGFyZ2V0KSxcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoV0lORE9XKSBwcml2YXRlIHJlYWRvbmx5IHdpbjogV2luZG93LFxuICAgICAgICBASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvYzogRG9jdW1lbnQsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT5cbiAgICAgICAgICAgIG1lcmdlKHRoaXMuY2xpY2skLCB0aGlzLmVzYyQsIHRoaXMubW91c2Vkb3duJCkuc3Vic2NyaWJlKHN1YnNjcmliZXIpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIH1cbn1cbiJdfQ==