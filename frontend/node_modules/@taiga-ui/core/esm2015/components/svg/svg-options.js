import { inject, InjectionToken, Optional, SkipSelf } from '@angular/core';
import { tuiIsString, tuiSvgLinearGradientProcessor, } from '@taiga-ui/cdk';
import { TUI_ICONS_PATH, TUI_SVG_CONTENT_PROCESSOR, TUI_SVG_SRC_PROCESSOR, } from '@taiga-ui/core/tokens';
import { tuiIconsPathFactory } from '@taiga-ui/core/utils';
import { identity } from 'rxjs';
import { TUI_DEPRECATED_ICONS } from './deprecated-icons';
export const TUI_SVG_DEFAULT_OPTIONS = {
    path: tuiIconsPathFactory(`assets/taiga-ui/icons`),
    srcProcessor: identity,
    contentProcessor: tuiSvgLinearGradientProcessor,
    deprecated: src => {
        const oldIcon = src.replace(`Large`, ``).replace(`Outline`, ``);
        const newIcon = TUI_DEPRECATED_ICONS[oldIcon];
        return newIcon
            ? `${oldIcon}/(Large|Outline) is deprecated, use ${newIcon}/(Large|Outline) instead`
            : ``;
    },
};
/**
 * SVG component options
 */
export const TUI_SVG_OPTIONS = new InjectionToken(`[TUI_SVG_OPTIONS]`, {
    factory: () => ({
        path: inject(TUI_ICONS_PATH),
        deprecated: TUI_SVG_DEFAULT_OPTIONS.deprecated,
        srcProcessor: inject(TUI_SVG_SRC_PROCESSOR),
        contentProcessor: inject(TUI_SVG_CONTENT_PROCESSOR),
    }),
});
export const tuiSvgOptionsProvider = options => ({
    provide: TUI_SVG_OPTIONS,
    deps: [[new SkipSelf(), new Optional(), TUI_SVG_OPTIONS]],
    useFactory: (fallback) => (Object.assign(Object.assign(Object.assign({}, (fallback || TUI_SVG_DEFAULT_OPTIONS)), options), { path: tuiIsString(options.path)
            ? tuiIconsPathFactory(options.path)
            : options.path || (fallback === null || fallback === void 0 ? void 0 : fallback.path) || TUI_SVG_DEFAULT_OPTIONS.path })),
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3ZnLW9wdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2NvbXBvbmVudHMvc3ZnL3N2Zy1vcHRpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBa0IsTUFBTSxFQUFFLGNBQWMsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTFGLE9BQU8sRUFFSCxXQUFXLEVBRVgsNkJBQTZCLEdBQ2hDLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFDSCxjQUFjLEVBQ2QseUJBQXlCLEVBQ3pCLHFCQUFxQixHQUN4QixNQUFNLHVCQUF1QixDQUFDO0FBQy9CLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFOUIsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFTeEQsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQWtCO0lBQ2xELElBQUksRUFBRSxtQkFBbUIsQ0FBQyx1QkFBdUIsQ0FBQztJQUNsRCxZQUFZLEVBQUUsUUFBUTtJQUN0QixnQkFBZ0IsRUFBRSw2QkFBNkI7SUFDL0MsVUFBVSxFQUFFLEdBQUcsQ0FBQyxFQUFFO1FBQ2QsTUFBTSxPQUFPLEdBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUNoRSxNQUFNLE9BQU8sR0FBRyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUU5QyxPQUFPLE9BQU87WUFDVixDQUFDLENBQUMsR0FBRyxPQUFPLHVDQUF1QyxPQUFPLDBCQUEwQjtZQUNwRixDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2IsQ0FBQztDQUNKLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBZ0IsbUJBQW1CLEVBQUU7SUFDbEYsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDWixJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWMsQ0FBQztRQUM1QixVQUFVLEVBQUUsdUJBQXVCLENBQUMsVUFBVTtRQUM5QyxZQUFZLEVBQUUsTUFBTSxDQUFDLHFCQUFxQixDQUFDO1FBQzNDLGdCQUFnQixFQUFFLE1BQU0sQ0FBQyx5QkFBeUIsQ0FBQztLQUN0RCxDQUFDO0NBQ0wsQ0FBQyxDQUFDO0FBRUgsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBSVgsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLE9BQU8sRUFBRSxlQUFlO0lBQ3hCLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSxJQUFJLFFBQVEsRUFBRSxFQUFFLGVBQWUsQ0FBQyxDQUFDO0lBQ3pELFVBQVUsRUFBRSxDQUFDLFFBQThCLEVBQUUsRUFBRSxDQUFDLCtDQUN6QyxDQUFDLFFBQVEsSUFBSSx1QkFBdUIsQ0FBQyxHQUNyQyxPQUFPLEtBQ1YsSUFBSSxFQUFFLFdBQVcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxtQkFBbUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1lBQ25DLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxLQUFJLFFBQVEsYUFBUixRQUFRLHVCQUFSLFFBQVEsQ0FBRSxJQUFJLENBQUEsSUFBSSx1QkFBdUIsQ0FBQyxJQUFJLElBQ3RFO0NBQ0wsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtGYWN0b3J5UHJvdmlkZXIsIGluamVjdCwgSW5qZWN0aW9uVG9rZW4sIE9wdGlvbmFsLCBTa2lwU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7XG4gICAgVHVpSGFuZGxlcixcbiAgICB0dWlJc1N0cmluZyxcbiAgICBUdWlTdHJpbmdIYW5kbGVyLFxuICAgIHR1aVN2Z0xpbmVhckdyYWRpZW50UHJvY2Vzc29yLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgVFVJX0lDT05TX1BBVEgsXG4gICAgVFVJX1NWR19DT05URU5UX1BST0NFU1NPUixcbiAgICBUVUlfU1ZHX1NSQ19QUk9DRVNTT1IsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Rva2Vucyc7XG5pbXBvcnQge3R1aUljb25zUGF0aEZhY3Rvcnl9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3V0aWxzJztcbmltcG9ydCB7aWRlbnRpdHl9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1RVSV9ERVBSRUNBVEVEX0lDT05TfSBmcm9tICcuL2RlcHJlY2F0ZWQtaWNvbnMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aVN2Z09wdGlvbnMge1xuICAgIHJlYWRvbmx5IHBhdGg6IFR1aVN0cmluZ0hhbmRsZXI8c3RyaW5nPjtcbiAgICByZWFkb25seSBkZXByZWNhdGVkOiBUdWlTdHJpbmdIYW5kbGVyPHN0cmluZz47XG4gICAgcmVhZG9ubHkgc3JjUHJvY2Vzc29yOiBUdWlIYW5kbGVyPFNhZmVIdG1sIHwgc3RyaW5nLCBTYWZlSHRtbCB8IHN0cmluZz47XG4gICAgcmVhZG9ubHkgY29udGVudFByb2Nlc3NvcjogVHVpSGFuZGxlcjxTYWZlSHRtbCB8IHN0cmluZywgU2FmZUh0bWwgfCBzdHJpbmc+O1xufVxuXG5leHBvcnQgY29uc3QgVFVJX1NWR19ERUZBVUxUX09QVElPTlM6IFR1aVN2Z09wdGlvbnMgPSB7XG4gICAgcGF0aDogdHVpSWNvbnNQYXRoRmFjdG9yeShgYXNzZXRzL3RhaWdhLXVpL2ljb25zYCksXG4gICAgc3JjUHJvY2Vzc29yOiBpZGVudGl0eSxcbiAgICBjb250ZW50UHJvY2Vzc29yOiB0dWlTdmdMaW5lYXJHcmFkaWVudFByb2Nlc3NvcixcbiAgICBkZXByZWNhdGVkOiBzcmMgPT4ge1xuICAgICAgICBjb25zdCBvbGRJY29uID0gc3JjLnJlcGxhY2UoYExhcmdlYCwgYGApLnJlcGxhY2UoYE91dGxpbmVgLCBgYCk7XG4gICAgICAgIGNvbnN0IG5ld0ljb24gPSBUVUlfREVQUkVDQVRFRF9JQ09OU1tvbGRJY29uXTtcblxuICAgICAgICByZXR1cm4gbmV3SWNvblxuICAgICAgICAgICAgPyBgJHtvbGRJY29ufS8oTGFyZ2V8T3V0bGluZSkgaXMgZGVwcmVjYXRlZCwgdXNlICR7bmV3SWNvbn0vKExhcmdlfE91dGxpbmUpIGluc3RlYWRgXG4gICAgICAgICAgICA6IGBgO1xuICAgIH0sXG59O1xuXG4vKipcbiAqIFNWRyBjb21wb25lbnQgb3B0aW9uc1xuICovXG5leHBvcnQgY29uc3QgVFVJX1NWR19PUFRJT05TID0gbmV3IEluamVjdGlvblRva2VuPFR1aVN2Z09wdGlvbnM+KGBbVFVJX1NWR19PUFRJT05TXWAsIHtcbiAgICBmYWN0b3J5OiAoKSA9PiAoe1xuICAgICAgICBwYXRoOiBpbmplY3QoVFVJX0lDT05TX1BBVEgpLFxuICAgICAgICBkZXByZWNhdGVkOiBUVUlfU1ZHX0RFRkFVTFRfT1BUSU9OUy5kZXByZWNhdGVkLFxuICAgICAgICBzcmNQcm9jZXNzb3I6IGluamVjdChUVUlfU1ZHX1NSQ19QUk9DRVNTT1IpLFxuICAgICAgICBjb250ZW50UHJvY2Vzc29yOiBpbmplY3QoVFVJX1NWR19DT05URU5UX1BST0NFU1NPUiksXG4gICAgfSksXG59KTtcblxuZXhwb3J0IGNvbnN0IHR1aVN2Z09wdGlvbnNQcm92aWRlcjogKFxuICAgIG9wdGlvbnM6IFBhcnRpYWw8T21pdDxUdWlTdmdPcHRpb25zLCAncGF0aCc+PiAmIHtcbiAgICAgICAgcGF0aD86IFR1aVN2Z09wdGlvbnNbJ3BhdGgnXSB8IHN0cmluZztcbiAgICB9LFxuKSA9PiBGYWN0b3J5UHJvdmlkZXIgPSBvcHRpb25zID0+ICh7XG4gICAgcHJvdmlkZTogVFVJX1NWR19PUFRJT05TLFxuICAgIGRlcHM6IFtbbmV3IFNraXBTZWxmKCksIG5ldyBPcHRpb25hbCgpLCBUVUlfU1ZHX09QVElPTlNdXSxcbiAgICB1c2VGYWN0b3J5OiAoZmFsbGJhY2s6IFR1aVN2Z09wdGlvbnMgfCBudWxsKSA9PiAoe1xuICAgICAgICAuLi4oZmFsbGJhY2sgfHwgVFVJX1NWR19ERUZBVUxUX09QVElPTlMpLFxuICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICBwYXRoOiB0dWlJc1N0cmluZyhvcHRpb25zLnBhdGgpXG4gICAgICAgICAgICA/IHR1aUljb25zUGF0aEZhY3Rvcnkob3B0aW9ucy5wYXRoKVxuICAgICAgICAgICAgOiBvcHRpb25zLnBhdGggfHwgZmFsbGJhY2s/LnBhdGggfHwgVFVJX1NWR19ERUZBVUxUX09QVElPTlMucGF0aCxcbiAgICB9KSxcbn0pO1xuIl19