import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, Inject, Self, } from '@angular/core';
import { TuiDestroyService, tuiIsNumber } from '@taiga-ui/cdk';
import { tuiFadeIn, tuiHeightCollapse, tuiSlideInRight } from '@taiga-ui/core/animations';
import { TUI_ANIMATION_OPTIONS, TUI_NOTIFICATION_OPTIONS, } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { fromEvent, timer } from 'rxjs';
import { repeatWhen, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/components/notification";
import * as i2 from "@angular/common";
import * as i3 from "@tinkoff/ng-polymorpheus";
import * as i4 from "@taiga-ui/cdk";
// TODO: get rid of $any in template
export class TuiAlertComponent {
    constructor(el, destroy$, options, animationOptions, item) {
        this.el = el;
        this.destroy$ = destroy$;
        this.options = options;
        this.animationOptions = animationOptions;
        this.item = item;
        this.autoClose = typeof this.item.autoClose === 'function'
            ? this.item.autoClose(this.item.status)
            : this.item.autoClose;
        this.animation = Object.assign({ value: '' }, this.animationOptions);
    }
    ngOnInit() {
        this.initAutoClose();
    }
    closeNotification() {
        this.item.$implicit.complete();
    }
    initAutoClose() {
        if (!this.autoClose) {
            return;
        }
        timer(tuiIsNumber(this.autoClose)
            ? this.autoClose
            : this.options.defaultAutoCloseTime)
            .pipe(takeUntil(fromEvent(this.el.nativeElement, 'mouseenter')), 
        /**
         * TODO: replace to
         * repeat({
         *    delay: () => fromEvent(this.el.nativeElement, 'mouseleave'),
         * })
         *
         * in RxJS 7
         */
        // eslint-disable-next-line rxjs/no-ignored-notifier
        repeatWhen(() => fromEvent(this.el.nativeElement, 'mouseleave')), takeUntil(this.destroy$))
            .subscribe(() => this.closeNotification());
    }
}
TuiAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertComponent, deps: [{ token: ElementRef }, { token: TuiDestroyService, self: true }, { token: TUI_NOTIFICATION_OPTIONS }, { token: TUI_ANIMATION_OPTIONS }, { token: POLYMORPHEUS_CONTEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiAlertComponent, selector: "tui-alert", host: { attributes: { "role": "alert" }, properties: { "@tuiFadeIn": "this.animation", "@tuiSlideInRight": "this.animation", "@tuiHeightCollapse": "this.animation" } }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-notification\n    [status]=\"item.status\"\n    [hasIcon]=\"item.hasIcon\"\n    [hideClose]=\"!item.hasCloseButton\"\n    (close)=\"closeNotification()\"\n>\n    <label\n        *ngIf=\"item.label\"\n        automation-id=\"tui-notification-alert__heading\"\n        class=\"t-heading\"\n    >\n        <!-- TODO: Polymorpheus fix type -->\n        <ng-container *polymorpheusOutlet=\"$any(item.label) as text; context: item\">\n            {{ text }}\n        </ng-container>\n    </label>\n    <div\n        automation-id=\"tui-notification-alert__content\"\n        class=\"t-content\"\n    >\n        <!-- TODO: Polymorpheus fix type -->\n        <div\n            *polymorpheusOutlet=\"item.content as text; context: $any(item)\"\n            [innerHTML]=\"text\"\n        ></div>\n    </div>\n</tui-notification>\n", styles: [":host{box-shadow:0 1.5rem 1rem #00000008,0 .75rem .75rem #0000000a,0 .25rem .375rem #0000000d;display:block;border-radius:var(--tui-radius-m);width:18rem;margin:2rem 3rem 0 auto}:host-context(tui-root._mobile) :host{margin:1rem 1rem 0 auto}:host:not(:first-child){margin-top:.75rem}.t-heading{font:var(--tui-font-text-m);line-height:1.25rem;font-weight:bold;margin:0}.t-content{color:var(--tui-text-01);word-wrap:break-word}.t-content:empty{display:none}\n"], components: [{ type: i1.TuiNotificationComponent, selector: "tui-notification", inputs: ["hasIcon", "status", "hideClose"], outputs: ["close"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-alert',
                    templateUrl: './alert.template.html',
                    styleUrls: ['./alert.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                    animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse],
                    host: { role: 'alert' },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i4.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NOTIFICATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }]; }, propDecorators: { animation: [{
                type: HostBinding,
                args: ['@tuiFadeIn']
            }, {
                type: HostBinding,
                args: ['@tuiSlideInRight']
            }, {
                type: HostBinding,
                args: ['@tuiHeightCollapse']
            }] } });
//# sourceMappingURL=data:application/json;base64,