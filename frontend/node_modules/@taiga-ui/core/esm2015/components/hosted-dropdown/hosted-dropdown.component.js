import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChild, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Optional, Output, Self, ViewChild, } from '@angular/core';
import { TuiActiveZoneDirective, tuiAsFocusableItemAccessor, tuiDefaultProp, tuiGetClosestFocusable, tuiIsElement, tuiIsElementEditable, tuiIsHTMLElement, tuiIsNativeFocusedIn, tuiIsNativeKeyboardFocusable, } from '@taiga-ui/cdk';
import { TuiPositionAccessor } from '@taiga-ui/core/abstract';
import { TuiDropdownDirective, TuiDropdownHoverDirective, } from '@taiga-ui/core/directives/dropdown';
import { tuiIsEditingKey } from '@taiga-ui/core/utils/miscellaneous';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import { BehaviorSubject, EMPTY, merge } from 'rxjs';
import { distinctUntilChanged, skip } from 'rxjs/operators';
import { TuiAccessorProxyDirective } from './accessor-proxy.directive';
import { TuiHostedDropdownConnectorDirective } from './hosted-dropdown-connector.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
import * as i2 from "./accessor-proxy.directive";
import * as i3 from "@taiga-ui/core/directives/dropdown";
import * as i4 from "@tinkoff/ng-polymorpheus";
import * as i5 from "@angular/common";
function shouldClose(event) {
    var _a;
    return ('key' in event &&
        event.key.toLowerCase() === 'escape' &&
        this.canOpen &&
        this.open &&
        !((_a = this.dropdown) === null || _a === void 0 ? void 0 : _a.nextElementSibling));
}
/* eslint-disable @typescript-eslint/member-ordering */
export class TuiHostedDropdownComponent {
    constructor(hover$, el) {
        this.hover$ = hover$;
        this.el = el;
        /** TODO: rename in 4.0 */
        this.openChange = new BehaviorSubject(false);
        this.sided = false;
        this.canOpen = true;
        this.open$ = merge(this.openChange, this.hover$ || EMPTY).pipe(skip(1), distinctUntilChanged());
        this.focusedChange = new EventEmitter();
        this.close = () => this.updateOpen(false);
    }
    set open(open) {
        this.openChange.next(open);
    }
    get open() {
        return this.openChange.value;
    }
    get host() {
        var _a;
        return ((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) || this.el.nativeElement;
    }
    get computedHost() {
        var _a;
        return (((_a = this.dropdownHost) === null || _a === void 0 ? void 0 : _a.nativeElement) ||
            this.nativeFocusableElement ||
            this.el.nativeElement);
    }
    get dropdown() {
        var _a, _b;
        return (_b = (_a = this.dropdownDirective) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;
    }
    get nativeFocusableElement() {
        return tuiIsNativeKeyboardFocusable(this.host)
            ? this.host
            : tuiGetClosestFocusable({
                initial: this.host,
                root: this.el.nativeElement,
            });
    }
    get focused() {
        return (tuiIsNativeFocusedIn(this.host) ||
            (this.open &&
                !!this.wrapper &&
                tuiIsNativeFocusedIn(this.wrapper.nativeElement)));
    }
    onFocusIn(target) {
        if (!this.computedHost.contains(target)) {
            this.updateOpen(false);
        }
    }
    onClick(target) {
        var _a;
        if (!this.hostEditable &&
            this.computedHost.contains(target) &&
            !((_a = this.hover$) === null || _a === void 0 ? void 0 : _a.hovered)) {
            this.updateOpen(!this.open);
        }
    }
    onKeyDownEsc(event) {
        event.stopPropagation();
        this.closeDropdown();
    }
    onArrow(event, down) {
        this.focusDropdown(event, down);
    }
    onKeydown({ key, target, defaultPrevented }) {
        if (!defaultPrevented &&
            tuiIsEditingKey(key) &&
            this.hostEditable &&
            tuiIsHTMLElement(target) &&
            !tuiIsElementEditable(target)) {
            this.focusHost();
        }
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (!active) {
            this.updateOpen(false);
        }
    }
    onHostObscured(obscured) {
        if (obscured) {
            this.closeDropdown();
        }
    }
    updateOpen(open) {
        if (!open || this.canOpen) {
            this.open = open;
        }
    }
    get hostEditable() {
        return tuiIsElementEditable(this.computedHost);
    }
    focusDropdown(event, first) {
        const host = this.nativeFocusableElement;
        if (!host ||
            !tuiIsHTMLElement(host) ||
            !tuiIsElement(event.target) ||
            !host.contains(event.target)) {
            return;
        }
        if (!this.wrapper ||
            !this.open ||
            !this.dropdown ||
            !tuiIsHTMLElement(this.wrapper.nativeElement.nextElementSibling)) {
            this.updateOpen(true);
            if (!tuiIsElementEditable(host)) {
                event.preventDefault();
            }
            return;
        }
        const initial = first
            ? this.wrapper.nativeElement
            : this.wrapper.nativeElement.nextElementSibling;
        const focusable = tuiGetClosestFocusable({
            initial,
            root: this.wrapper.nativeElement,
            previous: !first,
        });
        if (!focusable) {
            return;
        }
        focusable.focus();
        event.preventDefault();
    }
    closeDropdown() {
        if (this.focused) {
            this.focusHost();
        }
        this.updateOpen(false);
    }
    focusHost() {
        const host = this.nativeFocusableElement;
        if (host) {
            host.focus({ preventScroll: true });
        }
    }
    updateFocused(focused) {
        this.focusedChange.emit(focused);
    }
}
TuiHostedDropdownComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownComponent, deps: [{ token: TuiDropdownHoverDirective, optional: true }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiHostedDropdownComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: { content: "content", sided: "sided", canOpen: "canOpen", open: "open" }, outputs: { open$: "openChange", focusedChange: "focusedChange" }, host: { listeners: { "focusin": "onFocusIn($event.target)", "click": "onClick($event.target)", "document:keydown.silent": "onKeyDownEsc($event)", "keydown.arrowDown": "onArrow($event,true)", "keydown.arrowUp": "onArrow($event,false)" }, properties: { "class._hosted_dropdown_focused": "this.focused" } }, providers: [
        tuiAsFocusableItemAccessor(TuiHostedDropdownComponent),
        {
            provide: TuiAccessorProxyDirective,
            deps: [[new Optional(), new Self(), TuiPositionAccessor]],
            useFactory: (position) => position === null || position === void 0 ? void 0 : position[0],
        },
    ], queries: [{ propertyName: "dropdownHost", first: true, predicate: TuiHostedDropdownConnectorDirective, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true, read: ElementRef }, { propertyName: "dropdownDirective", first: true, predicate: TuiDropdownDirective, descendants: true }, { propertyName: "activeZone", first: true, predicate: TuiActiveZoneDirective, descendants: true }], ngImport: i0, template: "<div\n    *tuiLet=\"!!(open$ | async) as isOpen\"\n    #activeZone=\"tuiActiveZone\"\n    tuiAccessorProxy\n    class=\"t-wrapper\"\n    [tuiDropdownSided]=\"sided\"\n    [tuiDropdown]=\"dropdown\"\n    [tuiDropdownManual]=\"isOpen && canOpen\"\n    [tuiObscuredEnabled]=\"isOpen\"\n    (tuiObscured)=\"onHostObscured($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <ng-content></ng-content>\n    <ng-template\n        #dropdown=\"polymorpheus\"\n        [polymorpheus]=\"context\"\n    >\n        <div\n            #wrapper\n            (keydown)=\"onKeydown($event)\"\n        >\n            <ng-container\n                *polymorpheusOutlet=\"\n                    content as text;\n                    context: {\n                        $implicit: activeZone,\n                        close: close\n                    }\n                \"\n            >\n                {{ text }}\n            </ng-container>\n        </div>\n        <!--This DIV is here to start backwards TreeWalker for focusing last focusable item on ArrowUp-->\n        <div></div>\n    </ng-template>\n</div>\n", styles: [":host{display:inline-flex}.t-wrapper{border-radius:inherit;height:inherit;flex:1 1 auto;width:100%}\n"], directives: [{ type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.TuiAccessorProxyDirective, selector: "[tuiAccessorProxy]" }, { type: i3.TuiDropdownPositionSidedDirective, selector: "[tuiDropdownSided]", inputs: ["tuiDropdownSided", "tuiDropdownSidedOffset"] }, { type: i3.TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container)", inputs: ["tuiDropdown"], exportAs: ["tuiDropdown"] }, { type: i3.TuiDropdownDriverDirective, selector: "[tuiDropdown]" }, { type: i3.TuiDropdownManualDirective, selector: "[tuiDropdown][tuiDropdownManual]", inputs: ["tuiDropdownManual"] }, { type: i1.TuiObscuredDirective, selector: "[tuiObscured]", inputs: ["tuiObscuredEnabled"], outputs: ["tuiObscured"] }, { type: i1.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i4.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiHostedDropdownComponent.prototype, "sided", void 0);
__decorate([
    tuiDefaultProp()
], TuiHostedDropdownComponent.prototype, "canOpen", void 0);
__decorate([
    tuiDefaultProp()
], TuiHostedDropdownComponent.prototype, "open", null);
__decorate([
    shouldCall(shouldClose)
], TuiHostedDropdownComponent.prototype, "onKeyDownEsc", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHostedDropdownComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-hosted-dropdown',
                    templateUrl: './hosted-dropdown.template.html',
                    styleUrls: ['./hosted-dropdown.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiHostedDropdownComponent),
                        {
                            provide: TuiAccessorProxyDirective,
                            deps: [[new Optional(), new Self(), TuiPositionAccessor]],
                            useFactory: (position) => position === null || position === void 0 ? void 0 : position[0],
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i3.TuiDropdownHoverDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDropdownHoverDirective]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { dropdownHost: [{
                type: ContentChild,
                args: [TuiHostedDropdownConnectorDirective, { read: ElementRef }]
            }], wrapper: [{
                type: ViewChild,
                args: ['wrapper', { read: ElementRef }]
            }], dropdownDirective: [{
                type: ViewChild,
                args: [TuiDropdownDirective]
            }], activeZone: [{
                type: ViewChild,
                args: [TuiActiveZoneDirective]
            }], content: [{
                type: Input
            }], sided: [{
                type: Input
            }], canOpen: [{
                type: Input
            }], open$: [{
                type: Output,
                args: ['openChange']
            }], focusedChange: [{
                type: Output
            }], open: [{
                type: Input
            }], focused: [{
                type: HostBinding,
                args: ['class._hosted_dropdown_focused']
            }], onFocusIn: [{
                type: HostListener,
                args: ['focusin', ['$event.target']]
            }], onClick: [{
                type: HostListener,
                args: ['click', ['$event.target']]
            }], onKeyDownEsc: [{
                type: HostListener,
                args: ['document:keydown.silent', ['$event']]
            }], onArrow: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['$event', 'true']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp', ['$event', 'false']]
            }] } });
//# sourceMappingURL=data:application/json;base64,