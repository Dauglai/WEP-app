import { DOCUMENT, ViewportScroller } from '@angular/common';
import { Directive, ElementRef, Inject, Input, NgZone, Optional, Renderer2, Self, } from '@angular/core';
import { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';
import { POLLING_TIME, TuiDestroyService, tuiPreventDefault, tuiStopPropagation, tuiTypedFromEvent, tuiZonefree, } from '@taiga-ui/cdk';
import { TUI_ELEMENT_REF, TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { fromEvent, merge } from 'rxjs';
import { map, switchMap, takeUntil, throttleTime } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "@angular/common";
const MIN_WIDTH = 24;
export class TuiScrollbarDirective {
    constructor(ngZone, renderer, destroy$, animationFrame$, wrapper, container, doc, win, el, viewportScroller) {
        this.wrapper = wrapper;
        this.container = container;
        this.doc = doc;
        this.win = win;
        this.el = el;
        this.viewportScroller = viewportScroller;
        this.tuiScrollbar = 'vertical';
        const { nativeElement } = this.el;
        const mousedown$ = tuiTypedFromEvent(nativeElement, 'mousedown');
        const mousemove$ = tuiTypedFromEvent(this.doc, 'mousemove');
        const mouseup$ = tuiTypedFromEvent(this.doc, 'mouseup');
        const mousedownWrapper$ = tuiTypedFromEvent(wrapper.nativeElement, 'mousedown');
        merge(mousedownWrapper$.pipe(tuiPreventDefault(), map(event => this.getScrolled(event, 0.5, 0.5))), mousedown$.pipe(tuiPreventDefault(), tuiStopPropagation(), switchMap(event => {
            const rect = nativeElement.getBoundingClientRect();
            const vertical = getOffsetVertical(event, rect);
            const horizontal = getOffsetHorizontal(event, rect);
            return mousemove$.pipe(map(event => this.getScrolled(event, vertical, horizontal)), takeUntil(mouseup$));
        })))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(([scrollTop, scrollLeft]) => {
            const [x, y] = this.viewportScroller.getScrollPosition();
            if (!this.container) {
                this.viewportScroller.scrollToPosition([
                    this.tuiScrollbar === 'vertical' ? x : scrollLeft,
                    this.tuiScrollbar === 'vertical' ? scrollTop : y,
                ]);
                return;
            }
            if (this.tuiScrollbar === 'vertical') {
                renderer.setProperty(this.container.nativeElement, 'scrollTop', scrollTop);
            }
            else {
                renderer.setProperty(this.container.nativeElement, 'scrollLeft', scrollLeft);
            }
        });
        merge(fromEvent(this.container ? this.container.nativeElement : this.win, 'scroll'), animationFrame$.pipe(throttleTime(POLLING_TIME)))
            .pipe(tuiZonefree(ngZone), takeUntil(destroy$))
            .subscribe(() => {
            if (this.tuiScrollbar === 'vertical') {
                renderer.setStyle(nativeElement, 'top', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'height', `${this.view * 100}%`);
            }
            else {
                renderer.setStyle(nativeElement, 'left', `${this.thumb * 100}%`);
                renderer.setStyle(nativeElement, 'width', `${this.view * 100}%`);
            }
        });
    }
    get scrolled() {
        const { scrollTop, scrollHeight, clientHeight, scrollLeft, scrollWidth, clientWidth, } = this.computedContainer;
        return this.tuiScrollbar === 'vertical'
            ? scrollTop / (scrollHeight - clientHeight)
            : scrollLeft / (scrollWidth - clientWidth);
    }
    get compensation() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.computedContainer;
        if (((clientHeight * clientHeight) / scrollHeight > MIN_WIDTH &&
            this.tuiScrollbar === 'vertical') ||
            ((clientWidth * clientWidth) / scrollWidth > MIN_WIDTH &&
                this.tuiScrollbar === 'horizontal')) {
            return 0;
        }
        return this.tuiScrollbar === 'vertical'
            ? MIN_WIDTH / clientHeight
            : MIN_WIDTH / clientWidth;
    }
    get thumb() {
        const compensation = this.compensation || this.view;
        return this.scrolled * (1 - compensation);
    }
    get view() {
        const { clientHeight, scrollHeight, clientWidth, scrollWidth } = this.computedContainer;
        return this.tuiScrollbar === 'vertical'
            ? Math.ceil((clientHeight / scrollHeight) * 100) / 100
            : Math.ceil((clientWidth / scrollWidth) * 100) / 100;
    }
    get computedContainer() {
        var _a;
        return ((_a = this.container) === null || _a === void 0 ? void 0 : _a.nativeElement) || this.doc.documentElement;
    }
    getScrolled({ clientY, clientX }, offsetVertical, offsetHorizontal) {
        const { offsetHeight, offsetWidth } = this.el.nativeElement;
        const { top, left, width, height } = this.wrapper.nativeElement.getBoundingClientRect();
        const maxTop = this.computedContainer.scrollHeight - height;
        const maxLeft = this.computedContainer.scrollWidth - width;
        const scrolledTop = (clientY - top - offsetHeight * offsetVertical) / (height - offsetHeight);
        const scrolledLeft = (clientX - left - offsetWidth * offsetHorizontal) / (width - offsetWidth);
        return [maxTop * scrolledTop, maxLeft * scrolledLeft];
    }
}
TuiScrollbarDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarDirective, deps: [{ token: NgZone }, { token: Renderer2 }, { token: TuiDestroyService, self: true }, { token: ANIMATION_FRAME }, { token: TUI_ELEMENT_REF }, { token: TUI_SCROLL_REF, optional: true }, { token: DOCUMENT }, { token: WINDOW }, { token: ElementRef }, { token: ViewportScroller }], target: i0.ɵɵFactoryTarget.Directive });
TuiScrollbarDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollbarDirective, selector: "[tuiScrollbar]", inputs: { tuiScrollbar: "tuiScrollbar" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiScrollbar]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TUI_ELEMENT_REF]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_SCROLL_REF]
                }] }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.ViewportScroller, decorators: [{
                    type: Inject,
                    args: [ViewportScroller]
                }] }]; }, propDecorators: { tuiScrollbar: [{
                type: Input
            }] } });
function getOffsetVertical({ clientY }, { top, height }) {
    return (clientY - top) / height;
}
function getOffsetHorizontal({ clientX }, { left, width }) {
    return (clientX - left) / width;
}
//# sourceMappingURL=data:application/json;base64,