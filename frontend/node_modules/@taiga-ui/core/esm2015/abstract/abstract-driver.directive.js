import { Directive, Inject, Self } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { merge } from 'rxjs';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { TuiDriver } from './driver';
import { TuiVehicle } from './vehicle';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class AbstractTuiDriverDirective {
    constructor(destroy$, drivers, vehicles) {
        this.destroy$ = destroy$;
        this.drivers = drivers;
        this.vehicles = vehicles;
    }
    ngOnInit() {
        const vehicle = this.vehicles.find(({ type }) => type === this.type);
        merge(...this.drivers.filter(({ type }) => type === this.type))
            .pipe(distinctUntilChanged(), takeUntil(this.destroy$))
            .subscribe(value => {
            vehicle === null || vehicle === void 0 ? void 0 : vehicle.toggle(value);
        });
    }
}
AbstractTuiDriverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDriverDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiDriver }, { token: TuiVehicle }], target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiDriverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiDriverDirective, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDriverDirective, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiDriver]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiVehicle]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZHJpdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvYWJzdHJhY3QvYWJzdHJhY3QtZHJpdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBVSxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFBQyxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRS9ELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFDbkMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFdBQVcsQ0FBQzs7O0FBR3JDLE1BQU0sT0FBZ0IsMEJBQTBCO0lBRzVDLFlBQ3dELFFBQTZCLEVBQzdDLE9BQW9CLEVBQ25CLFFBQXNCO1FBRlAsYUFBUSxHQUFSLFFBQVEsQ0FBcUI7UUFDN0MsWUFBTyxHQUFQLE9BQU8sQ0FBYTtRQUNuQixhQUFRLEdBQVIsUUFBUSxDQUFjO0lBQzVELENBQUM7SUFFSixRQUFRO1FBQ0osTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUFDLElBQUksRUFBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRW5FLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBQyxJQUFJLEVBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4RCxJQUFJLENBQUMsb0JBQW9CLEVBQUUsRUFBRSxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3RELFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUNmLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDOzt3SEFqQmlCLDBCQUEwQixrQkFJeEIsaUJBQWlCLHlCQUN6QixTQUFTLGFBQ1QsVUFBVTs0R0FOSiwwQkFBMEI7NEZBQTFCLDBCQUEwQjtrQkFEL0MsU0FBUzs7MEJBS0QsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLFNBQVM7OzBCQUNoQixNQUFNOzJCQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBPbkluaXQsIFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge21lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aURyaXZlcn0gZnJvbSAnLi9kcml2ZXInO1xuaW1wb3J0IHtUdWlWZWhpY2xlfSBmcm9tICcuL3ZlaGljbGUnO1xuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aURyaXZlckRpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgYWJzdHJhY3QgdHlwZTogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBkZXN0cm95JDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChUdWlEcml2ZXIpIHByaXZhdGUgcmVhZG9ubHkgZHJpdmVyczogVHVpRHJpdmVyW10sXG4gICAgICAgIEBJbmplY3QoVHVpVmVoaWNsZSkgcHJpdmF0ZSByZWFkb25seSB2ZWhpY2xlczogVHVpVmVoaWNsZVtdLFxuICAgICkge31cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICBjb25zdCB2ZWhpY2xlID0gdGhpcy52ZWhpY2xlcy5maW5kKCh7dHlwZX0pID0+IHR5cGUgPT09IHRoaXMudHlwZSk7XG5cbiAgICAgICAgbWVyZ2UoLi4udGhpcy5kcml2ZXJzLmZpbHRlcigoe3R5cGV9KSA9PiB0eXBlID09PSB0aGlzLnR5cGUpKVxuICAgICAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgdGFrZVVudGlsKHRoaXMuZGVzdHJveSQpKVxuICAgICAgICAgICAgLnN1YnNjcmliZSh2YWx1ZSA9PiB7XG4gICAgICAgICAgICAgICAgdmVoaWNsZT8udG9nZ2xlKHZhbHVlKTtcbiAgICAgICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==