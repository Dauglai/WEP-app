import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Optional, Self, } from '@angular/core';
import { tuiClamp, TuiDestroyService, TuiHoveredService, tuiPure, tuiPx, } from '@taiga-ui/cdk';
import { tuiPositionAccessorFor, TuiRectAccessor, tuiRectAccessorFor, } from '@taiga-ui/core/abstract';
import { tuiFadeIn } from '@taiga-ui/core/animations';
import { TuiModeDirective } from '@taiga-ui/core/directives/mode';
import { TuiPositionService, TuiVisualViewportService } from '@taiga-ui/core/services';
import { TUI_ANIMATION_OPTIONS } from '@taiga-ui/core/tokens';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
import { map, takeUntil } from 'rxjs/operators';
// eslint-disable-next-line import/no-cycle
import { TuiHintDirective } from './hint.directive';
import { TuiHintHoverDirective } from './hint-hover.directive';
import { TuiHintPointerDirective } from './hint-pointer.directive';
import * as i0 from "@angular/core";
import * as i1 from "@tinkoff/ng-polymorpheus";
import * as i2 from "rxjs";
import * as i3 from "@taiga-ui/core/abstract";
import * as i4 from "./hint-hover.directive";
import * as i5 from "@taiga-ui/core/directives/mode";
import * as i6 from "@taiga-ui/core/services";
export class TuiHintComponent {
    constructor(hovered$, position$, destroy$, accessor, el, options, polymorpheus, hover, pointer, mode, visualViewportService) {
        var _a;
        this.accessor = accessor;
        this.el = el;
        this.options = options;
        this.polymorpheus = polymorpheus;
        this.hover = hover;
        this.pointer = pointer;
        this.mode = mode;
        this.visualViewportService = visualViewportService;
        this.animation = Object.assign({ value: '' }, this.options);
        this.appearance = this.polymorpheus.$implicit.appearance || ((_a = this.mode) === null || _a === void 0 ? void 0 : _a.mode);
        this.untouchable = !!this.pointer;
        position$
            .pipe(map(point => this.visualViewportService.correct(point)), takeUntil(destroy$))
            .subscribe(([top, left]) => {
            this.update(top, left);
        });
        hovered$.pipe(takeUntil(destroy$)).subscribe(hover => this.hover.toggle(hover));
    }
    get content() {
        return this.polymorpheus.$implicit.content;
    }
    get context() {
        return this.polymorpheus.$implicit.context;
    }
    onClick(target) {
        if (!this.el.nativeElement.contains(target) &&
            !this.hover.el.nativeElement.contains(target)) {
            this.hover.toggle(false);
        }
    }
    update(top, left) {
        const { height, width } = this.el.nativeElement.getBoundingClientRect();
        const { style } = this.el.nativeElement;
        const rect = this.accessor.getClientRect();
        const safeLeft = Math.max(left, 4);
        const [beakTop, beakLeft] = this.visualViewportService.correct([
            rect.top + rect.height / 2 - top,
            rect.left + rect.width / 2 - safeLeft,
        ]);
        style.top = tuiPx(top);
        style.left = tuiPx(safeLeft);
        style.setProperty('--top', tuiPx(tuiClamp(beakTop, 0.5, height - 1)));
        style.setProperty('--left', tuiPx(tuiClamp(beakLeft, 0.5, width - 1)));
    }
}
TuiHintComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintComponent, deps: [{ token: TuiHoveredService }, { token: TuiPositionService }, { token: TuiDestroyService, self: true }, { token: TuiRectAccessor }, { token: ElementRef }, { token: TUI_ANIMATION_OPTIONS }, { token: POLYMORPHEUS_CONTEXT }, { token: TuiHintHoverDirective }, { token: TuiHintPointerDirective, optional: true }, { token: TuiModeDirective, optional: true }, { token: TuiVisualViewportService }], target: i0.ɵɵFactoryTarget.Component });
TuiHintComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintComponent, selector: "tui-hint", host: { listeners: { "document:click": "onClick($event.target)" }, properties: { "@tuiFadeIn": "this.animation", "attr.data-appearance": "this.appearance", "class._untouchable": "this.untouchable" } }, providers: [
        TuiDestroyService,
        TuiPositionService,
        TuiHoveredService,
        tuiPositionAccessorFor('hint'),
        tuiRectAccessorFor('hint', TuiHintDirective),
    ], ngImport: i0, template: `
        <span
            *polymorpheusOutlet="content as text; context: context"
            [innerHTML]="text"
        ></span>
    `, isInline: true, styles: [":host{position:absolute;max-width:18rem;min-height:var(--tui-height-m);padding:.75rem 1rem;background:var(--tui-primary);border-radius:var(--tui-radius-l);color:var(--tui-primary-text);box-sizing:border-box;font:var(--tui-font-text-s);white-space:pre-line;word-wrap:break-word}:host:before{content:\"\";position:absolute;top:var(--top);left:var(--left);width:.5rem;height:.5rem;border-radius:.125rem;box-sizing:border-box;background:inherit;transform:translate(-50%,-50%) rotate(45deg)}:host[data-appearance=error]{background:var(--tui-error-fill)}:host[data-appearance=onDark]{background:var(--tui-elevation-01);color:var(--tui-text-01);filter:drop-shadow(0 0 .125rem rgba(0,0,0,.16)) drop-shadow(0 1.5rem 1rem rgba(0,0,0,.03)) drop-shadow(0 .75rem .75rem rgba(0,0,0,.04)) drop-shadow(0 .25rem .375rem rgba(0,0,0,.05))}:host:not([style*=\"top\"]){visibility:hidden}:host._untouchable{pointer-events:none}\n"], directives: [{ type: i1.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiHintComponent.prototype, "update", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-hint',
                    template: `
        <span
            *polymorpheusOutlet="content as text; context: context"
            [innerHTML]="text"
        ></span>
    `,
                    styleUrls: ['./hint.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiPositionService,
                        TuiHoveredService,
                        tuiPositionAccessorFor('hint'),
                        tuiRectAccessorFor('hint', TuiHintDirective),
                    ],
                    animations: [tuiFadeIn],
                }]
        }], ctorParameters: function () { return [{ type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }, { type: i2.Observable, decorators: [{
                    type: Inject,
                    args: [TuiPositionService]
                }] }, { type: i2.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i3.TuiRectAccessor, decorators: [{
                    type: Inject,
                    args: [TuiRectAccessor]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: i4.TuiHintHoverDirective, decorators: [{
                    type: Inject,
                    args: [TuiHintHoverDirective]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintPointerDirective]
                }] }, { type: i5.TuiModeDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiModeDirective]
                }] }, { type: i6.TuiVisualViewportService, decorators: [{
                    type: Inject,
                    args: [TuiVisualViewportService]
                }] }]; }, propDecorators: { animation: [{
                type: HostBinding,
                args: ['@tuiFadeIn']
            }], appearance: [{
                type: HostBinding,
                args: ['attr.data-appearance']
            }], untouchable: [{
                type: HostBinding,
                args: ['class._untouchable']
            }], onClick: [{
                type: HostListener,
                args: ['document:click', ['$event.target']]
            }], update: [] } });
//# sourceMappingURL=data:application/json;base64,