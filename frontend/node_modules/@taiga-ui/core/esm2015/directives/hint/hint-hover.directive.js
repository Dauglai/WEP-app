import { __decorate } from "tslib";
/* eslint-disable rxjs/no-unsafe-takeuntil */
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { tuiDefaultProp, TuiHoveredService } from '@taiga-ui/cdk';
import { tuiAsDriver, TuiDriver } from '@taiga-ui/core/abstract';
import { merge, of, Subject } from 'rxjs';
import { delay, filter, repeat, switchMap, takeUntil, tap } from 'rxjs/operators';
import { TUI_HINT_OPTIONS } from './hint-options.directive';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiHintHoverDirective extends TuiDriver {
    constructor(hovered$, options, el) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.hovered$ = hovered$;
        this.options = options;
        this.el = el;
        this.visible = false;
        this.toggle$ = new Subject();
        this.stream$ = merge(this.toggle$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? 0 : this.hideDelay))), takeUntil(this.hovered$), repeat()), this.hovered$.pipe(switchMap(visible => of(visible).pipe(delay(visible ? this.showDelay : this.hideDelay))), takeUntil(this.toggle$), repeat())).pipe(filter(() => this.enabled), tap(visible => {
            this.visible = visible;
        }));
        this.showDelay = this.options.showDelay;
        this.hideDelay = this.options.hideDelay;
        this.type = 'hint';
        this.enabled = true;
    }
    toggle(visible = !this.visible) {
        this.toggle$.next(visible);
    }
}
TuiHintHoverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintHoverDirective, deps: [{ token: TuiHoveredService }, { token: TUI_HINT_OPTIONS }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintHoverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container)", inputs: { showDelay: ["tuiHintShowDelay", "showDelay"], hideDelay: ["tuiHintHideDelay", "hideDelay"] }, providers: [tuiAsDriver(TuiHintHoverDirective), TuiHoveredService], exportAs: ["tuiHintHover"], usesInheritance: true, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiHintHoverDirective.prototype, "showDelay", void 0);
__decorate([
    tuiDefaultProp()
], TuiHintHoverDirective.prototype, "hideDelay", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintHoverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHint]:not(ng-container)',
                    exportAs: 'tuiHintHover',
                    providers: [tuiAsDriver(TuiHintHoverDirective), TuiHoveredService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { showDelay: [{
                type: Input,
                args: ['tuiHintShowDelay']
            }], hideDelay: [{
                type: Input,
                args: ['tuiHintHideDelay']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1ob3Zlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvaGludC9oaW50LWhvdmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsNkNBQTZDO0FBQzdDLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLGNBQWMsRUFBRSxpQkFBaUIsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUMsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxLQUFLLEVBQWMsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNwRCxPQUFPLEVBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVoRixPQUFPLEVBQUMsZ0JBQWdCLEVBQWlCLE1BQU0sMEJBQTBCLENBQUM7OztBQU8xRSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsU0FBUztJQW1DaEQsWUFDZ0QsUUFBNkIsRUFDOUIsT0FBdUIsRUFDckMsRUFBMkI7UUFFeEQsS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUpaLGFBQVEsR0FBUixRQUFRLENBQXFCO1FBQzlCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBQ3JDLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBckNwRCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBQ1AsWUFBTyxHQUFHLElBQUksT0FBTyxFQUFXLENBQUM7UUFDakMsWUFBTyxHQUFHLEtBQUssQ0FDNUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQ2IsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQzNFLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQ3hCLE1BQU0sRUFBRSxDQUNYLEVBQ0QsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQ2QsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ2hCLEVBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQ3JFLEVBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFDdkIsTUFBTSxFQUFFLENBQ1gsQ0FDSixDQUFDLElBQUksQ0FDRixNQUFNLENBQUMsR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxFQUMxQixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDVixJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUMzQixDQUFDLENBQUMsQ0FDTCxDQUFDO1FBSUYsY0FBUyxHQUFnQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUloRSxjQUFTLEdBQWdDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBRXZELFNBQUksR0FBRyxNQUFNLENBQUM7UUFFdkIsWUFBTyxHQUFHLElBQUksQ0FBQztJQVFmLENBQUM7SUFFRCxNQUFNLENBQUMsT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU87UUFDMUIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDL0IsQ0FBQzs7bUhBN0NRLHFCQUFxQixrQkFvQ2xCLGlCQUFpQixhQUNqQixnQkFBZ0IsYUFDaEIsVUFBVTt1R0F0Q2IscUJBQXFCLDhKQUZuQixDQUFDLFdBQVcsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFLGlCQUFpQixDQUFDO0FBMkJsRTtJQURDLGNBQWMsRUFBRTt3REFDK0M7QUFJaEU7SUFEQyxjQUFjLEVBQUU7d0RBQytDOzRGQTdCdkQscUJBQXFCO2tCQUxqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLFFBQVEsRUFBRSxjQUFjO29CQUN4QixTQUFTLEVBQUUsQ0FBQyxXQUFXLHVCQUF1QixFQUFFLGlCQUFpQixDQUFDO2lCQUNyRTs7MEJBcUNRLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDeEIsTUFBTTsyQkFBQyxnQkFBZ0I7OzBCQUN2QixNQUFNOzJCQUFDLFVBQVU7NENBYnRCLFNBQVM7c0JBRlIsS0FBSzt1QkFBQyxrQkFBa0I7Z0JBTXpCLFNBQVM7c0JBRlIsS0FBSzt1QkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSByeGpzL25vLXVuc2FmZS10YWtldW50aWwgKi9cbmltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIFR1aUhvdmVyZWRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7dHVpQXNEcml2ZXIsIFR1aURyaXZlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvYWJzdHJhY3QnO1xuaW1wb3J0IHttZXJnZSwgT2JzZXJ2YWJsZSwgb2YsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWxheSwgZmlsdGVyLCByZXBlYXQsIHN3aXRjaE1hcCwgdGFrZVVudGlsLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUVUlfSElOVF9PUFRJT05TLCBUdWlIaW50T3B0aW9uc30gZnJvbSAnLi9oaW50LW9wdGlvbnMuZGlyZWN0aXZlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpSGludF06bm90KG5nLWNvbnRhaW5lciknLFxuICAgIGV4cG9ydEFzOiAndHVpSGludEhvdmVyJyxcbiAgICBwcm92aWRlcnM6IFt0dWlBc0RyaXZlcihUdWlIaW50SG92ZXJEaXJlY3RpdmUpLCBUdWlIb3ZlcmVkU2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUhpbnRIb3ZlckRpcmVjdGl2ZSBleHRlbmRzIFR1aURyaXZlciB7XG4gICAgcHJpdmF0ZSB2aXNpYmxlID0gZmFsc2U7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0b2dnbGUkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHN0cmVhbSQgPSBtZXJnZShcbiAgICAgICAgdGhpcy50b2dnbGUkLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAodmlzaWJsZSA9PiBvZih2aXNpYmxlKS5waXBlKGRlbGF5KHZpc2libGUgPyAwIDogdGhpcy5oaWRlRGVsYXkpKSksXG4gICAgICAgICAgICB0YWtlVW50aWwodGhpcy5ob3ZlcmVkJCksXG4gICAgICAgICAgICByZXBlYXQoKSxcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5ob3ZlcmVkJC5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKHZpc2libGUgPT5cbiAgICAgICAgICAgICAgICBvZih2aXNpYmxlKS5waXBlKGRlbGF5KHZpc2libGUgPyB0aGlzLnNob3dEZWxheSA6IHRoaXMuaGlkZURlbGF5KSksXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgdGFrZVVudGlsKHRoaXMudG9nZ2xlJCksXG4gICAgICAgICAgICByZXBlYXQoKSxcbiAgICAgICAgKSxcbiAgICApLnBpcGUoXG4gICAgICAgIGZpbHRlcigoKSA9PiB0aGlzLmVuYWJsZWQpLFxuICAgICAgICB0YXAodmlzaWJsZSA9PiB7XG4gICAgICAgICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlO1xuICAgICAgICB9KSxcbiAgICApO1xuXG4gICAgQElucHV0KCd0dWlIaW50U2hvd0RlbGF5JylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNob3dEZWxheTogVHVpSGludE9wdGlvbnNbJ3Nob3dEZWxheSddID0gdGhpcy5vcHRpb25zLnNob3dEZWxheTtcblxuICAgIEBJbnB1dCgndHVpSGludEhpZGVEZWxheScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBoaWRlRGVsYXk6IFR1aUhpbnRPcHRpb25zWydoaWRlRGVsYXknXSA9IHRoaXMub3B0aW9ucy5oaWRlRGVsYXk7XG5cbiAgICByZWFkb25seSB0eXBlID0gJ2hpbnQnO1xuXG4gICAgZW5hYmxlZCA9IHRydWU7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlIb3ZlcmVkU2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBob3ZlcmVkJDogT2JzZXJ2YWJsZTxib29sZWFuPixcbiAgICAgICAgQEluamVjdChUVUlfSElOVF9PUFRJT05TKSBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFR1aUhpbnRPcHRpb25zLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoc3Vic2NyaWJlciA9PiB0aGlzLnN0cmVhbSQuc3Vic2NyaWJlKHN1YnNjcmliZXIpKTtcbiAgICB9XG5cbiAgICB0b2dnbGUodmlzaWJsZSA9ICF0aGlzLnZpc2libGUpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50b2dnbGUkLm5leHQodmlzaWJsZSk7XG4gICAgfVxufVxuIl19