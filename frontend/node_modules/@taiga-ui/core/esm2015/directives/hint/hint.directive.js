import { __decorate } from "tslib";
import { Directive, ElementRef, Inject, INJECTOR, Input, Optional, } from '@angular/core';
import { TuiActiveZoneDirective, tuiDefaultProp } from '@taiga-ui/cdk';
import { tuiAsRectAccessor, tuiAsVehicle, } from '@taiga-ui/core/abstract';
import { TuiHintService } from '@taiga-ui/core/services';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
// eslint-disable-next-line import/no-cycle
import { TUI_HINT_COMPONENT } from './hint.providers';
import { TUI_HINT_OPTIONS } from './hint-options.directive';
import * as i0 from "@angular/core";
import * as i1 from "@tinkoff/ng-polymorpheus";
import * as i2 from "@taiga-ui/core/services";
import * as i3 from "@taiga-ui/cdk";
export class TuiHintDirective {
    constructor(el, component, hintService, options, activeZone) {
        this.el = el;
        this.component = component;
        this.hintService = hintService;
        this.options = options;
        this.activeZone = activeZone;
        this.tuiHintAppearance = null;
        this.type = 'hint';
    }
    get appearance() {
        var _a;
        return (_a = this.tuiHintAppearance) !== null && _a !== void 0 ? _a : this.options.appearance;
    }
    ngOnChanges() {
        if (!this.content) {
            this.toggle(false);
        }
    }
    ngOnDestroy() {
        this.toggle(false);
    }
    getClientRect() {
        return this.el.nativeElement.getBoundingClientRect();
    }
    toggle(show) {
        if (show && this.content) {
            this.hintService.add(this);
        }
        else {
            this.hintService.remove(this);
        }
    }
}
TuiHintDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDirective, deps: [{ token: ElementRef }, { token: PolymorpheusComponent }, { token: TuiHintService }, { token: TUI_HINT_OPTIONS }, { token: TuiActiveZoneDirective, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintDirective, selector: "[tuiHint]:not(ng-container)", inputs: { content: ["tuiHint", "content"], context: ["tuiHintContext", "context"], tuiHintAppearance: "tuiHintAppearance" }, providers: [
        tuiAsRectAccessor(TuiHintDirective),
        tuiAsVehicle(TuiHintDirective),
        {
            provide: PolymorpheusComponent,
            deps: [TUI_HINT_COMPONENT, INJECTOR],
            useClass: PolymorpheusComponent,
        },
    ], usesOnChanges: true, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiHintDirective.prototype, "tuiHintAppearance", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHint]:not(ng-container)',
                    providers: [
                        tuiAsRectAccessor(TuiHintDirective),
                        tuiAsVehicle(TuiHintDirective),
                        {
                            provide: PolymorpheusComponent,
                            deps: [TUI_HINT_COMPONENT, INJECTOR],
                            useClass: PolymorpheusComponent,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.PolymorpheusComponent, decorators: [{
                    type: Inject,
                    args: [PolymorpheusComponent]
                }] }, { type: i2.TuiHintService, decorators: [{
                    type: Inject,
                    args: [TuiHintService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }, { type: i3.TuiActiveZoneDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }]; }, propDecorators: { content: [{
                type: Input,
                args: ['tuiHint']
            }], context: [{
                type: Input,
                args: ['tuiHintContext']
            }], tuiHintAppearance: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvaGludC9oaW50LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILFNBQVMsRUFDVCxVQUFVLEVBQ1YsTUFBTSxFQUNOLFFBQVEsRUFDUixLQUFLLEVBR0wsUUFBUSxHQUNYLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxzQkFBc0IsRUFBRSxjQUFjLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUNILGlCQUFpQixFQUNqQixZQUFZLEdBR2YsTUFBTSx5QkFBeUIsQ0FBQztBQUVqQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDdkQsT0FBTyxFQUFDLHFCQUFxQixFQUFzQixNQUFNLDBCQUEwQixDQUFDO0FBRXBGLDJDQUEyQztBQUMzQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxrQkFBa0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQWlCLE1BQU0sMEJBQTBCLENBQUM7Ozs7O0FBYzFFLE1BQU0sT0FBTyxnQkFBZ0I7SUFlekIsWUFDeUMsRUFBMkIsRUFFdkQsU0FBeUMsRUFDVCxXQUEyQixFQUN6QixPQUF1QixFQUd6RCxVQUEwQztRQVBkLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBRXZELGNBQVMsR0FBVCxTQUFTLENBQWdDO1FBQ1QsZ0JBQVcsR0FBWCxXQUFXLENBQWdCO1FBQ3pCLFlBQU8sR0FBUCxPQUFPLENBQWdCO1FBR3pELGVBQVUsR0FBVixVQUFVLENBQWdDO1FBWnZELHNCQUFpQixHQUFrQixJQUFJLENBQUM7UUFFL0IsU0FBSSxHQUFHLE1BQU0sQ0FBQztJQVdwQixDQUFDO0lBRUosSUFBSSxVQUFVOztRQUNWLE9BQU8sTUFBQSxJQUFJLENBQUMsaUJBQWlCLG1DQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDO0lBQzdELENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQ3RCO0lBQ0wsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFFRCxhQUFhO1FBQ1QsT0FBTyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ3pELENBQUM7SUFFRCxNQUFNLENBQUMsSUFBYTtRQUNoQixJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ3RCLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1NBQzlCO2FBQU07WUFDSCxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUNqQztJQUNMLENBQUM7OzhHQWxEUSxnQkFBZ0Isa0JBZ0JiLFVBQVUsYUFDVixxQkFBcUIsYUFFckIsY0FBYyxhQUNkLGdCQUFnQixhQUVoQixzQkFBc0I7a0dBdEJ6QixnQkFBZ0IsbUxBVmQ7UUFDUCxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQztRQUNuQyxZQUFZLENBQUMsZ0JBQWdCLENBQUM7UUFDOUI7WUFDSSxPQUFPLEVBQUUscUJBQXFCO1lBQzlCLElBQUksRUFBRSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQztZQUNwQyxRQUFRLEVBQUUscUJBQXFCO1NBQ2xDO0tBQ0o7QUFhRDtJQURDLGNBQWMsRUFBRTsyREFDdUI7NEZBWC9CLGdCQUFnQjtrQkFaNUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsNkJBQTZCO29CQUN2QyxTQUFTLEVBQUU7d0JBQ1AsaUJBQWlCLGtCQUFrQjt3QkFDbkMsWUFBWSxrQkFBa0I7d0JBQzlCOzRCQUNJLE9BQU8sRUFBRSxxQkFBcUI7NEJBQzlCLElBQUksRUFBRSxDQUFDLGtCQUFrQixFQUFFLFFBQVEsQ0FBQzs0QkFDcEMsUUFBUSxFQUFFLHFCQUFxQjt5QkFDbEM7cUJBQ0o7aUJBQ0o7OzBCQWlCUSxNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLHFCQUFxQjs7MEJBRTVCLE1BQU07MkJBQUMsY0FBYzs7MEJBQ3JCLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFDdkIsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxzQkFBc0I7NENBbEJsQyxPQUFPO3NCQUROLEtBQUs7dUJBQUMsU0FBUztnQkFJaEIsT0FBTztzQkFETixLQUFLO3VCQUFDLGdCQUFnQjtnQkFLdkIsaUJBQWlCO3NCQUZoQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBJbmplY3QsXG4gICAgSU5KRUNUT1IsXG4gICAgSW5wdXQsXG4gICAgT25DaGFuZ2VzLFxuICAgIE9uRGVzdHJveSxcbiAgICBPcHRpb25hbCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUFjdGl2ZVpvbmVEaXJlY3RpdmUsIHR1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgdHVpQXNSZWN0QWNjZXNzb3IsXG4gICAgdHVpQXNWZWhpY2xlLFxuICAgIFR1aVJlY3RBY2Nlc3NvcixcbiAgICBUdWlWZWhpY2xlLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1R1aVBvcnRhbEl0ZW19IGZyb20gJ0B0YWlnYS11aS9jb3JlL2ludGVyZmFjZXMnO1xuaW1wb3J0IHtUdWlIaW50U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvc2VydmljZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnQsIFBvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCB7VFVJX0hJTlRfQ09NUE9ORU5UfSBmcm9tICcuL2hpbnQucHJvdmlkZXJzJztcbmltcG9ydCB7VFVJX0hJTlRfT1BUSU9OUywgVHVpSGludE9wdGlvbnN9IGZyb20gJy4vaGludC1vcHRpb25zLmRpcmVjdGl2ZSc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUhpbnRdOm5vdChuZy1jb250YWluZXIpJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgdHVpQXNSZWN0QWNjZXNzb3IoVHVpSGludERpcmVjdGl2ZSksXG4gICAgICAgIHR1aUFzVmVoaWNsZShUdWlIaW50RGlyZWN0aXZlKSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogUG9seW1vcnBoZXVzQ29tcG9uZW50LFxuICAgICAgICAgICAgZGVwczogW1RVSV9ISU5UX0NPTVBPTkVOVCwgSU5KRUNUT1JdLFxuICAgICAgICAgICAgdXNlQ2xhc3M6IFBvbHltb3JwaGV1c0NvbXBvbmVudCxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlIaW50RGlyZWN0aXZlPEM+XG4gICAgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIE9uQ2hhbmdlcywgVHVpUG9ydGFsSXRlbTxDPiwgVHVpUmVjdEFjY2Vzc29yLCBUdWlWZWhpY2xlXG57XG4gICAgQElucHV0KCd0dWlIaW50JylcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PEM+O1xuXG4gICAgQElucHV0KCd0dWlIaW50Q29udGV4dCcpXG4gICAgY29udGV4dD86IEM7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgdHVpSGludEFwcGVhcmFuY2U6IHN0cmluZyB8IG51bGwgPSBudWxsO1xuXG4gICAgcmVhZG9ubHkgdHlwZSA9ICdoaW50JztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KFBvbHltb3JwaGV1c0NvbXBvbmVudClcbiAgICAgICAgcmVhZG9ubHkgY29tcG9uZW50OiBQb2x5bW9ycGhldXNDb21wb25lbnQ8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVHVpSGludFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaGludFNlcnZpY2U6IFR1aUhpbnRTZXJ2aWNlLFxuICAgICAgICBASW5qZWN0KFRVSV9ISU5UX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpSGludE9wdGlvbnMsXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSlcbiAgICAgICAgcmVhZG9ubHkgYWN0aXZlWm9uZT86IFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUgfCBudWxsLFxuICAgICkge31cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnR1aUhpbnRBcHBlYXJhbmNlID8/IHRoaXMub3B0aW9ucy5hcHBlYXJhbmNlO1xuICAgIH1cblxuICAgIG5nT25DaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGUoZmFsc2UpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XG4gICAgICAgIHRoaXMudG9nZ2xlKGZhbHNlKTtcbiAgICB9XG5cbiAgICBnZXRDbGllbnRSZWN0KCk6IENsaWVudFJlY3Qge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgIH1cblxuICAgIHRvZ2dsZShzaG93OiBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChzaG93ICYmIHRoaXMuY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5oaW50U2VydmljZS5hZGQodGhpcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhpbnRTZXJ2aWNlLnJlbW92ZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==