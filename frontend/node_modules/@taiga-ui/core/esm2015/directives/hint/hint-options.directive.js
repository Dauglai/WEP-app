import { __decorate } from "tslib";
import { Directive, forwardRef, Inject, InjectionToken, Input, Optional, SkipSelf, } from '@angular/core';
import { AbstractTuiController, tuiDefaultProp } from '@taiga-ui/cdk';
import { tuiOverrideOptions } from '@taiga-ui/core/utils';
import * as i0 from "@angular/core";
/** Default values for hint options */
export const TUI_HINT_DEFAULT_OPTIONS = {
    direction: 'bottom-left',
    showDelay: 500,
    hideDelay: 200,
    appearance: '',
    icon: 'tuiIconHelpCircle',
};
/**
 * Default parameters for hint directive
 */
export const TUI_HINT_OPTIONS = new InjectionToken('[TUI_HINT_OPTIONS]', {
    factory: () => TUI_HINT_DEFAULT_OPTIONS,
});
export const tuiHintOptionsProvider = (override) => ({
    provide: TUI_HINT_OPTIONS,
    deps: [
        [new Optional(), TuiHintOptionsDirective],
        [new SkipSelf(), TUI_HINT_OPTIONS],
    ],
    useFactory: tuiOverrideOptions(override),
});
export class TuiHintOptionsDirective extends AbstractTuiController {
    constructor(options) {
        super();
        this.options = options;
        this.direction = this.options.direction;
        this.appearance = this.options.appearance;
        this.showDelay = this.options.showDelay;
        this.hideDelay = this.options.hideDelay;
        this.icon = this.options.icon;
    }
}
TuiHintOptionsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintOptionsDirective, deps: [{ token: TUI_HINT_OPTIONS, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiHintOptionsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHintOptionsDirective, selector: "[tuiHintContent]", inputs: { content: ["tuiHintContent", "content"], direction: ["tuiHintDirection", "direction"], appearance: ["tuiHintAppearance", "appearance"], showDelay: ["tuiHintShowDelay", "showDelay"], hideDelay: ["tuiHintHideDelay", "hideDelay"] }, providers: [
        {
            provide: TUI_HINT_OPTIONS,
            useExisting: forwardRef(() => TuiHintOptionsDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiHintOptionsDirective.prototype, "direction", void 0);
__decorate([
    tuiDefaultProp()
], TuiHintOptionsDirective.prototype, "appearance", void 0);
__decorate([
    tuiDefaultProp()
], TuiHintOptionsDirective.prototype, "showDelay", void 0);
__decorate([
    tuiDefaultProp()
], TuiHintOptionsDirective.prototype, "hideDelay", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHintOptionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHintContent]',
                    providers: [
                        {
                            provide: TUI_HINT_OPTIONS,
                            useExisting: forwardRef(() => TuiHintOptionsDirective),
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TUI_HINT_OPTIONS]
                }] }]; }, propDecorators: { content: [{
                type: Input,
                args: ['tuiHintContent']
            }], direction: [{
                type: Input,
                args: ['tuiHintDirection']
            }], appearance: [{
                type: Input,
                args: ['tuiHintAppearance']
            }], showDelay: [{
                type: Input,
                args: ['tuiHintShowDelay']
            }], hideDelay: [{
                type: Input,
                args: ['tuiHintHideDelay']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGludC1vcHRpb25zLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvZGlyZWN0aXZlcy9oaW50L2hpbnQtb3B0aW9ucy5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCxTQUFTLEVBRVQsVUFBVSxFQUNWLE1BQU0sRUFDTixjQUFjLEVBQ2QsS0FBSyxFQUNMLFFBQVEsRUFDUixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHFCQUFxQixFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUVwRSxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQzs7QUFXeEQsc0NBQXNDO0FBQ3RDLE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFtQjtJQUNwRCxTQUFTLEVBQUUsYUFBYTtJQUN4QixTQUFTLEVBQUUsR0FBRztJQUNkLFNBQVMsRUFBRSxHQUFHO0lBQ2QsVUFBVSxFQUFFLEVBQUU7SUFDZCxJQUFJLEVBQUUsbUJBQW1CO0NBQzVCLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGdCQUFnQixHQUFHLElBQUksY0FBYyxDQUFpQixvQkFBb0IsRUFBRTtJQUNyRixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsd0JBQXdCO0NBQzFDLENBQUMsQ0FBQztBQUVILE1BQU0sQ0FBQyxNQUFNLHNCQUFzQixHQUVaLENBQUMsUUFBaUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUMzRCxPQUFPLEVBQUUsZ0JBQWdCO0lBQ3pCLElBQUksRUFBRTtRQUNGLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSx1QkFBdUIsQ0FBQztRQUN6QyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsZ0JBQWdCLENBQUM7S0FDckM7SUFDRCxVQUFVLEVBQUUsa0JBQWtCLENBQUMsUUFBUSxDQUFDO0NBQzNDLENBQUMsQ0FBQztBQVdILE1BQU0sT0FBTyx1QkFDVCxTQUFRLHFCQUFxQjtJQXdCN0IsWUFDNkQsT0FBdUI7UUFFaEYsS0FBSyxFQUFFLENBQUM7UUFGaUQsWUFBTyxHQUFQLE9BQU8sQ0FBZ0I7UUFqQnBGLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUluQyxlQUFVLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUM7UUFJckMsY0FBUyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO1FBSW5DLGNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQztRQUVuQyxTQUFJLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUM7SUFNekIsQ0FBQzs7cUhBN0JRLHVCQUF1QixrQkEwQlIsZ0JBQWdCO3lHQTFCL0IsdUJBQXVCLDBSQVByQjtRQUNQO1lBQ0ksT0FBTyxFQUFFLGdCQUFnQjtZQUN6QixXQUFXLEVBQUUsVUFBVSxDQUFDLEdBQUcsRUFBRSxDQUFDLHVCQUF1QixDQUFDO1NBQ3pEO0tBQ0o7QUFXRDtJQURDLGNBQWMsRUFBRTswREFDa0I7QUFJbkM7SUFEQyxjQUFjLEVBQUU7MkRBQ29CO0FBSXJDO0lBREMsY0FBYyxFQUFFOzBEQUNrQjtBQUluQztJQURDLGNBQWMsRUFBRTswREFDa0I7NEZBckIxQix1QkFBdUI7a0JBVG5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxnQkFBZ0I7NEJBQ3pCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLHdCQUF3QixDQUFDO3lCQUN6RDtxQkFDSjtpQkFDSjs7MEJBMkJRLFFBQVE7OzBCQUFJLE1BQU07MkJBQUMsZ0JBQWdCOzRDQXJCeEMsT0FBTztzQkFETixLQUFLO3VCQUFDLGdCQUFnQjtnQkFLdkIsU0FBUztzQkFGUixLQUFLO3VCQUFDLGtCQUFrQjtnQkFNekIsVUFBVTtzQkFGVCxLQUFLO3VCQUFDLG1CQUFtQjtnQkFNMUIsU0FBUztzQkFGUixLQUFLO3VCQUFDLGtCQUFrQjtnQkFNekIsU0FBUztzQkFGUixLQUFLO3VCQUFDLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEZhY3RvcnlQcm92aWRlcixcbiAgICBmb3J3YXJkUmVmLFxuICAgIEluamVjdCxcbiAgICBJbmplY3Rpb25Ub2tlbixcbiAgICBJbnB1dCxcbiAgICBPcHRpb25hbCxcbiAgICBTa2lwU2VsZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpQ29udHJvbGxlciwgdHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlIaW50RGlyZWN0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge3R1aU92ZXJyaWRlT3B0aW9uc30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aUhpbnRPcHRpb25zIHtcbiAgICByZWFkb25seSBkaXJlY3Rpb246IFR1aUhpbnREaXJlY3Rpb247XG4gICAgcmVhZG9ubHkgc2hvd0RlbGF5OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgaGlkZURlbGF5OiBudW1iZXI7XG4gICAgcmVhZG9ubHkgYXBwZWFyYW5jZTogc3RyaW5nO1xuICAgIHJlYWRvbmx5IGljb246IFBvbHltb3JwaGV1c0NvbnRlbnQ7XG59XG5cbi8qKiBEZWZhdWx0IHZhbHVlcyBmb3IgaGludCBvcHRpb25zICovXG5leHBvcnQgY29uc3QgVFVJX0hJTlRfREVGQVVMVF9PUFRJT05TOiBUdWlIaW50T3B0aW9ucyA9IHtcbiAgICBkaXJlY3Rpb246ICdib3R0b20tbGVmdCcsXG4gICAgc2hvd0RlbGF5OiA1MDAsXG4gICAgaGlkZURlbGF5OiAyMDAsXG4gICAgYXBwZWFyYW5jZTogJycsXG4gICAgaWNvbjogJ3R1aUljb25IZWxwQ2lyY2xlJyxcbn07XG5cbi8qKlxuICogRGVmYXVsdCBwYXJhbWV0ZXJzIGZvciBoaW50IGRpcmVjdGl2ZVxuICovXG5leHBvcnQgY29uc3QgVFVJX0hJTlRfT1BUSU9OUyA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlIaW50T3B0aW9ucz4oJ1tUVUlfSElOVF9PUFRJT05TXScsIHtcbiAgICBmYWN0b3J5OiAoKSA9PiBUVUlfSElOVF9ERUZBVUxUX09QVElPTlMsXG59KTtcblxuZXhwb3J0IGNvbnN0IHR1aUhpbnRPcHRpb25zUHJvdmlkZXI6IChcbiAgICBvcHRpb25zOiBQYXJ0aWFsPFR1aUhpbnRPcHRpb25zPixcbikgPT4gRmFjdG9yeVByb3ZpZGVyID0gKG92ZXJyaWRlOiBQYXJ0aWFsPFR1aUhpbnRPcHRpb25zPikgPT4gKHtcbiAgICBwcm92aWRlOiBUVUlfSElOVF9PUFRJT05TLFxuICAgIGRlcHM6IFtcbiAgICAgICAgW25ldyBPcHRpb25hbCgpLCBUdWlIaW50T3B0aW9uc0RpcmVjdGl2ZV0sXG4gICAgICAgIFtuZXcgU2tpcFNlbGYoKSwgVFVJX0hJTlRfT1BUSU9OU10sXG4gICAgXSxcbiAgICB1c2VGYWN0b3J5OiB0dWlPdmVycmlkZU9wdGlvbnMob3ZlcnJpZGUpLFxufSk7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aUhpbnRDb250ZW50XScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9ISU5UX09QVElPTlMsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogZm9yd2FyZFJlZigoKSA9PiBUdWlIaW50T3B0aW9uc0RpcmVjdGl2ZSksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpSGludE9wdGlvbnNEaXJlY3RpdmVcbiAgICBleHRlbmRzIEFic3RyYWN0VHVpQ29udHJvbGxlclxuICAgIGltcGxlbWVudHMgVHVpSGludE9wdGlvbnNcbntcbiAgICBASW5wdXQoJ3R1aUhpbnRDb250ZW50JylcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50O1xuXG4gICAgQElucHV0KCd0dWlIaW50RGlyZWN0aW9uJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGRpcmVjdGlvbiA9IHRoaXMub3B0aW9ucy5kaXJlY3Rpb247XG5cbiAgICBASW5wdXQoJ3R1aUhpbnRBcHBlYXJhbmNlJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGFwcGVhcmFuY2UgPSB0aGlzLm9wdGlvbnMuYXBwZWFyYW5jZTtcblxuICAgIEBJbnB1dCgndHVpSGludFNob3dEZWxheScpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzaG93RGVsYXkgPSB0aGlzLm9wdGlvbnMuc2hvd0RlbGF5O1xuXG4gICAgQElucHV0KCd0dWlIaW50SGlkZURlbGF5JylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGhpZGVEZWxheSA9IHRoaXMub3B0aW9ucy5oaWRlRGVsYXk7XG5cbiAgICBpY29uID0gdGhpcy5vcHRpb25zLmljb247XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQFNraXBTZWxmKCkgQEluamVjdChUVUlfSElOVF9PUFRJT05TKSBwcm90ZWN0ZWQgcmVhZG9ubHkgb3B0aW9uczogVHVpSGludE9wdGlvbnMsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxufVxuIl19