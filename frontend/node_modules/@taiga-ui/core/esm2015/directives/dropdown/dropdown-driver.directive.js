import { Directive, Inject, Self } from '@angular/core';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { AbstractTuiDriverDirective, TuiDriver, TuiVehicle } from '@taiga-ui/core/abstract';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiDropdownDriverDirective extends AbstractTuiDriverDirective {
    // TODO: Figure out why this is necessary under nx test runner
    constructor(destroy$, drivers, vehicles) {
        super(destroy$, drivers, vehicles);
        this.type = 'dropdown';
    }
}
TuiDropdownDriverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownDriverDirective, deps: [{ token: TuiDestroyService, self: true }, { token: TuiDriver }, { token: TuiVehicle }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownDriverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownDriverDirective, selector: "[tuiDropdown]", providers: [TuiDestroyService], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownDriverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdown]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiDriver]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TuiVehicle]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tZHJpdmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2NvcmUvZGlyZWN0aXZlcy9kcm9wZG93bi9kcm9wZG93bi1kcml2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUN0RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDaEQsT0FBTyxFQUFDLDBCQUEwQixFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQzs7O0FBTzFGLE1BQU0sT0FBTywwQkFBMkIsU0FBUSwwQkFBMEI7SUFHdEUsOERBQThEO0lBQzlELFlBQ3VDLFFBQTZCLEVBQzdDLE9BQW9CLEVBQ25CLFFBQXNCO1FBRTFDLEtBQUssQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLFFBQVEsQ0FBQyxDQUFDO1FBUjlCLFNBQUksR0FBRyxVQUFVLENBQUM7SUFTM0IsQ0FBQzs7d0hBVlEsMEJBQTBCLGtCQUtmLGlCQUFpQix5QkFDekIsU0FBUyxhQUNULFVBQVU7NEdBUGIsMEJBQTBCLHdDQUZ4QixDQUFDLGlCQUFpQixDQUFDOzRGQUVyQiwwQkFBMEI7a0JBSnRDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFNBQVMsRUFBRSxDQUFDLGlCQUFpQixDQUFDO2lCQUNqQzs7MEJBTVEsSUFBSTs7MEJBQUksTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUNoQyxNQUFNOzJCQUFDLFNBQVM7OzBCQUNoQixNQUFNOzJCQUFDLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBTZWxmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aURyaXZlckRpcmVjdGl2ZSwgVHVpRHJpdmVyLCBUdWlWZWhpY2xlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlEcm9wZG93bl0nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJvcGRvd25Ecml2ZXJEaXJlY3RpdmUgZXh0ZW5kcyBBYnN0cmFjdFR1aURyaXZlckRpcmVjdGl2ZSB7XG4gICAgcmVhZG9ubHkgdHlwZSA9ICdkcm9wZG93bic7XG5cbiAgICAvLyBUT0RPOiBGaWd1cmUgb3V0IHdoeSB0aGlzIGlzIG5lY2Vzc2FyeSB1bmRlciBueCB0ZXN0IHJ1bm5lclxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBAU2VsZigpIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgICAgICBASW5qZWN0KFR1aURyaXZlcikgZHJpdmVyczogVHVpRHJpdmVyW10sXG4gICAgICAgIEBJbmplY3QoVHVpVmVoaWNsZSkgdmVoaWNsZXM6IFR1aVZlaGljbGVbXSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoZGVzdHJveSQsIGRyaXZlcnMsIHZlaGljbGVzKTtcbiAgICB9XG59XG4iXX0=