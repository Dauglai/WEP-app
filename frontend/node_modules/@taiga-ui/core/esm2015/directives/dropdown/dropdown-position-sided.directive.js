import { Directive, Inject, Input } from '@angular/core';
import { EMPTY_CLIENT_RECT } from '@taiga-ui/cdk';
import { tuiAsPositionAccessor, TuiPositionAccessor, } from '@taiga-ui/core/abstract';
import { TUI_VIEWPORT } from '@taiga-ui/core/tokens';
import { TUI_DROPDOWN_OPTIONS } from './dropdown-options.directive';
import { TuiDropdownPositionDirective } from './dropdown-position.directive';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core/abstract";
import * as i2 from "./dropdown-position.directive";
export class TuiDropdownPositionSidedDirective extends TuiPositionAccessor {
    constructor(options, viewport, vertical) {
        super();
        this.options = options;
        this.viewport = viewport;
        this.vertical = vertical;
        this.previous = this.options.direction || 'bottom';
        this.tuiDropdownSided = '';
        this.tuiDropdownSidedOffset = 4;
        this.type = 'dropdown';
    }
    getPosition(rect) {
        var _a, _b;
        if (this.tuiDropdownSided === false) {
            return this.vertical.getPosition(rect);
        }
        const { height, width } = rect;
        const hostRect = (_b = (_a = this.vertical.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : EMPTY_CLIENT_RECT;
        const viewport = this.viewport.getClientRect();
        const { direction, minHeight, offset } = this.options;
        const align = this.options.align === 'center' ? 'left' : this.options.align;
        const available = {
            top: hostRect.bottom - viewport.top,
            left: hostRect.left - offset - viewport.left,
            right: viewport.right - hostRect.right - offset,
            bottom: viewport.bottom - hostRect.top,
        };
        const position = {
            top: hostRect.bottom - height + this.tuiDropdownSidedOffset + 1,
            left: hostRect.left - width - offset,
            right: hostRect.right + offset,
            bottom: hostRect.top - this.tuiDropdownSidedOffset - 1, // 1 for border
        };
        const better = available.top > available.bottom ? 'top' : 'bottom';
        const maxLeft = available.left > available.right ? position.left : position.right;
        const left = available[align] > width ? position[align] : maxLeft;
        if ((available[this.previous] > minHeight && direction) ||
            this.previous === better) {
            return [position[this.previous], left];
        }
        this.previous = better;
        return [position[better], left];
    }
}
TuiDropdownPositionSidedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownPositionSidedDirective, deps: [{ token: TUI_DROPDOWN_OPTIONS }, { token: TUI_VIEWPORT }, { token: TuiDropdownPositionDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiDropdownPositionSidedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownPositionSidedDirective, selector: "[tuiDropdownSided]", inputs: { tuiDropdownSided: "tuiDropdownSided", tuiDropdownSidedOffset: "tuiDropdownSidedOffset" }, providers: [
        TuiDropdownPositionDirective,
        tuiAsPositionAccessor(TuiDropdownPositionSidedDirective),
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDropdownPositionSidedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDropdownSided]',
                    providers: [
                        TuiDropdownPositionDirective,
                        tuiAsPositionAccessor(TuiDropdownPositionSidedDirective),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DROPDOWN_OPTIONS]
                }] }, { type: i1.TuiRectAccessor, decorators: [{
                    type: Inject,
                    args: [TUI_VIEWPORT]
                }] }, { type: i2.TuiDropdownPositionDirective, decorators: [{
                    type: Inject,
                    args: [TuiDropdownPositionDirective]
                }] }]; }, propDecorators: { tuiDropdownSided: [{
                type: Input
            }], tuiDropdownSidedOffset: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tcG9zaXRpb24tc2lkZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9kaXJlY3RpdmVzL2Ryb3Bkb3duL2Ryb3Bkb3duLXBvc2l0aW9uLXNpZGVkLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2hELE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsbUJBQW1CLEdBRXRCLE1BQU0seUJBQXlCLENBQUM7QUFDakMsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBR25ELE9BQU8sRUFBQyxvQkFBb0IsRUFBcUIsTUFBTSw4QkFBOEIsQ0FBQztBQUN0RixPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQzs7OztBQVMzRSxNQUFNLE9BQU8saUNBQWtDLFNBQVEsbUJBQW1CO0lBV3RFLFlBQ21ELE9BQTJCLEVBQ25DLFFBQXlCLEVBRS9DLFFBQXNDO1FBRXZELEtBQUssRUFBRSxDQUFDO1FBTHVDLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBQ25DLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBRS9DLGFBQVEsR0FBUixRQUFRLENBQThCO1FBZG5ELGFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsSUFBSSxRQUFRLENBQUM7UUFHdEQscUJBQWdCLEdBQXFCLEVBQUUsQ0FBQztRQUd4QywyQkFBc0IsR0FBRyxDQUFDLENBQUM7UUFFbEIsU0FBSSxHQUFHLFVBQVUsQ0FBQztJQVMzQixDQUFDO0lBRUQsV0FBVyxDQUFDLElBQWdCOztRQUN4QixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsS0FBSyxLQUFLLEVBQUU7WUFDakMsT0FB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bUM7cUJBQzNEO2lCQUNKOzswQkFhUSxNQUFNOzJCQUFDLG9CQUFvQjs7MEJBQzNCLE1BQU07MkJBQUMsWUFBWTs7MEJBQ25CLE1BQU07MkJBQUMsNEJBQTRCOzRDQVZ4QyxnQkFBZ0I7c0JBRGYsS0FBSztnQkFJTixzQkFBc0I7c0JBRHJCLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0VNUFRZX0NMSUVOVF9SRUNUfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgdHVpQXNQb3NpdGlvbkFjY2Vzc29yLFxuICAgIFR1aVBvc2l0aW9uQWNjZXNzb3IsXG4gICAgVHVpUmVjdEFjY2Vzc29yLFxufSBmcm9tICdAdGFpZ2EtdWkvY29yZS9hYnN0cmFjdCc7XG5pbXBvcnQge1RVSV9WSUVXUE9SVH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdG9rZW5zJztcbmltcG9ydCB7VHVpUG9pbnR9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3R5cGVzJztcblxuaW1wb3J0IHtUVUlfRFJPUERPV05fT1BUSU9OUywgVHVpRHJvcGRvd25PcHRpb25zfSBmcm9tICcuL2Ryb3Bkb3duLW9wdGlvbnMuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpRHJvcGRvd25Qb3NpdGlvbkRpcmVjdGl2ZX0gZnJvbSAnLi9kcm9wZG93bi1wb3NpdGlvbi5kaXJlY3RpdmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlEcm9wZG93blNpZGVkXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFR1aURyb3Bkb3duUG9zaXRpb25EaXJlY3RpdmUsXG4gICAgICAgIHR1aUFzUG9zaXRpb25BY2Nlc3NvcihUdWlEcm9wZG93blBvc2l0aW9uU2lkZWREaXJlY3RpdmUpLFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aURyb3Bkb3duUG9zaXRpb25TaWRlZERpcmVjdGl2ZSBleHRlbmRzIFR1aVBvc2l0aW9uQWNjZXNzb3Ige1xuICAgIHByaXZhdGUgcHJldmlvdXMgPSB0aGlzLm9wdGlvbnMuZGlyZWN0aW9uIHx8ICdib3R0b20nO1xuXG4gICAgQElucHV0KClcbiAgICB0dWlEcm9wZG93blNpZGVkOiBib29sZWFuIHwgc3RyaW5nID0gJyc7XG5cbiAgICBASW5wdXQoKVxuICAgIHR1aURyb3Bkb3duU2lkZWRPZmZzZXQgPSA0O1xuXG4gICAgcmVhZG9ubHkgdHlwZSA9ICdkcm9wZG93bic7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfRFJPUERPV05fT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlEcm9wZG93bk9wdGlvbnMsXG4gICAgICAgIEBJbmplY3QoVFVJX1ZJRVdQT1JUKSBwcml2YXRlIHJlYWRvbmx5IHZpZXdwb3J0OiBUdWlSZWN0QWNjZXNzb3IsXG4gICAgICAgIEBJbmplY3QoVHVpRHJvcGRvd25Qb3NpdGlvbkRpcmVjdGl2ZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB2ZXJ0aWNhbDogVHVpRHJvcGRvd25Qb3NpdGlvbkRpcmVjdGl2ZSxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBnZXRQb3NpdGlvbihyZWN0OiBDbGllbnRSZWN0KTogVHVpUG9pbnQge1xuICAgICAgICBpZiAodGhpcy50dWlEcm9wZG93blNpZGVkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMudmVydGljYWwuZ2V0UG9zaXRpb24ocmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCB7aGVpZ2h0LCB3aWR0aH0gPSByZWN0O1xuICAgICAgICBjb25zdCBob3N0UmVjdCA9IHRoaXMudmVydGljYWwuYWNjZXNzb3I/LmdldENsaWVudFJlY3QoKSA/PyBFTVBUWV9DTElFTlRfUkVDVDtcbiAgICAgICAgY29uc3Qgdmlld3BvcnQgPSB0aGlzLnZpZXdwb3J0LmdldENsaWVudFJlY3QoKTtcbiAgICAgICAgY29uc3Qge2RpcmVjdGlvbiwgbWluSGVpZ2h0LCBvZmZzZXR9ID0gdGhpcy5vcHRpb25zO1xuICAgICAgICBjb25zdCBhbGlnbiA9IHRoaXMub3B0aW9ucy5hbGlnbiA9PT0gJ2NlbnRlcicgPyAnbGVmdCcgOiB0aGlzLm9wdGlvbnMuYWxpZ247XG4gICAgICAgIGNvbnN0IGF2YWlsYWJsZSA9IHtcbiAgICAgICAgICAgIHRvcDogaG9zdFJlY3QuYm90dG9tIC0gdmlld3BvcnQudG9wLFxuICAgICAgICAgICAgbGVmdDogaG9zdFJlY3QubGVmdCAtIG9mZnNldCAtIHZpZXdwb3J0LmxlZnQsXG4gICAgICAgICAgICByaWdodDogdmlld3BvcnQucmlnaHQgLSBob3N0UmVjdC5yaWdodCAtIG9mZnNldCxcbiAgICAgICAgICAgIGJvdHRvbTogdmlld3BvcnQuYm90dG9tIC0gaG9zdFJlY3QudG9wLFxuICAgICAgICB9IGFzIGNvbnN0O1xuICAgICAgICBjb25zdCBwb3NpdGlvbiA9IHtcbiAgICAgICAgICAgIHRvcDogaG9zdFJlY3QuYm90dG9tIC0gaGVpZ2h0ICsgdGhpcy50dWlEcm9wZG93blNpZGVkT2Zmc2V0ICsgMSwgLy8gMSBmb3IgYm9yZGVyXG4gICAgICAgICAgICBsZWZ0OiBob3N0UmVjdC5sZWZ0IC0gd2lkdGggLSBvZmZzZXQsXG4gICAgICAgICAgICByaWdodDogaG9zdFJlY3QucmlnaHQgKyBvZmZzZXQsXG4gICAgICAgICAgICBib3R0b206IGhvc3RSZWN0LnRvcCAtIHRoaXMudHVpRHJvcGRvd25TaWRlZE9mZnNldCAtIDEsIC8vIDEgZm9yIGJvcmRlclxuICAgICAgICB9IGFzIGNvbnN0O1xuICAgICAgICBjb25zdCBiZXR0ZXIgPSBhdmFpbGFibGUudG9wID4gYXZhaWxhYmxlLmJvdHRvbSA/ICd0b3AnIDogJ2JvdHRvbSc7XG4gICAgICAgIGNvbnN0IG1heExlZnQgPSBhdmFpbGFibGUubGVmdCA+IGF2YWlsYWJsZS5yaWdodCA/IHBvc2l0aW9uLmxlZnQgOiBwb3NpdGlvbi5yaWdodDtcbiAgICAgICAgY29uc3QgbGVmdCA9IGF2YWlsYWJsZVthbGlnbl0gPiB3aWR0aCA/IHBvc2l0aW9uW2FsaWduXSA6IG1heExlZnQ7XG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGF2YWlsYWJsZVt0aGlzLnByZXZpb3VzXSA+IG1pbkhlaWdodCAmJiBkaXJlY3Rpb24pIHx8XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzID09PSBiZXR0ZXJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gW3Bvc2l0aW9uW3RoaXMucHJldmlvdXNdLCBsZWZ0XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucHJldmlvdXMgPSBiZXR0ZXI7XG5cbiAgICAgICAgcmV0dXJuIFtwb3NpdGlvbltiZXR0ZXJdLCBsZWZ0XTtcbiAgICB9XG59XG4iXX0=