import { Directive, HostBinding, Inject, Input } from '@angular/core';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE } from '@taiga-ui/core/tokens';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiWrapperDirective {
    constructor(mode$) {
        this.mode$ = mode$;
        this.disabled = false;
        this.readOnly = false;
        this.hover = null;
        this.active = null;
        this.focus = false;
        this.invalid = false;
        this.appearance = '';
    }
    get computedInvalid() {
        return !this.disabled && !this.readOnly && this.invalid;
    }
    get computedFocused() {
        return this.focus && !this.disabled;
    }
    get interactiveState() {
        if (this.disabled) {
            return "disabled" /* Disabled */;
        }
        if (this.readOnly) {
            return "readonly" /* Readonly */;
        }
        if (this.active) {
            return "active" /* Active */;
        }
        if (this.hover) {
            return "hover" /* Hover */;
        }
        return null;
    }
    get noHover() {
        return this.readOnly || this.hover === false;
    }
    get noActive() {
        return this.readOnly || this.active === false;
    }
}
TuiWrapperDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiWrapperDirective, deps: [{ token: TUI_MODE }], target: i0.ɵɵFactoryTarget.Directive });
TuiWrapperDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiWrapperDirective, selector: "[tuiWrapper]", inputs: { disabled: "disabled", readOnly: "readOnly", hover: "hover", active: "active", focus: "focus", invalid: "invalid", appearance: "appearance" }, host: { listeners: { "$.data-mode.attr": "mode$" }, properties: { "attr.data-appearance": "this.appearance", "class._invalid": "this.computedInvalid", "class._focused": "this.computedFocused", "attr.data-state": "this.interactiveState", "class._no-hover": "this.noHover", "class._no-active": "this.noActive" } }, providers: [MODE_PROVIDER], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiWrapperDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiWrapper]',
                    providers: [MODE_PROVIDER],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }]; }, propDecorators: { disabled: [{
                type: Input
            }], readOnly: [{
                type: Input
            }], hover: [{
                type: Input
            }], active: [{
                type: Input
            }], focus: [{
                type: Input
            }], invalid: [{
                type: Input
            }], appearance: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-appearance']
            }], computedInvalid: [{
                type: HostBinding,
                args: ['class._invalid']
            }], computedFocused: [{
                type: HostBinding,
                args: ['class._focused']
            }], interactiveState: [{
                type: HostBinding,
                args: ['attr.data-state']
            }], noHover: [{
                type: HostBinding,
                args: ['class._no-hover']
            }], noActive: [{
                type: HostBinding,
                args: ['class._no-active']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid3JhcHBlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvd3JhcHBlci93cmFwcGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXBFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7OztBQVcvQyxNQUFNLE9BQU8sbUJBQW1CO0lBdUI1QixZQUF1QyxLQUF1QztRQUF2QyxVQUFLLEdBQUwsS0FBSyxDQUFrQztRQXJCOUUsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUdqQixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBR2pCLFVBQUssR0FBbUIsSUFBSSxDQUFDO1FBRzdCLFdBQU0sR0FBbUIsSUFBSSxDQUFDO1FBRzlCLFVBQUssR0FBRyxLQUFLLENBQUM7UUFHZCxZQUFPLEdBQUcsS0FBSyxDQUFDO1FBSWhCLGVBQVUsR0FBRyxFQUFFLENBQUM7SUFFaUUsQ0FBQztJQUVsRixJQUNJLGVBQWU7UUFDZixPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQztJQUM1RCxDQUFDO0lBRUQsSUFDSSxlQUFlO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUN4QyxDQUFDO0lBRUQsSUFDSSxnQkFBZ0I7UUFDaEIsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsaUNBQW9DO1NBQ3ZDO1FBRUQsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2YsaUNBQW9DO1NBQ3ZDO1FBRUQsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2IsNkJBQWtDO1NBQ3JDO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osMkJBQWlDO1NBQ3BDO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVELElBQ0ksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQztJQUNqRCxDQUFDO0lBRUQsSUFDSSxRQUFRO1FBQ1IsT0FBTyxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxNQUFNLEtBQUssS0FBSyxDQUFDO0lBQ2xELENBQUM7O2lIQWhFUSxtQkFBbUIsa0JBdUJSLFFBQVE7cUdBdkJuQixtQkFBbUIsd2ZBTGpCLENBQUMsYUFBYSxDQUFDOzRGQUtqQixtQkFBbUI7a0JBUC9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7b0JBQ3hCLFNBQVMsRUFBRSxDQUFDLGFBQWEsQ0FBQztvQkFDMUIsSUFBSSxFQUFFO3dCQUNGLG9CQUFvQixFQUFFLE9BQU87cUJBQ2hDO2lCQUNKOzswQkF3QmdCLE1BQU07MkJBQUMsUUFBUTs0Q0FyQjVCLFFBQVE7c0JBRFAsS0FBSztnQkFJTixRQUFRO3NCQURQLEtBQUs7Z0JBSU4sS0FBSztzQkFESixLQUFLO2dCQUlOLE1BQU07c0JBREwsS0FBSztnQkFJTixLQUFLO3NCQURKLEtBQUs7Z0JBSU4sT0FBTztzQkFETixLQUFLO2dCQUtOLFVBQVU7c0JBRlQsS0FBSzs7c0JBQ0wsV0FBVzt1QkFBQyxzQkFBc0I7Z0JBTS9CLGVBQWU7c0JBRGxCLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQU16QixlQUFlO3NCQURsQixXQUFXO3VCQUFDLGdCQUFnQjtnQkFNekIsZ0JBQWdCO3NCQURuQixXQUFXO3VCQUFDLGlCQUFpQjtnQkFzQjFCLE9BQU87c0JBRFYsV0FBVzt1QkFBQyxpQkFBaUI7Z0JBTTFCLFFBQVE7c0JBRFgsV0FBVzt1QkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdEJpbmRpbmcsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlJbnRlcmFjdGl2ZVN0YXRlfSBmcm9tICdAdGFpZ2EtdWkvY29yZS9lbnVtcyc7XG5pbXBvcnQge01PREVfUFJPVklERVJ9IGZyb20gJ0B0YWlnYS11aS9jb3JlL3Byb3ZpZGVycyc7XG5pbXBvcnQge1RVSV9NT0RFfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHtUdWlCcmlnaHRuZXNzfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90eXBlcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlXcmFwcGVyXScsXG4gICAgcHJvdmlkZXJzOiBbTU9ERV9QUk9WSURFUl0sXG4gICAgaG9zdDoge1xuICAgICAgICAnKCQuZGF0YS1tb2RlLmF0dHIpJzogJ21vZGUkJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlXcmFwcGVyRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIHJlYWRPbmx5ID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIGhvdmVyOiBib29sZWFuIHwgbnVsbCA9IG51bGw7XG5cbiAgICBASW5wdXQoKVxuICAgIGFjdGl2ZTogYm9vbGVhbiB8IG51bGwgPSBudWxsO1xuXG4gICAgQElucHV0KClcbiAgICBmb2N1cyA9IGZhbHNlO1xuXG4gICAgQElucHV0KClcbiAgICBpbnZhbGlkID0gZmFsc2U7XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLWFwcGVhcmFuY2UnKVxuICAgIGFwcGVhcmFuY2UgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPikge31cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX2ludmFsaWQnKVxuICAgIGdldCBjb21wdXRlZEludmFsaWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAhdGhpcy5kaXNhYmxlZCAmJiAhdGhpcy5yZWFkT25seSAmJiB0aGlzLmludmFsaWQ7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fZm9jdXNlZCcpXG4gICAgZ2V0IGNvbXB1dGVkRm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZm9jdXMgJiYgIXRoaXMuZGlzYWJsZWQ7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLmRhdGEtc3RhdGUnKVxuICAgIGdldCBpbnRlcmFjdGl2ZVN0YXRlKCk6IFR1aUludGVyYWN0aXZlU3RhdGUgfCBzdHJpbmcgfCBudWxsIHtcbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLkRpc2FibGVkO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMucmVhZE9ubHkpIHtcbiAgICAgICAgICAgIHJldHVybiBUdWlJbnRlcmFjdGl2ZVN0YXRlLlJlYWRvbmx5O1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm4gVHVpSW50ZXJhY3RpdmVTdGF0ZS5BY3RpdmU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5ob3Zlcikge1xuICAgICAgICAgICAgcmV0dXJuIFR1aUludGVyYWN0aXZlU3RhdGUuSG92ZXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9uby1ob3ZlcicpXG4gICAgZ2V0IG5vSG92ZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRPbmx5IHx8IHRoaXMuaG92ZXIgPT09IGZhbHNlO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnY2xhc3MuX25vLWFjdGl2ZScpXG4gICAgZ2V0IG5vQWN0aXZlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkT25seSB8fCB0aGlzLmFjdGl2ZSA9PT0gZmFsc2U7XG4gICAgfVxufVxuIl19