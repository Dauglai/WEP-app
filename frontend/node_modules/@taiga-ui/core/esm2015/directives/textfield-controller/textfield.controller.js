export class TuiTextfieldController {
    constructor(change$, options, legacyAppearance, appearanceDirective, cleanerDirective, customContentDirective, iconDirective, iconLeftDirective, labelOutsideDirective, sizeDirective, prefixDirective, postfixDirective, fillerDirective) {
        this.change$ = change$;
        this.options = options;
        this.legacyAppearance = legacyAppearance;
        this.appearanceDirective = appearanceDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.iconDirective = iconDirective;
        this.iconLeftDirective = iconLeftDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.sizeDirective = sizeDirective;
        this.prefixDirective = prefixDirective;
        this.postfixDirective = postfixDirective;
        this.fillerDirective = fillerDirective;
    }
    get appearance() {
        return this.appearanceDirective.appearance || this.legacyAppearance;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent || ``;
    }
    get icon() {
        return this.iconDirective.icon;
    }
    get iconLeft() {
        return this.iconLeftDirective.iconLeft;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get prefix() {
        return this.prefixDirective.prefix;
    }
    get postfix() {
        return this.postfixDirective.postfix;
    }
    get filler() {
        return this.fillerDirective.filler;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLmNvbnRyb2xsZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvdGV4dGZpZWxkLWNvbnRyb2xsZXIvdGV4dGZpZWxkLmNvbnRyb2xsZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBaUJBLE1BQU0sT0FBTyxzQkFBc0I7SUFDL0IsWUFDYSxPQUF5QixFQUN6QixPQUE0QixFQUNwQixnQkFBd0IsRUFDeEIsbUJBQW9ELEVBQ3BELGdCQUE4QyxFQUM5QyxzQkFBMEQsRUFDMUQsYUFBd0MsRUFDeEMsaUJBQWdELEVBQ2hELHFCQUF3RCxFQUN4RCxhQUF3QyxFQUN4QyxlQUE0QyxFQUM1QyxnQkFBOEMsRUFDOUMsZUFBNEM7UUFacEQsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDekIsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFDcEIscUJBQWdCLEdBQWhCLGdCQUFnQixDQUFRO1FBQ3hCLHdCQUFtQixHQUFuQixtQkFBbUIsQ0FBaUM7UUFDcEQscUJBQWdCLEdBQWhCLGdCQUFnQixDQUE4QjtRQUM5QywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQW9DO1FBQzFELGtCQUFhLEdBQWIsYUFBYSxDQUEyQjtRQUN4QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQStCO1FBQ2hELDBCQUFxQixHQUFyQixxQkFBcUIsQ0FBbUM7UUFDeEQsa0JBQWEsR0FBYixhQUFhLENBQTJCO1FBQ3hDLG9CQUFlLEdBQWYsZUFBZSxDQUE2QjtRQUM1QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQThCO1FBQzlDLG9CQUFlLEdBQWYsZUFBZSxDQUE2QjtJQUM5RCxDQUFDO0lBRUosSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsbUJBQW1CLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztJQUN4RSxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLGFBQWE7UUFDYixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDO0lBQzNELENBQUM7SUFFRCxJQUFJLElBQUk7UUFDSixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO0lBQ25DLENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUM7SUFDM0MsQ0FBQztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLHFCQUFxQixDQUFDLFlBQVksQ0FBQztJQUNuRCxDQUFDO0lBRUQsSUFBSSxJQUFJO1FBQ0osT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQztJQUNuQyxDQUFDO0lBRUQsSUFBSSxNQUFNO1FBQ04sT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLE1BQU0sQ0FBQztJQUN2QyxDQUFDO0lBRUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsT0FBTyxDQUFDO0lBQ3pDLENBQUM7SUFFRCxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDO0lBQ3ZDLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpQ29udGV4dFdpdGhJbXBsaWNpdH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1R1aVNpemVMLCBUdWlTaXplU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUvdHlwZXMnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHtUdWlUZXh0ZmllbGRBcHBlYXJhbmNlRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1hcHBlYXJhbmNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZENsZWFuZXJEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLWNsZWFuZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkQ3VzdG9tQ29udGVudERpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtY3VzdG9tLWNvbnRlbnQuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkRmlsbGVyRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1maWxsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkSWNvbkRpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtaWNvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRJY29uTGVmdERpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtaWNvbi1sZWZ0LmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRPcHRpb25zfSBmcm9tICcuL3RleHRmaWVsZC1vcHRpb25zJztcbmltcG9ydCB7VHVpVGV4dGZpZWxkUG9zdGZpeERpcmVjdGl2ZX0gZnJvbSAnLi90ZXh0ZmllbGQtcG9zdGZpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRQcmVmaXhEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXByZWZpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUdWlUZXh0ZmllbGRTaXplRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1zaXplLmRpcmVjdGl2ZSc7XG5cbmV4cG9ydCBjbGFzcyBUdWlUZXh0ZmllbGRDb250cm9sbGVyIHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgY2hhbmdlJDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgcmVhZG9ubHkgb3B0aW9uczogVHVpVGV4dGZpZWxkT3B0aW9ucyxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBsZWdhY3lBcHBlYXJhbmNlOiBzdHJpbmcsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYXBwZWFyYW5jZURpcmVjdGl2ZTogVHVpVGV4dGZpZWxkQXBwZWFyYW5jZURpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjbGVhbmVyRGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRDbGVhbmVyRGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGN1c3RvbUNvbnRlbnREaXJlY3RpdmU6IFR1aVRleHRmaWVsZEN1c3RvbUNvbnRlbnREaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaWNvbkRpcmVjdGl2ZTogVHVpVGV4dGZpZWxkSWNvbkRpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBpY29uTGVmdERpcmVjdGl2ZTogVHVpVGV4dGZpZWxkSWNvbkxlZnREaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgbGFiZWxPdXRzaWRlRGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRMYWJlbE91dHNpZGVEaXJlY3RpdmUsXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgc2l6ZURpcmVjdGl2ZTogVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBwcmVmaXhEaXJlY3RpdmU6IFR1aVRleHRmaWVsZFByZWZpeERpcmVjdGl2ZSxcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBwb3N0Zml4RGlyZWN0aXZlOiBUdWlUZXh0ZmllbGRQb3N0Zml4RGlyZWN0aXZlLFxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGZpbGxlckRpcmVjdGl2ZTogVHVpVGV4dGZpZWxkRmlsbGVyRGlyZWN0aXZlLFxuICAgICkge31cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmFwcGVhcmFuY2VEaXJlY3RpdmUuYXBwZWFyYW5jZSB8fCB0aGlzLmxlZ2FjeUFwcGVhcmFuY2U7XG4gICAgfVxuXG4gICAgZ2V0IGNsZWFuZXIoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsZWFuZXJEaXJlY3RpdmUuY2xlYW5lcjtcbiAgICB9XG5cbiAgICBnZXQgY3VzdG9tQ29udGVudCgpOiBQb2x5bW9ycGhldXNDb250ZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VzdG9tQ29udGVudERpcmVjdGl2ZS5jdXN0b21Db250ZW50IHx8IGBgO1xuICAgIH1cblxuICAgIGdldCBpY29uKCk6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlTaXplTCB8IFR1aVNpemVTPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pY29uRGlyZWN0aXZlLmljb247XG4gICAgfVxuXG4gICAgZ2V0IGljb25MZWZ0KCk6IFBvbHltb3JwaGV1c0NvbnRlbnQ8VHVpQ29udGV4dFdpdGhJbXBsaWNpdDxUdWlTaXplTCB8IFR1aVNpemVTPj4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pY29uTGVmdERpcmVjdGl2ZS5pY29uTGVmdDtcbiAgICB9XG5cbiAgICBnZXQgbGFiZWxPdXRzaWRlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5sYWJlbE91dHNpZGVEaXJlY3RpdmUubGFiZWxPdXRzaWRlO1xuICAgIH1cblxuICAgIGdldCBzaXplKCk6IFR1aVNpemVMIHwgVHVpU2l6ZVMge1xuICAgICAgICByZXR1cm4gdGhpcy5zaXplRGlyZWN0aXZlLnNpemU7XG4gICAgfVxuXG4gICAgZ2V0IHByZWZpeCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5wcmVmaXhEaXJlY3RpdmUucHJlZml4O1xuICAgIH1cblxuICAgIGdldCBwb3N0Zml4KCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3RmaXhEaXJlY3RpdmUucG9zdGZpeDtcbiAgICB9XG5cbiAgICBnZXQgZmlsbGVyKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbGxlckRpcmVjdGl2ZS5maWxsZXI7XG4gICAgfVxufVxuIl19