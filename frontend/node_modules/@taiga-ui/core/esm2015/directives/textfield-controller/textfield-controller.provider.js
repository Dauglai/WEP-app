import { ChangeDetectorRef, InjectionToken } from '@angular/core';
import { TuiDestroyService, tuiWatch } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_APPEARANCE } from '@taiga-ui/core/tokens';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { TuiTextfieldController } from './textfield.controller';
import { TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, } from './textfield-appearance.directive';
import { TUI_TEXTFIELD_CLEANER, } from './textfield-cleaner.directive';
import { TUI_TEXTFIELD_CUSTOM_CONTENT, } from './textfield-custom-content.directive';
import { TUI_TEXTFIELD_FILLER, } from './textfield-filler.directive';
import { TUI_TEXTFIELD_ICON } from './textfield-icon.directive';
import { TUI_TEXTFIELD_ICON_LEFT, } from './textfield-icon-left.directive';
import { TUI_TEXTFIELD_LABEL_OUTSIDE, } from './textfield-label-outside.directive';
import { TUI_TEXTFIELD_OPTIONS } from './textfield-options';
import { TUI_TEXTFIELD_POSTFIX, } from './textfield-postfix.directive';
import { TUI_TEXTFIELD_PREFIX, } from './textfield-prefix.directive';
import { TUI_TEXTFIELD_SIZE } from './textfield-size.directive';
export const TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken(`[TUI_TEXTFIELD_WATCHED_CONTROLLER]`);
export const TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_OPTIONS,
            TUI_TEXTFIELD_APPEARANCE,
            TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_ICON,
            TUI_TEXTFIELD_ICON_LEFT,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_PREFIX,
            TUI_TEXTFIELD_POSTFIX,
            TUI_TEXTFIELD_FILLER,
        ],
        useFactory: (cdr, destroy$, options, legacyAppearance, ...controllers) => {
            const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(tuiWatch(cdr), takeUntil(destroy$));
            change$.subscribe();
            return new TuiTextfieldController(change$, options, legacyAppearance, ...controllers);
        },
    },
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jb3JlL2RpcmVjdGl2ZXMvdGV4dGZpZWxkLWNvbnRyb2xsZXIvdGV4dGZpZWxkLWNvbnRyb2xsZXIucHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGlCQUFpQixFQUFFLGNBQWMsRUFBVyxNQUFNLGVBQWUsQ0FBQztBQUMxRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQy9ELE9BQU8sRUFBQyxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6QyxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUM5RCxPQUFPLEVBQ0gsa0NBQWtDLEdBRXJDLE1BQU0sa0NBQWtDLENBQUM7QUFDMUMsT0FBTyxFQUNILHFCQUFxQixHQUV4QixNQUFNLCtCQUErQixDQUFDO0FBQ3ZDLE9BQU8sRUFDSCw0QkFBNEIsR0FFL0IsTUFBTSxzQ0FBc0MsQ0FBQztBQUM5QyxPQUFPLEVBQ0gsb0JBQW9CLEdBRXZCLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUFDLGtCQUFrQixFQUE0QixNQUFNLDRCQUE0QixDQUFDO0FBQ3pGLE9BQU8sRUFDSCx1QkFBdUIsR0FFMUIsTUFBTSxpQ0FBaUMsQ0FBQztBQUN6QyxPQUFPLEVBQ0gsMkJBQTJCLEdBRTlCLE1BQU0scUNBQXFDLENBQUM7QUFDN0MsT0FBTyxFQUFDLHFCQUFxQixFQUFzQixNQUFNLHFCQUFxQixDQUFDO0FBQy9FLE9BQU8sRUFDSCxxQkFBcUIsR0FFeEIsTUFBTSwrQkFBK0IsQ0FBQztBQUN2QyxPQUFPLEVBQ0gsb0JBQW9CLEdBRXZCLE1BQU0sOEJBQThCLENBQUM7QUFDdEMsT0FBTyxFQUFDLGtCQUFrQixFQUE0QixNQUFNLDRCQUE0QixDQUFDO0FBRXpGLE1BQU0sQ0FBQyxNQUFNLGdDQUFnQyxHQUN6QyxJQUFJLGNBQWMsQ0FBeUIsb0NBQW9DLENBQUMsQ0FBQztBQUVyRixNQUFNLENBQUMsTUFBTSw2QkFBNkIsR0FBYTtJQUNuRCxpQkFBaUI7SUFDakI7UUFDSSxPQUFPLEVBQUUsZ0NBQWdDO1FBQ3pDLElBQUksRUFBRTtZQUNGLGlCQUFpQjtZQUNqQixpQkFBaUI7WUFDakIscUJBQXFCO1lBQ3JCLHdCQUF3QjtZQUN4QixrQ0FBa0M7WUFDbEMscUJBQXFCO1lBQ3JCLDRCQUE0QjtZQUM1QixrQkFBa0I7WUFDbEIsdUJBQXVCO1lBQ3ZCLDJCQUEyQjtZQUMzQixrQkFBa0I7WUFDbEIsb0JBQW9CO1lBQ3BCLHFCQUFxQjtZQUNyQixvQkFBb0I7U0FDdkI7UUFDRCxVQUFVLEVBQUUsQ0FDUixHQUFzQixFQUN0QixRQUEwQixFQUMxQixPQUE0QixFQUM1QixnQkFBd0IsRUFDeEIsR0FBRyxXQVdGLEVBQ0gsRUFBRTtZQUNBLE1BQU0sT0FBTyxHQUFHLEtBQUssQ0FDakIsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBQyxPQUFPLEVBQUMsRUFBRSxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUN0RCxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEVBQUUsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7WUFFM0MsT0FBTyxDQUFDLFNBQVMsRUFBRSxDQUFDO1lBRXBCLE9BQU8sSUFBSSxzQkFBc0IsQ0FDN0IsT0FBTyxFQUNQLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsR0FBRyxXQUFXLENBQ2pCLENBQUM7UUFDTixDQUFDO0tBQ0o7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3RvclJlZiwgSW5qZWN0aW9uVG9rZW4sIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2UsIHR1aVdhdGNofSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFfSBmcm9tICdAdGFpZ2EtdWkvY29yZS90b2tlbnMnO1xuaW1wb3J0IHttZXJnZSwgTkVWRVIsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuaW1wb3J0IHtUdWlUZXh0ZmllbGRDb250cm9sbGVyfSBmcm9tICcuL3RleHRmaWVsZC5jb250cm9sbGVyJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFX0RJUkVDVElWRSxcbiAgICBUdWlUZXh0ZmllbGRBcHBlYXJhbmNlRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1hcHBlYXJhbmNlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfQ0xFQU5FUixcbiAgICBUdWlUZXh0ZmllbGRDbGVhbmVyRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1jbGVhbmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfQ1VTVE9NX0NPTlRFTlQsXG4gICAgVHVpVGV4dGZpZWxkQ3VzdG9tQ29udGVudERpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtY3VzdG9tLWNvbnRlbnQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9GSUxMRVIsXG4gICAgVHVpVGV4dGZpZWxkRmlsbGVyRGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1maWxsZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7VFVJX1RFWFRGSUVMRF9JQ09OLCBUdWlUZXh0ZmllbGRJY29uRGlyZWN0aXZlfSBmcm9tICcuL3RleHRmaWVsZC1pY29uLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1xuICAgIFRVSV9URVhURklFTERfSUNPTl9MRUZULFxuICAgIFR1aVRleHRmaWVsZEljb25MZWZ0RGlyZWN0aXZlLFxufSBmcm9tICcuL3RleHRmaWVsZC1pY29uLWxlZnQuZGlyZWN0aXZlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9MQUJFTF9PVVRTSURFLFxuICAgIFR1aVRleHRmaWVsZExhYmVsT3V0c2lkZURpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtbGFiZWwtb3V0c2lkZS5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX09QVElPTlMsIFR1aVRleHRmaWVsZE9wdGlvbnN9IGZyb20gJy4vdGV4dGZpZWxkLW9wdGlvbnMnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX1BPU1RGSVgsXG4gICAgVHVpVGV4dGZpZWxkUG9zdGZpeERpcmVjdGl2ZSxcbn0gZnJvbSAnLi90ZXh0ZmllbGQtcG9zdGZpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtcbiAgICBUVUlfVEVYVEZJRUxEX1BSRUZJWCxcbiAgICBUdWlUZXh0ZmllbGRQcmVmaXhEaXJlY3RpdmUsXG59IGZyb20gJy4vdGV4dGZpZWxkLXByZWZpeC5kaXJlY3RpdmUnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX1NJWkUsIFR1aVRleHRmaWVsZFNpemVEaXJlY3RpdmV9IGZyb20gJy4vdGV4dGZpZWxkLXNpemUuZGlyZWN0aXZlJztcblxuZXhwb3J0IGNvbnN0IFRVSV9URVhURklFTERfV0FUQ0hFRF9DT05UUk9MTEVSID1cbiAgICBuZXcgSW5qZWN0aW9uVG9rZW48VHVpVGV4dGZpZWxkQ29udHJvbGxlcj4oYFtUVUlfVEVYVEZJRUxEX1dBVENIRURfQ09OVFJPTExFUl1gKTtcblxuZXhwb3J0IGNvbnN0IFRFWFRGSUVMRF9DT05UUk9MTEVSX1BST1ZJREVSOiBQcm92aWRlciA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICB7XG4gICAgICAgIHByb3ZpZGU6IFRVSV9URVhURklFTERfV0FUQ0hFRF9DT05UUk9MTEVSLFxuICAgICAgICBkZXBzOiBbXG4gICAgICAgICAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9PUFRJT05TLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9BUFBFQVJBTkNFX0RJUkVDVElWRSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ0xFQU5FUixcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfQ1VTVE9NX0NPTlRFTlQsXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0lDT04sXG4gICAgICAgICAgICBUVUlfVEVYVEZJRUxEX0lDT05fTEVGVCxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfTEFCRUxfT1VUU0lERSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfU0laRSxcbiAgICAgICAgICAgIFRVSV9URVhURklFTERfUFJFRklYLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9QT1NURklYLFxuICAgICAgICAgICAgVFVJX1RFWFRGSUVMRF9GSUxMRVIsXG4gICAgICAgIF0sXG4gICAgICAgIHVzZUZhY3Rvcnk6IChcbiAgICAgICAgICAgIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgICAgICBkZXN0cm95JDogT2JzZXJ2YWJsZTx2b2lkPixcbiAgICAgICAgICAgIG9wdGlvbnM6IFR1aVRleHRmaWVsZE9wdGlvbnMsXG4gICAgICAgICAgICBsZWdhY3lBcHBlYXJhbmNlOiBzdHJpbmcsXG4gICAgICAgICAgICAuLi5jb250cm9sbGVyczogW1xuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZEFwcGVhcmFuY2VEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgVHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZSxcbiAgICAgICAgICAgICAgICBUdWlUZXh0ZmllbGRDdXN0b21Db250ZW50RGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZEljb25EaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgVHVpVGV4dGZpZWxkSWNvbkxlZnREaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgVHVpVGV4dGZpZWxkTGFiZWxPdXRzaWRlRGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZFNpemVEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgVHVpVGV4dGZpZWxkUHJlZml4RGlyZWN0aXZlLFxuICAgICAgICAgICAgICAgIFR1aVRleHRmaWVsZFBvc3RmaXhEaXJlY3RpdmUsXG4gICAgICAgICAgICAgICAgVHVpVGV4dGZpZWxkRmlsbGVyRGlyZWN0aXZlLFxuICAgICAgICAgICAgXVxuICAgICAgICApID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSQgPSBtZXJnZShcbiAgICAgICAgICAgICAgICAuLi5jb250cm9sbGVycy5tYXAoKHtjaGFuZ2UkfSkgPT4gY2hhbmdlJCB8fCBORVZFUiksXG4gICAgICAgICAgICApLnBpcGUodHVpV2F0Y2goY2RyKSwgdGFrZVVudGlsKGRlc3Ryb3kkKSk7XG5cbiAgICAgICAgICAgIGNoYW5nZSQuc3Vic2NyaWJlKCk7XG5cbiAgICAgICAgICAgIHJldHVybiBuZXcgVHVpVGV4dGZpZWxkQ29udHJvbGxlcihcbiAgICAgICAgICAgICAgICBjaGFuZ2UkLFxuICAgICAgICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgICAgICAgbGVnYWN5QXBwZWFyYW5jZSxcbiAgICAgICAgICAgICAgICAuLi5jb250cm9sbGVycyxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0sXG4gICAgfSxcbl07XG4iXX0=