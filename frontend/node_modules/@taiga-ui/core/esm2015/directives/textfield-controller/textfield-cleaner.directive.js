import { Directive, forwardRef, InjectionToken, Input } from '@angular/core';
import { AbstractTuiController } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
export const TUI_TEXTFIELD_CLEANER = new InjectionToken('[TUI_TEXTFIELD_CLEANER]', {
    factory: () => new TuiTextfieldCleanerDirective(),
});
export class TuiTextfieldCleanerDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.cleaner = false;
    }
}
TuiTextfieldCleanerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldCleanerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldCleanerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: { cleaner: ["tuiTextfieldCleaner", "cleaner"] }, providers: [
        {
            provide: TUI_TEXTFIELD_CLEANER,
            useExisting: forwardRef(() => TuiTextfieldCleanerDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldCleanerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldCleaner]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_CLEANER,
                            useExisting: forwardRef(() => TuiTextfieldCleanerDirective),
                        },
                    ],
                }]
        }], propDecorators: { cleaner: [{
                type: Input,
                args: ['tuiTextfieldCleaner']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGV4dGZpZWxkLWNsZWFuZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY29yZS9kaXJlY3RpdmVzL3RleHRmaWVsZC1jb250cm9sbGVyL3RleHRmaWVsZC1jbGVhbmVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxjQUFjLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFFcEQsTUFBTSxDQUFDLE1BQU0scUJBQXFCLEdBQUcsSUFBSSxjQUFjLENBQ25ELHlCQUF5QixFQUN6QjtJQUNJLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLDRCQUE0QixFQUFFO0NBQ3BELENBQ0osQ0FBQztBQVdGLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxxQkFBcUI7SUFUdkU7O1FBV0ksWUFBTyxHQUFHLEtBQUssQ0FBQztLQUNuQjs7MEhBSFksNEJBQTRCOzhHQUE1Qiw0QkFBNEIseUdBUDFCO1FBQ1A7WUFDSSxPQUFPLEVBQUUscUJBQXFCO1lBQzlCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsNEJBQTRCLENBQUM7U0FDOUQ7S0FDSjs0RkFFUSw0QkFBNEI7a0JBVHhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHVCQUF1QjtvQkFDakMsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxxQkFBcUI7NEJBQzlCLFdBQVcsRUFBRSxVQUFVLENBQUMsR0FBRyxFQUFFLDZCQUE2QixDQUFDO3lCQUM5RDtxQkFDSjtpQkFDSjs4QkFHRyxPQUFPO3NCQUROLEtBQUs7dUJBQUMscUJBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGZvcndhcmRSZWYsIEluamVjdGlvblRva2VuLCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Fic3RyYWN0VHVpQ29udHJvbGxlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbmV4cG9ydCBjb25zdCBUVUlfVEVYVEZJRUxEX0NMRUFORVIgPSBuZXcgSW5qZWN0aW9uVG9rZW48VHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZT4oXG4gICAgJ1tUVUlfVEVYVEZJRUxEX0NMRUFORVJdJyxcbiAgICB7XG4gICAgICAgIGZhY3Rvcnk6ICgpID0+IG5ldyBUdWlUZXh0ZmllbGRDbGVhbmVyRGlyZWN0aXZlKCksXG4gICAgfSxcbik7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRleHRmaWVsZENsZWFuZXJdJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RFWFRGSUVMRF9DTEVBTkVSLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IGZvcndhcmRSZWYoKCkgPT4gVHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZSksXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVGV4dGZpZWxkQ2xlYW5lckRpcmVjdGl2ZSBleHRlbmRzIEFic3RyYWN0VHVpQ29udHJvbGxlciB7XG4gICAgQElucHV0KCd0dWlUZXh0ZmllbGRDbGVhbmVyJylcbiAgICBjbGVhbmVyID0gZmFsc2U7XG59XG4iXX0=