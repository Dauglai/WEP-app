{"version":3,"file":"taiga-ui-core-providers.js","sources":["../../../projects/core/providers/is-mobile-resolution.provider.ts","../../../projects/core/providers/mode.provider.ts","../../../projects/core/providers/watched-controller-provider-factory.ts","../../../projects/core/providers/taiga-ui-core-providers.ts"],"sourcesContent":["import {ElementRef, Provider, SkipSelf} from '@angular/core';\nimport {TUI_IS_MOBILE_RES} from '@taiga-ui/core/tokens';\nimport {Observable} from 'rxjs';\n\nexport const TUI_IS_MOBILE_RES_PROVIDER: Provider = {\n    provide: TUI_IS_MOBILE_RES,\n    deps: [[new SkipSelf(), TUI_IS_MOBILE_RES], ElementRef],\n    useFactory: (\n        mobile$: Observable<boolean>,\n        {nativeElement}: ElementRef,\n    ): Observable<boolean> => {\n        nativeElement[`$.class._mobile`] = mobile$;\n\n        return mobile$;\n    },\n};\n","import {ElementRef, Optional, Provider} from '@angular/core';\nimport {TuiModeDirective} from '@taiga-ui/core/directives/mode';\nimport {TUI_MODE} from '@taiga-ui/core/tokens';\nimport {TuiBrightness} from '@taiga-ui/core/types';\nimport {Observable, of} from 'rxjs';\nimport {map, startWith} from 'rxjs/operators';\n\nexport const MODE_PROVIDER: Provider = {\n    provide: TUI_MODE,\n    deps: [[new Optional(), TuiModeDirective], ElementRef],\n    useFactory: (\n        mode: TuiModeDirective | null,\n        {nativeElement}: ElementRef,\n    ): Observable<TuiBrightness | null> => {\n        const mode$ = mode\n            ? mode.change$.pipe(\n                  startWith(null),\n                  map(() => mode.mode),\n              )\n            : of(null);\n\n        nativeElement[`$.data-mode.attr`] = mode$;\n\n        return mode$;\n    },\n};\n","import {ChangeDetectorRef} from '@angular/core';\nimport {AbstractTuiController, tuiWatch} from '@taiga-ui/cdk';\nimport {Observable} from 'rxjs';\nimport {takeUntil} from 'rxjs/operators';\n\nexport function tuiWatchedControllerFactory(\n    controller: AbstractTuiController,\n    cdr: ChangeDetectorRef,\n    destroy$: Observable<void>,\n): AbstractTuiController {\n    controller.change$.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe();\n\n    return controller;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;;;;;AAIa,MAAA,0BAA0B,GAAa;AAChD,IAAA,OAAO,EAAE,iBAAiB;IAC1B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,iBAAiB,CAAC,EAAE,UAAU,CAAC;IACvD,UAAU,EAAE,CACR,OAA4B,EAC5B,EAAC,aAAa,EAAa,KACN;AACrB,QAAA,aAAa,CAAC,CAAA,eAAA,CAAiB,CAAC,GAAG,OAAO,CAAC;AAE3C,QAAA,OAAO,OAAO,CAAC;KAClB;;;ACPQ,MAAA,aAAa,GAAa;AACnC,IAAA,OAAO,EAAE,QAAQ;IACjB,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,gBAAgB,CAAC,EAAE,UAAU,CAAC;IACtD,UAAU,EAAE,CACR,IAA6B,EAC7B,EAAC,aAAa,EAAa,KACO;QAClC,MAAM,KAAK,GAAG,IAAI;cACZ,IAAI,CAAC,OAAO,CAAC,IAAI,CACb,SAAS,CAAC,IAAI,CAAC,EACf,GAAG,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,CACvB;AACH,cAAE,EAAE,CAAC,IAAI,CAAC,CAAC;AAEf,QAAA,aAAa,CAAC,CAAA,gBAAA,CAAkB,CAAC,GAAG,KAAK,CAAC;AAE1C,QAAA,OAAO,KAAK,CAAC;KAChB;;;SCnBW,2BAA2B,CACvC,UAAiC,EACjC,GAAsB,EACtB,QAA0B,EAAA;AAE1B,IAAA,UAAU,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,SAAS,CAAC,QAAQ,CAAC,CAAC,CAAC,SAAS,EAAE,CAAC;AAExE,IAAA,OAAO,UAAU,CAAC;AACtB;;ACbA;;AAEG;;;;"}