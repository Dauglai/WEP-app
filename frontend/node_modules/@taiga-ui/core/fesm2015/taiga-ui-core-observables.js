import { EMPTY_ARRAY, tuiZonefull } from '@taiga-ui/cdk';
import { debounceTime, scan, distinctUntilChanged, switchMap, startWith, map } from 'rxjs/operators';
import { pipe } from 'rxjs';

function tuiSmartSearch(getSearchFunction, searchDebounceTimeMs = 400) {
    return source => source.pipe(debounceTime(searchDebounceTimeMs), scan((previousSearched, current) => {
        return previousSearched !== `` && current.startsWith(previousSearched)
            ? previousSearched
            : current;
    }, ``), distinctUntilChanged(), switchMap(value => getSearchFunction(value).pipe(startWith(null))), startWith(EMPTY_ARRAY));
}

/**
 * Works like regular map + distinctUntilChanged
 * and only returns to NgZone if value has changed
 *
 * @param project mapping function
 * @param ngZone NgZone instance
 */
function tuiZonefulMap(project, ngZone) {
    return pipe(map(project), distinctUntilChanged(), tuiZonefull(ngZone));
}

/**
 * Generated bundle index. Do not edit.
 */

export { tuiSmartSearch, tuiZonefulMap };
//# sourceMappingURL=taiga-ui-core-observables.js.map
