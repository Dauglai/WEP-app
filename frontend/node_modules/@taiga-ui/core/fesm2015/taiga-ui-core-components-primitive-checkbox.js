import * as i0 from '@angular/core';
import { InjectionToken, Component, ChangeDetectionStrategy, Inject, Input, HostBinding, NgModule } from '@angular/core';
import { __decorate } from 'tslib';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core/components/svg';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import * as i2 from '@taiga-ui/core/directives/wrapper';
import { TuiWrapperModule } from '@taiga-ui/core/directives/wrapper';
import * as i3 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/** Default values for the checkbox options. */
const TUI_CHECKBOX_DEFAULT_OPTIONS = {
    size: `m`,
    appearances: {
        unchecked: "outline" /* Outline */,
        checked: "primary" /* Primary */,
        indeterminate: "primary" /* Primary */,
    },
    icons: {
        checked({ $implicit }) {
            return $implicit === `m` ? `tuiIconCheck` : `tuiIconCheckLarge`;
        },
        indeterminate({ $implicit }) {
            return $implicit === `m` ? `tuiIconMinus` : `tuiIconMinusLarge`;
        },
    },
};
/**
 * Default parameters for checkbox component
 */
const TUI_CHECKBOX_OPTIONS = new InjectionToken(`[TUI_CHECKBOX_OPTIONS]`, {
    factory: () => TUI_CHECKBOX_DEFAULT_OPTIONS,
});
const tuiCheckboxOptionsProvider = (options) => ({
    provide: TUI_CHECKBOX_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_CHECKBOX_DEFAULT_OPTIONS), options),
});

class TuiPrimitiveCheckboxComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.disabled = false;
        this.focused = false;
        this.hovered = false;
        this.pressed = false;
        this.invalid = false;
        this.icon = this.options.icons.checked;
        this.value = false;
    }
    set valueSetter(value) {
        if (value !== false) {
            this.setCurrentIcon(value);
        }
        this.value = value;
    }
    get appearance() {
        switch (this.value) {
            case false:
                return this.options.appearances.unchecked;
            case true:
                return this.options.appearances.checked;
            default:
                return this.options.appearances.indeterminate;
        }
    }
    get empty() {
        return this.value === false;
    }
    setCurrentIcon(value) {
        this.icon =
            value === null
                ? this.options.icons.indeterminate
                : this.options.icons.checked;
    }
}
TuiPrimitiveCheckboxComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxComponent, deps: [{ token: TUI_CHECKBOX_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveCheckboxComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCheckboxComponent, selector: "tui-primitive-checkbox", inputs: { size: "size", disabled: "disabled", focused: "focused", hovered: "hovered", pressed: "pressed", invalid: "invalid", valueSetter: ["value", "valueSetter"] }, host: { properties: { "attr.data-size": "this.size" } }, ngImport: i0, template: "<div\n    tuiWrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"focused\"\n    [hover]=\"hovered\"\n    [active]=\"pressed\"\n    [invalid]=\"invalid\"\n>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        class=\"t-mark\"\n        [class.t-mark_on]=\"!empty\"\n        [src]=\"src\"\n    ></tui-svg>\n    <ng-content></ng-content>\n</div>\n", styles: [":host{display:block;font-size:0;flex-shrink:0}:host[data-size=m]{width:1rem;height:1rem;border-radius:var(--tui-radius-xs)}:host[data-size=l]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}.t-mark{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;width:100%;height:100%;transform:scale(0)}.t-mark_on{transform:scale(1)}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i3.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "disabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "focused", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "hovered", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "pressed", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "invalid", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCheckboxComponent.prototype, "valueSetter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-checkbox',
                    templateUrl: './primitive-checkbox.template.html',
                    styleUrls: ['./primitive-checkbox.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_CHECKBOX_OPTIONS]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], disabled: [{
                type: Input
            }], focused: [{
                type: Input
            }], hovered: [{
                type: Input
            }], pressed: [{
                type: Input
            }], invalid: [{
                type: Input
            }], valueSetter: [{
                type: Input,
                args: ['value']
            }] } });

class TuiPrimitiveCheckboxModule {
}
TuiPrimitiveCheckboxModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPrimitiveCheckboxModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxModule, declarations: [TuiPrimitiveCheckboxComponent], imports: [TuiSvgModule, TuiWrapperModule, PolymorpheusModule], exports: [TuiPrimitiveCheckboxComponent] });
TuiPrimitiveCheckboxModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxModule, imports: [[TuiSvgModule, TuiWrapperModule, PolymorpheusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCheckboxModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [TuiSvgModule, TuiWrapperModule, PolymorpheusModule],
                    declarations: [TuiPrimitiveCheckboxComponent],
                    exports: [TuiPrimitiveCheckboxComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_CHECKBOX_DEFAULT_OPTIONS, TUI_CHECKBOX_OPTIONS, TuiPrimitiveCheckboxComponent, TuiPrimitiveCheckboxModule, tuiCheckboxOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-primitive-checkbox.js.map
