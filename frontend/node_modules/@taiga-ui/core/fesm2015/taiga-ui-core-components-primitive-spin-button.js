import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Inject, ViewChild, Input, Output, NgModule } from '@angular/core';
import * as i3 from '@taiga-ui/cdk';
import { AbstractTuiInteractive, tuiIsNativeFocused, tuiDefaultProp, TuiPreventDefaultModule } from '@taiga-ui/cdk';
import { TUI_SPIN_TEXTS } from '@taiga-ui/core/tokens';
import * as i1 from '@taiga-ui/core/components/button';
import { TuiButtonModule } from '@taiga-ui/core/components/button';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from 'rxjs';

class TuiPrimitiveSpinButtonComponent extends AbstractTuiInteractive {
    constructor(spinTexts$) {
        super();
        this.spinTexts$ = spinTexts$;
        this.disabled = false;
        this.mode = "flat" /* Flat */;
        this.leftDisabled = false;
        this.rightDisabled = false;
        this.leftClick = new EventEmitter();
        this.rightClick = new EventEmitter();
    }
    get focused() {
        return !!this.wrapper && tuiIsNativeFocused(this.wrapper.nativeElement);
    }
    get leftComputedDisabled() {
        return this.computedDisabled || this.leftDisabled;
    }
    get rightComputedDisabled() {
        return this.computedDisabled || this.rightDisabled;
    }
    onLeftClick() {
        if (!this.leftComputedDisabled) {
            this.leftClick.emit();
        }
    }
    onRightClick() {
        if (!this.rightComputedDisabled) {
            this.rightClick.emit();
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
}
TuiPrimitiveSpinButtonComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, deps: [{ token: TUI_SPIN_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveSpinButtonComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveSpinButtonComponent, selector: "tui-primitive-spin-button", inputs: { disabled: "disabled", mode: "mode", leftDisabled: "leftDisabled", rightDisabled: "rightDisabled" }, outputs: { leftClick: "leftClick", rightClick: "rightClick" }, viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    *ngIf=\"spinTexts$ | async as texts\"\n    #wrapper\n    tuiPreventDefault=\"mousedown\"\n    class=\"t-wrapper\"\n    (focusin)=\"onFocused(true)\"\n    (focusout)=\"onFocused(false)\"\n    (keydown.arrowLeft)=\"onLeftClick()\"\n    (keydown.arrowRight)=\"onRightClick()\"\n>\n    <button\n        tuiIconButton\n        type=\"button\"\n        size=\"xs\"\n        appearance=\"\"\n        automation-id=\"tui-primitive-spin-button__left\"\n        icon=\"tuiIconChevronLeftLarge\"\n        class=\"t-arrow\"\n        [class.t-arrow_hidden]=\"leftComputedDisabled\"\n        [title]=\"texts[0]\"\n        [focusable]=\"computedFocusable\"\n        (click)=\"onLeftClick()\"\n    ></button>\n    <span class=\"t-content t-calendar-title\">\n        <ng-content></ng-content>\n    </span>\n    <button\n        tuiIconButton\n        type=\"button\"\n        size=\"xs\"\n        appearance=\"\"\n        automation-id=\"tui-primitive-spin-button__right\"\n        icon=\"tuiIconChevronRightLarge\"\n        class=\"t-arrow\"\n        [class.t-arrow_hidden]=\"rightComputedDisabled\"\n        [title]=\"texts[1]\"\n        [focusable]=\"computedFocusable\"\n        (click)=\"onRightClick()\"\n    ></button>\n</div>\n", styles: [":host{display:block;font:var(--tui-font-text-l);text-align:center;font-weight:bold}.t-wrapper{display:flex;align-items:center;justify-content:space-between;outline:none}.t-arrow{margin:0 .25rem}.t-arrow_hidden{visibility:hidden}.t-content{padding:0 .5rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "disabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "mode", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "leftDisabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveSpinButtonComponent.prototype, "rightDisabled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-spin-button',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './primitive-spin-button.template.html',
                    styleUrls: ['./primitive-spin-button.style.less'],
                }]
        }], ctorParameters: function () { return [{ type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SPIN_TEXTS]
                }] }]; }, propDecorators: { wrapper: [{
                type: ViewChild,
                args: ['wrapper']
            }], disabled: [{
                type: Input
            }], mode: [{
                type: Input
            }], leftDisabled: [{
                type: Input
            }], rightDisabled: [{
                type: Input
            }], leftClick: [{
                type: Output
            }], rightClick: [{
                type: Output
            }] } });

class TuiPrimitiveSpinButtonModule {
}
TuiPrimitiveSpinButtonModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPrimitiveSpinButtonModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, declarations: [TuiPrimitiveSpinButtonComponent], imports: [CommonModule, TuiPreventDefaultModule, TuiButtonModule], exports: [TuiPrimitiveSpinButtonComponent] });
TuiPrimitiveSpinButtonModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, imports: [[CommonModule, TuiPreventDefaultModule, TuiButtonModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveSpinButtonModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiPreventDefaultModule, TuiButtonModule],
                    declarations: [TuiPrimitiveSpinButtonComponent],
                    exports: [TuiPrimitiveSpinButtonComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPrimitiveSpinButtonComponent, TuiPrimitiveSpinButtonModule };
//# sourceMappingURL=taiga-ui-core-components-primitive-spin-button.js.map
