import * as i0 from '@angular/core';
import { InjectionToken, forwardRef, Directive, Input, NgModule, ChangeDetectorRef } from '@angular/core';
import { AbstractTuiController, TuiDestroyService, tuiWatch } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_APPEARANCE } from '@taiga-ui/core/tokens';
import { merge, NEVER } from 'rxjs';
import { takeUntil } from 'rxjs/operators';

class TuiTextfieldController {
    constructor(change$, options, legacyAppearance, appearanceDirective, cleanerDirective, customContentDirective, iconDirective, iconLeftDirective, labelOutsideDirective, sizeDirective, prefixDirective, postfixDirective, fillerDirective) {
        this.change$ = change$;
        this.options = options;
        this.legacyAppearance = legacyAppearance;
        this.appearanceDirective = appearanceDirective;
        this.cleanerDirective = cleanerDirective;
        this.customContentDirective = customContentDirective;
        this.iconDirective = iconDirective;
        this.iconLeftDirective = iconLeftDirective;
        this.labelOutsideDirective = labelOutsideDirective;
        this.sizeDirective = sizeDirective;
        this.prefixDirective = prefixDirective;
        this.postfixDirective = postfixDirective;
        this.fillerDirective = fillerDirective;
    }
    get appearance() {
        return this.appearanceDirective.appearance || this.legacyAppearance;
    }
    get cleaner() {
        return this.cleanerDirective.cleaner;
    }
    get customContent() {
        return this.customContentDirective.customContent || ``;
    }
    get icon() {
        return this.iconDirective.icon;
    }
    get iconLeft() {
        return this.iconLeftDirective.iconLeft;
    }
    get labelOutside() {
        return this.labelOutsideDirective.labelOutside;
    }
    get size() {
        return this.sizeDirective.size;
    }
    get prefix() {
        return this.prefixDirective.prefix;
    }
    get postfix() {
        return this.postfixDirective.postfix;
    }
    get filler() {
        return this.fillerDirective.filler;
    }
}

// TODO: rename to TUI_TEXTFIELD_APPEARANCE in v4
const TUI_TEXTFIELD_APPEARANCE_DIRECTIVE = new InjectionToken('[TUI_TEXTFIELD_APPEARANCE_DIRECTIVE]', {
    factory: () => new TuiTextfieldAppearanceDirective(),
});
class TuiTextfieldAppearanceDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        // it's an empty string by default for backward compatibility
        // (see comment https://github.com/Tinkoff/taiga-ui/pull/3007#issuecomment-1315179508)
        this.appearance = '';
    }
}
TuiTextfieldAppearanceDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldAppearanceDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldAppearanceDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldAppearanceDirective, selector: "[tuiTextfieldAppearance]", inputs: { appearance: ["tuiTextfieldAppearance", "appearance"] }, providers: [
        {
            provide: TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
            useExisting: forwardRef(() => TuiTextfieldAppearanceDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldAppearanceDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldAppearance]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
                            useExisting: forwardRef(() => TuiTextfieldAppearanceDirective),
                        },
                    ],
                }]
        }], propDecorators: { appearance: [{
                type: Input,
                args: ['tuiTextfieldAppearance']
            }] } });

const TUI_TEXTFIELD_CLEANER = new InjectionToken('[TUI_TEXTFIELD_CLEANER]', {
    factory: () => new TuiTextfieldCleanerDirective(),
});
class TuiTextfieldCleanerDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.cleaner = false;
    }
}
TuiTextfieldCleanerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldCleanerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldCleanerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: { cleaner: ["tuiTextfieldCleaner", "cleaner"] }, providers: [
        {
            provide: TUI_TEXTFIELD_CLEANER,
            useExisting: forwardRef(() => TuiTextfieldCleanerDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldCleanerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldCleaner]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_CLEANER,
                            useExisting: forwardRef(() => TuiTextfieldCleanerDirective),
                        },
                    ],
                }]
        }], propDecorators: { cleaner: [{
                type: Input,
                args: ['tuiTextfieldCleaner']
            }] } });

const TUI_TEXTFIELD_CUSTOM_CONTENT = new InjectionToken('[TUI_TEXTFIELD_CUSTOM_CONTENT]', {
    factory: () => new TuiTextfieldCustomContentDirective(),
});
class TuiTextfieldCustomContentDirective extends AbstractTuiController {
}
TuiTextfieldCustomContentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldCustomContentDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldCustomContentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: { customContent: ["tuiTextfieldCustomContent", "customContent"] }, providers: [
        {
            provide: TUI_TEXTFIELD_CUSTOM_CONTENT,
            useExisting: forwardRef(() => TuiTextfieldCustomContentDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldCustomContentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldCustomContent]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_CUSTOM_CONTENT,
                            useExisting: forwardRef(() => TuiTextfieldCustomContentDirective),
                        },
                    ],
                }]
        }], propDecorators: { customContent: [{
                type: Input,
                args: ['tuiTextfieldCustomContent']
            }] } });

const TUI_TEXTFIELD_FILLER = new InjectionToken('[TUI_TEXTFIELD_FILLER]', {
    factory: () => new TuiTextfieldFillerDirective(),
});
class TuiTextfieldFillerDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.filler = '';
    }
}
TuiTextfieldFillerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldFillerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldFillerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: { filler: ["tuiTextfieldFiller", "filler"] }, providers: [
        {
            provide: TUI_TEXTFIELD_FILLER,
            useExisting: forwardRef(() => TuiTextfieldFillerDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldFillerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldFiller]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_FILLER,
                            useExisting: forwardRef(() => TuiTextfieldFillerDirective),
                        },
                    ],
                }]
        }], propDecorators: { filler: [{
                type: Input,
                args: ['tuiTextfieldFiller']
            }] } });

const TUI_TEXTFIELD_ICON = new InjectionToken('[TUI_TEXTFIELD_ICON]', {
    factory: tuiIconDirectiveFactory,
});
class TuiTextfieldIconDirective extends AbstractTuiController {
}
TuiTextfieldIconDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldIconDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldIconDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: { icon: ["tuiTextfieldIcon", "icon"] }, providers: [
        {
            provide: TUI_TEXTFIELD_ICON,
            useExisting: forwardRef(() => TuiTextfieldIconDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldIconDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldIcon]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_ICON,
                            useExisting: forwardRef(() => TuiTextfieldIconDirective),
                        },
                    ],
                }]
        }], propDecorators: { icon: [{
                type: Input,
                args: ['tuiTextfieldIcon']
            }] } });
function tuiIconDirectiveFactory() {
    return new TuiTextfieldIconDirective();
}

const TUI_TEXTFIELD_ICON_LEFT = new InjectionToken('[TUI_TEXTFIELD_ICON_LEFT]', {
    factory: tuiIconLeftDirectiveFactory,
});
class TuiTextfieldIconLeftDirective extends AbstractTuiController {
}
TuiTextfieldIconLeftDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldIconLeftDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldIconLeftDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldIconLeftDirective, selector: "[tuiTextfieldIconLeft]", inputs: { iconLeft: ["tuiTextfieldIconLeft", "iconLeft"] }, providers: [
        {
            provide: TUI_TEXTFIELD_ICON_LEFT,
            useExisting: forwardRef(() => TuiTextfieldIconLeftDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldIconLeftDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldIconLeft]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_ICON_LEFT,
                            useExisting: forwardRef(() => TuiTextfieldIconLeftDirective),
                        },
                    ],
                }]
        }], propDecorators: { iconLeft: [{
                type: Input,
                args: ['tuiTextfieldIconLeft']
            }] } });
function tuiIconLeftDirectiveFactory() {
    return new TuiTextfieldIconLeftDirective();
}

const TUI_TEXTFIELD_LABEL_OUTSIDE = new InjectionToken('[TUI_TEXTFIELD_LABEL_OUTSIDE]', {
    factory: () => new TuiTextfieldLabelOutsideDirective(),
});
class TuiTextfieldLabelOutsideDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.labelOutside = false;
    }
}
TuiTextfieldLabelOutsideDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldLabelOutsideDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldLabelOutsideDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: { labelOutside: ["tuiTextfieldLabelOutside", "labelOutside"] }, providers: [
        {
            provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
            useExisting: forwardRef(() => TuiTextfieldLabelOutsideDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldLabelOutsideDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldLabelOutside]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_LABEL_OUTSIDE,
                            useExisting: forwardRef(() => TuiTextfieldLabelOutsideDirective),
                        },
                    ],
                }]
        }], propDecorators: { labelOutside: [{
                type: Input,
                args: ['tuiTextfieldLabelOutside']
            }] } });

const TUI_TEXTFIELD_POSTFIX = new InjectionToken('[TUI_TEXTFIELD_POSTFIX]', {
    factory: () => new TuiTextfieldPostfixDirective(),
});
class TuiTextfieldPostfixDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.postfix = '';
    }
}
TuiTextfieldPostfixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldPostfixDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldPostfixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: { postfix: ["tuiTextfieldPostfix", "postfix"] }, providers: [
        {
            provide: TUI_TEXTFIELD_POSTFIX,
            useExisting: forwardRef(() => TuiTextfieldPostfixDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldPostfixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldPostfix]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_POSTFIX,
                            useExisting: forwardRef(() => TuiTextfieldPostfixDirective),
                        },
                    ],
                }]
        }], propDecorators: { postfix: [{
                type: Input,
                args: ['tuiTextfieldPostfix']
            }] } });

const TUI_TEXTFIELD_PREFIX = new InjectionToken('[TUI_TEXTFIELD_PREFIX]', {
    factory: () => new TuiTextfieldPrefixDirective(),
});
class TuiTextfieldPrefixDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.prefix = '';
    }
}
TuiTextfieldPrefixDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldPrefixDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldPrefixDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: { prefix: ["tuiTextfieldPrefix", "prefix"] }, providers: [
        {
            provide: TUI_TEXTFIELD_PREFIX,
            useExisting: forwardRef(() => TuiTextfieldPrefixDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldPrefixDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldPrefix]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_PREFIX,
                            useExisting: forwardRef(() => TuiTextfieldPrefixDirective),
                        },
                    ],
                }]
        }], propDecorators: { prefix: [{
                type: Input,
                args: ['tuiTextfieldPrefix']
            }] } });

const TUI_TEXTFIELD_SIZE = new InjectionToken('[TUI_TEXTFIELD_SIZE]', {
    factory: () => new TuiTextfieldSizeDirective(),
});
class TuiTextfieldSizeDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.size = 'l';
    }
}
TuiTextfieldSizeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldSizeDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextfieldSizeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldSizeDirective, selector: "[tuiTextfieldSize]", inputs: { size: ["tuiTextfieldSize", "size"] }, providers: [
        {
            provide: TUI_TEXTFIELD_SIZE,
            useExisting: forwardRef(() => TuiTextfieldSizeDirective),
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldSizeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTextfieldSize]',
                    providers: [
                        {
                            provide: TUI_TEXTFIELD_SIZE,
                            useExisting: forwardRef(() => TuiTextfieldSizeDirective),
                        },
                    ],
                }]
        }], propDecorators: { size: [{
                type: Input,
                args: ['tuiTextfieldSize']
            }] } });

class TuiTextfieldControllerModule {
}
TuiTextfieldControllerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldControllerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTextfieldControllerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldControllerModule, declarations: [TuiTextfieldAppearanceDirective,
        TuiTextfieldCleanerDirective,
        TuiTextfieldCustomContentDirective,
        TuiTextfieldLabelOutsideDirective,
        TuiTextfieldSizeDirective,
        TuiTextfieldIconDirective,
        TuiTextfieldIconLeftDirective,
        TuiTextfieldPrefixDirective,
        TuiTextfieldPostfixDirective,
        TuiTextfieldFillerDirective], exports: [TuiTextfieldAppearanceDirective,
        TuiTextfieldCleanerDirective,
        TuiTextfieldCustomContentDirective,
        TuiTextfieldLabelOutsideDirective,
        TuiTextfieldSizeDirective,
        TuiTextfieldIconDirective,
        TuiTextfieldIconLeftDirective,
        TuiTextfieldPrefixDirective,
        TuiTextfieldPostfixDirective,
        TuiTextfieldFillerDirective] });
TuiTextfieldControllerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldControllerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldControllerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [
                        TuiTextfieldAppearanceDirective,
                        TuiTextfieldCleanerDirective,
                        TuiTextfieldCustomContentDirective,
                        TuiTextfieldLabelOutsideDirective,
                        TuiTextfieldSizeDirective,
                        TuiTextfieldIconDirective,
                        TuiTextfieldIconLeftDirective,
                        TuiTextfieldPrefixDirective,
                        TuiTextfieldPostfixDirective,
                        TuiTextfieldFillerDirective,
                    ],
                    exports: [
                        TuiTextfieldAppearanceDirective,
                        TuiTextfieldCleanerDirective,
                        TuiTextfieldCustomContentDirective,
                        TuiTextfieldLabelOutsideDirective,
                        TuiTextfieldSizeDirective,
                        TuiTextfieldIconDirective,
                        TuiTextfieldIconLeftDirective,
                        TuiTextfieldPrefixDirective,
                        TuiTextfieldPostfixDirective,
                        TuiTextfieldFillerDirective,
                    ],
                }]
        }] });

/** Default values for primitive textfield options */
const TUI_TEXTFIELD_DEFAULT_OPTIONS = {
    iconCleaner: `tuiIconClose`,
};
/**
 * Default parameters for textfield
 */
const TUI_TEXTFIELD_OPTIONS = new InjectionToken(`[TUI_TEXTFIELD_OPTIONS]`, { factory: () => TUI_TEXTFIELD_DEFAULT_OPTIONS });
const tuiTextfieldOptionsProvider = (options) => ({
    provide: TUI_TEXTFIELD_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_TEXTFIELD_DEFAULT_OPTIONS), options),
});

const TUI_TEXTFIELD_WATCHED_CONTROLLER = new InjectionToken(`[TUI_TEXTFIELD_WATCHED_CONTROLLER]`);
const TEXTFIELD_CONTROLLER_PROVIDER = [
    TuiDestroyService,
    {
        provide: TUI_TEXTFIELD_WATCHED_CONTROLLER,
        deps: [
            ChangeDetectorRef,
            TuiDestroyService,
            TUI_TEXTFIELD_OPTIONS,
            TUI_TEXTFIELD_APPEARANCE,
            TUI_TEXTFIELD_APPEARANCE_DIRECTIVE,
            TUI_TEXTFIELD_CLEANER,
            TUI_TEXTFIELD_CUSTOM_CONTENT,
            TUI_TEXTFIELD_ICON,
            TUI_TEXTFIELD_ICON_LEFT,
            TUI_TEXTFIELD_LABEL_OUTSIDE,
            TUI_TEXTFIELD_SIZE,
            TUI_TEXTFIELD_PREFIX,
            TUI_TEXTFIELD_POSTFIX,
            TUI_TEXTFIELD_FILLER,
        ],
        useFactory: (cdr, destroy$, options, legacyAppearance, ...controllers) => {
            const change$ = merge(...controllers.map(({ change$ }) => change$ || NEVER)).pipe(tuiWatch(cdr), takeUntil(destroy$));
            change$.subscribe();
            return new TuiTextfieldController(change$, options, legacyAppearance, ...controllers);
        },
    },
];

/**
 * Generated bundle index. Do not edit.
 */

export { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_APPEARANCE_DIRECTIVE, TUI_TEXTFIELD_CLEANER, TUI_TEXTFIELD_CUSTOM_CONTENT, TUI_TEXTFIELD_DEFAULT_OPTIONS, TUI_TEXTFIELD_FILLER, TUI_TEXTFIELD_ICON, TUI_TEXTFIELD_ICON_LEFT, TUI_TEXTFIELD_LABEL_OUTSIDE, TUI_TEXTFIELD_OPTIONS, TUI_TEXTFIELD_POSTFIX, TUI_TEXTFIELD_PREFIX, TUI_TEXTFIELD_SIZE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiTextfieldAppearanceDirective, TuiTextfieldCleanerDirective, TuiTextfieldController, TuiTextfieldControllerModule, TuiTextfieldCustomContentDirective, TuiTextfieldFillerDirective, TuiTextfieldIconDirective, TuiTextfieldIconLeftDirective, TuiTextfieldLabelOutsideDirective, TuiTextfieldPostfixDirective, TuiTextfieldPrefixDirective, TuiTextfieldSizeDirective, tuiIconDirectiveFactory, tuiIconLeftDirectiveFactory, tuiTextfieldOptionsProvider };
//# sourceMappingURL=taiga-ui-core-directives-textfield-controller.js.map
