import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ElementRef, Component, ChangeDetectionStrategy, Inject, ViewChild, HostBinding, HostListener, EventEmitter, Optional, Input, Output, ContentChildren, Directive, NgModule } from '@angular/core';
import * as i6 from '@taiga-ui/cdk';
import { TUI_FOCUSABLE_ITEM_ACCESSOR, AbstractTuiInteractive, tuiIsNativeFocusedIn, tuiAsFocusableItemAccessor, tuiDefaultProp, tuiPure, TuiIdService, TuiFocusableModule, TuiAutofilledModule } from '@taiga-ui/cdk';
import * as i12 from '@taiga-ui/core/directives/hint';
import { TuiHintOptionsDirective } from '@taiga-ui/core/directives/hint';
import * as i11 from '@taiga-ui/core/directives/textfield-controller';
import { TUI_TEXTFIELD_WATCHED_CONTROLLER, TUI_TEXTFIELD_OPTIONS, TEXTFIELD_CONTROLLER_PROVIDER } from '@taiga-ui/core/directives/textfield-controller';
import { MODE_PROVIDER } from '@taiga-ui/core/providers';
import { TUI_MODE, tuiAsTextfieldHost, TUI_TEXTFIELD_HOST, TUI_LEGACY_MASK } from '@taiga-ui/core/tokens';
import { tuiGetBorder } from '@taiga-ui/core/utils/miscellaneous';
import * as i9 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusOutletDirective, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i10 from 'rxjs';
import { BehaviorSubject, fromEvent } from 'rxjs';
import { delay, filter, map, distinctUntilChanged } from 'rxjs/operators';
import * as i1 from '@taiga-ui/core/components/svg';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import * as i3 from '@taiga-ui/core/components/tooltip';
import { TuiTooltipModule } from '@taiga-ui/core/components/tooltip';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@taiga-ui/core/directives/wrapper';
import { TuiWrapperModule } from '@taiga-ui/core/directives/wrapper';
import * as i7 from '@taiga-ui/core/directives/mask-accessor';
import { TuiMaskAccessorModule } from '@taiga-ui/core/directives/mask-accessor';
import * as i8 from '@angular/forms';
import { FormsModule } from '@angular/forms';
import { AbstractTuiTextfieldHost } from '@taiga-ui/core/abstract';
import * as i1$1 from '@taiga-ui/core/directives';
import { TUI_TEXTFIELD_WATCHED_CONTROLLER as TUI_TEXTFIELD_WATCHED_CONTROLLER$1, TEXTFIELD_CONTROLLER_PROVIDER as TEXTFIELD_CONTROLLER_PROVIDER$1, TUI_TEXTFIELD_DEFAULT_OPTIONS, TUI_TEXTFIELD_OPTIONS as TUI_TEXTFIELD_OPTIONS$1, tuiTextfieldOptionsProvider } from '@taiga-ui/core/directives';

class TuiValueDecorationComponent {
    constructor(textfield) {
        this.textfield = textfield;
        this.prefix$ = new BehaviorSubject('');
        this.pre$ = this.prefix$.pipe(delay(0), filter(() => { var _a; return !!((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.isConnected); }), map(() => { var _a; return ((_a = this.pre) === null || _a === void 0 ? void 0 : _a.nativeElement.offsetWidth) || 0; }), distinctUntilChanged());
    }
    get isContextTable() {
        return this.textfield.appearance === "table" /* Table */;
    }
    get value() {
        return this.textfield.value;
    }
    get filler() {
        const { focused, placeholder, exampleText, value, textfield } = this;
        if (placeholder && exampleText) {
            return '';
        }
        return focused ? exampleText || textfield.filler.slice(value.length) : '';
    }
    get prefix() {
        return this.decorationsVisible ? this.textfield.prefix : '';
    }
    get postfix() {
        return this.decorationsVisible ? this.computedPostfix : '';
    }
    ngDoCheck() {
        this.prefix$.next(this.prefix);
    }
    get placeholder() {
        var _a;
        return ((_a = this.textfield.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) || '';
    }
    get exampleText() {
        return !this.value && this.focused ? this.placeholder : '';
    }
    get decorationsVisible() {
        return !!this.value || (this.focused && !this.placeholder);
    }
    get focused() {
        return this.textfield.computedFocused && !this.textfield.readOnly;
    }
    get computedPostfix() {
        return this.textfield.postfix && (this.filler || this.value)
            ? ` ${this.textfield.postfix}`
            : this.textfield.postfix;
    }
}
TuiValueDecorationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiValueDecorationComponent, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR }], target: i0.ɵɵFactoryTarget.Component });
TuiValueDecorationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiValueDecorationComponent, selector: "tui-value-decoration", host: { listeners: { "animationstart": "ngDoCheck()" }, properties: { "class._table": "this.isContextTable" } }, viewQueries: [{ propertyName: "pre", first: true, predicate: ["pre"], descendants: true, read: ElementRef, static: true }], ngImport: i0, template: "<span\n    #pre\n    class=\"t-prefix t-inline\"\n    [textContent]=\"prefix\"\n></span>\n<span\n    class=\"t-ghost t-inline\"\n    [textContent]=\"value\"\n></span>\n<span\n    class=\"t-filler t-inline\"\n    [textContent]=\"filler\"\n></span>\n<span\n    class=\"t-postfix t-inline\"\n    [textContent]=\"postfix\"\n></span>\n", styles: [":host{position:absolute;display:block;height:1.25rem;line-height:1;width:100%;margin:-1.25rem 0;padding:.625rem 0;box-sizing:content-box;color:var(--tui-text-01);animation:tuiPresent 1s;white-space:nowrap}:host._table{position:static}:host-context(tui-textfield[data-mode=\"onDark\"]) :host{color:var(--tui-text-01-night)}:host:after{content:\"\";display:inline-block;vertical-align:middle;height:100%}.t-ghost{visibility:hidden;white-space:pre;text-overflow:clip}.t-prefix,.t-postfix{white-space:pre}.t-filler{overflow:hidden;color:var(--tui-text-03);text-overflow:ellipsis;max-width:100%;white-space:nowrap}:host-context(tui-textfield[data-mode=\"onDark\"]) .t-filler{color:var(--tui-text-03-night)}.t-inline{display:inline-block;vertical-align:middle}\n"], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiValueDecorationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-value-decoration',
                    templateUrl: './value-decoration.template.html',
                    styleUrls: ['./value-decoration.style.less'],
                    // It follows Change Detection of PrimitiveTextfield
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }]; }, propDecorators: { pre: [{
                type: ViewChild,
                args: ['pre', { read: ElementRef, static: true }]
            }], isContextTable: [{
                type: HostBinding,
                args: ['class._table']
            }], ngDoCheck: [{
                type: HostListener,
                args: ['animationstart']
            }] } });

const ICON_PADDING_L = 1.75;
const ICON_PADDING = 1.625;
class TuiPrimitiveTextfieldComponent extends AbstractTuiInteractive {
    constructor(mode$, controller, hintOptions, options, el) {
        super();
        this.mode$ = mode$;
        this.controller = controller;
        this.hintOptions = hintOptions;
        this.options = options;
        this.el = el;
        this.editable = true;
        /** @deprecated use `tuiTextfieldFiller` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldFiller = '';
        /**
         * @deprecated:
         * use `tuiTextfieldOptionsProvider({iconCleaner: `tuiIconChevronUp`})`
         */
        this.iconCleaner = this.options.iconCleaner;
        this.readOnly = false;
        this.invalid = false;
        this.disabled = false;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldPrefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldPostfix = '';
        this.value = '';
        this.valueChange = new EventEmitter();
        this.autofilled = false;
    }
    get prefix() {
        return this.textfieldPrefix || this.controller.prefix;
    }
    get postfix() {
        return this.textfieldPostfix || this.controller.postfix;
    }
    get filler() {
        return this.textfieldFiller || this.controller.filler;
    }
    get nativeFocusableElement() {
        if (this.computedDisabled || !this.focusableElement) {
            return null;
        }
        const { nativeElement } = this.focusableElement;
        return (nativeElement.previousElementSibling ||
            nativeElement);
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    get appearance() {
        return this.controller.appearance;
    }
    get size() {
        return this.controller.size;
    }
    get computedInvalid() {
        return !this.readOnly && !this.disabled && this.invalid;
    }
    get inputHidden() {
        var _a;
        return !!((_a = this.content) === null || _a === void 0 ? void 0 : _a.length);
    }
    get hasValue() {
        return !!this.value;
    }
    get hasCleaner() {
        return (this.controller.cleaner &&
            this.hasValue &&
            !this.computedDisabled &&
            !this.readOnly);
    }
    get hasTooltip() {
        var _a;
        return !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && !this.computedDisabled;
    }
    get hasCustomContent() {
        return !!this.controller.customContent;
    }
    get showOnlyPlaceholder() {
        return (this.focused &&
            this.placeholderVisible &&
            (this.size === 's' || (this.size === 'm' && !this.placeholderRaisable)));
    }
    get placeholderVisible() {
        var _a;
        const hasDecor = ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.placeholder) ||
            this.prefix ||
            this.postfix ||
            this.filler;
        const showDecor = hasDecor && !this.readOnly && this.computedFocused;
        return !this.hasValue && !showDecor;
    }
    get hasPlaceholder() {
        return (!this.showOnlyPlaceholder &&
            (this.placeholderRaisable || this.placeholderVisible));
    }
    get placeholderRaised() {
        return (this.placeholderRaisable &&
            ((this.computedFocused && !this.readOnly) || this.hasValue || this.autofilled));
    }
    get borderStart() {
        return this.iconLeftContent ? this.iconPaddingLeft : 0;
    }
    get borderEnd() {
        return tuiGetBorder(!!this.iconContent, this.hasCleaner, this.hasTooltip, this.hasCustomContent);
    }
    get iconContent() {
        return this.controller.icon;
    }
    get iconLeftContent() {
        return this.controller.iconLeft;
    }
    // Safari expiration date autofill workaround
    get name() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.autocomplete) === 'cc-exp'
            ? 'ccexpiryyear'
            : null;
    }
    get computedId() {
        var _a;
        return ((_a = this.nativeFocusableElement) === null || _a === void 0 ? void 0 : _a.id) || '';
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    getIndent$(element) {
        return fromEvent(element, 'scroll').pipe(map(() => -1 * element.scrollLeft));
    }
    clear() {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = '';
        }
        this.updateValue('');
    }
    onMouseDown(event) {
        const { nativeFocusableElement } = this;
        if (!nativeFocusableElement || event.target === nativeFocusableElement) {
            return;
        }
        event.preventDefault();
        nativeFocusableElement.focus();
    }
    onModelChange(value) {
        this.updateValue(value);
    }
    onAutofilled(autofilled) {
        this.updateAutofilled(autofilled);
    }
    get iconPaddingLeft() {
        return this.size === 'l' ? ICON_PADDING_L : ICON_PADDING;
    }
    get placeholderRaisable() {
        return this.size !== 's' && !this.controller.labelOutside;
    }
    updateAutofilled(autofilled) {
        if (this.autofilled === autofilled) {
            return;
        }
        this.autofilled = autofilled;
    }
    updateValue(value) {
        this.value = value;
        this.valueChange.emit(value);
    }
}
TuiPrimitiveTextfieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldComponent, deps: [{ token: TUI_MODE }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }, { token: TuiHintOptionsDirective, optional: true }, { token: TUI_TEXTFIELD_OPTIONS }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveTextfieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: { editable: "editable", textfieldFiller: ["filler", "textfieldFiller"], iconCleaner: "iconCleaner", readOnly: "readOnly", invalid: "invalid", disabled: "disabled", textfieldPrefix: ["prefix", "textfieldPrefix"], textfieldPostfix: ["postfix", "textfieldPostfix"], value: "value" }, outputs: { valueChange: "valueChange" }, host: { listeners: { "$.data-mode.attr": "mode$", "focusin": "onFocused(true)", "focusout": "onFocused(false)" }, properties: { "class._autofilled": "autofilled", "class._label-outside": "controller.labelOutside", "class._readonly": "this.readOnly", "attr.data-size": "this.size", "class._invalid": "this.computedInvalid", "class._hidden": "this.inputHidden", "style.--border-start.rem": "this.borderStart", "style.--border-end.rem": "this.borderEnd" } }, providers: [
        tuiAsFocusableItemAccessor(TuiPrimitiveTextfieldComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
        MODE_PROVIDER,
    ], queries: [{ propertyName: "content", predicate: PolymorpheusOutletDirective, descendants: true }], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"content?.changes | async\"></ng-container>\n<ng-container *ngIf=\"hintOptions?.change$ | async\"></ng-container>\n<div\n    tuiWrapper\n    automation-id=\"tui-primitive-textfield__wrapper\"\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"disabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover\"\n    [active]=\"pseudoActive\"\n    [invalid]=\"computedInvalid\"\n    [style.--text-indent.px]=\"decor.pre$ | async\"\n    (mousedown)=\"onMouseDown($event)\"\n    (click.prevent.silent)=\"(0)\"\n    (tuiAutofilledChange)=\"onAutofilled($event)\"\n>\n    <ng-content select=\"input\"></ng-content>\n    <ng-content select=\"select\"></ng-content>\n    <input\n        #focusableElement\n        tuiMaskAccessor\n        automation-id=\"tui-primitive-textfield__native-input\"\n        class=\"t-input\"\n        [attr.disabled]=\"computedDisabled || null\"\n        [attr.name]=\"name\"\n        [attr.aria-invalid]=\"computedInvalid\"\n        [id]=\"id\"\n        [readOnly]=\"readOnly || !editable\"\n        [tuiFocusable]=\"computedFocusable\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onModelChange($event)\"\n    />\n    <div\n        *ngIf=\"inputHidden\"\n        automation-id=\"tui-primitive-textfield__value\"\n        class=\"t-input t-input_template\"\n    >\n        <ng-content select=\"tuiContent\"></ng-content>\n    </div>\n    <div class=\"t-content\">\n        <div\n            *ngIf=\"iconLeftContent\"\n            class=\"t-icon t-icon_left t-textfield-icon\"\n        >\n            <tui-svg\n                *polymorpheusOutlet=\"iconLeftContent as src; context: {$implicit: size}\"\n                tuiWrapper\n                appearance=\"icon\"\n                [src]=\"src\"\n            ></tui-svg>\n        </div>\n        <div class=\"t-wrapper\">\n            <label\n                *ngIf=\"hasPlaceholder\"\n                automation-id=\"tui-primitive-textfield__placeholder\"\n                class=\"t-placeholder\"\n                [class.t-placeholder_raised]=\"placeholderRaised\"\n                [for]=\"computedId\"\n            >\n                <ng-content></ng-content>\n            </label>\n            <div class=\"t-wrapper-value-decoration\">\n                <tui-value-decoration\n                    #decor\n                    automation-id=\"tui-primitive-textfield__value-decoration\"\n                    aria-hidden=\"true\"\n                    class=\"t-value-decoration\"\n                    [class.t-has-value]=\"value\"\n                    [style.textIndent.px]=\"getIndent$(focusableElement) | async\"\n                ></tui-value-decoration>\n            </div>\n        </div>\n        <div\n            *ngIf=\"hasCustomContent\"\n            automation-id=\"tui-primitive-textfield__custom-content\"\n            class=\"t-custom-content\"\n        >\n            <tui-svg\n                *polymorpheusOutlet=\"controller.customContent as src\"\n                class=\"t-custom-icon\"\n                [src]=\"src\"\n            ></tui-svg>\n        </div>\n        <span\n            *ngIf=\"hasCleaner\"\n            tuiWrapper\n            appearance=\"icon\"\n            automation-id=\"tui-primitive-textfield__cleaner\"\n            class=\"t-cleaner\"\n            (click.stop)=\"clear()\"\n        >\n            <tui-svg\n                *polymorpheusOutlet=\"iconCleaner || controller.options.iconCleaner as src; context: {$implicit: size}\"\n                [src]=\"src\"\n            ></tui-svg>\n        </span>\n        <tui-tooltip\n            *ngIf=\"hintOptions?.content && !computedDisabled\"\n            automation-id=\"tui-primitive-textfield__tooltip\"\n            class=\"t-tooltip\"\n            [describeId]=\"computedId\"\n            [content]=\"hintOptions?.content\"\n        ></tui-tooltip>\n        <div\n            *ngIf=\"iconContent\"\n            class=\"t-icon t-textfield-icon\"\n        >\n            <tui-svg\n                *polymorpheusOutlet=\"iconContent as src; context: {$implicit: size}\"\n                tuiWrapper\n                appearance=\"icon\"\n                [src]=\"src\"\n            ></tui-svg>\n        </div>\n    </div>\n</div>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;border-radius:var(--tui-radius-m);text-align:left}:host[data-size=s]{height:var(--tui-height-s);min-height:var(--tui-height-s);max-height:var(--tui-height-s)}:host[data-size=m]{height:var(--tui-height-m);min-height:var(--tui-height-m);max-height:var(--tui-height-m)}:host[data-size=l]{height:var(--tui-height-l);min-height:var(--tui-height-l);max-height:var(--tui-height-l);font:var(--tui-font-text-m);line-height:1.25rem}.t-input{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;padding:0 var(--tui-padding-m);border:solid transparent;border-width:0 var(--border-end, 0) 0 var(--border-start, 0);border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}.t-input:-webkit-autofill,.t-input:-webkit-autofill:hover,.t-input:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host[data-mode=onDark] .t-input:-webkit-autofill,.t-input :host-context(tui-primitive-textfield[data-mode=\"onDark\"]):-webkit-autofill,.t-input :host-context(tui-text-area[data-mode=\"onDark\"]):-webkit-autofill,:host[data-mode=onDark] .t-input:-webkit-autofill:hover,.t-input :host-context(tui-primitive-textfield[data-mode=\"onDark\"]):-webkit-autofill:hover,.t-input :host-context(tui-text-area[data-mode=\"onDark\"]):-webkit-autofill:hover,:host[data-mode=onDark] .t-input:-webkit-autofill:focus,.t-input :host-context(tui-primitive-textfield[data-mode=\"onDark\"]):-webkit-autofill:focus,.t-input :host-context(tui-text-area[data-mode=\"onDark\"]):-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}:host[data-size=s] .t-input,.t-input :host-context(tui-primitive-textfield[data-size=\"s\"]):not(tui-primitive-textfield),.t-input :host-context(tui-text-area[data-size=\"s\"]):not(tui-text-area){padding:0 var(--tui-padding-s)}:host[data-size=l] .t-input,.t-input :host-context(tui-primitive-textfield[data-size=\"l\"]):not(tui-primitive-textfield),.t-input :host-context(tui-text-area[data-size=\"l\"]):not(tui-text-area){padding:0 var(--tui-padding-l)}:host._disabled .t-input,.t-input :host-context(tui-primitive-textfield._disabled),.t-input :host-context(tui-text-area._disabled){pointer-events:none}:host[data-size=l]:not(._label-outside) .t-input,.t-input :host-context(tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)):not(tui-primitive-textfield){padding-top:1.25rem}:host[data-size=l]:not(._label-outside) .t-input:-webkit-autofill+.t-content .t-placeholder,.t-input :host-context(tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder{font-size:.8156rem;transform:translateY(-.625rem)}:host[data-size=m]:not(._label-outside) .t-input,.t-input :host-context(tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)):not(tui-primitive-textfield){padding-top:1.125rem}:host[data-size=m]:not(._label-outside) .t-input:-webkit-autofill+.t-content .t-placeholder,.t-input :host-context(tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder{font-size:.69rem;transform:translateY(-.5rem)}:host._hidden input.t-input,.t-input :host-context(tui-primitive-textfield._hidden){opacity:0;text-indent:-10em;-webkit-user-select:none}.t-content{display:flex;height:100%;width:100%;padding:0 var(--tui-padding-m);box-sizing:border-box;align-items:center;overflow:hidden}:host[data-size=s] .t-content{padding:0 var(--tui-padding-s)}:host[data-size=l] .t-content{padding:0 var(--tui-padding-l)}.t-content:after{content:\"\";margin-right:-.25rem}:host[data-size=m] .t-content:after{display:none}.t-wrapper{flex:1;min-width:0;padding-right:.25rem;-webkit-padding-end:.25rem;padding-inline-end:.25rem;-webkit-padding-start:0;padding-inline-start:0}.t-wrapper+*{margin:0}.t-placeholder{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;font:var(--tui-font-text-s);color:var(--tui-text-01);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0)}.t-placeholder_raised{transform:translateY(-.625rem)}:host[data-size=m] .t-placeholder_raised{font:var(--tui-font-text-xs);transform:translateY(-.5rem);letter-spacing:.025rem}:host._invalid:not(._focused) .t-placeholder_raised,:host._invalid:not(._focused):hover .t-placeholder_raised{color:var(--tui-error-fill)}:host[data-mode=onDark]._invalid:not(._focused) .t-placeholder_raised,:host[data-mode=onDark]._invalid:not(._focused):hover .t-placeholder_raised{color:var(--tui-error-fill-night)}:host._focused .t-placeholder,:host[data-size=m]._focused._label-outside .t-placeholder,:host[data-size=l]._focused._label-outside .t-placeholder{color:var(--tui-text-03)}:host[data-size=l] .t-placeholder{font-size:.9375rem}:host[data-size=l] .t-placeholder_raised{font-size:.8156rem}:host[data-size=m]._focused:not(._label-outside) .t-placeholder,:host[data-size=l]._focused:not(._label-outside) .t-placeholder{color:var(--tui-text-01)}:host[data-mode=onDark] .t-placeholder{color:var(--tui-text-02-night)}:host[data-size=m][data-mode=onDark]._focused:not(._label-outside) .t-placeholder,:host[data-size=l][data-mode=onDark]._focused:not(._label-outside) .t-placeholder{color:var(--tui-text-01-night)}:host[data-mode=onDark]._focused .t-placeholder,:host[data-size=m][data-mode=onDark]._focused._label-outside .t-placeholder,:host[data-size=l][data-mode=onDark]._focused._label-outside .t-placeholder{color:var(--tui-text-02-night)}@supports (-webkit-hyphens: none){.t-placeholder{will-change:unset;transition-property:transform,color,letter-spacing}}.t-cleaner{position:relative;display:flex;width:1.5rem;height:1.5rem;margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer}:host._readonly .t-cleaner,:host._disabled .t-cleaner{pointer-events:none}.t-icon{position:relative;display:flex;width:1.5rem;height:1.5rem;margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:none}.t-icon_left{margin:0 .375rem 0 -.25rem;-webkit-margin-start:-.25rem;margin-inline-start:-.25rem;-webkit-margin-end:.375rem;margin-inline-end:.375rem}:host[data-size=l] .t-icon_left{margin:0 .5rem 0 -.25rem;-webkit-margin-start:-.25rem;margin-inline-start:-.25rem;-webkit-margin-end:.5rem;margin-inline-end:.5rem}:host._autofilled .t-value-decoration:not(.t-has-value){visibility:hidden}:host._autofilled[data-size=s]:not(._focused) .t-placeholder,:host._autofilled[data-size=m]:not(._focused) .t-placeholder{visibility:hidden}.t-custom-content{position:relative;display:flex;align-items:center;justify-content:center;min-width:2rem;height:2rem;pointer-events:none}.t-custom-icon{width:2rem;height:100%}.t-tooltip{margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0}input::placeholder{color:var(--tui-text-03);opacity:0}:host-context(tui-primitive-textfield[data-mode=\"onDark\"]) input::placeholder,:host-context(tui-text-area[data-mode=\"onDark\"]) input::placeholder{color:var(--tui-text-03-night)}:host-context(tui-primitive-textfield._focused:not(._readonly)) input::placeholder,:host-context(tui-text-area._focused:not(._readonly)) input::placeholder{opacity:1}.t-input:not(:first-child){display:none}:host[data-size] .t-input_template{display:flex;width:calc(100% - 1rem);max-width:calc(100% - 1rem);align-items:center;pointer-events:none;-webkit-padding-end:0;padding-inline-end:0}.t-input:-webkit-autofill,.t-input:-webkit-autofill:first-line{font-size:inherit;line-height:inherit}.t-input::-webkit-caps-lock-indicator,.t-input::-webkit-contacts-auto-fill-button,.t-input::-webkit-credit-card-auto-fill-button,.t-input::-webkit-credentials-auto-fill-button,.t-input::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}.t-text-template{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-wrapper-value-decoration{position:relative;pointer-events:none}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: TuiValueDecorationComponent, selector: "tui-value-decoration" }, { type: i3.TuiTooltipComponent, selector: "tui-tooltip", inputs: ["content", "direction", "appearance", "showDelay", "hideDelay", "describeId"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i6.TuiAutofilledDirective, selector: "[tuiAutofilledChange]", outputs: ["tuiAutofilledChange"] }, { type: i7.TuiMaskAccessorDirective, selector: "input[tuiMaskAccessor]" }, { type: i8.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i6.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i8.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i8.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i9.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "editable", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "textfieldFiller", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "iconCleaner", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "readOnly", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "invalid", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "disabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "textfieldPrefix", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "textfieldPostfix", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveTextfieldComponent.prototype, "value", void 0);
__decorate([
    tuiPure
], TuiPrimitiveTextfieldComponent.prototype, "getIndent$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-textfield',
                    templateUrl: './primitive-textfield.template.html',
                    styleUrls: ['./primitive-textfield.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiPrimitiveTextfieldComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                        MODE_PROVIDER,
                    ],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                        '[class._autofilled]': 'autofilled',
                        '[class._label-outside]': 'controller.labelOutside',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i10.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: i11.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }, { type: i12.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_OPTIONS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], editable: [{
                type: Input
            }], textfieldFiller: [{
                type: Input,
                args: ['filler']
            }], iconCleaner: [{
                type: Input
            }], readOnly: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._readonly']
            }], invalid: [{
                type: Input
            }], disabled: [{
                type: Input
            }], textfieldPrefix: [{
                type: Input,
                args: ['prefix']
            }], textfieldPostfix: [{
                type: Input,
                args: ['postfix']
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], content: [{
                type: ContentChildren,
                args: [PolymorpheusOutletDirective, { descendants: true }]
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], computedInvalid: [{
                type: HostBinding,
                args: ['class._invalid']
            }], inputHidden: [{
                type: HostBinding,
                args: ['class._hidden']
            }], borderStart: [{
                type: HostBinding,
                args: ['style.--border-start.rem']
            }], borderEnd: [{
                type: HostBinding,
                args: ['style.--border-end.rem']
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }], getIndent$: [] } });

class TuiPrimitiveTextfieldDirective extends AbstractTuiTextfieldHost {
    constructor(textfield) {
        /**
         * TuiPrimitiveTextfieldComponent satisfies all required parts of
         * AbstractTuiControl interface. A new interface is not introduced
         * so AbstractTuiControl is automatically injected for all other controls.
         */
        super(textfield);
        this.textfield = textfield;
    }
    get readOnly() {
        return this.textfield.readOnly || !this.textfield.editable;
    }
    onValueChange(value) {
        this.textfield.onModelChange(value);
    }
}
TuiPrimitiveTextfieldDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldDirective, deps: [{ token: TuiPrimitiveTextfieldComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiPrimitiveTextfieldDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield", providers: [tuiAsTextfieldHost(TuiPrimitiveTextfieldDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-primitive-textfield',
                    providers: [tuiAsTextfieldHost(TuiPrimitiveTextfieldDirective)],
                }]
        }], ctorParameters: function () { return [{ type: TuiPrimitiveTextfieldComponent, decorators: [{
                    type: Inject,
                    args: [TuiPrimitiveTextfieldComponent]
                }] }]; } });

class TuiTextfieldComponent {
    constructor(host, controller, el, idService, legacyMask) {
        this.host = host;
        this.controller = controller;
        this.el = el;
        this.idService = idService;
        this.legacyMask = legacyMask;
        this.host.process(this.el.nativeElement);
    }
    get id() {
        return this.el.nativeElement.id || this.idService.generate();
    }
    get inputMode() {
        return this.el.nativeElement.inputMode || this.host.inputMode;
    }
}
TuiTextfieldComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldComponent, deps: [{ token: TUI_TEXTFIELD_HOST }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER$1 }, { token: ElementRef }, { token: TuiIdService }, { token: TUI_LEGACY_MASK, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiTextfieldComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]", host: { attributes: { "type": "text" }, listeners: { "input": "!legacyMask && host.onValueChange($event.target.value)" }, properties: { "attr.id": "id", "attr.inputMode": "inputMode", "attr.aria-invalid": "host.invalid", "attr.disabled": "host.disabled || null", "tabIndex": "host.focusable ? 0 : -1", "readOnly": "host.readOnly", "value": "host.value" } }, providers: [TEXTFIELD_CONTROLLER_PROVIDER$1], ngImport: i0, template: '', isInline: true, styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);padding:0;margin:0;border:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;padding:0 var(--tui-padding-m);border:solid transparent;border-width:0 var(--border-end, 0) 0 var(--border-start, 0);border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);text-indent:var(--text-indent);text-align:inherit;box-sizing:border-box;white-space:nowrap;overflow:hidden;text-transform:inherit;resize:none}:host:-webkit-autofill,:host:-webkit-autofill:hover,:host:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host[data-mode=onDark] :host:-webkit-autofill,:host :host-context(tui-primitive-textfield[data-mode=\"onDark\"]):-webkit-autofill,:host :host-context(tui-text-area[data-mode=\"onDark\"]):-webkit-autofill,:host[data-mode=onDark] :host:-webkit-autofill:hover,:host :host-context(tui-primitive-textfield[data-mode=\"onDark\"]):-webkit-autofill:hover,:host :host-context(tui-text-area[data-mode=\"onDark\"]):-webkit-autofill:hover,:host[data-mode=onDark] :host:-webkit-autofill:focus,:host :host-context(tui-primitive-textfield[data-mode=\"onDark\"]):-webkit-autofill:focus,:host :host-context(tui-text-area[data-mode=\"onDark\"]):-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01-night)!important;border-color:var(--tui-autofill-night);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill-night) inset!important}:host[data-size=s] :host,:host :host-context(tui-primitive-textfield[data-size=\"s\"]):not(tui-primitive-textfield),:host :host-context(tui-text-area[data-size=\"s\"]):not(tui-text-area){padding:0 var(--tui-padding-s)}:host[data-size=l] :host,:host :host-context(tui-primitive-textfield[data-size=\"l\"]):not(tui-primitive-textfield),:host :host-context(tui-text-area[data-size=\"l\"]):not(tui-text-area){padding:0 var(--tui-padding-l)}:host._disabled :host,:host :host-context(tui-primitive-textfield._disabled),:host :host-context(tui-text-area._disabled){pointer-events:none}:host[data-size=l]:not(._label-outside) :host,:host :host-context(tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)):not(tui-primitive-textfield){padding-top:1.25rem}:host[data-size=l]:not(._label-outside) :host:-webkit-autofill+.t-content .t-placeholder,:host :host-context(tui-primitive-textfield[data-size=\"l\"]:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder{font-size:.8156rem;transform:translateY(-.625rem)}:host[data-size=m]:not(._label-outside) :host,:host :host-context(tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)):not(tui-primitive-textfield){padding-top:1.125rem}:host[data-size=m]:not(._label-outside) :host:-webkit-autofill+.t-content .t-placeholder,:host :host-context(tui-primitive-textfield[data-size=\"m\"]:not(._label-outside)):not(tui-primitive-textfield):-webkit-autofill+.t-content .t-placeholder{font-size:.69rem;transform:translateY(-.5rem)}:host._hidden input:host,:host :host-context(tui-primitive-textfield._hidden){opacity:0;text-indent:-10em;-webkit-user-select:none}:host::placeholder{color:var(--tui-text-03);opacity:0}:host :host-context(tui-primitive-textfield[data-mode=\"onDark\"])::placeholder,:host :host-context(tui-text-area[data-mode=\"onDark\"])::placeholder{color:var(--tui-text-03-night)}:host :host-context(tui-primitive-textfield._focused:not(._readonly))::placeholder,:host :host-context(tui-text-area._focused:not(._readonly))::placeholder{opacity:1}:host::-webkit-caps-lock-indicator,:host::-webkit-contacts-auto-fill-button,:host::-webkit-credit-card-auto-fill-button,:host::-webkit-credentials-auto-fill-button,:host::-webkit-strong-password-auto-fill-button{content:none!important;position:absolute;left:-62.4375rem;top:-62.4375rem;z-index:-999;display:none!important;background:transparent!important;pointer-events:none!important}textarea:host{white-space:pre-wrap}textarea:host :host-context(tui-text-area._ios){padding-left:.8125rem}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextfieldComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[tuiTextfield], textarea[tuiTextfield]',
                    template: '',
                    providers: [TEXTFIELD_CONTROLLER_PROVIDER$1],
                    host: {
                        type: 'text',
                        '[attr.id]': 'id',
                        '[attr.inputMode]': 'inputMode',
                        '[attr.aria-invalid]': 'host.invalid',
                        '[attr.disabled]': 'host.disabled || null',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[readOnly]': 'host.readOnly',
                        '[value]': 'host.value',
                        '(input)': '!legacyMask && host.onValueChange($event.target.value)',
                    },
                    styleUrls: ['./textfield.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_HOST]
                }] }, { type: i1$1.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER$1]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i6.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_LEGACY_MASK]
                }] }]; } });

class TuiPrimitiveTextfieldModule {
}
TuiPrimitiveTextfieldModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPrimitiveTextfieldModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldModule, declarations: [TuiPrimitiveTextfieldComponent,
        TuiPrimitiveTextfieldDirective,
        TuiTextfieldComponent,
        TuiValueDecorationComponent], imports: [CommonModule,
        FormsModule,
        PolymorpheusModule,
        TuiMaskAccessorModule,
        TuiFocusableModule,
        TuiWrapperModule,
        TuiSvgModule,
        TuiTooltipModule,
        TuiAutofilledModule], exports: [TuiPrimitiveTextfieldComponent,
        TuiPrimitiveTextfieldDirective,
        TuiTextfieldComponent] });
TuiPrimitiveTextfieldModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldModule, imports: [[
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiMaskAccessorModule,
            TuiFocusableModule,
            TuiWrapperModule,
            TuiSvgModule,
            TuiTooltipModule,
            TuiAutofilledModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveTextfieldModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusModule,
                        TuiMaskAccessorModule,
                        TuiFocusableModule,
                        TuiWrapperModule,
                        TuiSvgModule,
                        TuiTooltipModule,
                        TuiAutofilledModule,
                    ],
                    declarations: [
                        TuiPrimitiveTextfieldComponent,
                        TuiPrimitiveTextfieldDirective,
                        TuiTextfieldComponent,
                        TuiValueDecorationComponent,
                    ],
                    exports: [
                        TuiPrimitiveTextfieldComponent,
                        TuiPrimitiveTextfieldDirective,
                        TuiTextfieldComponent,
                    ],
                }]
        }] });

/**
 * @deprecated:
 * use {@link TUI_TEXTFIELD_DEFAULT_OPTIONS}
 */
const TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS = TUI_TEXTFIELD_DEFAULT_OPTIONS;
/**
 * @deprecated:
 * use {@link TUI_TEXTFIELD_OPTIONS}
 */
const TUI_PRIMITIVE_TEXTFIELD_OPTIONS = TUI_TEXTFIELD_OPTIONS$1;
/**
 * @deprecated:
 * use {@link tuiTextfieldOptionsProvider}
 */
const tuiPrimitiveTextfieldOptionsProvider = tuiTextfieldOptionsProvider;

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_PRIMITIVE_TEXTFIELD_DEFAULT_OPTIONS, TUI_PRIMITIVE_TEXTFIELD_OPTIONS, TuiPrimitiveTextfieldComponent, TuiPrimitiveTextfieldDirective, TuiPrimitiveTextfieldModule, TuiTextfieldComponent, TuiValueDecorationComponent, tuiPrimitiveTextfieldOptionsProvider };
//# sourceMappingURL=taiga-ui-core-components-primitive-textfield.js.map
