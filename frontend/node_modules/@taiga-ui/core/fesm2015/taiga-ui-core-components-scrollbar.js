import * as i0 from '@angular/core';
import { ElementRef, Directive, Inject, Component, ChangeDetectionStrategy, Input, HostBinding, HostListener, NgModule } from '@angular/core';
import { TUI_SCROLL_REF } from '@taiga-ui/core/tokens';
import { TUI_SCROLLABLE, TUI_SCROLL_INTO_VIEW } from '@taiga-ui/core/constants';
import { __decorate } from 'tslib';
import { CSS, USER_AGENT } from '@ng-web-apis/common';
import { tuiIsFirefox, tuiGetElementOffset, TUI_IS_IOS, tuiDefaultProp } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core/components/scroll-controls';
import { TuiScrollControlsModule } from '@taiga-ui/core/components/scroll-controls';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

const SCROLL_REF_SELECTOR = '[tuiScrollRef]';
class TuiScrollRefDirective {
}
TuiScrollRefDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollRefDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiScrollRefDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollRefDirective, selector: "[tuiScrollRef]", providers: [
        {
            provide: TUI_SCROLL_REF,
            useExisting: ElementRef,
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollRefDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: SCROLL_REF_SELECTOR,
                    providers: [
                        {
                            provide: TUI_SCROLL_REF,
                            useExisting: ElementRef,
                        },
                    ],
                }]
        }] });

class TuiScrollableDirective {
    constructor(el) {
        this.el = el;
    }
    ngOnInit() {
        this.el.nativeElement.dispatchEvent(new CustomEvent(TUI_SCROLLABLE, {
            bubbles: true,
            detail: this.el.nativeElement,
        }));
    }
}
TuiScrollableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollableDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiScrollableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollableDirective, selector: "[tuiScrollable]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiScrollable]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; } });

class TuiScrollbarComponent {
    constructor(cssRef, el, userAgent, isIos) {
        this.cssRef = cssRef;
        this.el = el;
        this.userAgent = userAgent;
        this.isIos = isIos;
        this.delegated = false;
        this.isLegacy = !this.cssRef.supports('position', 'sticky') ||
            (tuiIsFirefox(this.userAgent) &&
                !this.cssRef.supports('scrollbar-width', 'none'));
        this.hidden = false;
        this.browserScrollRef = new ElementRef(this.el.nativeElement);
    }
    get showScrollbars() {
        return !this.hidden && !this.isIos && (!this.isLegacy || this.delegated);
    }
    get showNative() {
        return this.isLegacy && !this.hidden && !this.delegated;
    }
    onScrollable(element) {
        this.delegated = true;
        this.browserScrollRef.nativeElement = element;
    }
    scrollIntoView(detail) {
        var _a;
        if (this.delegated) {
            return;
        }
        const { nativeElement } = this.browserScrollRef;
        const { offsetTop, offsetLeft } = tuiGetElementOffset(nativeElement, detail);
        const { clientHeight, clientWidth } = nativeElement;
        const { offsetHeight, offsetWidth } = detail;
        const scrollTop = offsetTop + offsetHeight / 2 - clientHeight / 2;
        const scrollLeft = offsetLeft + offsetWidth / 2 - clientWidth / 2;
        // ?. for our clients on Windows XP and Chrome 49
        (_a = nativeElement.scrollTo) === null || _a === void 0 ? void 0 : _a.call(nativeElement, scrollLeft, scrollTop);
    }
}
TuiScrollbarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarComponent, deps: [{ token: CSS }, { token: ElementRef }, { token: USER_AGENT }, { token: TUI_IS_IOS }], target: i0.ɵɵFactoryTarget.Component });
TuiScrollbarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiScrollbarComponent, selector: "tui-scrollbar", inputs: { hidden: "hidden" }, host: { listeners: { "tui-scrollable.stop": "onScrollable($event.detail)", "tui-scroll-into-view.stop": "scrollIntoView($event.detail)" }, properties: { "class._legacy": "this.showNative" } }, providers: [
        {
            provide: TUI_SCROLL_REF,
            deps: [TuiScrollbarComponent],
            useFactory: ({ browserScrollRef, }) => browserScrollRef,
        },
    ], ngImport: i0, template: "<tui-scroll-controls *ngIf=\"showScrollbars\"></tui-scroll-controls>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n", styles: [":host{z-index:0;position:relative;display:flex;overflow:auto}:host:not(._legacy){scrollbar-width:none;-ms-overflow-style:none}:host:not(._legacy)::-webkit-scrollbar,:host:not(._legacy)::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}:host._legacy{overflow:overlay}@media all and (-webkit-min-device-pixel-ratio: 0) and (min-resolution: .001dpcm){:host._legacy::-webkit-scrollbar,:host._legacy::-webkit-scrollbar-thumb{width:1rem;height:1rem;border-radius:6.25rem;background-clip:padding-box;border:2.667rem solid transparent}:host._legacy::-webkit-scrollbar{background-color:transparent}:host._legacy::-webkit-scrollbar-thumb{background-color:var(--tui-clear-hover)}:host._legacy::-webkit-scrollbar-thumb:hover{background-color:var(--tui-clear-active)}:host._legacy::-webkit-scrollbar-thumb:active{background-color:var(--tui-text-03)}}.t-content{position:relative;z-index:0;flex:1;flex-basis:auto;width:100%;height:-webkit-max-content;height:max-content}\n"], components: [{ type: i1.TuiScrollControlsComponent, selector: "tui-scroll-controls" }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiScrollbarComponent.prototype, "hidden", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-scrollbar',
                    templateUrl: './scrollbar.template.html',
                    styleUrls: ['./scrollbar.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: TUI_SCROLL_REF,
                            deps: [TuiScrollbarComponent],
                            useFactory: ({ browserScrollRef, }) => browserScrollRef,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [CSS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [USER_AGENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }]; }, propDecorators: { hidden: [{
                type: Input
            }], showNative: [{
                type: HostBinding,
                args: ['class._legacy']
            }], onScrollable: [{
                type: HostListener,
                args: [`${TUI_SCROLLABLE}.stop`, ['$event.detail']]
            }], scrollIntoView: [{
                type: HostListener,
                args: [`${TUI_SCROLL_INTO_VIEW}.stop`, ['$event.detail']]
            }] } });

class TuiScrollbarModule {
}
TuiScrollbarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiScrollbarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarModule, declarations: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective], imports: [CommonModule, TuiScrollControlsModule], exports: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective] });
TuiScrollbarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarModule, imports: [[CommonModule, TuiScrollControlsModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiScrollbarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiScrollControlsModule],
                    declarations: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective],
                    exports: [TuiScrollbarComponent, TuiScrollRefDirective, TuiScrollableDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { SCROLL_REF_SELECTOR, TuiScrollRefDirective, TuiScrollableDirective, TuiScrollbarComponent, TuiScrollbarModule };
//# sourceMappingURL=taiga-ui-core-components-scrollbar.js.map
