import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { forwardRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Inject, Self, Input, HostBinding, HostListener, ViewEncapsulation, ContentChildren, Directive, NgModule } from '@angular/core';
import { tuiIsNativeFocused, tuiDefaultProp, EMPTY_QUERY, tuiQueryListChanges, tuiMoveFocus, tuiIsNativeFocusedIn, tuiSetNativeMouseFocused, tuiIsPresent, tuiIsElement, tuiPure } from '@taiga-ui/cdk';
import * as i3 from '@taiga-ui/core/directives';
import { TUI_TEXTFIELD_WATCHED_CONTROLLER, TEXTFIELD_CONTROLLER_PROVIDER } from '@taiga-ui/core/directives';
import { TUI_OPTION_CONTENT, TUI_DATA_LIST_HOST, TUI_NOTHING_FOUND_MESSAGE, tuiAsDataListAccessor } from '@taiga-ui/core/tokens';
import { map } from 'rxjs/operators';
import * as i5 from '@taiga-ui/core/directives/dropdown';
import { TuiDropdownDirective } from '@taiga-ui/core/directives/dropdown';
import { shouldCall } from '@tinkoff/ng-event-plugins';
import * as i1 from '@taiga-ui/core/components/svg';
import { TuiSvgModule } from '@taiga-ui/core/components/svg';
import * as i2 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from 'rxjs';

function shouldFocus({ currentTarget }) {
    return !tuiIsNativeFocused(currentTarget);
}
// TODO: Consider all use cases for aria roles
class TuiOptionComponent {
    constructor(content, dataList, el, host, dropdown) {
        this.content = content;
        this.dataList = dataList;
        this.el = el;
        this.host = host;
        this.dropdown = dropdown;
        /** @deprecated use size on {@link TuiDataListComponent} instead */
        this.size = null;
        this.role = 'option';
        this.disabled = false;
    }
    get active() {
        return !!this.dropdown && !!this.dropdown.dropdownBoxRef;
    }
    onClick() {
        if (this.host && this.value !== undefined) {
            this.host.handleOption(this.value);
        }
    }
    // @bad TODO: Consider aria-activedescendant for proper accessibility implementation
    onMouseMove({ currentTarget }) {
        currentTarget.focus({ preventScroll: true });
    }
    // Preventing focus loss upon focused option removal
    ngOnDestroy() {
        this.dataList.handleFocusLossIfNecessary(this.el.nativeElement);
    }
}
TuiOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOptionComponent, deps: [{ token: TUI_OPTION_CONTENT, optional: true }, { token: forwardRef(() => TuiDataListComponent) }, { token: ElementRef }, { token: TUI_DATA_LIST_HOST, optional: true }, { token: TuiDropdownDirective, optional: true, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: { size: "size", role: "role", disabled: "disabled", value: "value" }, host: { attributes: { "tabIndex": "-1", "type": "button" }, listeners: { "click": "onClick()", "mousemove.silent": "onMouseMove($event)" }, properties: { "attr.disabled": "disabled || null", "attr.data-size": "this.size", "attr.role": "this.role", "class._with-dropdown": "this.active" } }, ngImport: i0, template: "<ng-container *polymorpheusOutlet=\"content || base as text; context: {$implicit: base}\">\n    {{ text }}\n</ng-container>\n<ng-template #base>\n    <ng-content></ng-content>\n    <tui-svg\n        *ngIf=\"dropdown\"\n        src=\"tuiIconChevronRight\"\n        class=\"t-arrow\"\n    ></tui-svg>\n</ng-template>\n", styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:0;background:none;font-size:inherit;line-height:inherit;transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;align-items:center;justify-content:space-between;text-align:left;box-sizing:border-box;color:var(--tui-text-01);border-radius:var(--tui-radius-s);outline:none;text-decoration:none;cursor:pointer;background-clip:padding-box;font:var(--tui-font-text-s);min-height:2.5rem;padding:.375rem .5rem;margin:.125rem 0}:host:disabled{opacity:var(--tui-disabled-opacity);cursor:default}:host:focus,:host._with-dropdown{background-color:var(--tui-clear)}:host :host-context([data-list-size=\"s\"]),:host :host-context([data-list-size=\"xs\"]),:host[data-size=s][data-size=s],:host[data-size=xs][data-size=xs]{font:var(--tui-font-text-s);min-height:2rem;padding:.3125rem .5rem;margin:var(--tui-data-list-margin) 0}:host :host-context([data-list-size=\"m\"]),:host[data-size=m][data-size=m]{font:var(--tui-font-text-s);min-height:2.5rem;padding:.375rem .5rem;margin:var(--tui-data-list-margin) 0}:host :host-context([data-list-size=\"l\"]),:host[data-size=l][data-size=l]{font:var(--tui-font-text-m);min-height:2.75rem;padding:.375rem .625rem;margin:var(--tui-data-list-margin) 0}.t-arrow{margin:0 -.5rem 0 .75rem}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiOptionComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiOptionComponent.prototype, "role", void 0);
__decorate([
    tuiDefaultProp()
], TuiOptionComponent.prototype, "disabled", void 0);
__decorate([
    shouldCall(shouldFocus)
], TuiOptionComponent.prototype, "onMouseMove", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'button[tuiOption], a[tuiOption]',
                    templateUrl: './option.template.html',
                    styleUrls: ['./option.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    host: {
                        tabIndex: '-1',
                        type: 'button',
                        '[attr.disabled]': 'disabled || null',
                    },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_OPTION_CONTENT]
                }] }, { type: TuiDataListComponent, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiDataListComponent)]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DATA_LIST_HOST]
                }] }, { type: i5.TuiDropdownDirective, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDropdownDirective]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], disabled: [{
                type: Input
            }], value: [{
                type: Input
            }], active: [{
                type: HostBinding,
                args: ['class._with-dropdown']
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }], onMouseMove: [{
                type: HostListener,
                args: ['mousemove.silent', ['$event']]
            }] } });

// TODO: Consider aria-activedescendant for proper accessibility implementation
class TuiDataListComponent {
    constructor(controller, el, defaultEmptyContent$) {
        var _a;
        this.controller = controller;
        this.el = el;
        this.defaultEmptyContent$ = defaultEmptyContent$;
        this.options = EMPTY_QUERY;
        this.role = 'listbox';
        this.size = ((_a = this.controller) === null || _a === void 0 ? void 0 : _a.size) || 'm';
    }
    get empty$() {
        return tuiQueryListChanges(this.options).pipe(map(({ length }) => !length));
    }
    onFocusIn(relatedTarget, currentTarget) {
        if (!currentTarget.contains(relatedTarget) && !this.origin) {
            this.origin = relatedTarget;
        }
    }
    noop() { }
    onKeyDownArrow(current, step) {
        const { elements } = this;
        tuiMoveFocus(elements.indexOf(current), elements, step);
    }
    // TODO: Consider aria-activedescendant for proper accessibility implementation
    handleFocusLossIfNecessary(element = this.el.nativeElement) {
        if (this.origin && tuiIsNativeFocusedIn(element)) {
            tuiSetNativeMouseFocused(this.origin, true, true);
        }
    }
    getOptions(includeDisabled = false) {
        return this.options
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(tuiIsPresent);
    }
    onFocus({ target }, top) {
        if (!tuiIsElement(target)) {
            return;
        }
        const { elements } = this;
        tuiMoveFocus(top ? -1 : elements.length, elements, top ? 1 : -1);
        this.handleFocusLossIfNecessary(target);
    }
    get elements() {
        return Array.from(this.el.nativeElement.querySelectorAll('[tuiOption]'));
    }
}
TuiDataListComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListComponent, deps: [{ token: TUI_TEXTFIELD_WATCHED_CONTROLLER, optional: true }, { token: ElementRef }, { token: TUI_NOTHING_FOUND_MESSAGE }], target: i0.ɵɵFactoryTarget.Component });
TuiDataListComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDataListComponent, selector: "tui-data-list", inputs: { role: "role", emptyContent: "emptyContent", size: "size" }, host: { listeners: { "focusin": "onFocusIn($event.relatedTarget,$event.currentTarget)", "mousedown.prevent": "noop()", "keydown.arrowDown.prevent": "onKeyDownArrow($event.target,1)", "keydown.arrowUp.prevent": "onKeyDownArrow($event.target,-1)", "wheel.silent.passive": "handleFocusLossIfNecessary()", "mouseleave": "handleFocusLossIfNecessary($event.target)" }, properties: { "attr.role": "this.role", "attr.data-list-size": "this.size" } }, providers: [
        tuiAsDataListAccessor(TuiDataListComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], queries: [{ propertyName: "options", predicate: i0.forwardRef(function () { return TuiOptionComponent; }), descendants: true }], ngImport: i0, template: "<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, true)\"\n></div>\n<ng-content></ng-content>\n<div\n    *ngIf=\"empty$ | async\"\n    class=\"t-empty\"\n>\n    <ng-container *polymorpheusOutlet=\"emptyContent || (defaultEmptyContent$ | async) as text\">\n        {{ text }}\n    </ng-container>\n</div>\n<div\n    tabindex=\"0\"\n    class=\"t-trap\"\n    (focusin)=\"onFocus($event, false)\"\n></div>\n", styles: ["tui-data-list{--tui-data-list-padding: .25rem;--tui-data-list-margin: .0625rem;display:flex;font:var(--tui-font-text-m);flex-direction:column;padding:calc(var(--tui-data-list-padding) - var(--tui-data-list-margin)) var(--tui-data-list-padding);color:var(--tui-text-03)}tui-data-list:focus-within .t-trap{display:none}tui-data-list:focus-within [tuiOption]._with-dropdown:not(:focus){background-color:transparent}tui-data-list[data-list-size=s]{--tui-data-list-margin: 0rem}tui-data-list[data-list-size=l]{--tui-data-list-padding: .375rem;--tui-data-list-margin: .125rem}tui-data-list>.t-empty{margin:.75rem 1rem}tui-opt-group{position:relative;display:flex;font:var(--tui-font-text-xs);color:var(--tui-text-02);flex-direction:column;line-height:1rem}tui-data-list[data-list-size=l] tui-opt-group{font:var(--tui-font-text-s);line-height:1.25rem}tui-data-list[data-list-size=l] tui-opt-group:before{padding-left:.625rem;padding-right:.625rem}tui-data-list[data-list-size=l] tui-opt-group:after{left:.625rem;right:.625rem}tui-opt-group:empty:before,tui-opt-group:empty:after{display:none}tui-opt-group:before{content:attr(data-label);padding:var(--tui-data-list-padding) .5rem var(--tui-data-list-padding);margin:var(--tui-data-list-margin) 0;white-space:normal;word-break:break-word}tui-opt-group:after{position:absolute;left:.5rem;right:.5rem;top:var(--tui-data-list-padding);height:1px;background:var(--tui-base-03)}tui-opt-group:not(:empty)~tui-opt-group:before{padding-top:calc(.75rem + var(--tui-data-list-padding))}tui-opt-group:not(:empty)~tui-opt-group[data-label=\"\"]:before{padding:var(--tui-data-list-padding) 0}tui-opt-group:not(:empty)~tui-opt-group:after{content:\"\"}tui-opt-group[data-label=\"\"]:before{padding:0 .5rem}\n"], directives: [{ type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i1$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    tuiDefaultProp()
], TuiDataListComponent.prototype, "role", void 0);
__decorate([
    tuiDefaultProp()
], TuiDataListComponent.prototype, "size", void 0);
__decorate([
    tuiPure
], TuiDataListComponent.prototype, "empty$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-data-list',
                    templateUrl: './data-list.template.html',
                    styleUrls: ['./data-list.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                    providers: [
                        tuiAsDataListAccessor(TuiDataListComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i3.TuiTextfieldController, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_NOTHING_FOUND_MESSAGE]
                }] }]; }, propDecorators: { options: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiOptionComponent), { descendants: true }]
            }], role: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.role']
            }], emptyContent: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-list-size']
            }], empty$: [], onFocusIn: [{
                type: HostListener,
                args: ['focusin', ['$event.relatedTarget', '$event.currentTarget']]
            }], noop: [{
                type: HostListener,
                args: ['mousedown.prevent']
            }], onKeyDownArrow: [{
                type: HostListener,
                args: ['keydown.arrowDown.prevent', ['$event.target', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp.prevent', ['$event.target', '-1']]
            }], handleFocusLossIfNecessary: [{
                type: HostListener,
                args: ['wheel.silent.passive']
            }, {
                type: HostListener,
                args: ['mouseleave', ['$event.target']]
            }] } });

class TuiDataListDirective {
}
TuiDataListDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiDataListDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDataListDirective, selector: "ng-template[tuiDataList]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiDataList]',
                }]
        }] });
function tuiAsDataList(useExisting) {
    return {
        provide: TuiDataListDirective,
        useExisting,
    };
}

class TuiOptGroupDirective {
    constructor() {
        this.label = '';
    }
}
TuiOptGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOptGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiOptGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiOptGroupDirective, selector: "tui-opt-group", inputs: { label: "label" }, host: { attributes: { "role": "group" }, properties: { "attr.data-label": "this.label" } }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiOptGroupDirective.prototype, "label", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiOptGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-opt-group',
                    host: {
                        role: 'group',
                    },
                }]
        }], propDecorators: { label: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-label']
            }] } });

class TuiDataListModule {
}
TuiDataListModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDataListModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListModule, declarations: [TuiDataListComponent,
        TuiOptionComponent,
        TuiOptGroupDirective,
        TuiDataListDirective], imports: [CommonModule, TuiSvgModule, PolymorpheusModule], exports: [TuiDataListComponent,
        TuiOptionComponent,
        TuiOptGroupDirective,
        TuiDataListDirective] });
TuiDataListModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListModule, imports: [[CommonModule, TuiSvgModule, PolymorpheusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiSvgModule, PolymorpheusModule],
                    declarations: [
                        TuiDataListComponent,
                        TuiOptionComponent,
                        TuiOptGroupDirective,
                        TuiDataListDirective,
                    ],
                    exports: [
                        TuiDataListComponent,
                        TuiOptionComponent,
                        TuiOptGroupDirective,
                        TuiDataListDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDataListComponent, TuiDataListDirective, TuiDataListModule, TuiOptGroupDirective, TuiOptionComponent, tuiAsDataList };
//# sourceMappingURL=taiga-ui-core-components-data-list.js.map
