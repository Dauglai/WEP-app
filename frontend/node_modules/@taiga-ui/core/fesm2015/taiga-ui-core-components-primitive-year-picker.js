import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Input, Output, HostBinding, NgModule } from '@angular/core';
import * as i1 from '@taiga-ui/cdk';
import { TuiMonth, TUI_FIRST_DAY, TUI_LAST_DAY, ALWAYS_FALSE_HANDLER, TuiMonthRange, TuiYear, tuiInRange, tuiDefaultProp, TuiHoveredModule, TuiPressedModule, TuiRepeatTimesModule, TuiLetModule } from '@taiga-ui/cdk';
import * as i2 from '@taiga-ui/core/directives/scroll-into-view';
import { TuiScrollIntoViewModule } from '@taiga-ui/core/directives/scroll-into-view';

const LIMIT = 100;
const ITEMS_IN_ROW = 4;
class TuiPrimitiveYearPickerComponent {
    constructor() {
        this.hoveredItem = null;
        this.pressedItem = null;
        this.currentYear = TuiMonth.currentLocal().year;
        this.value = null;
        this.initialItem = TuiMonth.currentLocal();
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.yearClick = new EventEmitter();
    }
    get isSingle() {
        const { value } = this;
        return !!value && this.isRange(value) && value.from.yearSame(value.to);
    }
    get rows() {
        return Math.ceil((this.calculatedMax - this.calculatedMin) / ITEMS_IN_ROW);
    }
    get calculatedMin() {
        const initial = this.initialItem.year - LIMIT;
        return this.min.year > initial ? this.min.year : initial;
    }
    get calculatedMax() {
        const initial = this.initialItem.year + LIMIT;
        return this.max.year < initial ? this.max.year + 1 : initial;
    }
    isRange(item) {
        return item instanceof TuiMonthRange;
    }
    scrollItemIntoView(item) {
        return this.initialItem.year === item;
    }
    getItem(rowIndex, colIndex) {
        return rowIndex * ITEMS_IN_ROW + colIndex + this.calculatedMin;
    }
    getItemState(item) {
        const { disabledItemHandler, max, pressedItem, hoveredItem } = this;
        if (max.year < item ||
            (disabledItemHandler !== ALWAYS_FALSE_HANDLER && disabledItemHandler(item))) {
            return "disabled" /* Disabled */;
        }
        if (pressedItem === item) {
            return "active" /* Active */;
        }
        if (hoveredItem === item) {
            return "hover" /* Hover */;
        }
        return null;
    }
    // eslint-disable-next-line complexity
    getItemRange(item) {
        const { value, hoveredItem } = this;
        if (value === null) {
            return null;
        }
        if (value instanceof TuiYear) {
            return value.year === item ? "single" /* Single */ : null;
        }
        if ((value.from.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem > value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem < value.from.year &&
                value.from.yearSame(value.to))) {
            return "start" /* Start */;
        }
        if ((value.to.year === item && !value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem < value.from.year &&
                value.from.year === item &&
                value.from.yearSame(value.to)) ||
            (hoveredItem !== null &&
                hoveredItem === item &&
                hoveredItem > value.from.year &&
                value.from.yearSame(value.to))) {
            return "end" /* End */;
        }
        return value.from.yearSame(value.to) && value.from.year === item
            ? "single" /* Single */
            : null;
    }
    itemIsToday(item) {
        return this.currentYear === item;
    }
    itemIsInterval(item) {
        const { value, hoveredItem } = this;
        if (value === null || !this.isRange(value)) {
            return false;
        }
        if (!value.from.yearSame(value.to)) {
            return value.from.year <= item && value.to.year > item;
        }
        if (hoveredItem === null || value.from.year === hoveredItem) {
            return false;
        }
        return tuiInRange(item, Math.min(value.from.year, hoveredItem), Math.max(value.from.year, hoveredItem));
    }
    onItemHovered(hovered, item) {
        this.updateHoveredItem(hovered, item);
    }
    onItemPressed(pressed, item) {
        this.updatePressedItem(pressed, item);
    }
    onItemClick(item) {
        this.yearClick.emit(new TuiYear(item));
    }
    updateHoveredItem(hovered, item) {
        this.hoveredItem = hovered ? item : null;
    }
    updatePressedItem(pressed, item) {
        this.pressedItem = pressed ? item : null;
    }
}
TuiPrimitiveYearPickerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearPickerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveYearPickerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveYearPickerComponent, selector: "tui-primitive-year-picker", inputs: { value: "value", initialItem: "initialItem", min: "min", max: "max", disabledItemHandler: "disabledItemHandler" }, outputs: { yearClick: "yearClick" }, host: { properties: { "class._single": "this.isSingle" } }, ngImport: i0, template: "<div\n    *tuiRepeatTimes=\"let rowIndex of rows\"\n    automation-id=\"tui-primitive-year-picker__row\"\n    class=\"t-row\"\n>\n    <ng-container *tuiRepeatTimes=\"let colIndex of 4\">\n        <div\n            *tuiLet=\"getItem(rowIndex, colIndex) as item\"\n            automation-id=\"tui-primitive-year-picker__cell\"\n            class=\"t-cell\"\n            [class.t-cell_today]=\"itemIsToday(item)\"\n            [class.t-cell_interval]=\"itemIsInterval(item)\"\n            [attr.data-range]=\"getItemRange(item)\"\n            [attr.data-state]=\"getItemState(item)\"\n            [tuiScrollIntoView]=\"scrollItemIntoView(item)\"\n            (tuiHoveredChange)=\"onItemHovered($event, item)\"\n            (tuiPressedChange)=\"onItemPressed($event, item)\"\n            (click)=\"onItemClick(item)\"\n        >\n            <div class=\"t-item\">{{ item }}</div>\n        </div>\n    </ng-container>\n</div>\n", styles: [":host{display:block;font:var(--tui-font-text-m)}.t-row{position:relative;z-index:0;display:flex;justify-content:space-between;height:2.25rem}.t-item{position:relative;flex:1;line-height:2rem;border-radius:var(--tui-radius-m)}.t-item:before,.t-item:after{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell{position:relative;display:flex;align-items:center;justify-content:center;width:3.9375rem;text-align:center;outline:none;cursor:pointer;background-clip:content-box;box-sizing:border-box;border:2px solid transparent}.t-cell:before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;z-index:-1;border-radius:var(--tui-radius-m)}.t-cell_today:after{position:absolute;left:50%;transform:translate(-50%);content:\"\";bottom:.3125rem;height:.125rem;width:.75rem;border-radius:.375rem;background-color:var(--tui-text-01)}.t-cell_interval:before{background:var(--tui-base-02)}:host._single .t-cell_interval:before{background:var(--tui-secondary-hover)}.t-cell_interval:not(:last-child):before{right:-3.9375rem}.t-cell_interval:last-child:first-child:before{right:0}.t-cell_interval:first-child>.t-item{border-top-left-radius:var(--tui-radius-m);border-bottom-left-radius:var(--tui-radius-m)}.t-cell_interval:last-child>.t-item{border-top-right-radius:var(--tui-radius-m);border-bottom-right-radius:var(--tui-radius-m)}.t-cell_interval>.t-item{border-radius:0}.t-cell[data-range]:after{background-color:var(--tui-primary-text)}.t-cell[data-range]>.t-item{color:var(--tui-primary-text)}.t-cell[data-range]>.t-item:before,.t-cell[data-range]>.t-item:after{background-color:var(--tui-primary)}.t-cell[data-range][data-state=hover]>.t-item:before,.t-cell[data-range][data-state=hover]>.t-item:after{background-color:var(--tui-primary-hover)}.t-cell[data-range][data-state=active]>.t-item:before,.t-cell[data-range][data-state=active]>.t-item:after{background-color:var(--tui-primary-active)}.t-cell[data-range=end]>.t-item:before{left:.25rem}.t-cell[data-range=end]>.t-item:after{left:-2rem;right:100%;transform:translate(1.4375rem) scaleY(.6) scaleX(.4) rotate(45deg)}.t-cell[data-range=start]>.t-item:before{right:.25rem}.t-cell[data-range=start]>.t-item:after{left:100%;right:-2rem;transform:translate(-1.4375rem) scaleY(.6) scaleX(.4) rotate(45deg)}.t-cell[data-state=disabled]{pointer-events:none}.t-cell[data-state=disabled]>.t-item{opacity:.36}.t-cell[data-state=hover]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-hover)}.t-cell[data-state=active]:hover:not([data-range])>.t-item{background-color:var(--tui-secondary-active)}:host{width:15.75rem}.t-row{margin:.875rem 0}.t-row:first-child{margin-top:0}.t-row:last-child{margin-bottom:0}\n"], directives: [{ type: i1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { type: i1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i2.TuiScrollIntoViewDirective, selector: "[tuiScrollIntoView]", inputs: ["tuiScrollIntoView"] }, { type: i1.TuiHoveredDirective, selector: "[tuiHoveredChange]", outputs: ["tuiHoveredChange"] }, { type: i1.TuiPressedDirective, selector: "[tuiPressedChange]", outputs: ["tuiPressedChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "value", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "initialItem", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveYearPickerComponent.prototype, "disabledItemHandler", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearPickerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-year-picker',
                    templateUrl: './primitive-year-picker.template.html',
                    styleUrls: ['./primitive-year-picker.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], initialItem: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], yearClick: [{
                type: Output
            }], isSingle: [{
                type: HostBinding,
                args: ['class._single']
            }] } });

class TuiPrimitiveYearPickerModule {
}
TuiPrimitiveYearPickerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearPickerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPrimitiveYearPickerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearPickerModule, declarations: [TuiPrimitiveYearPickerComponent], imports: [TuiHoveredModule,
        TuiPressedModule,
        TuiRepeatTimesModule,
        TuiLetModule,
        TuiScrollIntoViewModule], exports: [TuiPrimitiveYearPickerComponent] });
TuiPrimitiveYearPickerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearPickerModule, imports: [[
            TuiHoveredModule,
            TuiPressedModule,
            TuiRepeatTimesModule,
            TuiLetModule,
            TuiScrollIntoViewModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveYearPickerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        TuiHoveredModule,
                        TuiPressedModule,
                        TuiRepeatTimesModule,
                        TuiLetModule,
                        TuiScrollIntoViewModule,
                    ],
                    declarations: [TuiPrimitiveYearPickerComponent],
                    exports: [TuiPrimitiveYearPickerComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPrimitiveYearPickerComponent, TuiPrimitiveYearPickerModule };
//# sourceMappingURL=taiga-ui-core-components-primitive-year-picker.js.map
