import { ElementRef, OnDestroy, ViewContainerRef } from '@angular/core';
import { TuiBooleanHandler } from '@taiga-ui/cdk';
import { TuiDriver, TuiRectAccessor } from '@taiga-ui/core/abstract';
import { Observable } from 'rxjs';
import { TuiDropdownDirective } from './dropdown.directive';
import * as i0 from "@angular/core";
export declare class TuiDropdownSelectionDirective extends TuiDriver implements TuiRectAccessor, OnDestroy {
    private range;
    private readonly doc;
    private readonly selection$;
    private readonly el;
    private readonly vcr;
    private readonly dropdown;
    private readonly handler$;
    private readonly stream$;
    private ghost?;
    position: 'selection' | 'tag' | 'word';
    set tuiDropdownSelection(visible: TuiBooleanHandler<Range> | string);
    readonly type = "dropdown";
    constructor(range: Range, doc: Document, selection$: Observable<unknown>, el: ElementRef<HTMLElement>, vcr: ViewContainerRef, dropdown: TuiDropdownDirective);
    getClientRect(): ClientRect;
    ngOnDestroy(): void;
    private getRange;
    /**
     * Check if Node is inside dropdown
     */
    private boxContains;
    /**
     * Check if given range is at least partially inside dropdown
     */
    private inDropdown;
    private veryVerySadInputFix;
    /**
     * Create an invisible DIV styled exactly like input/textarea element inside directive
     */
    private initGhost;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiDropdownSelectionDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<TuiDropdownSelectionDirective, "[tuiDropdown][tuiDropdownSelection]", never, { "position": "tuiDropdownSelectionPosition"; "tuiDropdownSelection": "tuiDropdownSelection"; }, {}, never>;
}
