import { AnimationOptions } from '@angular/animations';
import { ElementRef } from '@angular/core';
import { TuiContextWithImplicit } from '@taiga-ui/cdk';
import { TuiRectAccessor } from '@taiga-ui/core/abstract';
import { TuiModeDirective } from '@taiga-ui/core/directives/mode';
import { TuiPortalItem } from '@taiga-ui/core/interfaces';
import { TuiVisualViewportService } from '@taiga-ui/core/services';
import { TuiPoint } from '@taiga-ui/core/types';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import { TuiHintHoverDirective } from './hint-hover.directive';
import * as i0 from "@angular/core";
export declare class TuiHintComponent<C = any> {
    protected readonly accessor: TuiRectAccessor;
    private readonly el;
    private readonly options;
    private readonly polymorpheus;
    private readonly hover;
    private readonly pointer;
    private readonly mode;
    private readonly visualViewportService;
    readonly animation: {
        readonly delay?: string | number | undefined;
        readonly params?: {
            [name: string]: any;
        } | undefined;
        readonly value: "";
    };
    readonly appearance: string | null | undefined;
    readonly untouchable: boolean;
    constructor(hovered$: Observable<boolean>, position$: Observable<TuiPoint>, destroy$: Observable<void>, accessor: TuiRectAccessor, el: ElementRef<HTMLElement>, options: AnimationOptions, polymorpheus: TuiContextWithImplicit<TuiPortalItem<C>>, hover: TuiHintHoverDirective, pointer: unknown, mode: TuiModeDirective | null, visualViewportService: TuiVisualViewportService);
    get content(): PolymorpheusContent<C>;
    get context(): C | undefined;
    onClick(target: HTMLElement): void;
    private update;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiHintComponent<any>, [null, null, { self: true; }, null, null, null, null, null, { optional: true; }, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiHintComponent<any>, "tui-hint", never, {}, {}, never, never>;
}
