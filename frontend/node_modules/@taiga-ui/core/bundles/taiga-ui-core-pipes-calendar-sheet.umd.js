(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk'), require('@taiga-ui/core/tokens')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/pipes/calendar-sheet', ['exports', '@angular/core', '@taiga-ui/cdk', '@taiga-ui/core/tokens'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.pipes = global["taiga-ui"].core.pipes || {}, global["taiga-ui"].core.pipes["calendar-sheet"] = {}), global.ng.core, global.cdk, global["taiga-ui"].core.tokens));
})(this, (function (exports, i0, cdk, tokens) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * Computes day of week offset of the beginning of the month
     */
    var getMonthStartDaysOffset = function (month, firstDayOfWeek) {
        var startMonthOffsetFromSunday = new Date(month.year, month.month, 1).getDay();
        return startMonthOffsetFromSunday >= firstDayOfWeek
            ? startMonthOffsetFromSunday - firstDayOfWeek
            : cdk.DAYS_IN_WEEK - (firstDayOfWeek - startMonthOffsetFromSunday);
    };
    /**
     * Calculated day on a calendar grid
     * @return resulting day on these coordinates (could exceed passed month)
     */
    var getDayFromMonthRowCol = function (_a) {
        var month = _a.month, rowIndex = _a.rowIndex, colIndex = _a.colIndex, firstDayOfWeek = _a.firstDayOfWeek;
        ngDevMode && cdk.tuiAssert.assert(Number.isInteger(rowIndex));
        ngDevMode && cdk.tuiAssert.assert(cdk.tuiInRange(rowIndex, 0, 6));
        ngDevMode && cdk.tuiAssert.assert(Number.isInteger(colIndex));
        ngDevMode && cdk.tuiAssert.assert(cdk.tuiInRange(colIndex, 0, cdk.DAYS_IN_WEEK));
        var day = rowIndex * cdk.DAYS_IN_WEEK +
            colIndex -
            getMonthStartDaysOffset(month, firstDayOfWeek) +
            1;
        if (day > month.daysCount) {
            day -= month.daysCount;
            month = month.append({ month: 1 });
        }
        if (day <= 0) {
            month = month.append({ month: -1 });
            day = month.daysCount + day;
        }
        return new cdk.TuiDay(month.year, month.month, day);
    };

    var CALENDAR_ROWS_COUNT = 6;
    var TuiCalendarSheetPipe = /** @class */ (function () {
        function TuiCalendarSheetPipe(firstDayOfWeek) {
            this.firstDayOfWeek = firstDayOfWeek;
            this.currentMonth = null;
            this.currentSheet = [];
        }
        TuiCalendarSheetPipe.prototype.transform = function (month, showAdjacentDays) {
            if (showAdjacentDays === void 0) { showAdjacentDays = false; }
            var _a;
            if ((_a = this.currentMonth) === null || _a === void 0 ? void 0 : _a.monthSame(month)) {
                return this.currentSheet;
            }
            var sheet = [];
            for (var rowIndex = 0; rowIndex < CALENDAR_ROWS_COUNT; rowIndex++) {
                var row = [];
                for (var colIndex = 0; colIndex < cdk.DAYS_IN_WEEK; colIndex++) {
                    var day = getDayFromMonthRowCol({
                        month: month,
                        rowIndex: rowIndex,
                        colIndex: colIndex,
                        firstDayOfWeek: this.firstDayOfWeek,
                    });
                    var isPrevMonthDay = function (day, relativeToMonth) {
                        if (relativeToMonth === void 0) { relativeToMonth = month; }
                        return day.year < relativeToMonth.year || day.month < relativeToMonth.month;
                    };
                    var isNextMonthDay = function (day, relativeToMonth) {
                        if (relativeToMonth === void 0) { relativeToMonth = month; }
                        return day.year > relativeToMonth.year || day.month > relativeToMonth.month;
                    };
                    if (isPrevMonthDay(day) && !showAdjacentDays) {
                        continue;
                    }
                    if (isNextMonthDay(day) && !showAdjacentDays) {
                        break;
                    }
                    row.push(day);
                }
                sheet.push(row);
            }
            this.currentSheet = sheet.filter(function (row) { return row.length; });
            this.currentMonth = month;
            return this.currentSheet;
        };
        return TuiCalendarSheetPipe;
    }());
    TuiCalendarSheetPipe.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipe, deps: [{ token: tokens.TUI_FIRST_DAY_OF_WEEK }], target: i0__namespace.ɵɵFactoryTarget.Pipe });
    TuiCalendarSheetPipe.ɵpipe = i0__namespace.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipe, name: "tuiCalendarSheet" });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipe, decorators: [{
                type: i0.Pipe,
                args: [{
                        name: "tuiCalendarSheet",
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [tokens.TUI_FIRST_DAY_OF_WEEK]
                        }] }];
        } });

    var TuiCalendarSheetPipeModule = /** @class */ (function () {
        function TuiCalendarSheetPipeModule() {
        }
        return TuiCalendarSheetPipeModule;
    }());
    TuiCalendarSheetPipeModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipeModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiCalendarSheetPipeModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipeModule, declarations: [TuiCalendarSheetPipe], exports: [TuiCalendarSheetPipe] });
    TuiCalendarSheetPipeModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipeModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCalendarSheetPipeModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiCalendarSheetPipe],
                        exports: [TuiCalendarSheetPipe],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiCalendarSheetPipe = TuiCalendarSheetPipe;
    exports.TuiCalendarSheetPipeModule = TuiCalendarSheetPipeModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-pipes-calendar-sheet.umd.js.map
