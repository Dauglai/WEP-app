(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/core/providers'), require('@taiga-ui/core/tokens'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/directives/wrapper', ['exports', '@angular/core', '@taiga-ui/core/providers', '@taiga-ui/core/tokens', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.directives = global["taiga-ui"].core.directives || {}, global["taiga-ui"].core.directives.wrapper = {}), global.ng.core, global["taiga-ui"].core.providers, global["taiga-ui"].core.tokens, global.rxjs));
})(this, (function (exports, i0, providers, tokens, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var TuiWrapperDirective = /** @class */ (function () {
        function TuiWrapperDirective(mode$) {
            this.mode$ = mode$;
            this.disabled = false;
            this.readOnly = false;
            this.hover = null;
            this.active = null;
            this.focus = false;
            this.invalid = false;
            this.appearance = '';
        }
        Object.defineProperty(TuiWrapperDirective.prototype, "computedInvalid", {
            get: function () {
                return !this.disabled && !this.readOnly && this.invalid;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiWrapperDirective.prototype, "computedFocused", {
            get: function () {
                return this.focus && !this.disabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiWrapperDirective.prototype, "interactiveState", {
            get: function () {
                if (this.disabled) {
                    return "disabled" /* Disabled */;
                }
                if (this.readOnly) {
                    return "readonly" /* Readonly */;
                }
                if (this.active) {
                    return "active" /* Active */;
                }
                if (this.hover) {
                    return "hover" /* Hover */;
                }
                return null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiWrapperDirective.prototype, "noHover", {
            get: function () {
                return this.readOnly || this.hover === false;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiWrapperDirective.prototype, "noActive", {
            get: function () {
                return this.readOnly || this.active === false;
            },
            enumerable: false,
            configurable: true
        });
        return TuiWrapperDirective;
    }());
    TuiWrapperDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiWrapperDirective, deps: [{ token: tokens.TUI_MODE }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiWrapperDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiWrapperDirective, selector: "[tuiWrapper]", inputs: { disabled: "disabled", readOnly: "readOnly", hover: "hover", active: "active", focus: "focus", invalid: "invalid", appearance: "appearance" }, host: { listeners: { "$.data-mode.attr": "mode$" }, properties: { "attr.data-appearance": "this.appearance", "class._invalid": "this.computedInvalid", "class._focused": "this.computedFocused", "attr.data-state": "this.interactiveState", "class._no-hover": "this.noHover", "class._no-active": "this.noActive" } }, providers: [providers.MODE_PROVIDER], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiWrapperDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiWrapper]',
                        providers: [providers.MODE_PROVIDER],
                        host: {
                            '($.data-mode.attr)': 'mode$',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [tokens.TUI_MODE]
                        }] }];
        }, propDecorators: { disabled: [{
                    type: i0.Input
                }], readOnly: [{
                    type: i0.Input
                }], hover: [{
                    type: i0.Input
                }], active: [{
                    type: i0.Input
                }], focus: [{
                    type: i0.Input
                }], invalid: [{
                    type: i0.Input
                }], appearance: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ['attr.data-appearance']
                }], computedInvalid: [{
                    type: i0.HostBinding,
                    args: ['class._invalid']
                }], computedFocused: [{
                    type: i0.HostBinding,
                    args: ['class._focused']
                }], interactiveState: [{
                    type: i0.HostBinding,
                    args: ['attr.data-state']
                }], noHover: [{
                    type: i0.HostBinding,
                    args: ['class._no-hover']
                }], noActive: [{
                    type: i0.HostBinding,
                    args: ['class._no-active']
                }] } });

    var TuiWrapperModule = /** @class */ (function () {
        function TuiWrapperModule() {
        }
        return TuiWrapperModule;
    }());
    TuiWrapperModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiWrapperModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiWrapperModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiWrapperModule, declarations: [TuiWrapperDirective], exports: [TuiWrapperDirective] });
    TuiWrapperModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiWrapperModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiWrapperModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiWrapperDirective],
                        exports: [TuiWrapperDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiWrapperDirective = TuiWrapperDirective;
    exports.TuiWrapperModule = TuiWrapperModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-directives-wrapper.umd.js.map
