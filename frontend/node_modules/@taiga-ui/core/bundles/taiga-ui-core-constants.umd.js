(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/constants', ['exports', '@taiga-ui/cdk'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.constants = {}), global.cdk));
})(this, (function (exports, cdk) { 'use strict';

    var TUI_CACHE_BUSTING_PAYLOAD = "?v=" + cdk.TUI_VERSION;

    var TUI_DECIMAL_SYMBOLS = [",", "."];

    var DEFAULT_ICONS_PATH = function (name) { return name.includes(".svg#") ? name : "#" + name; };

    var TUI_DEFAULT_MARKER_HANDLER = function () { return cdk.EMPTY_ARRAY; };

    var TUI_DEFAULT_NUMBER_FORMAT = {
        decimalLimit: Infinity,
        decimalSeparator: ",",
        thousandSeparator: cdk.CHAR_NO_BREAK_SPACE,
        zeroPadding: true,
    };

    var tuiEditingKeys = [
        "Spacebar",
        "Backspace",
        "Delete",
        "ArrowLeft",
        "ArrowRight",
        "Left",
        "Right",
        "End",
        "Home",
    ];

    /**
     * An event indicating that async data for expand has finished loading.
     * Dispatch to finish loading states for {@link TuiExpandComponent}.
     */
    var TUI_EXPAND_LOADED = "tui-expand-loaded";
    /**
     * An event for scrolling an element into view within {@link TuiScrollbarComponent}.
     */
    var TUI_SCROLL_INTO_VIEW = "tui-scroll-into-view";
    /**
     * An event to notify {@link TuiScrollbarComponent} that
     * it should control a nested element.
     */
    var TUI_SCROLLABLE = "tui-scrollable";
    /**
     * An event indicating and error during icon loading in {@link TuiSvgComponent}.
     */
    var TUI_ICON_ERROR = "tui-icon-error";

    var TUI_HINT_DIRECTIONS = [
        "bottom-left",
        "bottom",
        "bottom-right",
        "top-left",
        "top",
        "top-right",
        "left-top",
        "left",
        "left-bottom",
        "right-top",
        "right",
        "right-bottom",
    ];

    var MASK_CARET_TRAP = "[]";

    var TUI_DIGIT_REGEXP = /\d/;
    var TUI_NON_DIGIT_REGEXP = /\D/;
    var TUI_NON_DIGITS_REGEXP = /\D+/g;
    var TUI_LEADING_ZEROES_REGEXP = /^0+/;
    var TUI_MASK_SYMBOLS_REGEXP = /[ \-_()]/g;
    var TUI_LAST_PUNCTUATION_MARK_REGEXP = /[.,\\/#!$%\\^&\\*;:{}=\\-_`~()]$/;
    var TUI_LATIN_REGEXP = /[A-z]/;
    var TUI_LATIN_AND_NUMBERS_REGEXP = /[A-z|0-9]/;

    /**
     * Generated bundle index. Do not edit.
     */

    exports.DEFAULT_ICONS_PATH = DEFAULT_ICONS_PATH;
    exports.MASK_CARET_TRAP = MASK_CARET_TRAP;
    exports.TUI_CACHE_BUSTING_PAYLOAD = TUI_CACHE_BUSTING_PAYLOAD;
    exports.TUI_DECIMAL_SYMBOLS = TUI_DECIMAL_SYMBOLS;
    exports.TUI_DEFAULT_MARKER_HANDLER = TUI_DEFAULT_MARKER_HANDLER;
    exports.TUI_DEFAULT_NUMBER_FORMAT = TUI_DEFAULT_NUMBER_FORMAT;
    exports.TUI_DIGIT_REGEXP = TUI_DIGIT_REGEXP;
    exports.TUI_EXPAND_LOADED = TUI_EXPAND_LOADED;
    exports.TUI_HINT_DIRECTIONS = TUI_HINT_DIRECTIONS;
    exports.TUI_ICON_ERROR = TUI_ICON_ERROR;
    exports.TUI_LAST_PUNCTUATION_MARK_REGEXP = TUI_LAST_PUNCTUATION_MARK_REGEXP;
    exports.TUI_LATIN_AND_NUMBERS_REGEXP = TUI_LATIN_AND_NUMBERS_REGEXP;
    exports.TUI_LATIN_REGEXP = TUI_LATIN_REGEXP;
    exports.TUI_LEADING_ZEROES_REGEXP = TUI_LEADING_ZEROES_REGEXP;
    exports.TUI_MASK_SYMBOLS_REGEXP = TUI_MASK_SYMBOLS_REGEXP;
    exports.TUI_NON_DIGITS_REGEXP = TUI_NON_DIGITS_REGEXP;
    exports.TUI_NON_DIGIT_REGEXP = TUI_NON_DIGIT_REGEXP;
    exports.TUI_SCROLLABLE = TUI_SCROLLABLE;
    exports.TUI_SCROLL_INTO_VIEW = TUI_SCROLL_INTO_VIEW;
    exports.tuiEditingKeys = tuiEditingKeys;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-constants.umd.js.map
