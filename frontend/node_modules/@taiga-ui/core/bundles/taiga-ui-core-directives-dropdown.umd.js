(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@ng-web-apis/common'), require('@taiga-ui/cdk'), require('@taiga-ui/core/abstract'), require('@taiga-ui/core/animations'), require('@taiga-ui/core/services'), require('@taiga-ui/core/tokens'), require('rxjs/operators'), require('@taiga-ui/core/utils'), require('@tinkoff/ng-polymorpheus'), require('rxjs'), require('@taiga-ui/core/components/scrollbar'), require('@taiga-ui/core/directives/mode'), require('@tinkoff/ng-event-plugins'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/directives/dropdown', ['exports', '@angular/core', '@ng-web-apis/common', '@taiga-ui/cdk', '@taiga-ui/core/abstract', '@taiga-ui/core/animations', '@taiga-ui/core/services', '@taiga-ui/core/tokens', 'rxjs/operators', '@taiga-ui/core/utils', '@tinkoff/ng-polymorpheus', 'rxjs', '@taiga-ui/core/components/scrollbar', '@taiga-ui/core/directives/mode', '@tinkoff/ng-event-plugins', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.directives = global["taiga-ui"].core.directives || {}, global["taiga-ui"].core.directives.dropdown = {}), global.ng.core, global.common, global.i2, global["taiga-ui"].core.abstract, global["taiga-ui"].core.animations, global["taiga-ui"].core.services, global["taiga-ui"].core.tokens, global.rxjs.operators, global["taiga-ui"].core.utils, global.i4, global.rxjs, global["taiga-ui"].core.components.scrollbar, global["taiga-ui"].core.directives.mode, global.ngEventPlugins, global.ng.common));
})(this, (function (exports, i0, common, i2, i1, animations, i9, tokens, operators, utils, i4, i1$1, i1$2, i3, ngEventPlugins, common$1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace$2 = /*#__PURE__*/_interopNamespace(i1);
    var i9__namespace = /*#__PURE__*/_interopNamespace(i9);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1$1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$2);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    /**
     * A component to display a dropdown
     */
    var TUI_DROPDOWN_COMPONENT = new i0.InjectionToken("[TUI_DROPDOWN_COMPONENT]", {
        factory: function () { return TuiDropdownComponent; },
    });

    var TuiDropdownDirective = /** @class */ (function () {
        function TuiDropdownDirective(el, hapica, injector, dropdownService) {
            this.el = el;
            this.hapica = hapica;
            this.injector = injector;
            this.dropdownService = dropdownService;
            this.dropdownBoxRef = null;
            this.type = 'dropdown';
            this.component = new i4.PolymorpheusComponent(this.hapica, this.injector);
        }
        Object.defineProperty(TuiDropdownDirective.prototype, "position", {
            get: function () {
                return utils.tuiCheckFixedPosition(this.el.nativeElement) ? 'fixed' : 'absolute';
            },
            enumerable: false,
            configurable: true
        });
        TuiDropdownDirective.prototype.ngAfterViewChecked = function () {
            var _a, _b;
            (_a = this.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.changeDetectorRef.detectChanges();
            (_b = this.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.changeDetectorRef.markForCheck();
        };
        TuiDropdownDirective.prototype.ngOnChanges = function () {
            if (!this.content) {
                this.toggle(false);
            }
        };
        TuiDropdownDirective.prototype.ngOnDestroy = function () {
            this.toggle(false);
        };
        TuiDropdownDirective.prototype.getClientRect = function () {
            return this.el.nativeElement.getBoundingClientRect();
        };
        TuiDropdownDirective.prototype.toggle = function (show) {
            if (show && this.content && !this.dropdownBoxRef) {
                this.dropdownBoxRef = this.dropdownService.add(this.component);
            }
            else if (!show && this.dropdownBoxRef) {
                this.dropdownService.remove(this.dropdownBoxRef);
                this.dropdownBoxRef = null;
            }
        };
        return TuiDropdownDirective;
    }());
    TuiDropdownDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownDirective, deps: [{ token: i0.ElementRef }, { token: TUI_DROPDOWN_COMPONENT }, { token: i0.INJECTOR }, { token: i2.TuiDropdownPortalService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownDirective, selector: "[tuiDropdown]:not(ng-container)", inputs: { content: ["tuiDropdown", "content"] }, providers: [
            i1.tuiAsRectAccessor(TuiDropdownDirective),
            i1.tuiAsVehicle(TuiDropdownDirective),
        ], exportAs: ["tuiDropdown"], usesOnChanges: true, ngImport: i0__namespace });
    __decorate([
        i2.tuiPure
    ], TuiDropdownDirective.prototype, "position", null);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown]:not(ng-container)',
                        exportAs: 'tuiDropdown',
                        providers: [
                            i1.tuiAsRectAccessor(TuiDropdownDirective),
                            i1.tuiAsVehicle(TuiDropdownDirective),
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.Type, decorators: [{
                            type: i0.Inject,
                            args: [TUI_DROPDOWN_COMPONENT]
                        }] }, { type: i0__namespace.Injector, decorators: [{
                            type: i0.Inject,
                            args: [i0.INJECTOR]
                        }] }, { type: i2__namespace.TuiDropdownPortalService, decorators: [{
                            type: i0.Inject,
                            args: [i2.TuiDropdownPortalService]
                        }] }];
        }, propDecorators: { content: [{
                    type: i0.Input,
                    args: ['tuiDropdown']
                }], position: [] } });

    /** Default values for hint options */
    var TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS = {
        showDelay: 200,
        hideDelay: 500,
    };
    /**
     * Default parameters for dropdown hover directive
     */
    var TUI_DROPDOWN_HOVER_OPTIONS = new i0.InjectionToken('[TUI_DROPDOWN_HOVER_OPTIONS]', {
        factory: function () { return TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS; },
    });
    var tuiDropdownHoverOptionsProvider = function (options) { return ({
        provide: TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS,
        useValue: Object.assign(Object.assign({}, TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS), options),
    }); };

    var TuiDropdownHoverDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownHoverDirective, _super);
        function TuiDropdownHoverDirective(hovered$, options) {
            var _this = _super.call(this, function (subscriber) { return _this.stream$.subscribe(subscriber); }) || this;
            _this.hovered$ = hovered$;
            _this.options = options;
            _this.toggle$ = new i1$1.Subject();
            _this.stream$ = i1$1.merge(_this.toggle$, _this.hovered$).pipe(operators.switchMap(function (visible) { return i1$1.of(visible).pipe(operators.delay(visible ? _this.showDelay : _this.hideDelay)); }), operators.tap(function (visible) {
                _this.hovered = visible;
            }), operators.share());
            _this.showDelay = _this.options.showDelay;
            _this.hideDelay = _this.options.hideDelay;
            _this.hovered = false;
            _this.type = 'dropdown';
            return _this;
        }
        TuiDropdownHoverDirective.prototype.toggle = function (visible) {
            this.toggle$.next(visible);
        };
        return TuiDropdownHoverDirective;
    }(i1.TuiDriver));
    TuiDropdownHoverDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownHoverDirective, deps: [{ token: i2.TuiHoveredService }, { token: TUI_DROPDOWN_HOVER_OPTIONS }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownHoverDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownHoverDirective, selector: "[tuiDropdownHover]:not(ng-container)", inputs: { showDelay: ["tuiDropdownShowDelay", "showDelay"], hideDelay: ["tuiDropdownHideDelay", "hideDelay"] }, providers: [i1.tuiAsDriver(TuiDropdownHoverDirective), i2.TuiHoveredService], usesInheritance: true, ngImport: i0__namespace });
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownHoverDirective.prototype, "showDelay", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownHoverDirective.prototype, "hideDelay", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownHoverDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdownHover]:not(ng-container)',
                        providers: [i1.tuiAsDriver(TuiDropdownHoverDirective), i2.TuiHoveredService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [i2.TuiHoveredService]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_DROPDOWN_HOVER_OPTIONS]
                        }] }];
        }, propDecorators: { showDelay: [{
                    type: i0.Input,
                    args: ['tuiDropdownShowDelay']
                }], hideDelay: [{
                    type: i0.Input,
                    args: ['tuiDropdownHideDelay']
                }] } });

    /** Default values for dropdown options */
    var TUI_DROPDOWN_DEFAULT_OPTIONS = {
        align: 'left',
        direction: null,
        limitWidth: 'auto',
        maxHeight: 400,
        minHeight: 80,
        offset: 4,
    };
    /**
     * Default parameters for dropdown directive
     */
    var TUI_DROPDOWN_OPTIONS = new i0.InjectionToken('[TUI_DROPDOWN_OPTIONS]', {
        factory: function () { return TUI_DROPDOWN_DEFAULT_OPTIONS; },
    });
    var tuiDropdownOptionsProvider = function (override) { return ({
        provide: TUI_DROPDOWN_OPTIONS,
        deps: [
            [new i0.Optional(), TuiDropdownOptionsDirective],
            [new i0.SkipSelf(), TUI_DROPDOWN_OPTIONS],
        ],
        useFactory: utils.tuiOverrideOptions(override),
    }); };
    var TuiDropdownOptionsDirective = /** @class */ (function () {
        function TuiDropdownOptionsDirective(options) {
            this.options = options;
            this.align = this.options.align;
            this.direction = this.options.direction;
            this.limitWidth = this.options.limitWidth;
            this.minHeight = this.options.minHeight;
            this.maxHeight = this.options.maxHeight;
            this.offset = this.options.offset;
        }
        return TuiDropdownOptionsDirective;
    }());
    TuiDropdownOptionsDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownOptionsDirective, deps: [{ token: TUI_DROPDOWN_OPTIONS, skipSelf: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownOptionsDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownOptionsDirective, selector: "[tuiDropdownAlign], [tuiDropdownDirection], [tuiDropdownLimitWidth], [tuiDropdownMinHeight], [tuiDropdownMaxHeight], [tuiDropdownOffset]", inputs: { align: ["tuiDropdownAlign", "align"], direction: ["tuiDropdownDirection", "direction"], limitWidth: ["tuiDropdownLimitWidth", "limitWidth"], minHeight: ["tuiDropdownMinHeight", "minHeight"], maxHeight: ["tuiDropdownMaxHeight", "maxHeight"], offset: ["tuiDropdownOffset", "offset"] }, providers: [
            {
                provide: TUI_DROPDOWN_OPTIONS,
                useExisting: i0.forwardRef(function () { return TuiDropdownOptionsDirective; }),
            },
        ], ngImport: i0__namespace });
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownOptionsDirective.prototype, "align", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownOptionsDirective.prototype, "direction", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownOptionsDirective.prototype, "limitWidth", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownOptionsDirective.prototype, "minHeight", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownOptionsDirective.prototype, "maxHeight", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownOptionsDirective.prototype, "offset", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownOptionsDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdownAlign], [tuiDropdownDirection], [tuiDropdownLimitWidth], [tuiDropdownMinHeight], [tuiDropdownMaxHeight], [tuiDropdownOffset]',
                        providers: [
                            {
                                provide: TUI_DROPDOWN_OPTIONS,
                                useExisting: i0.forwardRef(function () { return TuiDropdownOptionsDirective; }),
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.SkipSelf
                        }, {
                            type: i0.Inject,
                            args: [TUI_DROPDOWN_OPTIONS]
                        }] }];
        }, propDecorators: { align: [{
                    type: i0.Input,
                    args: ['tuiDropdownAlign']
                }], direction: [{
                    type: i0.Input,
                    args: ['tuiDropdownDirection']
                }], limitWidth: [{
                    type: i0.Input,
                    args: ['tuiDropdownLimitWidth']
                }], minHeight: [{
                    type: i0.Input,
                    args: ['tuiDropdownMinHeight']
                }], maxHeight: [{
                    type: i0.Input,
                    args: ['tuiDropdownMaxHeight']
                }], offset: [{
                    type: i0.Input,
                    args: ['tuiDropdownOffset']
                }] } });

    /**
     * @description:
     * This component is used to show template in a portal
     * using default style of white rounded box with a shadow
     */
    var TuiDropdownComponent = /** @class */ (function () {
        function TuiDropdownComponent(position$, destroy$, directive, el, host, accessor, win, animationOptions, options, hoverDirective, visualViewportService) {
            var _this = this;
            this.directive = directive;
            this.el = el;
            this.host = host;
            this.accessor = accessor;
            this.win = win;
            this.animationOptions = animationOptions;
            this.options = options;
            this.hoverDirective = hoverDirective;
            this.dropdownAnimation = Object.assign({ value: "fadeInTop" /* FadeInTop */ }, this.animationOptions);
            position$
                .pipe(operators.map(function (point) { return _this.directive.position === 'fixed'
                ? visualViewportService.correct(point)
                : point; }), operators.takeUntil(destroy$))
                .subscribe(function (_a) {
                var _b = __read(_a, 2), top = _b[0], left = _b[1];
                _this.update(top, left);
            });
            this.updateWidth(this.accessor.getClientRect().width);
        }
        TuiDropdownComponent.prototype.ngOnDestroy = function () {
            this.onHoveredChange(false);
        };
        TuiDropdownComponent.prototype.onHoveredChange = function (hovered) {
            if (this.hoverDirective) {
                this.hoverDirective.toggle(hovered);
            }
        };
        TuiDropdownComponent.prototype.onTopFocus = function () {
            this.moveFocusOutside(true);
        };
        TuiDropdownComponent.prototype.onBottomFocus = function () {
            this.moveFocusOutside(false);
        };
        TuiDropdownComponent.prototype.update = function (top, left) {
            var style = this.el.nativeElement.style;
            var right = this.el.nativeElement.getBoundingClientRect().right;
            var _a = this.options, maxHeight = _a.maxHeight, offset = _a.offset;
            var innerHeight = this.win.innerHeight;
            var clientRect = this.host.clientRect;
            var position = this.directive.position;
            var rect = this.accessor.getClientRect();
            var offsetX = position === 'fixed' ? 0 : -clientRect.left;
            var offsetY = position === 'fixed' ? 0 : -clientRect.top;
            top += offsetY;
            left += offsetX;
            var isIntersecting = left < rect.right && right > rect.left && top < offsetY + 2 * offset;
            var available = isIntersecting
                ? rect.top - 2 * offset
                : offsetY + innerHeight - top - offset;
            style.position = position;
            style.top = i2.tuiPx(Math.max(top, offsetY + offset));
            style.left = i2.tuiPx(left);
            style.maxHeight = i2.tuiPx(Math.min(maxHeight, available));
            style.width = '';
            style.minWidth = '';
            this.updateWidth(rect.width);
        };
        TuiDropdownComponent.prototype.updateWidth = function (width) {
            var style = this.el.nativeElement.style;
            switch (this.options.limitWidth) {
                case 'min':
                    style.minWidth = i2.tuiPx(width);
                    break;
                case 'fixed':
                    style.width = i2.tuiPx(width);
                    break;
                case 'auto':
                    break;
            }
        };
        TuiDropdownComponent.prototype.moveFocusOutside = function (previous) {
            var nativeElement = this.directive.el.nativeElement;
            var ownerDocument = nativeElement.ownerDocument;
            var root = ownerDocument ? ownerDocument.body : nativeElement;
            var focusable = i2.tuiGetClosestFocusable({ initial: nativeElement, root: root, previous: previous });
            while (focusable !== null && nativeElement.contains(focusable)) {
                focusable = i2.tuiGetClosestFocusable({ initial: focusable, root: root, previous: previous });
            }
            focusable === null || focusable === void 0 ? void 0 : focusable.focus();
        };
        return TuiDropdownComponent;
    }());
    TuiDropdownComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownComponent, deps: [{ token: i9.TuiPositionService }, { token: i2.TuiDestroyService, self: true }, { token: TuiDropdownDirective }, { token: i0.ElementRef }, { token: i2.AbstractTuiPortalHostComponent }, { token: i1.TuiRectAccessor }, { token: common.WINDOW }, { token: tokens.TUI_ANIMATION_OPTIONS }, { token: TUI_DROPDOWN_OPTIONS }, { token: TuiDropdownHoverDirective, optional: true }, { token: i9.TuiVisualViewportService }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiDropdownComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownComponent, selector: "tui-dropdown", host: { properties: { "@tuiDropdownAnimation": "this.dropdownAnimation" } }, providers: [
            i2.TuiDestroyService,
            i9.TuiPositionService,
            i1.tuiPositionAccessorFor('dropdown'),
            i1.tuiRectAccessorFor('dropdown', TuiDropdownDirective),
        ], ngImport: i0__namespace, template: "<div\n    #activeZone=\"tuiActiveZone\"\n    tuiActiveZone\n    tuiOverscroll=\"all\"\n    class=\"t-wrapper\"\n    [tuiMode]=\"null\"\n    (tuiHoveredChange)=\"onHoveredChange($event)\"\n>\n    <tui-scrollbar class=\"t-scroll\">\n        <div\n            tabindex=\"0\"\n            (focus)=\"onTopFocus()\"\n        ></div>\n        <div\n            *polymorpheusOutlet=\"directive.content as text; context: {$implicit: activeZone}\"\n            class=\"t-primitive\"\n        >\n            {{ text }}\n        </div>\n        <div\n            tabindex=\"0\"\n            (focus)=\"onBottomFocus()\"\n        ></div>\n    </tui-scrollbar>\n</div>\n", styles: [":host{position:relative;z-index:0;box-shadow:0 1.5rem 1rem #00000008,0 .75rem .75rem #0000000a,0 .25rem .375rem #0000000d;position:absolute;display:flex;background-color:var(--tui-elevation-01);border-radius:var(--tui-radius-m);overflow:hidden;border:1px solid var(--tui-base-04);box-sizing:border-box;max-width:calc(100% - 8px)}:host.ng-animating{pointer-events:none}:host:not([style*=\"top\"]){visibility:hidden}.t-wrapper{flex-grow:1;max-width:100%;max-height:inherit;overflow:visible}.t-scroll{height:100%}.t-primitive{padding:1rem}\n"], components: [{ type: i1__namespace$1.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }], directives: [{ type: i2__namespace.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i2__namespace.TuiOverscrollDirective, selector: "[tuiOverscroll]", inputs: ["tuiOverscroll"] }, { type: i3__namespace.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }, { type: i2__namespace.TuiHoveredDirective, selector: "[tuiHoveredChange]", outputs: ["tuiHoveredChange"] }, { type: i4__namespace.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [animations.tuiDropdownAnimation], changeDetection: i0__namespace.ChangeDetectionStrategy.Default });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-dropdown',
                        templateUrl: './dropdown.template.html',
                        styleUrls: ['./dropdown.style.less'],
                        providers: [
                            i2.TuiDestroyService,
                            i9.TuiPositionService,
                            i1.tuiPositionAccessorFor('dropdown'),
                            i1.tuiRectAccessorFor('dropdown', TuiDropdownDirective),
                        ],
                        animations: [animations.tuiDropdownAnimation],
                        // @bad TODO: OnPush
                        // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                        changeDetection: i0.ChangeDetectionStrategy.Default,
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [i9.TuiPositionService]
                        }] }, { type: i1__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i2.TuiDestroyService]
                        }] }, { type: TuiDropdownDirective, decorators: [{
                            type: i0.Inject,
                            args: [TuiDropdownDirective]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i2__namespace.AbstractTuiPortalHostComponent, decorators: [{
                            type: i0.Inject,
                            args: [i2.AbstractTuiPortalHostComponent]
                        }] }, { type: i1__namespace$2.TuiRectAccessor, decorators: [{
                            type: i0.Inject,
                            args: [i1.TuiRectAccessor]
                        }] }, { type: Window, decorators: [{
                            type: i0.Inject,
                            args: [common.WINDOW]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [tokens.TUI_ANIMATION_OPTIONS]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_DROPDOWN_OPTIONS]
                        }] }, { type: TuiDropdownHoverDirective, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [TuiDropdownHoverDirective]
                        }] }, { type: i9__namespace.TuiVisualViewportService, decorators: [{
                            type: i0.Inject,
                            args: [i9.TuiVisualViewportService]
                        }] }];
        }, propDecorators: { dropdownAnimation: [{
                    type: i0.HostBinding,
                    args: ['@tuiDropdownAnimation']
                }] } });

    function activeZoneFilter(target) {
        return !this.activeZone.contains(target);
    }
    var TuiDropdownContextDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownContextDirective, _super);
        function TuiDropdownContextDirective(activeZone) {
            var _this = _super.call(this, function (subscriber) { return _this.stream$.subscribe(subscriber); }) || this;
            _this.activeZone = activeZone;
            _this.stream$ = new i1$1.Subject();
            _this.currentRect = i2.EMPTY_CLIENT_RECT;
            _this.type = 'dropdown';
            return _this;
        }
        TuiDropdownContextDirective.prototype.onContextMenu = function (x, y) {
            this.currentRect = i2.tuiPointToClientRect(x, y);
            this.stream$.next(true);
        };
        TuiDropdownContextDirective.prototype.closeDropdown = function () {
            this.stream$.next(false);
        };
        TuiDropdownContextDirective.prototype.getClientRect = function () {
            return this.currentRect;
        };
        return TuiDropdownContextDirective;
    }(i1.TuiDriver));
    TuiDropdownContextDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownContextDirective, deps: [{ token: i2.TuiActiveZoneDirective }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownContextDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownContextDirective, selector: "[tuiDropdown][tuiDropdownContext]", host: { listeners: { "contextmenu.prevent.stop": "onContextMenu($event.clientX,$event.clientY)", "document:click.silent": "closeDropdown($event.target)", "document:contextmenu.capture.silent": "closeDropdown($event.target)", "document:keydown.esc": "closeDropdown($event.currentTarget)" } }, providers: [
            i2.TuiActiveZoneDirective,
            i1.tuiAsDriver(TuiDropdownContextDirective),
            i1.tuiAsRectAccessor(TuiDropdownContextDirective),
        ], usesInheritance: true, ngImport: i0__namespace });
    __decorate([
        ngEventPlugins.shouldCall(activeZoneFilter)
    ], TuiDropdownContextDirective.prototype, "closeDropdown", null);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownContextDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown][tuiDropdownContext]',
                        providers: [
                            i2.TuiActiveZoneDirective,
                            i1.tuiAsDriver(TuiDropdownContextDirective),
                            i1.tuiAsRectAccessor(TuiDropdownContextDirective),
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i2__namespace.TuiActiveZoneDirective, decorators: [{
                            type: i0.Inject,
                            args: [i2.TuiActiveZoneDirective]
                        }] }];
        }, propDecorators: { onContextMenu: [{
                    type: i0.HostListener,
                    args: ['contextmenu.prevent.stop', ['$event.clientX', '$event.clientY']]
                }], closeDropdown: [{
                    type: i0.HostListener,
                    args: ['document:click.silent', ['$event.target']]
                }, {
                    type: i0.HostListener,
                    args: ['document:contextmenu.capture.silent', ['$event.target']]
                }, {
                    type: i0.HostListener,
                    args: ['document:keydown.esc', ['$event.currentTarget']]
                }] } });

    var TuiDropdownDriverDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownDriverDirective, _super);
        // TODO: Figure out why this is necessary under nx test runner
        function TuiDropdownDriverDirective(destroy$, drivers, vehicles) {
            var _this = _super.call(this, destroy$, drivers, vehicles) || this;
            _this.type = 'dropdown';
            return _this;
        }
        return TuiDropdownDriverDirective;
    }(i1.AbstractTuiDriverDirective));
    TuiDropdownDriverDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownDriverDirective, deps: [{ token: i2.TuiDestroyService, self: true }, { token: i1.TuiDriver }, { token: i1.TuiVehicle }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownDriverDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownDriverDirective, selector: "[tuiDropdown]", providers: [i2.TuiDestroyService], usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownDriverDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown]',
                        providers: [i2.TuiDestroyService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i1__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i2.TuiDestroyService]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TuiDriver]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TuiVehicle]
                        }] }];
        } });

    var TuiDropdownHostDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownHostDirective, _super);
        function TuiDropdownHostDirective() {
            var _this = _super.apply(this, __spreadArray([], __read(arguments))) || this;
            _this.type = 'dropdown';
            return _this;
        }
        TuiDropdownHostDirective.prototype.getClientRect = function () {
            var _a;
            return ((_a = this.tuiDropdownHost) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || i2.EMPTY_CLIENT_RECT;
        };
        return TuiDropdownHostDirective;
    }(i1.TuiRectAccessor));
    TuiDropdownHostDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownHostDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownHostDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownHostDirective, selector: "[tuiDropdown][tuiDropdownHost]", inputs: { tuiDropdownHost: "tuiDropdownHost" }, providers: [i1.tuiAsRectAccessor(TuiDropdownHostDirective)], usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownHostDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown][tuiDropdownHost]',
                        providers: [i1.tuiAsRectAccessor(TuiDropdownHostDirective)],
                    }]
            }], propDecorators: { tuiDropdownHost: [{
                    type: i0.Input
                }] } });

    var TuiDropdownManualDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownManualDirective, _super);
        function TuiDropdownManualDirective() {
            var _this = _super.call(this, function (subscriber) { return _this.stream$.subscribe(subscriber); }) || this;
            _this.stream$ = new i1$1.BehaviorSubject(false);
            _this.tuiDropdownManual = false;
            _this.type = 'dropdown';
            return _this;
        }
        TuiDropdownManualDirective.prototype.ngOnChanges = function () {
            this.stream$.next(this.tuiDropdownManual);
        };
        return TuiDropdownManualDirective;
    }(i1.TuiDriver));
    TuiDropdownManualDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownManualDirective, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownManualDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownManualDirective, selector: "[tuiDropdown][tuiDropdownManual]", inputs: { tuiDropdownManual: "tuiDropdownManual" }, providers: [i1.tuiAsDriver(TuiDropdownManualDirective)], usesInheritance: true, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownManualDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown][tuiDropdownManual]',
                        providers: [i1.tuiAsDriver(TuiDropdownManualDirective)],
                    }]
            }], ctorParameters: function () { return []; }, propDecorators: { tuiDropdownManual: [{
                    type: i0.Input
                }] } });

    var TuiDropdownPositionDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownPositionDirective, _super);
        function TuiDropdownPositionDirective(options, viewport, accessors, directive) {
            var _this = _super.call(this) || this;
            _this.options = options;
            _this.viewport = viewport;
            _this.accessors = accessors;
            _this.directive = directive;
            _this.type = 'dropdown';
            return _this;
        }
        TuiDropdownPositionDirective.prototype.getPosition = function (_c) {
            var width = _c.width, height = _c.height;
            var _a, _b;
            var hostRect = (_b = (_a = this.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : i2.EMPTY_CLIENT_RECT;
            var viewport = this.viewport.getClientRect();
            var _d = this.options, minHeight = _d.minHeight, align = _d.align, direction = _d.direction, offset = _d.offset;
            var previous = this.previous || direction || 'bottom';
            var right = Math.max(hostRect.right - width, offset);
            var available = {
                top: hostRect.top - 2 * offset - viewport.top,
                bottom: viewport.bottom - hostRect.bottom - 2 * offset,
            };
            var position = {
                top: hostRect.top - offset - height,
                bottom: hostRect.bottom + offset,
                right: right,
                center: hostRect.left + hostRect.width / 2 + width / 2 < viewport.right - offset
                    ? hostRect.left + hostRect.width / 2 - width / 2
                    : right,
                left: hostRect.left + width < viewport.right - offset ? hostRect.left : right,
            };
            var better = available.top > available.bottom ? 'top' : 'bottom';
            if ((available[previous] > minHeight && direction) ||
                available[previous] > height) {
                return [position[previous], position[align]];
            }
            this.previous = better;
            return [position[better], position[align]];
        };
        Object.defineProperty(TuiDropdownPositionDirective.prototype, "accessor", {
            get: function () {
                return i1.tuiFallbackRectAccessor('dropdown')(this.accessors, this.directive);
            },
            enumerable: false,
            configurable: true
        });
        return TuiDropdownPositionDirective;
    }(i1.TuiPositionAccessor));
    TuiDropdownPositionDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownPositionDirective, deps: [{ token: TUI_DROPDOWN_OPTIONS }, { token: tokens.TUI_VIEWPORT }, { token: i1.TuiRectAccessor }, { token: TuiDropdownDirective }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownPositionDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownPositionDirective, selector: "[tuiDropdown]:not([tuiDropdownCustomPosition]):not([tuiDropdownSided])", providers: [i1.tuiAsPositionAccessor(TuiDropdownPositionDirective)], usesInheritance: true, ngImport: i0__namespace });
    __decorate([
        i2.tuiPure
    ], TuiDropdownPositionDirective.prototype, "accessor", null);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownPositionDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown]:not([tuiDropdownCustomPosition]):not([tuiDropdownSided])',
                        providers: [i1.tuiAsPositionAccessor(TuiDropdownPositionDirective)],
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_DROPDOWN_OPTIONS]
                        }] }, { type: i1__namespace$2.TuiRectAccessor, decorators: [{
                            type: i0.Inject,
                            args: [tokens.TUI_VIEWPORT]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [i1.TuiRectAccessor]
                        }] }, { type: TuiDropdownDirective, decorators: [{
                            type: i0.Inject,
                            args: [TuiDropdownDirective]
                        }] }];
        }, propDecorators: { accessor: [] } });

    var TuiDropdownPositionSidedDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownPositionSidedDirective, _super);
        function TuiDropdownPositionSidedDirective(options, viewport, vertical) {
            var _this = _super.call(this) || this;
            _this.options = options;
            _this.viewport = viewport;
            _this.vertical = vertical;
            _this.previous = _this.options.direction || 'bottom';
            _this.tuiDropdownSided = '';
            _this.tuiDropdownSidedOffset = 4;
            _this.type = 'dropdown';
            return _this;
        }
        TuiDropdownPositionSidedDirective.prototype.getPosition = function (rect) {
            var _a, _b;
            if (this.tuiDropdownSided === false) {
                return this.vertical.getPosition(rect);
            }
            var height = rect.height, width = rect.width;
            var hostRect = (_b = (_a = this.vertical.accessor) === null || _a === void 0 ? void 0 : _a.getClientRect()) !== null && _b !== void 0 ? _b : i2.EMPTY_CLIENT_RECT;
            var viewport = this.viewport.getClientRect();
            var _c = this.options, direction = _c.direction, minHeight = _c.minHeight, offset = _c.offset;
            var align = this.options.align === 'center' ? 'left' : this.options.align;
            var available = {
                top: hostRect.bottom - viewport.top,
                left: hostRect.left - offset - viewport.left,
                right: viewport.right - hostRect.right - offset,
                bottom: viewport.bottom - hostRect.top,
            };
            var position = {
                top: hostRect.bottom - height + this.tuiDropdownSidedOffset + 1,
                left: hostRect.left - width - offset,
                right: hostRect.right + offset,
                bottom: hostRect.top - this.tuiDropdownSidedOffset - 1, // 1 for border
            };
            var better = available.top > available.bottom ? 'top' : 'bottom';
            var maxLeft = available.left > available.right ? position.left : position.right;
            var left = available[align] > width ? position[align] : maxLeft;
            if ((available[this.previous] > minHeight && direction) ||
                this.previous === better) {
                return [position[this.previous], left];
            }
            this.previous = better;
            return [position[better], left];
        };
        return TuiDropdownPositionSidedDirective;
    }(i1.TuiPositionAccessor));
    TuiDropdownPositionSidedDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownPositionSidedDirective, deps: [{ token: TUI_DROPDOWN_OPTIONS }, { token: tokens.TUI_VIEWPORT }, { token: TuiDropdownPositionDirective }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownPositionSidedDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownPositionSidedDirective, selector: "[tuiDropdownSided]", inputs: { tuiDropdownSided: "tuiDropdownSided", tuiDropdownSidedOffset: "tuiDropdownSidedOffset" }, providers: [
            TuiDropdownPositionDirective,
            i1.tuiAsPositionAccessor(TuiDropdownPositionSidedDirective),
        ], usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownPositionSidedDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdownSided]',
                        providers: [
                            TuiDropdownPositionDirective,
                            i1.tuiAsPositionAccessor(TuiDropdownPositionSidedDirective),
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_DROPDOWN_OPTIONS]
                        }] }, { type: i1__namespace$2.TuiRectAccessor, decorators: [{
                            type: i0.Inject,
                            args: [tokens.TUI_VIEWPORT]
                        }] }, { type: TuiDropdownPositionDirective, decorators: [{
                            type: i0.Inject,
                            args: [TuiDropdownPositionDirective]
                        }] }];
        }, propDecorators: { tuiDropdownSided: [{
                    type: i0.Input
                }], tuiDropdownSidedOffset: [{
                    type: i0.Input
                }] } });

    var TuiDropdownSelectionDirective = /** @class */ (function (_super) {
        __extends(TuiDropdownSelectionDirective, _super);
        function TuiDropdownSelectionDirective(range, doc, selection$, el, vcr, dropdown) {
            var _this = _super.call(this, function (subscriber) { return _this.stream$.subscribe(subscriber); }) || this;
            _this.range = range;
            _this.doc = doc;
            _this.selection$ = selection$;
            _this.el = el;
            _this.vcr = vcr;
            _this.dropdown = dropdown;
            _this.handler$ = new i1$1.BehaviorSubject(i2.ALWAYS_TRUE_HANDLER);
            _this.stream$ = i1$1.combineLatest([
                _this.handler$,
                _this.selection$.pipe(operators.map(function () { return _this.getRange(); }), operators.distinctUntilChanged()),
            ]).pipe(operators.map(function (_b) {
                var _c = __read(_b, 2), handler = _c[0], range = _c[1];
                var contained = _this.el.nativeElement.contains(range.commonAncestorContainer);
                _this.range =
                    contained && i2.tuiIsTextNode(range.commonAncestorContainer)
                        ? range
                        : _this.range;
                return (contained && handler(_this.range)) || _this.inDropdown(range);
            }));
            _this.position = 'selection';
            _this.type = 'dropdown';
            return _this;
        }
        Object.defineProperty(TuiDropdownSelectionDirective.prototype, "tuiDropdownSelection", {
            set: function (visible) {
                if (!i2.tuiIsString(visible)) {
                    this.handler$.next(visible);
                }
            },
            enumerable: false,
            configurable: true
        });
        TuiDropdownSelectionDirective.prototype.getClientRect = function () {
            switch (this.position) {
                case 'tag': {
                    var commonAncestorContainer = this.range.commonAncestorContainer;
                    var element = i2.tuiIsElement(commonAncestorContainer)
                        ? commonAncestorContainer
                        : commonAncestorContainer.parentNode;
                    return element && i2.tuiIsElement(element)
                        ? element.getBoundingClientRect()
                        : i2.EMPTY_CLIENT_RECT;
                }
                case 'word':
                    return utils.tuiGetWordRange(this.range).getBoundingClientRect();
                default:
                    return this.range.getBoundingClientRect();
            }
        };
        TuiDropdownSelectionDirective.prototype.ngOnDestroy = function () {
            if (this.ghost) {
                this.vcr.element.nativeElement.removeChild(this.ghost);
            }
        };
        TuiDropdownSelectionDirective.prototype.getRange = function () {
            var active = i2.tuiGetNativeFocused(this.doc);
            var selection = this.doc.getSelection();
            if (active && i2.tuiIsTextfield(active) && this.el.nativeElement.contains(active)) {
                return this.veryVerySadInputFix(active);
            }
            return (selection === null || selection === void 0 ? void 0 : selection.rangeCount) ? selection.getRangeAt(0) : this.range;
        };
        /**
         * Check if Node is inside dropdown
         */
        TuiDropdownSelectionDirective.prototype.boxContains = function (node) {
            var _a;
            return !!((_a = this.dropdown.dropdownBoxRef) === null || _a === void 0 ? void 0 : _a.location.nativeElement.contains(node));
        };
        /**
         * Check if given range is at least partially inside dropdown
         */
        TuiDropdownSelectionDirective.prototype.inDropdown = function (range) {
            var startContainer = range.startContainer, endContainer = range.endContainer;
            var nativeElement = this.el.nativeElement;
            var inDropdown = this.boxContains(range.commonAncestorContainer);
            var hostToDropdown = this.boxContains(endContainer) && nativeElement.contains(startContainer);
            var dropdownToHost = this.boxContains(startContainer) && nativeElement.contains(endContainer);
            return inDropdown || hostToDropdown || dropdownToHost;
        };
        TuiDropdownSelectionDirective.prototype.veryVerySadInputFix = function (element) {
            var _b = this.ghost, ghost = _b === void 0 ? this.initGhost(element) : _b;
            var _c = element.getBoundingClientRect(), top = _c.top, left = _c.left, width = _c.width, height = _c.height;
            var selectionStart = element.selectionStart, selectionEnd = element.selectionEnd, value = element.value;
            var range = this.doc.createRange();
            var hostRect = this.el.nativeElement.getBoundingClientRect();
            ghost.style.top = i2.tuiPx(top - hostRect.top);
            ghost.style.left = i2.tuiPx(left - hostRect.left);
            ghost.style.width = i2.tuiPx(width);
            ghost.style.height = i2.tuiPx(height);
            ghost.textContent = i2.CHAR_ZERO_WIDTH_SPACE + value + i2.CHAR_NO_BREAK_SPACE;
            range.setStart(ghost.firstChild, selectionStart || 0);
            range.setEnd(ghost.firstChild, selectionEnd || 0);
            return range;
        };
        /**
         * Create an invisible DIV styled exactly like input/textarea element inside directive
         */
        TuiDropdownSelectionDirective.prototype.initGhost = function (element) {
            var ghost = this.doc.createElement('div');
            var _b = getComputedStyle(element), font = _b.font, letterSpacing = _b.letterSpacing, textTransform = _b.textTransform, padding = _b.padding;
            ghost.style.position = 'absolute';
            ghost.style.pointerEvents = 'none';
            ghost.style.opacity = '0';
            ghost.style.whiteSpace = 'pre-wrap';
            ghost.style.font = font;
            ghost.style.letterSpacing = letterSpacing;
            ghost.style.textTransform = textTransform;
            ghost.style.padding = padding;
            this.vcr.element.nativeElement.appendChild(ghost);
            this.ghost = ghost;
            return ghost;
        };
        return TuiDropdownSelectionDirective;
    }(i1.TuiDriver));
    TuiDropdownSelectionDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownSelectionDirective, deps: [{ token: i2.TUI_RANGE }, { token: common$1.DOCUMENT }, { token: tokens.TUI_SELECTION_STREAM }, { token: i0.ElementRef }, { token: i0.ViewContainerRef }, { token: TuiDropdownDirective }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDropdownSelectionDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDropdownSelectionDirective, selector: "[tuiDropdown][tuiDropdownSelection]", inputs: { position: ["tuiDropdownSelectionPosition", "position"], tuiDropdownSelection: "tuiDropdownSelection" }, providers: [
            i1.tuiAsDriver(TuiDropdownSelectionDirective),
            i1.tuiAsRectAccessor(TuiDropdownSelectionDirective),
        ], usesInheritance: true, ngImport: i0__namespace });
    __decorate([
        i2.tuiDefaultProp()
    ], TuiDropdownSelectionDirective.prototype, "position", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownSelectionDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDropdown][tuiDropdownSelection]',
                        providers: [
                            i1.tuiAsDriver(TuiDropdownSelectionDirective),
                            i1.tuiAsRectAccessor(TuiDropdownSelectionDirective),
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: Range, decorators: [{
                            type: i0.Inject,
                            args: [i2.TUI_RANGE]
                        }] }, { type: Document, decorators: [{
                            type: i0.Inject,
                            args: [common$1.DOCUMENT]
                        }] }, { type: i1__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [tokens.TUI_SELECTION_STREAM]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.ViewContainerRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ViewContainerRef]
                        }] }, { type: TuiDropdownDirective, decorators: [{
                            type: i0.Inject,
                            args: [TuiDropdownDirective]
                        }] }];
        }, propDecorators: { position: [{
                    type: i0.Input,
                    args: ['tuiDropdownSelectionPosition']
                }], tuiDropdownSelection: [{
                    type: i0.Input
                }] } });

    var TuiDropdownModule = /** @class */ (function () {
        function TuiDropdownModule() {
        }
        return TuiDropdownModule;
    }());
    TuiDropdownModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiDropdownModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownModule, declarations: [TuiDropdownDirective,
            TuiDropdownComponent,
            TuiDropdownOptionsDirective,
            TuiDropdownHostDirective,
            TuiDropdownDriverDirective,
            TuiDropdownManualDirective,
            TuiDropdownHoverDirective,
            TuiDropdownContextDirective,
            TuiDropdownPositionDirective,
            TuiDropdownPositionSidedDirective,
            TuiDropdownSelectionDirective], imports: [i4.PolymorpheusModule,
            i2.TuiActiveZoneModule,
            i2.TuiOverscrollModule,
            i1$2.TuiScrollbarModule,
            i3.TuiModeModule,
            i2.TuiHoveredModule], exports: [TuiDropdownDirective,
            TuiDropdownComponent,
            TuiDropdownOptionsDirective,
            TuiDropdownHostDirective,
            TuiDropdownDriverDirective,
            TuiDropdownManualDirective,
            TuiDropdownHoverDirective,
            TuiDropdownContextDirective,
            TuiDropdownPositionDirective,
            TuiDropdownPositionSidedDirective,
            TuiDropdownSelectionDirective] });
    TuiDropdownModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownModule, imports: [[
                i4.PolymorpheusModule,
                i2.TuiActiveZoneModule,
                i2.TuiOverscrollModule,
                i1$2.TuiScrollbarModule,
                i3.TuiModeModule,
                i2.TuiHoveredModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDropdownModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i4.PolymorpheusModule,
                            i2.TuiActiveZoneModule,
                            i2.TuiOverscrollModule,
                            i1$2.TuiScrollbarModule,
                            i3.TuiModeModule,
                            i2.TuiHoveredModule,
                        ],
                        declarations: [
                            TuiDropdownDirective,
                            TuiDropdownComponent,
                            TuiDropdownOptionsDirective,
                            TuiDropdownHostDirective,
                            TuiDropdownDriverDirective,
                            TuiDropdownManualDirective,
                            TuiDropdownHoverDirective,
                            TuiDropdownContextDirective,
                            TuiDropdownPositionDirective,
                            TuiDropdownPositionSidedDirective,
                            TuiDropdownSelectionDirective,
                        ],
                        exports: [
                            TuiDropdownDirective,
                            TuiDropdownComponent,
                            TuiDropdownOptionsDirective,
                            TuiDropdownHostDirective,
                            TuiDropdownDriverDirective,
                            TuiDropdownManualDirective,
                            TuiDropdownHoverDirective,
                            TuiDropdownContextDirective,
                            TuiDropdownPositionDirective,
                            TuiDropdownPositionSidedDirective,
                            TuiDropdownSelectionDirective,
                        ],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_DROPDOWN_COMPONENT = TUI_DROPDOWN_COMPONENT;
    exports.TUI_DROPDOWN_DEFAULT_OPTIONS = TUI_DROPDOWN_DEFAULT_OPTIONS;
    exports.TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS = TUI_DROPDOWN_HOVER_DEFAULT_OPTIONS;
    exports.TUI_DROPDOWN_HOVER_OPTIONS = TUI_DROPDOWN_HOVER_OPTIONS;
    exports.TUI_DROPDOWN_OPTIONS = TUI_DROPDOWN_OPTIONS;
    exports.TuiDropdownComponent = TuiDropdownComponent;
    exports.TuiDropdownContextDirective = TuiDropdownContextDirective;
    exports.TuiDropdownDirective = TuiDropdownDirective;
    exports.TuiDropdownDriverDirective = TuiDropdownDriverDirective;
    exports.TuiDropdownHostDirective = TuiDropdownHostDirective;
    exports.TuiDropdownHoverDirective = TuiDropdownHoverDirective;
    exports.TuiDropdownManualDirective = TuiDropdownManualDirective;
    exports.TuiDropdownModule = TuiDropdownModule;
    exports.TuiDropdownOptionsDirective = TuiDropdownOptionsDirective;
    exports.TuiDropdownPositionDirective = TuiDropdownPositionDirective;
    exports.TuiDropdownPositionSidedDirective = TuiDropdownPositionSidedDirective;
    exports.TuiDropdownSelectionDirective = TuiDropdownSelectionDirective;
    exports.tuiDropdownHoverOptionsProvider = tuiDropdownHoverOptionsProvider;
    exports.tuiDropdownOptionsProvider = tuiDropdownOptionsProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-directives-dropdown.umd.js.map
