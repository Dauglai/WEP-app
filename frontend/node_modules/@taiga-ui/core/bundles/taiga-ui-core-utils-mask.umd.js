(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk'), require('@taiga-ui/core/constants'), require('@taiga-ui/core/utils/format')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/utils/mask', ['exports', '@taiga-ui/cdk', '@taiga-ui/core/constants', '@taiga-ui/core/utils/format'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.utils = global["taiga-ui"].core.utils || {}, global["taiga-ui"].core.utils.mask = {}), global.cdk, global["taiga-ui"].core.constants, global["taiga-ui"].core.utils.format));
})(this, (function (exports, cdk, constants, format) { 'use strict';

    /**
     * Used to finish a number with zeros to a given precision
     */
    function tuiCreateAutoCorrectedNumberPipe(decimalLimit, decimalSymbol, thousandSymbol, nativeInput, allowNegative, isIOS) {
        if (decimalLimit === void 0) { decimalLimit = 0; }
        if (decimalSymbol === void 0) { decimalSymbol = ","; }
        if (thousandSymbol === void 0) { thousandSymbol = cdk.CHAR_NO_BREAK_SPACE; }
        if (isIOS === void 0) { isIOS = false; }
        ngDevMode && cdk.tuiAssert.assert(decimalLimit >= 0);
        // Guess for which browser I need this :)
        var previousCaret = -1;
        var unlucky = (!!nativeInput && cdk.tuiIsSafari(nativeInput)) || isIOS;
        if (nativeInput && unlucky) {
            nativeInput.addEventListener("beforeinput", function () {
                previousCaret = nativeInput.selectionStart || 0;
            });
        }
        return function (conformedValue, config) {
            // Removing everything by selecting and pressing '-'
            if (!conformedValue && config.rawValue === cdk.CHAR_HYPHEN && allowNegative) {
                return cdk.CHAR_HYPHEN;
            }
            // remove these hacks after text mask library has changed
            if (nativeInput && unlucky && cdk.tuiIsNativeFocused(nativeInput)) {
                var caret_1 = calculateSafariCaret(config.previousConformedValue, conformedValue, previousCaret);
                setTimeout(function () {
                    nativeInput.setSelectionRange(caret_1, caret_1);
                });
            }
            if (nativeInput &&
                nativeInput.ownerDocument !== cdk.tuiGetDocumentOrShadowRoot(nativeInput) &&
                cdk.tuiIsNativeFocused(nativeInput) &&
                config.currentCaretPosition) {
                var realCaretPosition_1 = config.currentCaretPosition +
                    calculateCaretGap(config.previousConformedValue, conformedValue, thousandSymbol);
                setTimeout(function () {
                    nativeInput.setSelectionRange(realCaretPosition_1, realCaretPosition_1);
                });
            }
            if (conformedValue === "" || !decimalLimit || !Number.isInteger(decimalLimit)) {
                return { value: conformedValue };
            }
            var withDecimalSymbol = addDecimalSymbolIfNeeded(conformedValue, decimalSymbol);
            var decimalPart = withDecimalSymbol.split(decimalSymbol)[1];
            var zeroPaddingSize = decimalLimit - decimalPart.length;
            return {
                value: withDecimalSymbol + "0".repeat(zeroPaddingSize),
            };
        };
    }
    function addDecimalSymbolIfNeeded(value, decimalSymbol) {
        if (decimalSymbol === void 0) { decimalSymbol = ","; }
        return !value.includes(decimalSymbol) ? value + decimalSymbol : value;
    }
    function calculateSafariCaret(previousValue, current, previousCaret, decimalSymbol) {
        if (previousValue === void 0) { previousValue = ""; }
        if (decimalSymbol === void 0) { decimalSymbol = ","; }
        var tailRegex = new RegExp(decimalSymbol + ".+");
        var previousWithoutTail = previousValue.replace(tailRegex, "");
        var currentWithoutTail = current.replace(tailRegex, "");
        var pasteOrCutOperation = Math.abs(previousWithoutTail.length - currentWithoutTail.length) > 2;
        if (pasteOrCutOperation) {
            return current.length;
        }
        if (previousValue.length === current.length) {
            if (previousValue.indexOf(decimalSymbol) <= previousCaret) {
                return calculateChangedTailIndex(previousValue, current);
            }
            return previousWithoutTail === currentWithoutTail
                ? previousCaret - 1
                : previousCaret + 1;
        }
        if (previousValue.length === 0) {
            return 1;
        }
        var changeLength = current.length - previousValue.length;
        return previousCaret + changeLength;
    }
    function calculateChangedTailIndex(previous, current) {
        for (var i = 0; i < current.length; i++) {
            if (previous[i] !== current[i]) {
                return current[i] === "0" ? i : i + 1;
            }
        }
        return current.length;
    }
    function calculateCaretGap(previousValue, current, thousandSymbol) {
        if (previousValue === void 0) { previousValue = ""; }
        var pasteOrCutOperation = Math.abs(previousValue.length - current.length) > 2;
        if (pasteOrCutOperation) {
            return 0;
        }
        var wereSpaces = previousValue.split(thousandSymbol).length;
        var nowSpaces = current.split(thousandSymbol).length;
        return nowSpaces - wereSpaces;
    }

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var ASSERTION = "Correction function must return single char or null";
    function tuiCreateCorrectionMask(allowed, correctionHandler) {
        return function (rawValue) {
            var mask = rawValue.split("").reduce(function (result, char, index) {
                var corrected = correctionHandler(char, index);
                ngDevMode &&
                    cdk.tuiAssert.assert(corrected === null || corrected.length === 1, ASSERTION);
                if (!allowed.test(char) && !corrected) {
                    return result;
                }
                if (allowed.test(char)) {
                    return __spreadArray(__spreadArray([], __read(result)), [allowed]);
                }
                if (corrected) {
                    return __spreadArray(__spreadArray([], __read(result)), [corrected, constants.MASK_CARET_TRAP]);
                }
                return result;
            }, []);
            var lastIndex = mask.lastIndexOf(constants.MASK_CARET_TRAP);
            var filtered = mask.filter(function (item, index) { return item !== constants.MASK_CARET_TRAP || index === lastIndex; });
            return filtered.some(function (item) { return item !== allowed; })
                ? __spreadArray(__spreadArray([], __read(filtered)), [allowed]) : filtered;
        };
    }

    var NON_ZERO_DIGIT = /[1-9]/;
    /**
     * Adaptation for {@link https://github.com/text-mask/text-mask/tree/master/addons#createnumbermask `createNumberMask`}
     */
    function tuiCreateNumberMask(_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.allowDecimal, allowDecimal = _c === void 0 ? false : _c, _d = _b.decimalSymbol, decimalSymbol = _d === void 0 ? "," : _d, _e = _b.thousandSymbol, thousandSymbol = _e === void 0 ? cdk.CHAR_NO_BREAK_SPACE : _e, _f = _b.autoCorrectDecimalSymbol, autoCorrectDecimalSymbol = _f === void 0 ? true : _f, _g = _b.decimalLimit, decimalLimit = _g === void 0 ? 2 : _g, _h = _b.requireDecimal, requireDecimal = _h === void 0 ? false : _h, _j = _b.allowNegative, allowNegative = _j === void 0 ? false : _j, _k = _b.integerLimit, integerLimit = _k === void 0 ? 0 : _k;
        ngDevMode && cdk.tuiAssert.assert(decimalLimit >= 0);
        ngDevMode && cdk.tuiAssert.assert(Number.isInteger(integerLimit));
        ngDevMode && cdk.tuiAssert.assert(integerLimit >= 0);
        // eslint-disable-next-line max-statements
        return function (rawValue, _a) {
            var previousConformedValue = _a.previousConformedValue;
            if (previousConformedValue && requireDecimal) {
                var conformedWithoutSeparator = rawValue.split(thousandSymbol).join("");
                var previousConformedValueWithoutDecimalSymbolAndSeparator = previousConformedValue
                    .split(thousandSymbol)
                    .join("")
                    .split(decimalSymbol)
                    .join("");
                // Forbid removal of decimal separator if decimal part is required
                if (conformedWithoutSeparator ===
                    previousConformedValueWithoutDecimalSymbolAndSeparator) {
                    rawValue = previousConformedValue;
                }
            }
            var isNegative = ((rawValue === null || rawValue === void 0 ? void 0 : rawValue.startsWith(cdk.CHAR_HYPHEN)) || (rawValue === null || rawValue === void 0 ? void 0 : rawValue.startsWith(cdk.CHAR_EN_DASH))) &&
                allowNegative;
            if (isDecimalSymbol(rawValue, decimalSymbol, autoCorrectDecimalSymbol) &&
                allowDecimal) {
                return ["0", decimalSymbol, constants.TUI_DIGIT_REGEXP];
            }
            if (isNegative) {
                rawValue = rawValue.slice(1);
            }
            var decimalIndex = getDecimalSymbolIndex(rawValue, decimalSymbol, autoCorrectDecimalSymbol);
            var hasDecimal = decimalIndex !== -1;
            var integer = hasDecimal ? rawValue.slice(0, decimalIndex) : rawValue;
            var thousandSeparators = integer.match(new RegExp(thousandSymbol, "g")) || [];
            var integerCapped = integerLimit
                ? integer.slice(0, integerLimit + thousandSeparators.length)
                : integer;
            var integerCappedClean = integerCapped.replace(constants.TUI_NON_DIGITS_REGEXP, "");
            var _b = __read(integerCappedClean.match(constants.TUI_LEADING_ZEROES_REGEXP) || [""], 1), leadingZerosMatch = _b[0];
            var leadingZerosAmount = leadingZerosMatch.length;
            var integerCappedZerosClean = integerCappedClean
                .replace(/^0+(?!\.|$)/, "")
                .trim();
            var withSeparator = addThousandsSeparator(integerCappedZerosClean, thousandSymbol);
            var mask = convertToMask(withSeparator);
            if ((hasDecimal && allowDecimal) || requireDecimal) {
                var fraction = hasDecimal
                    ? convertToMask(rawValue.slice(decimalIndex + 1).replace(constants.TUI_NON_DIGITS_REGEXP, ""))
                    : [];
                var fractionCapped = decimalLimit
                    ? fraction.slice(0, decimalLimit)
                    : fraction;
                if (rawValue[decimalIndex] !== format.tuiOtherDecimalSymbol(decimalSymbol)) {
                    mask.push(constants.MASK_CARET_TRAP);
                }
                mask.push.apply(mask, __spreadArray([decimalSymbol, constants.MASK_CARET_TRAP], __read(fractionCapped)));
                for (var i = 0; i < Math.min(decimalLimit - fractionCapped.length, 20); i++) {
                    mask.push(constants.TUI_DIGIT_REGEXP);
                }
            }
            var isOnlyZeroDigit = mask.length === 1 && integerCappedZerosClean === "0";
            if (isNegative) {
                if (mask.length === 0) {
                    mask.push(constants.TUI_DIGIT_REGEXP);
                }
                mask.unshift(cdk.CHAR_HYPHEN);
            }
            return preventLeadingZeroes(mask, isOnlyZeroDigit, leadingZerosAmount);
        };
    }
    function preventLeadingZeroes(mask, isOnlyZeroDigit, leadingZerosAmount) {
        if (isOnlyZeroDigit === void 0) { isOnlyZeroDigit = false; }
        if (leadingZerosAmount === void 0) { leadingZerosAmount = 0; }
        if (isOnlyZeroDigit || leadingZerosAmount === 0) {
            return mask;
        }
        var firstDigitIndex = mask.indexOf(constants.TUI_DIGIT_REGEXP);
        if (firstDigitIndex === -1) {
            return mask;
        }
        var secondMaskDigit = mask[firstDigitIndex + 1];
        var isCaretTrap = secondMaskDigit === constants.MASK_CARET_TRAP;
        if (isCaretTrap && leadingZerosAmount === 1) {
            return mask;
        }
        if (isCaretTrap) {
            mask.unshift(NON_ZERO_DIGIT);
            return mask;
        }
        mask[firstDigitIndex] = NON_ZERO_DIGIT;
        return mask;
    }
    function getDecimalSymbolIndex(str, decimalSymbol, autoCorrectDecimalSymbol) {
        if (!autoCorrectDecimalSymbol) {
            return str.lastIndexOf(decimalSymbol);
        }
        return Math.max(str.lastIndexOf(decimalSymbol), str.lastIndexOf(format.tuiOtherDecimalSymbol(decimalSymbol)));
    }
    function isDecimalSymbol(str, decimalSymbol, autoCorrectDecimalSymbol) {
        if (autoCorrectDecimalSymbol) {
            return /^[,.]$/.test(str);
        }
        return str === decimalSymbol;
    }
    function convertToMask(strNumber) {
        return strNumber
            .split("")
            .map(function (char) { return (constants.TUI_DIGIT_REGEXP.test(char) ? constants.TUI_DIGIT_REGEXP : char); });
    }
    function addThousandsSeparator(strNumber, thousandSymbol) {
        return strNumber.length > 3
            ? // TODO: investigate to disallow potentially catastrophic exponential-time regular expressions.
                // eslint-disable-next-line unicorn/no-unsafe-regex
                strNumber.replace(/\B(?=(\d{3})+(?!\d))/g, thousandSymbol)
            : strNumber;
    }

    function tuiEnableAutoCorrectDecimalSymbol(_a) {
        var thousandSeparator = _a.thousandSeparator;
        return !constants.TUI_DECIMAL_SYMBOLS.includes(thousandSeparator);
    }

    function tuiMaskedMoneyValueIsEmpty(value) {
        switch (value) {
            case "":
            case cdk.CHAR_HYPHEN:
            case ",":
            case cdk.CHAR_HYPHEN + ",":
                return true;
            default:
                return false;
        }
    }

    function tuiMaskedNumberStringToNumber(value, decimalsSymbol, thousandSymbol) {
        return parseFloat(value.split(thousandSymbol).join("").split(decimalsSymbol).join("."));
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.tuiCreateAutoCorrectedNumberPipe = tuiCreateAutoCorrectedNumberPipe;
    exports.tuiCreateCorrectionMask = tuiCreateCorrectionMask;
    exports.tuiCreateNumberMask = tuiCreateNumberMask;
    exports.tuiEnableAutoCorrectDecimalSymbol = tuiEnableAutoCorrectDecimalSymbol;
    exports.tuiMaskedMoneyValueIsEmpty = tuiMaskedMoneyValueIsEmpty;
    exports.tuiMaskedNumberStringToNumber = tuiMaskedNumberStringToNumber;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-utils-mask.umd.js.map
