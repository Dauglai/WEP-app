(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@taiga-ui/cdk'), require('rxjs/operators'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/core/observables', ['exports', '@taiga-ui/cdk', 'rxjs/operators', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].core = global["taiga-ui"].core || {}, global["taiga-ui"].core.observables = {}), global.cdk, global.rxjs.operators, global.rxjs));
})(this, (function (exports, cdk, operators, rxjs) { 'use strict';

    function tuiSmartSearch(getSearchFunction, searchDebounceTimeMs) {
        if (searchDebounceTimeMs === void 0) { searchDebounceTimeMs = 400; }
        return function (source) { return source.pipe(operators.debounceTime(searchDebounceTimeMs), operators.scan(function (previousSearched, current) {
            return previousSearched !== "" && current.startsWith(previousSearched)
                ? previousSearched
                : current;
        }, ""), operators.distinctUntilChanged(), operators.switchMap(function (value) { return getSearchFunction(value).pipe(operators.startWith(null)); }), operators.startWith(cdk.EMPTY_ARRAY)); };
    }

    /**
     * Works like regular map + distinctUntilChanged
     * and only returns to NgZone if value has changed
     *
     * @param project mapping function
     * @param ngZone NgZone instance
     */
    function tuiZonefulMap(project, ngZone) {
        return rxjs.pipe(operators.map(project), operators.distinctUntilChanged(), cdk.tuiZonefull(ngZone));
    }

    /**
     * Generated bundle index. Do not edit.
     */

    exports.tuiSmartSearch = tuiSmartSearch;
    exports.tuiZonefulMap = tuiZonefulMap;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-core-observables.umd.js.map
