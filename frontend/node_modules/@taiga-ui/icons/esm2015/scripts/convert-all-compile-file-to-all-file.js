import { __awaiter } from "tslib";
import { rollup } from 'rollup';
import typescript from 'rollup-plugin-typescript2';
import { tuiRollupSvgo } from './rollup-svgo';
const banner = `
/**
 * @description:
 * DO NOT CHANGE THIS FILE. AUTOGENERATED
 *
 * This file contains inline svg icons
 * for users who wants insert into js bundle
 */
`;
export function tuiConvertAllCompileFileToAllFile(config) {
    return __awaiter(this, void 0, void 0, function* () {
        const { from, to, prt2Options, include } = config;
        const inputOptions = {
            input: from,
            output: {
                generatedCode: {
                    constBindings: true,
                },
            },
            plugins: [
                typescript(prt2Options),
                tuiRollupSvgo({
                    include,
                    options: {
                        plugins: [
                            {
                                name: `preset-default`,
                                params: {
                                    overrides: {
                                        removeViewBox: false,
                                        collapseGroups: false,
                                        cleanupIDs: false,
                                        removeUnknownsAndDefaults: false,
                                    },
                                },
                            },
                        ],
                    },
                }),
            ],
        };
        console.info(`\x1B[36m%s\x1B[0m`, `TypeScript options: `, prt2Options);
        const bundle = yield rollup(inputOptions);
        yield bundle.write({
            banner,
            file: to,
            format: `es`,
            generatedCode: {
                constBindings: true,
            },
        });
        /**
         * @note:
         * The rollup bundle must be closed once `write` is finished to let plugins clean up their external
         * processes or services via the `closeBundle` hook, otherwise it can lead to memory leaks.
         */
        yield bundle.close();
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udmVydC1hbGwtY29tcGlsZS1maWxlLXRvLWFsbC1maWxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvaWNvbnMvc2NyaXB0cy9jb252ZXJ0LWFsbC1jb21waWxlLWZpbGUtdG8tYWxsLWZpbGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQWdCLE1BQU0sUUFBUSxDQUFDO0FBQzdDLE9BQU8sVUFBeUIsTUFBTSwyQkFBMkIsQ0FBQztBQUVsRSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRTVDLE1BQU0sTUFBTSxHQUFHOzs7Ozs7OztDQVFkLENBQUM7QUFTRixNQUFNLFVBQWdCLGlDQUFpQyxDQUFDLE1BQWU7O1FBQ25FLE1BQU0sRUFBQyxJQUFJLEVBQUUsRUFBRSxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUMsR0FBRyxNQUFNLENBQUM7UUFFaEQsTUFBTSxZQUFZLEdBQWtCO1lBQ2hDLEtBQUssRUFBRSxJQUFJO1lBQ1gsTUFBTSxFQUFFO2dCQUNKLGFBQWEsRUFBRTtvQkFDWCxhQUFhLEVBQUUsSUFBSTtpQkFDdEI7YUFDSjtZQUNELE9BQU8sRUFBRTtnQkFDTCxVQUFVLENBQUMsV0FBVyxDQUFDO2dCQUN2QixhQUFhLENBQUM7b0JBQ1YsT0FBTztvQkFDUCxPQUFPLEVBQUU7d0JBQ0wsT0FBTyxFQUFFOzRCQUNMO2dDQUNJLElBQUksRUFBRSxnQkFBZ0I7Z0NBQ3RCLE1BQU0sRUFBRTtvQ0FDSixTQUFTLEVBQUU7d0NBQ1AsYUFBYSxFQUFFLEtBQUs7d0NBQ3BCLGNBQWMsRUFBRSxLQUFLO3dDQUNyQixVQUFVLEVBQUUsS0FBSzt3Q0FDakIseUJBQXlCLEVBQUUsS0FBSztxQ0FDbkM7aUNBQ0o7NkJBQ0o7eUJBQ0o7cUJBQ0o7aUJBQ0osQ0FBQzthQUNMO1NBQ0osQ0FBQztRQUVGLE9BQU8sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLEVBQUUsc0JBQXNCLEVBQUUsV0FBVyxDQUFDLENBQUM7UUFFdkUsTUFBTSxNQUFNLEdBQUcsTUFBTSxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUM7UUFFMUMsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDO1lBQ2YsTUFBTTtZQUNOLElBQUksRUFBRSxFQUFFO1lBQ1IsTUFBTSxFQUFFLElBQUk7WUFDWixhQUFhLEVBQUU7Z0JBQ1gsYUFBYSxFQUFFLElBQUk7YUFDdEI7U0FDSixDQUFDLENBQUM7UUFFSDs7OztXQUlHO1FBQ0gsTUFBTSxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDekIsQ0FBQztDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtyb2xsdXAsIFJvbGx1cE9wdGlvbnN9IGZyb20gJ3JvbGx1cCc7XG5pbXBvcnQgdHlwZXNjcmlwdCwge1JQVDJPcHRpb25zfSBmcm9tICdyb2xsdXAtcGx1Z2luLXR5cGVzY3JpcHQyJztcblxuaW1wb3J0IHt0dWlSb2xsdXBTdmdvfSBmcm9tICcuL3JvbGx1cC1zdmdvJztcblxuY29uc3QgYmFubmVyID0gYFxuLyoqXG4gKiBAZGVzY3JpcHRpb246XG4gKiBETyBOT1QgQ0hBTkdFIFRISVMgRklMRS4gQVVUT0dFTkVSQVRFRFxuICpcbiAqIFRoaXMgZmlsZSBjb250YWlucyBpbmxpbmUgc3ZnIGljb25zXG4gKiBmb3IgdXNlcnMgd2hvIHdhbnRzIGluc2VydCBpbnRvIGpzIGJ1bmRsZVxuICovXG5gO1xuXG5pbnRlcmZhY2UgT3B0aW9ucyB7XG4gICAgcHJ0Mk9wdGlvbnM6IFJQVDJPcHRpb25zO1xuICAgIGluY2x1ZGU6IHN0cmluZztcbiAgICBmcm9tOiBzdHJpbmc7XG4gICAgdG86IHN0cmluZztcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHR1aUNvbnZlcnRBbGxDb21waWxlRmlsZVRvQWxsRmlsZShjb25maWc6IE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBjb25zdCB7ZnJvbSwgdG8sIHBydDJPcHRpb25zLCBpbmNsdWRlfSA9IGNvbmZpZztcblxuICAgIGNvbnN0IGlucHV0T3B0aW9uczogUm9sbHVwT3B0aW9ucyA9IHtcbiAgICAgICAgaW5wdXQ6IGZyb20sXG4gICAgICAgIG91dHB1dDoge1xuICAgICAgICAgICAgZ2VuZXJhdGVkQ29kZToge1xuICAgICAgICAgICAgICAgIGNvbnN0QmluZGluZ3M6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICB0eXBlc2NyaXB0KHBydDJPcHRpb25zKSxcbiAgICAgICAgICAgIHR1aVJvbGx1cFN2Z28oe1xuICAgICAgICAgICAgICAgIGluY2x1ZGUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczoge1xuICAgICAgICAgICAgICAgICAgICBwbHVnaW5zOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogYHByZXNldC1kZWZhdWx0YCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3ZlcnJpZGVzOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVWaWV3Qm94OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxhcHNlR3JvdXBzOiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFudXBJRHM6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlVW5rbm93bnNBbmREZWZhdWx0czogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICBdLFxuICAgIH07XG5cbiAgICBjb25zb2xlLmluZm8oYFxceDFCWzM2bSVzXFx4MUJbMG1gLCBgVHlwZVNjcmlwdCBvcHRpb25zOiBgLCBwcnQyT3B0aW9ucyk7XG5cbiAgICBjb25zdCBidW5kbGUgPSBhd2FpdCByb2xsdXAoaW5wdXRPcHRpb25zKTtcblxuICAgIGF3YWl0IGJ1bmRsZS53cml0ZSh7XG4gICAgICAgIGJhbm5lcixcbiAgICAgICAgZmlsZTogdG8sXG4gICAgICAgIGZvcm1hdDogYGVzYCxcbiAgICAgICAgZ2VuZXJhdGVkQ29kZToge1xuICAgICAgICAgICAgY29uc3RCaW5kaW5nczogdHJ1ZSxcbiAgICAgICAgfSxcbiAgICB9KTtcblxuICAgIC8qKlxuICAgICAqIEBub3RlOlxuICAgICAqIFRoZSByb2xsdXAgYnVuZGxlIG11c3QgYmUgY2xvc2VkIG9uY2UgYHdyaXRlYCBpcyBmaW5pc2hlZCB0byBsZXQgcGx1Z2lucyBjbGVhbiB1cCB0aGVpciBleHRlcm5hbFxuICAgICAqIHByb2Nlc3NlcyBvciBzZXJ2aWNlcyB2aWEgdGhlIGBjbG9zZUJ1bmRsZWAgaG9vaywgb3RoZXJ3aXNlIGl0IGNhbiBsZWFkIHRvIG1lbW9yeSBsZWFrcy5cbiAgICAgKi9cbiAgICBhd2FpdCBidW5kbGUuY2xvc2UoKTtcbn1cbiJdfQ==