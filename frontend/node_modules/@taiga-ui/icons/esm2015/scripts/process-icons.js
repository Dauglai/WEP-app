import fs from 'fs';
import { parse } from 'path';
const START = `<svg`;
const WIDTH_SEARCH = `width="`;
const HEIGHT_SEARCH = `height="`;
export function tuiProcessIcons(files, interceptor) {
    for (const file of files) {
        const baseContent = String(fs.readFileSync(file));
        const src = interceptor ? interceptor(baseContent) : baseContent;
        const name = parse(file).base.replace(`.svg`, ``);
        if (src.includes(`id="${name}"`)) {
            console.info(`\x1B[33m%s\x1B[0m`, `[skip]:`, file);
            continue;
        }
        const wrapped = wrapIcon(src, name);
        const final = 
        // eslint-disable-next-line @taiga-ui/no-typeof
        typeof wrapped === `string`
            ? `${wrapped.replace(START, `<svg xmlns="http://www.w3.org/2000/svg"><g id="${name}" xmlns="http://www.w3.org/2000/svg"><svg`)}</g></svg>`
            : `<svg xmlns="http://www.w3.org/2000/svg" width="${wrapped.width}" height="${wrapped.height}">${wrapped.src}</svg>`;
        fs.writeFileSync(file, final);
        console.info(`\x1B[32m%s\x1B[0m`, `[preprocessed]:`, file);
    }
}
function wrapIcon(source, name) {
    const src = source.slice(Math.max(0, source.indexOf(START)));
    const attributes = src.slice(0, Math.max(0, src.indexOf(`>`)));
    if (!(attributes === null || attributes === void 0 ? void 0 : attributes.includes(WIDTH_SEARCH)) || !attributes.includes(HEIGHT_SEARCH)) {
        return src;
    }
    const indexOfWidth = attributes.indexOf(WIDTH_SEARCH);
    const indexOfHeight = attributes.indexOf(HEIGHT_SEARCH);
    const widthOffset = indexOfWidth + WIDTH_SEARCH.length;
    const heightOffset = indexOfHeight + HEIGHT_SEARCH.length;
    const widthString = attributes.slice(widthOffset, attributes.indexOf(`"`, widthOffset));
    const heightString = attributes.slice(heightOffset, attributes.indexOf(`"`, heightOffset));
    if (!heightString ||
        !widthString ||
        widthString.includes(`%`) ||
        heightString.includes(`%`)) {
        return src.replace(START, `<svg id="${name}"`);
    }
    const width = parseInt(widthString, 10);
    const height = parseInt(heightString, 10);
    const emWidth = width / 16;
    const emHeight = height / 16;
    return {
        width: `${emWidth}em`,
        height: `${emHeight}em`,
        src: `
        <g id="${name}" xmlns="http://www.w3.org/2000/svg">
            <svg x="50%" y="50%" width="${emWidth}em" height="${emHeight}em" overflow="visible" viewBox="0 0 ${width} ${height}">
                <svg x="${-width / 2}" y="${-height / 2}">${src}</svg>
            </svg>
        </g>`.trim(),
    };
}
/**
 * @deprecated:
 * use @{link tuiProcessIcons}
 */
export const processIcons = tuiProcessIcons;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvY2Vzcy1pY29ucy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2ljb25zL3NjcmlwdHMvcHJvY2Vzcy1pY29ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUUzQixNQUFNLEtBQUssR0FBRyxNQUFNLENBQUM7QUFDckIsTUFBTSxZQUFZLEdBQUcsU0FBUyxDQUFDO0FBQy9CLE1BQU0sYUFBYSxHQUFHLFVBQVUsQ0FBQztBQVVqQyxNQUFNLFVBQVUsZUFBZSxDQUFDLEtBQWUsRUFBRSxXQUFnQztJQUM3RSxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssRUFBRTtRQUN0QixNQUFNLFdBQVcsR0FBRyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO1FBQ2xELE1BQU0sR0FBRyxHQUFHLFdBQVcsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUM7UUFFakUsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBRWxELElBQUksR0FBRyxDQUFDLFFBQVEsQ0FBQyxPQUFPLElBQUksR0FBRyxDQUFDLEVBQUU7WUFDOUIsT0FBTyxDQUFDLElBQUksQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDbkQsU0FBUztTQUNaO1FBRUQsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUVwQyxNQUFNLEtBQUs7UUFDUCwrQ0FBK0M7UUFDL0MsT0FBTyxPQUFPLEtBQUssUUFBUTtZQUN2QixDQUFDLENBQUMsR0FBRyxP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dXJjZXNDb250ZW50IjpbImltcG9ydCBmcyBmcm9tICdmcyc7XG5pbXBvcnQge3BhcnNlfSBmcm9tICdwYXRoJztcblxuY29uc3QgU1RBUlQgPSBgPHN2Z2A7XG5jb25zdCBXSURUSF9TRUFSQ0ggPSBgd2lkdGg9XCJgO1xuY29uc3QgSEVJR0hUX1NFQVJDSCA9IGBoZWlnaHQ9XCJgO1xuXG5pbnRlcmZhY2UgV3JhcHBlZENvbnRlbnQge1xuICAgIGhlaWdodDogc3RyaW5nO1xuICAgIHdpZHRoOiBzdHJpbmc7XG4gICAgc3JjOiBzdHJpbmc7XG59XG5cbnR5cGUgQ29udGVudEludGVyY2VwdG9yID0gKHNyYzogc3RyaW5nKSA9PiBzdHJpbmc7XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlQcm9jZXNzSWNvbnMoZmlsZXM6IHN0cmluZ1tdLCBpbnRlcmNlcHRvcj86IENvbnRlbnRJbnRlcmNlcHRvcik6IHZvaWQge1xuICAgIGZvciAoY29uc3QgZmlsZSBvZiBmaWxlcykge1xuICAgICAgICBjb25zdCBiYXNlQ29udGVudCA9IFN0cmluZyhmcy5yZWFkRmlsZVN5bmMoZmlsZSkpO1xuICAgICAgICBjb25zdCBzcmMgPSBpbnRlcmNlcHRvciA/IGludGVyY2VwdG9yKGJhc2VDb250ZW50KSA6IGJhc2VDb250ZW50O1xuXG4gICAgICAgIGNvbnN0IG5hbWUgPSBwYXJzZShmaWxlKS5iYXNlLnJlcGxhY2UoYC5zdmdgLCBgYCk7XG5cbiAgICAgICAgaWYgKHNyYy5pbmNsdWRlcyhgaWQ9XCIke25hbWV9XCJgKSkge1xuICAgICAgICAgICAgY29uc29sZS5pbmZvKGBcXHgxQlszM20lc1xceDFCWzBtYCwgYFtza2lwXTpgLCBmaWxlKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgd3JhcHBlZCA9IHdyYXBJY29uKHNyYywgbmFtZSk7XG5cbiAgICAgICAgY29uc3QgZmluYWwgPVxuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0YWlnYS11aS9uby10eXBlb2ZcbiAgICAgICAgICAgIHR5cGVvZiB3cmFwcGVkID09PSBgc3RyaW5nYFxuICAgICAgICAgICAgICAgID8gYCR7d3JhcHBlZC5yZXBsYWNlKFxuICAgICAgICAgICAgICAgICAgICAgIFNUQVJULFxuICAgICAgICAgICAgICAgICAgICAgIGA8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48ZyBpZD1cIiR7bmFtZX1cIiB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI+PHN2Z2AsXG4gICAgICAgICAgICAgICAgICApfTwvZz48L3N2Zz5gXG4gICAgICAgICAgICAgICAgOiBgPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIke3dyYXBwZWQud2lkdGh9XCIgaGVpZ2h0PVwiJHt3cmFwcGVkLmhlaWdodH1cIj4ke3dyYXBwZWQuc3JjfTwvc3ZnPmA7XG5cbiAgICAgICAgZnMud3JpdGVGaWxlU3luYyhmaWxlLCBmaW5hbCk7XG5cbiAgICAgICAgY29uc29sZS5pbmZvKGBcXHgxQlszMm0lc1xceDFCWzBtYCwgYFtwcmVwcm9jZXNzZWRdOmAsIGZpbGUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gd3JhcEljb24oc291cmNlOiBzdHJpbmcsIG5hbWU6IHN0cmluZyk6IFdyYXBwZWRDb250ZW50IHwgc3RyaW5nIHtcbiAgICBjb25zdCBzcmMgPSBzb3VyY2Uuc2xpY2UoTWF0aC5tYXgoMCwgc291cmNlLmluZGV4T2YoU1RBUlQpKSk7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHNyYy5zbGljZSgwLCBNYXRoLm1heCgwLCBzcmMuaW5kZXhPZihgPmApKSk7XG5cbiAgICBpZiAoIWF0dHJpYnV0ZXM/LmluY2x1ZGVzKFdJRFRIX1NFQVJDSCkgfHwgIWF0dHJpYnV0ZXMuaW5jbHVkZXMoSEVJR0hUX1NFQVJDSCkpIHtcbiAgICAgICAgcmV0dXJuIHNyYztcbiAgICB9XG5cbiAgICBjb25zdCBpbmRleE9mV2lkdGggPSBhdHRyaWJ1dGVzLmluZGV4T2YoV0lEVEhfU0VBUkNIKTtcbiAgICBjb25zdCBpbmRleE9mSGVpZ2h0ID0gYXR0cmlidXRlcy5pbmRleE9mKEhFSUdIVF9TRUFSQ0gpO1xuICAgIGNvbnN0IHdpZHRoT2Zmc2V0ID0gaW5kZXhPZldpZHRoICsgV0lEVEhfU0VBUkNILmxlbmd0aDtcbiAgICBjb25zdCBoZWlnaHRPZmZzZXQgPSBpbmRleE9mSGVpZ2h0ICsgSEVJR0hUX1NFQVJDSC5sZW5ndGg7XG4gICAgY29uc3Qgd2lkdGhTdHJpbmcgPSBhdHRyaWJ1dGVzLnNsaWNlKFxuICAgICAgICB3aWR0aE9mZnNldCxcbiAgICAgICAgYXR0cmlidXRlcy5pbmRleE9mKGBcImAsIHdpZHRoT2Zmc2V0KSxcbiAgICApO1xuICAgIGNvbnN0IGhlaWdodFN0cmluZyA9IGF0dHJpYnV0ZXMuc2xpY2UoXG4gICAgICAgIGhlaWdodE9mZnNldCxcbiAgICAgICAgYXR0cmlidXRlcy5pbmRleE9mKGBcImAsIGhlaWdodE9mZnNldCksXG4gICAgKTtcblxuICAgIGlmIChcbiAgICAgICAgIWhlaWdodFN0cmluZyB8fFxuICAgICAgICAhd2lkdGhTdHJpbmcgfHxcbiAgICAgICAgd2lkdGhTdHJpbmcuaW5jbHVkZXMoYCVgKSB8fFxuICAgICAgICBoZWlnaHRTdHJpbmcuaW5jbHVkZXMoYCVgKVxuICAgICkge1xuICAgICAgICByZXR1cm4gc3JjLnJlcGxhY2UoU1RBUlQsIGA8c3ZnIGlkPVwiJHtuYW1lfVwiYCk7XG4gICAgfVxuXG4gICAgY29uc3Qgd2lkdGggPSBwYXJzZUludCh3aWR0aFN0cmluZywgMTApO1xuICAgIGNvbnN0IGhlaWdodCA9IHBhcnNlSW50KGhlaWdodFN0cmluZywgMTApO1xuICAgIGNvbnN0IGVtV2lkdGggPSB3aWR0aCAvIDE2O1xuICAgIGNvbnN0IGVtSGVpZ2h0ID0gaGVpZ2h0IC8gMTY7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICB3aWR0aDogYCR7ZW1XaWR0aH1lbWAsXG4gICAgICAgIGhlaWdodDogYCR7ZW1IZWlnaHR9ZW1gLFxuICAgICAgICBzcmM6IGBcbiAgICAgICAgPGcgaWQ9XCIke25hbWV9XCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICAgICAgICAgICAgPHN2ZyB4PVwiNTAlXCIgeT1cIjUwJVwiIHdpZHRoPVwiJHtlbVdpZHRofWVtXCIgaGVpZ2h0PVwiJHtlbUhlaWdodH1lbVwiIG92ZXJmbG93PVwidmlzaWJsZVwiIHZpZXdCb3g9XCIwIDAgJHt3aWR0aH0gJHtoZWlnaHR9XCI+XG4gICAgICAgICAgICAgICAgPHN2ZyB4PVwiJHstd2lkdGggLyAyfVwiIHk9XCIkey1oZWlnaHQgLyAyfVwiPiR7c3JjfTwvc3ZnPlxuICAgICAgICAgICAgPC9zdmc+XG4gICAgICAgIDwvZz5gLnRyaW0oKSxcbiAgICB9O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkOlxuICogdXNlIEB7bGluayB0dWlQcm9jZXNzSWNvbnN9XG4gKi9cbmV4cG9ydCBjb25zdCBwcm9jZXNzSWNvbnMgPSB0dWlQcm9jZXNzSWNvbnM7XG4iXX0=