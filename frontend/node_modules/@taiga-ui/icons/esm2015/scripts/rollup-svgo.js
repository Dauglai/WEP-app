import { createFilter } from '@rollup/pluginutils';
import { optimize } from 'svgo';
export function tuiRollupSvgo({ include = `**/*.svg`, exclude, options, } = {}) {
    const filter = createFilter(include, exclude);
    return {
        name: `rollupSvgo`,
        transform(svgString, path) {
            var _a, _b;
            const skip = !filter(path);
            if (skip) {
                console.info(`\x1B[33m%s\x1B[0m`, `[skip]`, path);
                return;
            }
            let data;
            let errorMessage;
            try {
                const result = optimize(svgString, Object.assign({ path }, options));
                data = ((_a = result) === null || _a === void 0 ? void 0 : _a.data) || {};
                errorMessage = result.error;
            }
            catch (err) {
                errorMessage = (_b = err) === null || _b === void 0 ? void 0 : _b.message;
            }
            if (errorMessage) {
                console.error(`\x1B[31m%s\x1B[0m`, `[error]`, path, `\n${svgString}`, `\n${errorMessage}`);
                process.exit(1);
            }
            console.info(`\x1B[32m%s\x1B[0m`, `[success]`, path);
            return {
                code: `export default ${JSON.stringify(data)}`,
                map: { mappings: `` },
            };
        },
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sbHVwLXN2Z28uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9pY29ucy9zY3JpcHRzL3JvbGx1cC1zdmdvLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUVqRCxPQUFPLEVBQUMsUUFBUSxFQUFnRCxNQUFNLE1BQU0sQ0FBQztBQVk3RSxNQUFNLFVBQVUsYUFBYSxDQUFDLEVBQzFCLE9BQU8sR0FBRyxVQUFVLEVBQ3BCLE9BQU8sRUFDUCxPQUFPLE1BQ2MsRUFBRTtJQUN2QixNQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBRTlDLE9BQU87UUFDSCxJQUFJLEVBQUUsWUFBWTtRQUNsQixTQUFTLENBQUMsU0FBaUIsRUFBRSxJQUFZOztZQUNyQyxNQUFNLElBQUksR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUUzQixJQUFJLElBQUksRUFBRTtnQkFDTixPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFFbEQsT0FBTzthQUNWO1lBRUQsSUFBSSxJQUFhLENBQUM7WUFDbEIsSUFBSSxZQUFnQyxDQUFDO1lBRXJDLElBQUk7Z0JBQ0EsTUFBTSxNQUFNLEdBQWUsUUFBUSxDQUFDLFNBQVMsa0JBQUcsSUFBSSxJQUFLLE9BQU8sRUFBRSxDQUFDO2dCQUVuRSxJQUFJLEdBQUcsQ0FBQSxNQUFDLE1BQXVCLDBDQUFFLElBQUksS0FBSSxFQUFFLENBQUM7Z0JBQzVDLFlBQVksR0FBRyxNQUFNLENBQUMsS0FBSyxDQUFDO2FBQy9CO1lBQUMsT0FBTyxHQUFZLEVBQUU7Z0JBQ25CLFlBQVksR0FBRyxNQUFDLEdBQWEsMENBQUUsT0FBTyxDQUFDO2FBQzFDO1lBRUQsSUFBSSxZQUFZLEVBQUU7Z0JBQ2QsT0FBTyxDQUFDLEtBQUssQ0FDVCxtQkFBbUIsRUFDbkIsU0FBUyxFQUNULElBQUksRUFDSixLQUFLLFNBQVMsRUFBRSxFQUNoQixLQUFLLFlBQVksRUFBRSxDQUN0QixDQUFDO2dCQUNGLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDbkI7WUFFRCxPQUFPLENBQUMsSUFBSSxDQUFDLG1CQUFtQixFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztZQUVyRCxPQUFPO2dCQUNILElBQUksRUFBRSxrQkFBa0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRTtnQkFDOUMsR0FBRyxFQUFFLEVBQUMsUUFBUSxFQUFFLEVBQUUsRUFBQzthQUN0QixDQUFDO1FBQ04sQ0FBQztLQUNKLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtjcmVhdGVGaWx0ZXJ9IGZyb20gJ0Byb2xsdXAvcGx1Z2ludXRpbHMnO1xuaW1wb3J0IHtQbHVnaW4sIFRyYW5zZm9ybVJlc3VsdH0gZnJvbSAncm9sbHVwJztcbmltcG9ydCB7b3B0aW1pemUsIE9wdGltaXplZEVycm9yLCBPcHRpbWl6ZWRTdmcsIE9wdGltaXplT3B0aW9uc30gZnJvbSAnc3Znbyc7XG5cbnR5cGUgU3Znb1Jlc3VsdCA9IE9wdGltaXplZEVycm9yIHwgT3B0aW1pemVkU3ZnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFR1aVJvbGx1cFN2Z29Db25maWcge1xuICAgIHJlYWRvbmx5IGluY2x1ZGU/OiBzdHJpbmc7XG5cbiAgICByZWFkb25seSBleGNsdWRlPzogc3RyaW5nO1xuXG4gICAgcmVhZG9ubHkgb3B0aW9ucz86IE9wdGltaXplT3B0aW9ucztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aVJvbGx1cFN2Z28oe1xuICAgIGluY2x1ZGUgPSBgKiovKi5zdmdgLFxuICAgIGV4Y2x1ZGUsXG4gICAgb3B0aW9ucyxcbn06IFR1aVJvbGx1cFN2Z29Db25maWcgPSB7fSk6IFBsdWdpbiB7XG4gICAgY29uc3QgZmlsdGVyID0gY3JlYXRlRmlsdGVyKGluY2x1ZGUsIGV4Y2x1ZGUpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogYHJvbGx1cFN2Z29gLFxuICAgICAgICB0cmFuc2Zvcm0oc3ZnU3RyaW5nOiBzdHJpbmcsIHBhdGg6IHN0cmluZyk6IFRyYW5zZm9ybVJlc3VsdCB7XG4gICAgICAgICAgICBjb25zdCBza2lwID0gIWZpbHRlcihwYXRoKTtcblxuICAgICAgICAgICAgaWYgKHNraXApIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmluZm8oYFxceDFCWzMzbSVzXFx4MUJbMG1gLCBgW3NraXBdYCwgcGF0aCk7XG5cbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCBkYXRhOiB1bmtub3duO1xuICAgICAgICAgICAgbGV0IGVycm9yTWVzc2FnZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdDogU3Znb1Jlc3VsdCA9IG9wdGltaXplKHN2Z1N0cmluZywge3BhdGgsIC4uLm9wdGlvbnN9KTtcblxuICAgICAgICAgICAgICAgIGRhdGEgPSAocmVzdWx0IGFzIE9wdGltaXplZFN2Zyk/LmRhdGEgfHwge307XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gcmVzdWx0LmVycm9yO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyOiB1bmtub3duKSB7XG4gICAgICAgICAgICAgICAgZXJyb3JNZXNzYWdlID0gKGVyciBhcyBFcnJvcik/Lm1lc3NhZ2U7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChlcnJvck1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgICAgICBgXFx4MUJbMzFtJXNcXHgxQlswbWAsXG4gICAgICAgICAgICAgICAgICAgIGBbZXJyb3JdYCxcbiAgICAgICAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgICAgICAgYFxcbiR7c3ZnU3RyaW5nfWAsXG4gICAgICAgICAgICAgICAgICAgIGBcXG4ke2Vycm9yTWVzc2FnZX1gLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcHJvY2Vzcy5leGl0KDEpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjb25zb2xlLmluZm8oYFxceDFCWzMybSVzXFx4MUJbMG1gLCBgW3N1Y2Nlc3NdYCwgcGF0aCk7XG5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgY29kZTogYGV4cG9ydCBkZWZhdWx0ICR7SlNPTi5zdHJpbmdpZnkoZGF0YSl9YCxcbiAgICAgICAgICAgICAgICBtYXA6IHttYXBwaW5nczogYGB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9O1xufVxuIl19