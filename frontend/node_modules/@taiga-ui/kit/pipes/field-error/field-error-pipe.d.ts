import { PipeTransform } from '@angular/core';
import { ControlContainer, ControlValueAccessor, NgControl } from '@angular/forms';
import { TuiValidationError } from '@taiga-ui/cdk';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiFieldErrorPipe implements PipeTransform, ControlValueAccessor {
    private readonly parent;
    private readonly self;
    private readonly container;
    private readonly validationErrors;
    private order;
    constructor(parent: NgControl | null, self: NgControl | null, container: ControlContainer | null, validationErrors: Record<string, Observable<PolymorpheusContent> | PolymorpheusContent>);
    transform(order: readonly string[]): Observable<TuiValidationError | null>;
    get computedError(): Observable<TuiValidationError | null>;
    registerOnChange(): void;
    registerOnTouched(): void;
    setDisabledState(): void;
    writeValue(): void;
    private get error();
    private get invalid();
    private get touched();
    private get control();
    private get errorId();
    private get controlErrors();
    private getErrorId;
    private getError;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiFieldErrorPipe, [{ optional: true; skipSelf: true; }, { optional: true; self: true; }, { optional: true; }, null]>;
    static ɵpipe: i0.ɵɵPipeDeclaration<TuiFieldErrorPipe, "tuiFieldError">;
}
