import { ChangeDetectorRef, ElementRef, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, TuiBooleanHandler, TuiHandler, TuiIdentityMatcher } from '@taiga-ui/cdk';
import { TuiSizeL, TuiSizeS } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import * as i0 from "@angular/core";
export declare class TuiFilterComponent<T> extends AbstractTuiMultipleControl<T> {
    private readonly el;
    identityMatcher: TuiIdentityMatcher<T>;
    items: readonly T[];
    size: TuiSizeL | TuiSizeS;
    disabledItemHandler: TuiBooleanHandler<T>;
    readonly toggledItem: EventEmitter<T>;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, el: ElementRef<HTMLElement>);
    content: PolymorpheusContent;
    badgeHandler: TuiHandler<T, number>;
    get focused(): boolean;
    onCheckbox(value: boolean, item: T): void;
    isCheckboxEnabled(item: T): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiFilterComponent<any>, [{ optional: true; self: true; }, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiFilterComponent<any>, "tui-filter", never, { "identityMatcher": "identityMatcher"; "items": "items"; "size": "size"; "disabledItemHandler": "disabledItemHandler"; "content": "content"; "badgeHandler": "badgeHandler"; }, { "toggledItem": "toggledItem"; }, never, never>;
}
