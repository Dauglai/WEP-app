import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { TuiBooleanHandler, TuiDay, TuiDayLike, TuiDayRange, TuiDestroyService, TuiMapper, TuiMonth } from '@taiga-ui/cdk';
import { TuiMarkerHandler, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { TuiDayRangePeriod } from '@taiga-ui/kit/classes';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiCalendarRangeComponent implements TuiWithOptionalMinMax<TuiDay> {
    readonly otherDateText$: Observable<string>;
    defaultViewedMonth: TuiMonth;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler;
    items: readonly TuiDayRangePeriod[];
    min: TuiDay;
    max: TuiDay;
    minLength: TuiDayLike | null;
    maxLength: TuiDayLike | null;
    value: TuiDayRange | null;
    readonly valueChange: EventEmitter<TuiDayRange | null>;
    previousValue: TuiDayRange | null;
    readonly maxLengthMapper: TuiMapper<TuiDay, TuiDay>;
    constructor(valueChanges: Observable<TuiDayRange | null> | null, cdr: ChangeDetectorRef, destroy$: TuiDestroyService, otherDateText$: Observable<string>);
    onEsc(event: KeyboardEvent): void;
    readonly mapper: TuiMapper<readonly TuiDayRangePeriod[], ReadonlyArray<TuiDayRangePeriod | string>>;
    get calculatedDisabledItemHandler(): TuiBooleanHandler<TuiDay>;
    get computedMonth(): TuiMonth;
    isItemActive(item: TuiDayRangePeriod | string): boolean;
    onRangeChange(dayRange: TuiDayRange): void;
    onDayClick(day: TuiDay): void;
    onItemSelect(item: TuiDayRangePeriod | string): void;
    updateValue(value: TuiDayRange | null): void;
    private get activePeriod();
    private calculateDisabledItemHandler;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiCalendarRangeComponent, [{ optional: true; }, null, { self: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiCalendarRangeComponent, "tui-calendar-range", never, { "defaultViewedMonth": "defaultViewedMonth"; "disabledItemHandler": "disabledItemHandler"; "markerHandler": "markerHandler"; "items": "items"; "min": "min"; "max": "max"; "minLength": "minLength"; "maxLength": "maxLength"; "value": "value"; }, { "valueChange": "valueChange"; }, never, never>;
}
