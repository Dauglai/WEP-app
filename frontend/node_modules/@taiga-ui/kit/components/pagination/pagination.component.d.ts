import { ElementRef, EventEmitter } from '@angular/core';
import { AbstractTuiInteractive, TuiContextWithImplicit, TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiAppearance, TuiBrightness, TuiButtonComponent, TuiHorizontalDirection, TuiModeDirective, TuiSizeS } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiPaginationComponent extends AbstractTuiInteractive implements TuiFocusableElementAccessor {
    private readonly el;
    private readonly modeDirective;
    readonly texts$: Observable<[string, string]>;
    private readonly els;
    length: number;
    size: TuiSizeS;
    readonly disabled = false;
    /**
     * Amount of visible pages around active page
     */
    activePadding: number;
    /**
     * Amount of visible pages at the edges
     */
    sidePadding: number;
    /**
     * Customization for page number display.
     */
    content: PolymorpheusContent<TuiContextWithImplicit<number>>;
    /**
     * Active page index
     */
    index: number;
    readonly indexChange: EventEmitter<number>;
    constructor(el: ElementRef<HTMLElement>, modeDirective: TuiModeDirective | null, texts$: Observable<[string, string]>);
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    /**
     * Number of items in a container.
     */
    get elementsLength(): number;
    get sizeM(): boolean;
    get mode(): TuiBrightness | null;
    get arrowIsDisabledLeft(): boolean;
    get arrowIsDisabledRight(): boolean;
    elementIsFocusable(index: number): boolean;
    /**
     * Get index by element index
     * @param elementIndex
     * @returns index or null (for '…')
     */
    getItemIndexByElementIndex(elementIndex: number): number | null;
    getElementMode(index: number): TuiAppearance;
    getSmallElementMode(index: number, mode: TuiBrightness | null): TuiAppearance;
    onElementClick(index: number): void;
    onElementKeyDownArrowLeft(element: TuiButtonComponent): void;
    onElementKeyDownArrowRight(element: TuiButtonComponent): void;
    onArrowClick(direction: TuiHorizontalDirection): void;
    onActiveZone(focused: boolean): void;
    /**
     * Active index from the end
     */
    private get reverseIndex();
    /**
     * Max number of elements in half (not counting the middle one).
     */
    private get maxHalfLength();
    /**
     * Is there '...' anywhere
     */
    private get itemsFit();
    /**
     * Max number of elements
     */
    private get maxElementsLength();
    private get lastIndex();
    private get lastElementIndex();
    /**
     * Are there collapsed items at that index
     * @param index
     * @returns there are collapsed items
     */
    private hasCollapsedItems;
    private tryChangeTo;
    private focusActive;
    private updateIndex;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiPaginationComponent, [null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiPaginationComponent, "tui-pagination", never, { "length": "length"; "size": "size"; "disabled": "disabled"; "activePadding": "activePadding"; "sidePadding": "sidePadding"; "content": "content"; "index": "index"; }, { "indexChange": "indexChange"; }, never, never>;
}
