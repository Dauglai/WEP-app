import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, TuiActiveZoneDirective, TuiBooleanHandler, TuiContextWithImplicit, TuiFocusableElementAccessor, TuiMapper, TuiStringHandler } from '@taiga-ui/cdk';
import { TuiDataListHost, TuiSizeL, TuiSizeM, TuiSizeS, TuiTextfieldController } from '@taiga-ui/core';
import { TuiStringifiableItem } from '@taiga-ui/kit/classes';
import { TuiArrowMode } from '@taiga-ui/kit/components/arrow';
import { TuiInputTagComponent } from '@taiga-ui/kit/components/input-tag';
import { TuiItemsHandlers } from '@taiga-ui/kit/tokens';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { TuiMultiSelectOptions } from './multi-select-options';
import * as i0 from "@angular/core";
export declare class TuiMultiSelectComponent<T> extends AbstractTuiMultipleControl<T> implements TuiFocusableElementAccessor, TuiDataListHost<T> {
    private readonly arrowMode;
    private readonly itemsHandlers;
    private readonly options;
    readonly controller: TuiTextfieldController;
    readonly isMobile: boolean;
    private readonly accessor?;
    private readonly nativeSelect?;
    private readonly hostedDropdown?;
    private readonly input?;
    stringify: TuiItemsHandlers<T>['stringify'];
    identityMatcher: TuiItemsHandlers<T>['identityMatcher'];
    expandable: TuiMultiSelectOptions<T>['expandable'];
    search: string | null;
    placeholder: string;
    editable: boolean;
    disabledItemHandler: TuiItemsHandlers<T>['disabledItemHandler'];
    valueContent: TuiMultiSelectOptions<T>['valueContent'];
    tagValidator: TuiBooleanHandler<T>;
    rows: number;
    readonly searchChange: EventEmitter<string | null>;
    readonly datalist: PolymorpheusContent<TuiContextWithImplicit<TuiActiveZoneDirective>>;
    open: boolean;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, arrowMode: TuiArrowMode, itemsHandlers: TuiItemsHandlers<T>, options: TuiMultiSelectOptions<T>, controller: TuiTextfieldController, isMobile: boolean);
    get size(): TuiSizeL | TuiSizeS;
    get arrow(): PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeM | TuiSizeS>>;
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get nativeDropdownMode(): boolean;
    get computedValue(): readonly T[];
    get searchOrSpace(): string;
    get searchString(): string;
    get computedGroup(): boolean;
    getStringifier(stringify: TuiStringHandler<T>): TuiStringHandler<TuiContextWithImplicit<T>>;
    readonly valueMapper: TuiMapper<readonly T[], ReadonlyArray<TuiStringifiableItem<T>>>;
    readonly disabledItemHandlerWrapper: TuiMapper<TuiBooleanHandler<T>, TuiBooleanHandler<TuiStringifiableItem<T> | string>>;
    onSpace(event: Event): void;
    handleOption(option: T): void;
    onEnter(event: Event): void;
    onClick({ nativeFocusableElement }: TuiInputTagComponent): void;
    onInput(value: ReadonlyArray<TuiStringifiableItem<T>>): void;
    onValueChange(value: readonly T[]): void;
    onSearch(search: string | null): void;
    onActiveZone(active: boolean): void;
    setDisabledState(): void;
    private updateSearch;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiMultiSelectComponent<any>, [{ optional: true; self: true; }, null, null, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiMultiSelectComponent<any>, "tui-multi-select", never, { "stringify": "stringify"; "identityMatcher": "identityMatcher"; "expandable": "expandable"; "search": "search"; "placeholder": "placeholder"; "editable": "editable"; "disabledItemHandler": "disabledItemHandler"; "valueContent": "valueContent"; "tagValidator": "tagValidator"; "rows": "rows"; }, { "searchChange": "searchChange"; }, ["accessor", "nativeSelect", "datalist"], ["*", "select"]>;
}
