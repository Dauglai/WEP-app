import { ChangeDetectorRef } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TuiFocusableElementAccessor, TuiNativeFocusableElement } from '@taiga-ui/cdk';
import { TuiHintDirection, TuiTextfieldSizeDirective } from '@taiga-ui/core';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiInputCopyComponent extends AbstractTuiControl<string> implements TuiFocusableElementAccessor {
    private readonly doc;
    private readonly textfieldSize;
    private readonly copyTexts$;
    private readonly textfield?;
    private readonly copy$;
    successMessage: PolymorpheusContent;
    messageDirection: TuiHintDirection;
    messageAppearance: string;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, doc: Document, textfieldSize: TuiTextfieldSizeDirective, copyTexts$: Observable<[string, string]>);
    get hasValue(): boolean;
    get hintText$(): Observable<PolymorpheusContent>;
    get nativeFocusableElement(): TuiNativeFocusableElement | null;
    get focused(): boolean;
    get icon(): string;
    onValueChange(value: string): void;
    onFocused(focused: boolean): void;
    copy(): void;
    protected getFallbackValue(): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputCopyComponent, [{ optional: true; self: true; }, null, null, null, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputCopyComponent, "tui-input-copy", never, { "successMessage": "successMessage"; "messageDirection": "messageDirection"; "messageAppearance": "messageAppearance"; }, {}, never, ["*", "input"]>;
}
