import { ElementRef, QueryList } from '@angular/core';
import { TuiOptionComponent, TuiSizeL, TuiSizeXS, TuiValueContentContext } from '@taiga-ui/core';
import { TuiItemsHandlers } from '@taiga-ui/kit/tokens';
import { PolymorpheusContent } from '@tinkoff/ng-polymorpheus';
import * as i0 from "@angular/core";
export declare abstract class AbstractTuiDataListWrapper<T> {
    protected readonly itemsHandlers: TuiItemsHandlers<T>;
    protected readonly defaultSize: TuiSizeL | TuiSizeXS;
    protected readonly optionsQuery: QueryList<TuiOptionComponent<T>>;
    disabledItemHandler: TuiItemsHandlers<T>['disabledItemHandler'];
    emptyContent: PolymorpheusContent;
    size: TuiSizeL | TuiSizeXS;
    constructor(itemsHandlers: TuiItemsHandlers<T>, defaultSize: TuiSizeL | TuiSizeXS);
    itemContent: PolymorpheusContent<TuiValueContentContext<T>>;
    getContext($implicit: T, { nativeElement }: ElementRef<HTMLElement>): TuiValueContentContext<T>;
    getOptions(includeDisabled?: boolean): readonly T[];
    static ɵfac: i0.ɵɵFactoryDeclaration<AbstractTuiDataListWrapper<any>, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<AbstractTuiDataListWrapper<any>, never, never, { "disabledItemHandler": "disabledItemHandler"; "emptyContent": "emptyContent"; "size": "size"; "itemContent": "itemContent"; }, {}, never>;
}
