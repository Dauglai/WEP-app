import { ChangeDetectorRef, Injector, Type } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, AbstractTuiValueTransformer, TuiActiveZoneDirective, TuiBooleanHandler, TuiContextWithImplicit, TuiDateMode, TuiDay, TuiFocusableElementAccessor, TuiMonth } from '@taiga-ui/cdk';
import { TuiDialogService, TuiMarkerHandler, TuiSizeL, TuiSizeS, TuiTextfieldSizeDirective, TuiTextMaskOptions, TuiWithOptionalMinMax } from '@taiga-ui/core';
import { TuiNamedDay } from '@taiga-ui/kit/classes';
import { TuiInputDateOptions } from '@taiga-ui/kit/tokens';
import { Observable } from 'rxjs';
import * as i0 from "@angular/core";
export declare class TuiInputDateComponent extends AbstractTuiNullableControl<TuiDay> implements TuiWithOptionalMinMax<TuiDay>, TuiFocusableElementAccessor {
    private readonly injector;
    readonly isMobile: boolean;
    private readonly dialogs;
    private readonly mobileCalendar;
    private readonly textfieldSize;
    readonly dateFormat: TuiDateMode;
    readonly dateSeparator: string;
    readonly dateTexts$: Observable<Record<TuiDateMode, string>>;
    readonly valueTransformer: AbstractTuiValueTransformer<TuiDay | null> | null;
    private readonly options;
    private readonly textfield?;
    private month;
    private readonly textMaskOptions;
    min: TuiDay;
    max: TuiDay;
    disabledItemHandler: TuiBooleanHandler<TuiDay>;
    markerHandler: TuiMarkerHandler;
    items: readonly TuiNamedDay[];
    defaultActiveYearMonth: TuiMonth;
    open: boolean;
    readonly type: TuiContextWithImplicit<TuiActiveZoneDirective>;
    readonly filler$: Observable<string>;
    constructor(control: NgControl | null, cdr: ChangeDetectorRef, injector: Injector, isMobile: boolean, dialogs: TuiDialogService, mobileCalendar: Type<Record<string, any>> | null, textfieldSize: TuiTextfieldSizeDirective, dateFormat: TuiDateMode, dateSeparator: string, dateTexts$: Observable<Record<TuiDateMode, string>>, valueTransformer: AbstractTuiValueTransformer<TuiDay | null> | null, options: TuiInputDateOptions);
    get nativeFocusableElement(): HTMLInputElement | null;
    get focused(): boolean;
    get computedMobile(): boolean;
    get nativePicker(): boolean;
    get calendarIcon(): TuiInputDateOptions['icon'];
    get computedValue(): string;
    get computedActiveYearMonth(): TuiMonth;
    get nativeValue(): string;
    set nativeValue(value: string);
    get canOpen(): boolean;
    get computedMask(): TuiTextMaskOptions;
    get activeItem(): TuiNamedDay | null;
    get size(): TuiSizeL | TuiSizeS;
    onClick(): void;
    getComputedFiller(filler: string): string;
    /**
     * TODO: Remove in 4.0
     * @deprecated: use {@link onIconClick} instead
     */
    onMobileClick(): void;
    onIconClick(): void;
    onValueChange(value: string): void;
    onDayClick(value: TuiDay): void;
    onMonthChange(month: TuiMonth): void;
    onOpenChange(open: boolean): void;
    onFocused(focused: boolean): void;
    setDisabledState(): void;
    writeValue(value: TuiDay | null): void;
    protected valueIdenticalComparator(oldValue: TuiDay | null, newValue: TuiDay | null): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<TuiInputDateComponent, [{ optional: true; self: true; }, null, null, null, null, { optional: true; }, null, null, null, null, { optional: true; }, null]>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TuiInputDateComponent, "tui-input-date", never, { "min": "min"; "max": "max"; "disabledItemHandler": "disabledItemHandler"; "markerHandler": "markerHandler"; "items": "items"; "defaultActiveYearMonth": "defaultActiveYearMonth"; }, {}, never, ["*", "input"]>;
}
