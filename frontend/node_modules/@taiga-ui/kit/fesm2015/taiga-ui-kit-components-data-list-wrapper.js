import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { Directive, ViewChildren, forwardRef, Input, Component, ChangeDetectionStrategy, Inject, Optional, NgModule } from '@angular/core';
import * as i3 from '@taiga-ui/cdk';
import { EMPTY_QUERY, tuiIsNativeFocused, tuiIsPresent, tuiDefaultProp, TuiElementModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TuiOptionComponent, TuiTextfieldSizeDirective, tuiAsDataListAccessor, TUI_TEXTFIELD_WATCHED_CONTROLLER, TEXTFIELD_CONTROLLER_PROVIDER, TuiDataListModule, TuiLoaderModule, TuiDataListDirective } from '@taiga-ui/core';
import { TUI_ITEMS_HANDLERS } from '@taiga-ui/kit/tokens';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class AbstractTuiDataListWrapper {
    constructor(itemsHandlers, defaultSize) {
        this.itemsHandlers = itemsHandlers;
        this.defaultSize = defaultSize;
        this.optionsQuery = EMPTY_QUERY;
        this.disabledItemHandler = this.itemsHandlers.disabledItemHandler;
        this.size = this.defaultSize;
        this.itemContent = ({ $implicit }) => this.itemsHandlers.stringify($implicit);
    }
    getContext($implicit, { nativeElement }) {
        return { $implicit, active: tuiIsNativeFocused(nativeElement) };
    }
    getOptions(includeDisabled = false) {
        return this.optionsQuery
            .filter(({ disabled }) => includeDisabled || !disabled)
            .map(({ value }) => value)
            .filter(tuiIsPresent);
    }
}
AbstractTuiDataListWrapper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDataListWrapper, deps: "invalid", target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiDataListWrapper.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiDataListWrapper, inputs: { disabledItemHandler: "disabledItemHandler", emptyContent: "emptyContent", size: "size", itemContent: "itemContent" }, viewQueries: [{ propertyName: "optionsQuery", predicate: i0.forwardRef(function () { return TuiOptionComponent; }), descendants: true }], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], AbstractTuiDataListWrapper.prototype, "size", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDataListWrapper, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: undefined }, { type: undefined }]; }, propDecorators: { optionsQuery: [{
                type: ViewChildren,
                args: [forwardRef(() => TuiOptionComponent)]
            }], disabledItemHandler: [{
                type: Input
            }], emptyContent: [{
                type: Input
            }], size: [{
                type: Input
            }], itemContent: [{
                type: Input
            }] } });

class TuiDataListGroupWrapperComponent extends AbstractTuiDataListWrapper {
    constructor(itemsHandlers, controller) {
        super(itemsHandlers, (controller === null || controller === void 0 ? void 0 : controller.size) || 'm');
        this.items = [];
        this.labels = [];
    }
}
TuiDataListGroupWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListGroupWrapperComponent, deps: [{ token: TUI_ITEMS_HANDLERS }, { token: TuiTextfieldSizeDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiDataListGroupWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: { items: "items", labels: "labels" }, providers: [tuiAsDataListAccessor(TuiDataListGroupWrapperComponent)], usesInheritance: true, ngImport: i0, template: "<!-- TODO: remove $any in 4.0 -->\n<tui-data-list\n    *ngIf=\"items; else loading\"\n    [emptyContent]=\"emptyContent\"\n    [size]=\"$any(size)\"\n>\n    <tui-opt-group\n        *ngFor=\"let group of items; let index = index\"\n        [label]=\"labels[index]\"\n    >\n        <button\n            *ngFor=\"let item of group\"\n            #elementRef=\"elementRef\"\n            tuiElement\n            tuiOption\n            automation-id=\"tui-data-list-wrapper__option\"\n            [value]=\"item\"\n            [disabled]=\"disabledItemHandler(item)\"\n        >\n            <ng-container *polymorpheusOutlet=\"itemContent as text; context: getContext(item, elementRef)\">\n                {{ text }}\n            </ng-container>\n        </button>\n    </tui-opt-group>\n</tui-data-list>\n<ng-template #loading>\n    <tui-loader class=\"t-loader\"></tui-loader>\n</ng-template>\n", styles: [":host{display:block}.t-loader{margin:.75rem 0}\n"], components: [{ type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.TuiOptGroupDirective, selector: "tui-opt-group", inputs: ["label"] }, { type: i3.TuiElementDirective, selector: "[tuiElement]", exportAs: ["elementRef"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiDataListGroupWrapperComponent.prototype, "items", void 0);
__decorate([
    tuiDefaultProp()
], TuiDataListGroupWrapperComponent.prototype, "labels", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListGroupWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-data-list-wrapper[labels]',
                    templateUrl: './data-list-group-wrapper.template.html',
                    styleUrls: ['./data-list-wrapper.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [tuiAsDataListAccessor(TuiDataListGroupWrapperComponent)],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ITEMS_HANDLERS]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiTextfieldSizeDirective]
                }] }]; }, propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });

class TuiDataListWrapperComponent extends AbstractTuiDataListWrapper {
    constructor(itemsHandlers, controller) {
        super(itemsHandlers, (controller === null || controller === void 0 ? void 0 : controller.size) || 'm');
        this.items = [];
    }
}
TuiDataListWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListWrapperComponent, deps: [{ token: TUI_ITEMS_HANDLERS }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiDataListWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDataListWrapperComponent, selector: "tui-data-list-wrapper:not([labels])", inputs: { items: "items" }, providers: [
        tuiAsDataListAccessor(TuiDataListWrapperComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], usesInheritance: true, ngImport: i0, template: "<!-- TODO: remove $any in 4.0 -->\n<tui-data-list\n    *ngIf=\"items; else loading\"\n    [emptyContent]=\"emptyContent\"\n    [size]=\"$any(size)\"\n>\n    <button\n        *ngFor=\"let item of items\"\n        #elementRef=\"elementRef\"\n        tuiElement\n        tuiOption\n        automation-id=\"tui-data-list-wrapper__option\"\n        [value]=\"item\"\n        [disabled]=\"disabledItemHandler(item)\"\n    >\n        <span class=\"t-content\">\n            <ng-container *polymorpheusOutlet=\"itemContent as text; context: getContext(item, elementRef)\">\n                {{ text }}\n            </ng-container>\n        </span>\n    </button>\n</tui-data-list>\n<ng-template #loading>\n    <tui-loader\n        automation-id=\"tui-data-list-wrapper__loader\"\n        class=\"t-loader\"\n    ></tui-loader>\n</ng-template>\n", styles: [":host{display:block}.t-loader{margin:.75rem 0}\n"], components: [{ type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiElementDirective, selector: "[tuiElement]", exportAs: ["elementRef"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiDataListWrapperComponent.prototype, "items", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListWrapperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-data-list-wrapper:not([labels])',
                    templateUrl: './data-list-wrapper.template.html',
                    styleUrls: ['./data-list-wrapper.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsDataListAccessor(TuiDataListWrapperComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ITEMS_HANDLERS]
                }] }, { type: i1.TuiTextfieldController, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { items: [{
                type: Input
            }] } });

class TuiDataListWrapperModule {
}
TuiDataListWrapperModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListWrapperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDataListWrapperModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListWrapperModule, declarations: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent], imports: [CommonModule,
        PolymorpheusModule,
        TuiElementModule,
        TuiDataListModule,
        TuiLoaderModule], exports: [TuiDataListWrapperComponent,
        TuiDataListGroupWrapperComponent,
        TuiDataListDirective] });
TuiDataListWrapperModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListWrapperModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiElementModule,
            TuiDataListModule,
            TuiLoaderModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListWrapperModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiElementModule,
                        TuiDataListModule,
                        TuiLoaderModule,
                    ],
                    declarations: [TuiDataListWrapperComponent, TuiDataListGroupWrapperComponent],
                    exports: [
                        TuiDataListWrapperComponent,
                        TuiDataListGroupWrapperComponent,
                        TuiDataListDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { AbstractTuiDataListWrapper, TuiDataListGroupWrapperComponent, TuiDataListWrapperComponent, TuiDataListWrapperModule };
//# sourceMappingURL=taiga-ui-kit-components-data-list-wrapper.js.map
