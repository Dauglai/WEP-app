{"version":3,"file":"taiga-ui-kit-utils-mask.js","sources":["../../../projects/kit/utils/mask/create-auto-corrected-date-pipe.ts","../../../projects/kit/utils/mask/create-auto-corrected-date-range-pipe.ts","../../../projects/kit/utils/mask/create-auto-corrected-time-pipe.ts","../../../projects/kit/utils/mask/create-auto-corrected-date-time-pipe.ts","../../../projects/kit/utils/mask/create-date-mask.ts","../../../projects/kit/utils/mask/create-date-range-mask.ts","../../../projects/kit/utils/mask/create-time-mask.ts","../../../projects/kit/utils/mask/taiga-ui-kit-utils-mask.ts"],"sourcesContent":["import {DATE_FILLER_LENGTH, TuiDateMode, TuiDay} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler, TuiWithOptionalMinMaxWithValue} from '@taiga-ui/core';\n\nexport interface TuiAutoCorrectedDatePipeConfigs\n    extends TuiWithOptionalMinMaxWithValue<TuiDay | null, TuiDay> {\n    dateFormat: TuiDateMode;\n    dateSeparator: string;\n}\n\nexport function tuiNormalizeDateValue(\n    dateValue: string,\n    {value, min, max, dateFormat, dateSeparator}: TuiAutoCorrectedDatePipeConfigs,\n): string {\n    return value && value.toString(dateFormat, dateSeparator) === dateValue\n        ? dateValue\n        : TuiDay.normalizeParse(dateValue, dateFormat)\n              .dayLimit(min, max)\n              .toString(dateFormat, dateSeparator);\n}\n\nexport function tuiCreateAutoCorrectedDatePipe(\n    config: TuiAutoCorrectedDatePipeConfigs,\n): TuiTextMaskPipeHandler {\n    return value => {\n        if (value.length !== DATE_FILLER_LENGTH) {\n            return {value};\n        }\n\n        return {\n            value: tuiNormalizeDateValue(value, config),\n        };\n    };\n}\n","import {\n    DATE_FILLER_LENGTH,\n    DATE_RANGE_FILLER_LENGTH,\n    RANGE_SEPARATOR_CHAR,\n    TuiDateMode,\n    TuiDay,\n    TuiDayRange,\n} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler, TuiWithOptionalMinMaxWithValue} from '@taiga-ui/core';\n\ninterface TuiAutoCorrectedDatePipeConfigs\n    extends TuiWithOptionalMinMaxWithValue<TuiDayRange | null, TuiDay> {\n    dateFormat: TuiDateMode;\n    dateSeparator: string;\n}\n\nfunction parseWithLimit(value: string, config: TuiAutoCorrectedDatePipeConfigs): TuiDay {\n    return TuiDay.normalizeParse(\n        value.slice(0, DATE_FILLER_LENGTH),\n        config.dateFormat,\n    ).dayLimit(config.min, config.max);\n}\n\nfunction processRawValue(value: string, config: TuiAutoCorrectedDatePipeConfigs): string {\n    const {dateFormat, dateSeparator} = config;\n\n    switch (value.length) {\n        case DATE_FILLER_LENGTH:\n            return parseWithLimit(value, config).toString(dateFormat, dateSeparator);\n        case DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length:\n            return (\n                parseWithLimit(value, config).toString(dateFormat, dateSeparator) +\n                RANGE_SEPARATOR_CHAR\n            );\n        case DATE_RANGE_FILLER_LENGTH:\n            return config.value &&\n                config.value.toString(dateFormat, dateSeparator) === value\n                ? value\n                : TuiDayRange.sort(\n                      parseWithLimit(value.slice(0, DATE_FILLER_LENGTH), config),\n                      parseWithLimit(\n                          value.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length),\n                          config,\n                      ),\n                  ).toString(dateFormat, dateSeparator);\n        default:\n            return value;\n    }\n}\n\n/**\n * Normalizes date in formatted string\n *\n * Normalizes when:\n *\n * 1. It is a single date\n * 2. It is a single date and a separator\n * 3. It is two dates and a separator between them\n *\n * In **other** cases, the value does not change.\n *\n * @param config with min and max date\n * @return mask pipe handler that handles `min` and `max`\n */\nexport function tuiCreateAutoCorrectedDateRangePipe(\n    config: TuiAutoCorrectedDatePipeConfigs,\n): TuiTextMaskPipeHandler {\n    return value => ({value: processRawValue(value, config)});\n}\n","import {TuiTimeMode} from '@taiga-ui/cdk';\nimport {TuiTextMaskPipeHandler} from '@taiga-ui/core';\nimport {MAX_TIME_VALUES} from '@taiga-ui/kit/constants';\nimport {TuiTimeFormatParts} from '@taiga-ui/kit/types';\n\n/**\n * Adjusts the entered time by omitting only suitable values for hours and minutes\n * @returns time as a string\n */\nexport function tuiCreateAutoCorrectedTimePipe(\n    timeMode: TuiTimeMode = `HH:MM`,\n    maxValues: Partial<Record<TuiTimeFormatParts, number>> = {},\n): TuiTextMaskPipeHandler {\n    const timeFormatArray = [`HH`, `MM`, `SS`, `MS`] as const;\n    const safeValues = {\n        ...MAX_TIME_VALUES,\n        ...maxValues,\n    };\n\n    return conformedValue => {\n        const indexesOfPipedChars: number[] = [];\n        const conformedValueArr = conformedValue.split(``);\n\n        timeFormatArray.forEach(format => {\n            const position = timeMode.indexOf(format);\n            const maxFirstDigit = parseInt(String(safeValues[format]).slice(0, 1), 10);\n\n            if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {\n                conformedValueArr[position + 1] = conformedValueArr[position];\n                conformedValueArr[position] = `0`;\n                indexesOfPipedChars.push(position);\n            }\n        });\n\n        const isInvalid = timeFormatArray.some(\n            format =>\n                parseInt(conformedValue.slice(timeMode.indexOf(format), 2), 10) >\n                safeValues[format],\n        );\n\n        return isInvalid\n            ? false\n            : {\n                  value: conformedValueArr.join(``),\n                  indexesOfPipedChars,\n              };\n    };\n}\n","import {DATE_FILLER_LENGTH, tuiIsString, TuiTimeMode} from '@taiga-ui/cdk';\nimport {\n    TuiTextMaskConfig,\n    TuiTextMaskOptions,\n    TuiTextMaskPipeHandler,\n} from '@taiga-ui/core';\nimport {DATE_TIME_SEPARATOR} from '@taiga-ui/kit/constants';\n\nimport {\n    TuiAutoCorrectedDatePipeConfigs,\n    tuiNormalizeDateValue,\n} from './create-auto-corrected-date-pipe';\nimport {tuiCreateAutoCorrectedTimePipe} from './create-auto-corrected-time-pipe';\n\ninterface TuiAutoCorrectedDateTimePipeConfigs extends TuiAutoCorrectedDatePipeConfigs {\n    timeMode: TuiTimeMode;\n}\n\nexport function tuiCreateAutoCorrectedDateTimePipe(\n    configs: TuiAutoCorrectedDateTimePipeConfigs,\n): TuiTextMaskPipeHandler {\n    const timePipe = tuiCreateAutoCorrectedTimePipe(configs.timeMode);\n\n    return value => {\n        if (value.length < DATE_FILLER_LENGTH) {\n            return {value};\n        }\n\n        const [date, time] = value.split(DATE_TIME_SEPARATOR);\n\n        const formattedDate = tuiNormalizeDateValue(date, configs);\n\n        if (!time) {\n            return {value: formattedDate};\n        }\n\n        const pipedTime = timePipe(\n            time,\n            {} as unknown as TuiTextMaskConfig & TuiTextMaskOptions,\n        );\n\n        if (!pipedTime || tuiIsString(pipedTime)) {\n            return false;\n        }\n\n        return {\n            value: `${formattedDate}${DATE_TIME_SEPARATOR}${pipedTime.value}`,\n            indexesOfPipedChars: pipedTime.indexesOfPipedChars\n                ? pipedTime.indexesOfPipedChars.map(i => i + date.length + 2)\n                : undefined,\n        };\n    };\n}\n","import {tuiAssert, TuiDateMode} from '@taiga-ui/cdk';\nimport {TUI_DIGIT_REGEXP, TuiTextMaskList} from '@taiga-ui/core';\n\nconst TWO_DIGITS = new Array(2).fill(TUI_DIGIT_REGEXP);\nconst FOUR_DIGITS = new Array(4).fill(TUI_DIGIT_REGEXP);\n\nexport function tuiCreateDateMask(mode: TuiDateMode, separator: string): TuiTextMaskList {\n    ngDevMode &&\n        tuiAssert.assert(\n            separator.length === 1,\n            `Separator should consist of only 1 symbol`,\n        );\n\n    switch (mode) {\n        case `YMD`:\n            return [...FOUR_DIGITS, separator, ...TWO_DIGITS, separator, ...TWO_DIGITS];\n        case `MDY`:\n        case `DMY`:\n        default:\n            return [...TWO_DIGITS, separator, ...TWO_DIGITS, separator, ...FOUR_DIGITS];\n    }\n}\n","import {CHAR_EN_DASH, CHAR_NO_BREAK_SPACE, tuiAssert, TuiDateMode} from '@taiga-ui/cdk';\nimport {TuiTextMaskList} from '@taiga-ui/core';\n\nimport {tuiCreateDateMask} from './create-date-mask';\n\nexport function tuiCreateDateRangeMask(\n    dateMode: TuiDateMode,\n    dateSeparator: string,\n): TuiTextMaskList {\n    ngDevMode &&\n        tuiAssert.assert(\n            dateSeparator.length === 1,\n            `Separator should consist of only 1 symbol`,\n        );\n\n    const dateMask = tuiCreateDateMask(dateMode, dateSeparator);\n\n    return [\n        ...dateMask,\n        CHAR_NO_BREAK_SPACE,\n        CHAR_EN_DASH,\n        CHAR_NO_BREAK_SPACE,\n        ...dateMask,\n    ];\n}\n","import {TuiTimeMode} from '@taiga-ui/cdk';\nimport {TUI_DIGIT_REGEXP, TuiTextMaskList} from '@taiga-ui/core';\nimport {MAX_TIME_VALUES} from '@taiga-ui/kit/constants';\nimport {TuiTimeFormatParts} from '@taiga-ui/kit/types';\n\nfunction tuiCreateTimePartMask(\n    maxPartValue: number,\n    prefix?: string,\n): Array<RegExp | string> {\n    const {length} = String(maxPartValue);\n    const regExp = new Array(length).fill(TUI_DIGIT_REGEXP);\n\n    if (prefix) {\n        regExp.unshift(prefix);\n    }\n\n    return regExp;\n}\n\nexport function tuiCreateTimeMask(\n    mode: TuiTimeMode,\n    maxValues: Partial<Record<TuiTimeFormatParts, number>> = {},\n): TuiTextMaskList {\n    const {HH, MM, SS, MS} = {\n        ...MAX_TIME_VALUES,\n        ...maxValues,\n    };\n\n    return [\n        ...tuiCreateTimePartMask(HH),\n        ...tuiCreateTimePartMask(MM, `:`),\n        ...(mode.includes(`HH:MM:SS`) ? tuiCreateTimePartMask(SS, `:`) : []),\n        ...(mode === `HH:MM:SS.MSS` ? tuiCreateTimePartMask(MS, `.`) : []),\n    ];\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}