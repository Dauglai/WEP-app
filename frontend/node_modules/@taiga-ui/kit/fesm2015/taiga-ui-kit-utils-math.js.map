{"version":3,"file":"taiga-ui-kit-utils-math.js","sources":["../../../projects/kit/utils/math/horizontal-direction-to-number.ts","../../../projects/kit/utils/math/key-steps.ts","../../../projects/kit/utils/math/taiga-ui-kit-utils-math.ts"],"sourcesContent":["import {TuiHorizontalDirection} from '@taiga-ui/core';\n\n/**\n * @internal\n */\nexport function tuiHorizontalDirectionToNumber(\n    direction: TuiHorizontalDirection,\n): -1 | 1 {\n    switch (direction) {\n        case `left`:\n            return -1;\n        case `right`:\n            return 1;\n    }\n}\n","import {tuiRound} from '@taiga-ui/cdk';\nimport {TUI_FLOATING_PRECISION} from '@taiga-ui/kit/constants';\nimport {TuiKeySteps} from '@taiga-ui/kit/types';\n\nfunction tuiFindKeyStepsBoundariesByFn(\n    keySteps: TuiKeySteps,\n    fn: ([keyStepPercent, keyStepValue]: [number, number]) => boolean,\n): [[number, number], [number, number]] {\n    const keyStepUpperIndex = keySteps.findIndex((keyStep, i) => i && fn(keyStep));\n    const lowerStep = keySteps[keyStepUpperIndex - 1];\n    const upperStep = keySteps[keyStepUpperIndex];\n\n    return [lowerStep, upperStep];\n}\n\nexport function tuiPercentageToKeyStepValue(\n    valuePercentage: number,\n    keySteps: TuiKeySteps,\n): number {\n    const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] =\n        tuiFindKeyStepsBoundariesByFn(\n            keySteps,\n            ([keyStepPercentage, _]) => valuePercentage <= keyStepPercentage,\n        );\n    const ratio =\n        (valuePercentage - lowerStepPercent) / (upperStepPercent - lowerStepPercent);\n    const controlValue = (upperStepValue - lowerStepValue) * ratio + lowerStepValue;\n\n    return tuiRound(controlValue, TUI_FLOATING_PRECISION);\n}\n\nexport function tuiKeyStepValueToPercentage(\n    value: number,\n    keySteps: TuiKeySteps,\n): number {\n    const [[lowerStepPercent, lowerStepValue], [upperStepPercent, upperStepValue]] =\n        tuiFindKeyStepsBoundariesByFn(\n            keySteps,\n            ([_, keyStepValue]) => value <= keyStepValue,\n        );\n    const ratio = (value - lowerStepValue) / (upperStepValue - lowerStepValue) || 0;\n\n    return (upperStepPercent - lowerStepPercent) * ratio + lowerStepPercent;\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;AAEA;;AAEG;AACG,SAAU,8BAA8B,CAC1C,SAAiC,EAAA;AAEjC,IAAA,QAAQ,SAAS;AACb,QAAA,KAAK,CAAM,IAAA,CAAA;YACP,OAAO,CAAC,CAAC,CAAC;AACd,QAAA,KAAK,CAAO,KAAA,CAAA;AACR,YAAA,OAAO,CAAC,CAAC;AAChB,KAAA;AACL;;ACVA,SAAS,6BAA6B,CAClC,QAAqB,EACrB,EAAiE,EAAA;IAEjE,MAAM,iBAAiB,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IAC/E,MAAM,SAAS,GAAG,QAAQ,CAAC,iBAAiB,GAAG,CAAC,CAAC,CAAC;AAClD,IAAA,MAAM,SAAS,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC;AAE9C,IAAA,OAAO,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;AAClC,CAAC;AAEe,SAAA,2BAA2B,CACvC,eAAuB,EACvB,QAAqB,EAAA;AAErB,IAAA,MAAM,CAAC,CAAC,gBAAgB,EAAE,cAAc,CAAC,EAAE,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC,GAC1E,6BAA6B,CACzB,QAAQ,EACR,CAAC,CAAC,iBAAiB,EAAE,CAAC,CAAC,KAAK,eAAe,IAAI,iBAAiB,CACnE,CAAC;AACN,IAAA,MAAM,KAAK,GACP,CAAC,eAAe,GAAG,gBAAgB,KAAK,gBAAgB,GAAG,gBAAgB,CAAC,CAAC;IACjF,MAAM,YAAY,GAAG,CAAC,cAAc,GAAG,cAAc,IAAI,KAAK,GAAG,cAAc,CAAC;AAEhF,IAAA,OAAO,QAAQ,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAAC;AAC1D,CAAC;AAEe,SAAA,2BAA2B,CACvC,KAAa,EACb,QAAqB,EAAA;AAErB,IAAA,MAAM,CAAC,CAAC,gBAAgB,EAAE,cAAc,CAAC,EAAE,CAAC,gBAAgB,EAAE,cAAc,CAAC,CAAC,GAC1E,6BAA6B,CACzB,QAAQ,EACR,CAAC,CAAC,CAAC,EAAE,YAAY,CAAC,KAAK,KAAK,IAAI,YAAY,CAC/C,CAAC;AACN,IAAA,MAAM,KAAK,GAAG,CAAC,KAAK,GAAG,cAAc,KAAK,cAAc,GAAG,cAAc,CAAC,IAAI,CAAC,CAAC;IAEhF,OAAO,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,KAAK,GAAG,gBAAgB,CAAC;AAC5E;;AC3CA;;AAEG;;;;"}