import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Inject, Self, Input, Output, HostListener, NgModule } from '@angular/core';
import * as i4 from '@taiga-ui/cdk';
import { TuiMonth, ALWAYS_FALSE_HANDLER, TUI_FIRST_DAY, TUI_LAST_DAY, tuiWatch, tuiIsString, TuiDayRange, tuiNullableSame, tuiObjectFromEntries, TuiDestroyService, tuiDefaultProp, tuiPure, TuiMapperPipeModule, TuiPreventDefaultModule } from '@taiga-ui/cdk';
import * as i2 from '@taiga-ui/core';
import { TUI_DEFAULT_MARKER_HANDLER, TuiCalendarModule, TuiSvgModule, TuiDataListModule } from '@taiga-ui/core';
import { MAX_DAY_RANGE_LENGTH_MAPPER } from '@taiga-ui/kit/constants';
import { TUI_CALENDAR_DATE_STREAM, TUI_OTHER_DATE_TEXT } from '@taiga-ui/kit/tokens';
import { takeUntil } from 'rxjs/operators';
import * as i1 from '@taiga-ui/kit/internal/primitive-calendar-range';
import { TuiPrimitiveCalendarRangeModule } from '@taiga-ui/kit/internal/primitive-calendar-range';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from 'rxjs';

class TuiCalendarRangeComponent {
    constructor(valueChanges, cdr, destroy$, otherDateText$) {
        this.otherDateText$ = otherDateText$;
        this.defaultViewedMonth = TuiMonth.currentLocal();
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.items = [];
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.minLength = null;
        this.maxLength = null;
        this.value = null;
        this.valueChange = new EventEmitter();
        this.previousValue = null;
        this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
        this.mapper = (items, min, max, minLength, otherDateText) => [
            ...items.filter(item => (minLength === null ||
                item.range.from.append(minLength).daySameOrBefore(item.range.to)) &&
                item.range.to.daySameOrAfter(min) &&
                (max === null || item.range.from.daySameOrBefore(max))),
            otherDateText,
        ];
        if (!valueChanges) {
            return;
        }
        valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe(value => {
            this.value = value;
        });
    }
    onEsc(event) {
        var _a;
        if (event.key !== 'Escape' || !((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleDay)) {
            return;
        }
        event.stopPropagation();
        this.value = this.previousValue;
    }
    get calculatedDisabledItemHandler() {
        return this.calculateDisabledItemHandler(this.disabledItemHandler, this.value, this.minLength);
    }
    get computedMonth() {
        return this.value ? this.value.to : this.defaultViewedMonth;
    }
    isItemActive(item) {
        const { activePeriod } = this;
        return (tuiIsString(item) && activePeriod === null) || activePeriod === item;
    }
    onRangeChange(dayRange) {
        this.updateValue(dayRange);
    }
    onDayClick(day) {
        const { value } = this;
        this.previousValue = value;
        if (value === null || !value.isSingleDay) {
            this.value = new TuiDayRange(day, day);
            return;
        }
        this.updateValue(TuiDayRange.sort(value.from, day));
    }
    onItemSelect(item) {
        if (typeof item !== 'string') {
            this.updateValue(item.range.dayLimit(this.min, this.max));
            return;
        }
        if (this.activePeriod !== null) {
            this.updateValue(null);
        }
    }
    updateValue(value) {
        this.value = value;
        this.valueChange.emit(value);
    }
    get activePeriod() {
        return (this.items.find(item => tuiNullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) &&
            a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null);
    }
    calculateDisabledItemHandler(disabledItemHandler, value, minLength) {
        return item => {
            if (!(value === null || value === void 0 ? void 0 : value.isSingleDay) || !minLength) {
                return disabledItemHandler(item);
            }
            const negativeMinLength = tuiObjectFromEntries(Object.entries(minLength).map(([key, value]) => [key, -value]));
            const disabledBefore = value.from.append(negativeMinLength).append({ day: 1 });
            const disabledAfter = value.from.append(minLength).append({ day: -1 });
            const inDisabledRange = disabledBefore.dayBefore(item) && disabledAfter.dayAfter(item);
            return inDisabledRange || disabledItemHandler(item);
        };
    }
}
TuiCalendarRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeComponent, deps: [{ token: TUI_CALENDAR_DATE_STREAM, optional: true }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }, { token: TUI_OTHER_DATE_TEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiCalendarRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCalendarRangeComponent, selector: "tui-calendar-range", inputs: { defaultViewedMonth: "defaultViewedMonth", disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", items: "items", min: "min", max: "max", minLength: "minLength", maxLength: "maxLength", value: "value" }, outputs: { valueChange: "valueChange" }, host: { listeners: { "document:keydown.capture": "onEsc($event)" } }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-primitive-calendar-range\n    *ngIf=\"!items.length; else presets\"\n    automation-id=\"tui-calendar-range__calendars\"\n    tuiPreventDefault=\"mousedown\"\n    [markerHandler]=\"markerHandler\"\n    [min]=\"min | tuiMapper : maxLengthMapper : value : maxLength : true\"\n    [max]=\"max | tuiMapper : maxLengthMapper : value : maxLength : false\"\n    [defaultViewedMonthFirst]=\"defaultViewedMonth\"\n    [disabledItemHandler]=\"calculatedDisabledItemHandler\"\n    [value]=\"value\"\n    (dayClick)=\"onDayClick($event)\"\n></tui-primitive-calendar-range>\n<ng-template #presets>\n    <div class=\"t-wrapper\">\n        <tui-calendar\n            automation-id=\"tui-calendar-range__calendar\"\n            tuiPreventDefault=\"mousedown\"\n            [value]=\"value\"\n            [markerHandler]=\"markerHandler\"\n            [min]=\"min | tuiMapper : maxLengthMapper : value : maxLength : true\"\n            [max]=\"max | tuiMapper : maxLengthMapper : value : maxLength : false\"\n            [month]=\"computedMonth\"\n            [disabledItemHandler]=\"calculatedDisabledItemHandler\"\n            (dayClick)=\"onDayClick($event)\"\n        ></tui-calendar>\n        <tui-data-list\n            role=\"menu\"\n            automation-id=\"tui-calendar-range__menu\"\n            class=\"t-menu\"\n        >\n            <button\n                *ngFor=\"let item of items | tuiMapper : mapper : min : max : minLength : (otherDateText$ | async)\"\n                tuiOption\n                tuiPreventDefault=\"mousedown\"\n                role=\"menuitemradio\"\n                automation-id=\"tui-calendar-range__menu__item\"\n                [attr.aria-checked]=\"isItemActive(item)\"\n                (keydown.enter.prevent)=\"onItemSelect(item)\"\n                (keydown.space.prevent)=\"onItemSelect(item)\"\n                (click)=\"onItemSelect(item)\"\n            >\n                {{ item }}\n                <tui-svg\n                    *ngIf=\"isItemActive(item)\"\n                    automation-id=\"tui-calendar-range__checkmark\"\n                    src=\"tuiIconCheck\"\n                    class=\"t-checkmark\"\n                ></tui-svg>\n            </button>\n        </tui-data-list>\n    </div>\n</ng-template>\n", styles: [":host{display:block}.t-wrapper{display:flex}.t-menu{width:11rem;border-left:1px solid var(--tui-base-03)}.t-checkmark{margin-left:auto;width:1rem;height:1rem}\n"], components: [{ type: i1.TuiPrimitiveCalendarRangeComponent, selector: "tui-primitive-calendar-range", inputs: ["disabledItemHandler", "markerHandler", "defaultViewedMonthFirst", "defaultViewedMonthSecond", "min", "max", "value"], outputs: ["dayClick"] }, { type: i2.TuiCalendarComponent, selector: "tui-calendar", inputs: ["month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }, { type: i2.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i2.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "tuiMapper": i4.TuiMapperPipe, "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "defaultViewedMonth", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "markerHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "items", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "minLength", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "maxLength", void 0);
__decorate([
    tuiDefaultProp()
], TuiCalendarRangeComponent.prototype, "value", void 0);
__decorate([
    tuiPure
], TuiCalendarRangeComponent.prototype, "calculateDisabledItemHandler", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-calendar-range',
                    templateUrl: './calendar-range.template.html',
                    styleUrls: ['./calendar-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i5.Observable, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_CALENDAR_DATE_STREAM]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i4.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_OTHER_DATE_TEXT]
                }] }]; }, propDecorators: { defaultViewedMonth: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], items: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], value: [{
                type: Input
            }], valueChange: [{
                type: Output
            }], onEsc: [{
                type: HostListener,
                args: ['document:keydown.capture', ['$event']]
            }], calculateDisabledItemHandler: [] } });

class TuiCalendarRangeModule {
}
TuiCalendarRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiCalendarRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeModule, declarations: [TuiCalendarRangeComponent], imports: [CommonModule,
        TuiMapperPipeModule,
        TuiPreventDefaultModule,
        TuiCalendarModule,
        TuiCalendarModule,
        TuiSvgModule,
        TuiDataListModule,
        TuiPrimitiveCalendarRangeModule], exports: [TuiCalendarRangeComponent] });
TuiCalendarRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeModule, imports: [[
            CommonModule,
            TuiMapperPipeModule,
            TuiPreventDefaultModule,
            TuiCalendarModule,
            TuiCalendarModule,
            TuiSvgModule,
            TuiDataListModule,
            TuiPrimitiveCalendarRangeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCalendarRangeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiMapperPipeModule,
                        TuiPreventDefaultModule,
                        TuiCalendarModule,
                        TuiCalendarModule,
                        TuiSvgModule,
                        TuiDataListModule,
                        TuiPrimitiveCalendarRangeModule,
                    ],
                    declarations: [TuiCalendarRangeComponent],
                    exports: [TuiCalendarRangeComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCalendarRangeComponent, TuiCalendarRangeModule };
//# sourceMappingURL=taiga-ui-kit-components-calendar-range.js.map
