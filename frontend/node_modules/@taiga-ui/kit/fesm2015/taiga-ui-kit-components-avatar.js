import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, Component, ChangeDetectionStrategy, Inject, Input, HostBinding, NgModule } from '@angular/core';
import { tuiIsString, tuiDefaultProp, tuiRequiredSetter, tuiPure } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { tuiSizeBigger, TuiSvgModule } from '@taiga-ui/core';
import { tuiStringHashToHsl } from '@taiga-ui/kit/utils/format';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@taiga-ui/kit/directives';
import { TuiLazyLoadingModule } from '@taiga-ui/kit/directives';

/** Default values for the avatar options. */
const TUI_AVATAR_DEFAULT_OPTIONS = {
    size: `m`,
    autoColor: false,
    rounded: false,
};
/**
 * Default parameters for avatar component
 */
const TUI_AVATAR_OPTIONS = new InjectionToken(`[TUI_AVATAR_OPTIONS]`, {
    factory: () => TUI_AVATAR_DEFAULT_OPTIONS,
});
const tuiAvatarOptionsProvider = (options) => ({
    provide: TUI_AVATAR_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_AVATAR_DEFAULT_OPTIONS), options),
});

class TuiAvatarComponent {
    constructor(options) {
        this.options = options;
        this.size = this.options.size;
        this.text = '';
        this.fallback = null;
        this.autoColor = this.options.autoColor;
        this.rounded = this.options.rounded;
        this.avatarUrl = null;
        this.isUrlValid = false;
    }
    set avatarUrlSetter(avatarUrl) {
        this.avatarUrl = avatarUrl;
        this.isUrlValid = !!avatarUrl && !this.iconAvatar;
    }
    get bgColor() {
        return this.autoColor ? tuiStringHashToHsl(this.text) : '';
    }
    get hasAvatar() {
        return this.avatarUrl !== null && this.isUrlValid;
    }
    get iconAvatar() {
        var _a;
        return tuiIsString(this.avatarUrl) && !!((_a = this.avatarUrl) === null || _a === void 0 ? void 0 : _a.startsWith('tuiIcon'));
    }
    get useFallback() {
        return (!!this.fallback && !!this.avatarUrl && !this.isUrlValid && !this.text.length);
    }
    get computedText() {
        return this.hasAvatar || this.iconAvatar || this.text === ''
            ? ''
            : this.getSlicedText(this.text, this.size);
    }
    get stringAvatar() {
        return this.iconAvatar ? String(this.avatarUrl) : '';
    }
    onError() {
        this.isUrlValid = false;
    }
    getSlicedText(text, size) {
        const words = text.split(' ');
        return words.length > 1 && tuiSizeBigger(size)
            ? words[0].slice(0, 1) + words[1].slice(0, 1)
            : words[0].slice(0, 1);
    }
}
TuiAvatarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAvatarComponent, deps: [{ token: TUI_AVATAR_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiAvatarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiAvatarComponent, selector: "tui-avatar", inputs: { size: "size", avatarUrlSetter: ["avatarUrl", "avatarUrlSetter"], text: "text", fallback: "fallback", autoColor: "autoColor", rounded: "rounded" }, host: { properties: { "attr.data-size": "this.size", "class._rounded": "this.rounded", "style.background": "this.bgColor", "class._has-avatar": "this.hasAvatar" } }, ngImport: i0, template: "<!-- eslint-disable @html-eslint/require-img-alt -->\n<img\n    *ngIf=\"isUrlValid\"\n    loading=\"lazy\"\n    class=\"t-image\"\n    [attr.alt]=\"text\"\n    [src]=\"avatarUrl || ''\"\n    (error)=\"onError()\"\n/>\n<tui-svg\n    *ngIf=\"useFallback\"\n    class=\"t-icon\"\n    [src]=\"fallback!\"\n></tui-svg>\n<tui-svg\n    *ngIf=\"stringAvatar\"\n    class=\"t-icon\"\n    [src]=\"stringAvatar\"\n></tui-svg>\n<span class=\"t-text\">{{ computedText }}</span>\n", styles: [":host{position:relative;display:flex;flex-shrink:0;border-radius:var(--tui-radius-m);color:var(--tui-secondary-active);text-align:center;text-transform:uppercase;justify-content:center;align-items:center;background:var(--tui-avatar-background, currentColor);-webkit-user-select:none;-moz-user-select:none;user-select:none;overflow:hidden}:host[data-size=xs]{font:var(--tui-font-text-s);width:1.5rem;height:1.5rem}:host[data-size=s]{font:var(--tui-font-text-m);width:2rem;height:2rem}:host[data-size=m]{font:var(--tui-font-text-l);width:3rem;height:3rem}:host[data-size=l]{font:var(--tui-font-heading-5);width:4rem;height:4rem;border-radius:var(--tui-radius-xl)}:host[data-size=xl]{font:var(--tui-font-heading-3);width:6rem;height:6rem;border-radius:var(--tui-radius-xl)}:host[data-size=xxl]{font:var(--tui-font-heading-1);width:9rem;height:9rem;border-radius:var(--tui-radius-l)}:host[new][data-size=xxs]{width:1.5rem;height:1.5rem;border-radius:var(--tui-radius-s)}:host[new][data-size=xxs] .t-icon{transform:scale(.58)}:host[new][data-size=xs]{width:2rem;height:2rem;border-radius:var(--tui-radius-s)}:host[new][data-size=xs] .t-icon{transform:scale(.83)}:host[new][data-size=s]{width:2.5rem;height:2.5rem;border-radius:calc(1.5 * var(--tui-radius-s))}:host[new][data-size=s] .t-icon{transform:scale(1)}:host[new][data-size=m]{width:3rem;height:3rem;border-radius:calc(2 * var(--tui-radius-s))}:host[new][data-size=m] .t-icon{transform:scale(1.17)}:host[new][data-size=l]{width:4rem;height:4rem;border-radius:calc(2 * var(--tui-radius-s))}:host[new][data-size=l] .t-icon{transform:scale(1.67)}:host[new][data-size=xl]{width:6rem;height:6rem;border-radius:calc(3 * var(--tui-radius-s))}:host[new][data-size=xl] .t-icon{transform:scale(2.33)}:host[new][data-size=xxl]{width:8rem;height:8rem;border-radius:calc(4 * var(--tui-radius-s))}:host[new][data-size=xxl] .t-icon{transform:scale(3.33)}:host._has-avatar{background-color:transparent}:host._rounded{border-radius:100%!important}::ng-deep .tui-avatar-stack{display:flex;width:-webkit-min-content;width:min-content}:host-context(.tui-avatar-stack)[data-size=xs]{margin-right:-.625rem;box-shadow:0 0 0 1px var(--tui-avatar-border, var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=s]{margin-right:-.875rem;box-shadow:0 0 0 1px var(--tui-avatar-border, var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=m]{margin-right:-1.25rem;box-shadow:0 0 0 2px var(--tui-avatar-border, var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=l]{margin-right:-1.625rem;box-shadow:0 0 0 2px var(--tui-avatar-border, var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=xl]{margin-right:-2.25rem;box-shadow:0 0 0 3px var(--tui-avatar-border, var(--tui-base-01))}:host-context(.tui-avatar-stack)[data-size=xxl]{margin-right:-3.375rem;box-shadow:0 0 0 3px var(--tui-avatar-border, var(--tui-base-01))}.t-image{width:100%;height:100%;object-fit:cover}.t-text{color:var(--tui-avatar-color, var(--tui-text-01))}.t-icon{position:absolute;top:0;left:0;width:100%;height:100%;color:var(--tui-avatar-color, var(--tui-text-01))}:host[data-size=xs] .t-icon{transform:scale(.5)}:host[data-size=m] .t-icon{transform:scale(1.6)}:host[data-size=l] .t-icon{transform:scale(2)}:host[data-size=xl] .t-icon{transform:scale(3.2)}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiLazyLoadingDirective, selector: "img[loading=\"lazy\"]", inputs: ["src"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "size", void 0);
__decorate([
    tuiRequiredSetter()
], TuiAvatarComponent.prototype, "avatarUrlSetter", null);
__decorate([
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "text", void 0);
__decorate([
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "fallback", void 0);
__decorate([
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "autoColor", void 0);
__decorate([
    tuiDefaultProp()
], TuiAvatarComponent.prototype, "rounded", void 0);
__decorate([
    tuiPure
], TuiAvatarComponent.prototype, "getSlicedText", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAvatarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-avatar',
                    templateUrl: './avatar.template.html',
                    styleUrls: ['./avatar.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_AVATAR_OPTIONS]
                }] }]; }, propDecorators: { size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], avatarUrlSetter: [{
                type: Input,
                args: ['avatarUrl']
            }], text: [{
                type: Input
            }], fallback: [{
                type: Input
            }], autoColor: [{
                type: Input
            }], rounded: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._rounded']
            }], bgColor: [{
                type: HostBinding,
                args: ['style.background']
            }], hasAvatar: [{
                type: HostBinding,
                args: ['class._has-avatar']
            }], getSlicedText: [] } });

class TuiAvatarModule {
}
TuiAvatarModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAvatarModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiAvatarModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAvatarModule, declarations: [TuiAvatarComponent], imports: [CommonModule, TuiLazyLoadingModule, TuiSvgModule], exports: [TuiAvatarComponent] });
TuiAvatarModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAvatarModule, imports: [[CommonModule, TuiLazyLoadingModule, TuiSvgModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAvatarModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiLazyLoadingModule, TuiSvgModule],
                    declarations: [TuiAvatarComponent],
                    exports: [TuiAvatarComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_AVATAR_DEFAULT_OPTIONS, TUI_AVATAR_OPTIONS, TuiAvatarComponent, TuiAvatarModule, tuiAvatarOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-avatar.js.map
