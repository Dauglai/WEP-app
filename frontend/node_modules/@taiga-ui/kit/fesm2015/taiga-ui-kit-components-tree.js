import * as i0 from '@angular/core';
import { Directive, Input, forwardRef, Component, ChangeDetectionStrategy, Inject, HostBinding, InjectionToken, SkipSelf, ElementRef, ContentChildren, Optional, ViewChild, EventEmitter, Output, Injectable, NgModule } from '@angular/core';
import { Subject } from 'rxjs';
import { startWith, map, distinctUntilChanged, switchMap, tap } from 'rxjs/operators';
import { __decorate } from 'tslib';
import * as i2$1 from '@taiga-ui/cdk';
import { EMPTY_ARRAY, tuiDefaultProp, ALWAYS_TRUE_HANDLER, EMPTY_FUNCTION, EMPTY_QUERY, tuiIsPresent, TuiLetModule } from '@taiga-ui/cdk';
import * as i2 from '@tinkoff/ng-polymorpheus';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i1 from '@taiga-ui/core';
import { TuiExpandModule, TuiButtonModule } from '@taiga-ui/core';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';

class TuiTreeChildrenDirective {
    constructor() {
        this.childrenHandler = TuiTreeChildrenDirective.defaultHandler;
    }
    static defaultHandler(item) {
        return Array.isArray(item) ? item : EMPTY_ARRAY;
    }
}
TuiTreeChildrenDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeChildrenDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeChildrenDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeChildrenDirective, selector: "tui-tree[childrenHandler]", inputs: { childrenHandler: "childrenHandler" }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiTreeChildrenDirective.prototype, "childrenHandler", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeChildrenDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-tree[childrenHandler]',
                }]
        }], propDecorators: { childrenHandler: [{
                type: Input
            }] } });

class TuiTreeItemContentComponent {
    constructor(context, controller) {
        this.context = context;
        this.controller = controller;
    }
    get isExpanded() {
        return this.context.$implicit.isExpanded;
    }
    get isExpandable() {
        return (this.context.$implicit.isExpandable &&
            this.controller !== TUI_DEFAULT_TREE_CONTROLLER);
    }
    onClick() {
        this.controller.toggle(this.context.$implicit);
    }
}
TuiTreeItemContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemContentComponent, deps: [{ token: POLYMORPHEUS_CONTEXT }, { token: forwardRef(() => TUI_TREE_CONTROLLER) }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeItemContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemContentComponent, selector: "tui-tree-item-content", host: { properties: { "class._expandable": "this.isExpandable" } }, ngImport: i0, template: "<button\n    *ngIf=\"isExpandable\"\n    tuiIconButton\n    size=\"xs\"\n    appearance=\"flat\"\n    icon=\"tuiIconChevronRight\"\n    shape=\"rounded\"\n    type=\"button\"\n    class=\"t-button\"\n    [class.t-button_expanded]=\"isExpanded\"\n    (click)=\"onClick()\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n", styles: [":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree-item-content',
                    templateUrl: './tree-item-content.template.html',
                    styleUrls: ['./tree-item-content.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTROLLER)]
                }] }]; }, propDecorators: { isExpandable: [{
                type: HostBinding,
                args: ['class._expandable']
            }] } });

const TUI_TREE_ITEM_CONTENT = new PolymorpheusComponent(TuiTreeItemContentComponent);
const TUI_DEFAULT_TREE_CONTROLLER = {
    isExpanded: ALWAYS_TRUE_HANDLER,
    toggle: EMPTY_FUNCTION,
};

/**
 * Controller for tracking value - TuiTreeItemComponent pairs
 */
const TUI_TREE_ACCESSOR = new InjectionToken(`[TUI_TREE_ACCESSOR]`);
/**
 * Controller for expanding the tree
 */
const TUI_TREE_CONTROLLER = new InjectionToken(`[TUI_TREE_CONTROLLER]`, {
    factory: () => TUI_DEFAULT_TREE_CONTROLLER,
});
/**
 * A node of a tree view
 */
const TUI_TREE_NODE = new InjectionToken(`[TUI_TREE_NODE]`);
/**
 * A tree node placeholder for loading
 */
const TUI_TREE_LOADING = new InjectionToken(`[TUI_TREE_LOADING]`, {
    factory: () => ({}),
});
/**
 * A tree node starting point
 */
const TUI_TREE_START = new InjectionToken(`[TUI_TREE_START]`);
/**
 * A service to load tree progressively
 */
const TUI_TREE_LOADER = new InjectionToken(`[TUI_TREE_LOADER]`);
/**
 * Content for a tree item
 */
const TUI_TREE_CONTENT = new InjectionToken(`[TUI_TREE_CONTENT]`, {
    factory: () => TUI_TREE_ITEM_CONTENT,
});
/**
 * Nesting level of current TreeView node
 */
const TUI_TREE_LEVEL = new InjectionToken(`[TUI_TREE_LEVEL]`, {
    factory: () => -1,
});

const TUI_TREE_ITEM_PROVIDERS = [
    {
        provide: TUI_TREE_LEVEL,
        deps: [[new SkipSelf(), TUI_TREE_LEVEL]],
        useFactory: (level) => ++level,
    },
    {
        provide: TUI_TREE_NODE,
        useExisting: forwardRef(() => TuiTreeItemComponent),
    },
];

class TuiTreeItemComponent {
    constructor(el, controller, level, content) {
        this.el = el;
        this.controller = controller;
        this.level = level;
        this.content = content;
        this.nested = EMPTY_QUERY;
        this.change$ = new Subject();
        this.expanded$ = this.change$.pipe(startWith(null), map(() => this.isExpanded), distinctUntilChanged());
        this.attached$ = this.change$.pipe(map(() => this.el.nativeElement.isConnected), distinctUntilChanged());
    }
    get isExpandable() {
        return !!this.nested.length;
    }
    get isExpanded() {
        return this.controller.isExpanded(this);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        this.change$.next();
    }
}
TuiTreeItemComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemComponent, deps: [{ token: ElementRef }, { token: forwardRef(() => TUI_TREE_CONTROLLER) }, { token: forwardRef(() => TUI_TREE_LEVEL) }, { token: forwardRef(() => TUI_TREE_CONTENT) }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeItemComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemComponent, selector: "tui-tree-item", host: { attributes: { "role": "treeitem" }, properties: { "class._expandable": "this.isExpandable" } }, providers: TUI_TREE_ITEM_PROVIDERS, queries: [{ propertyName: "nested", predicate: TUI_TREE_NODE }], ngImport: i0, template: "<ng-template #template>\n    <ng-content></ng-content>\n</ng-template>\n<ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: this, template: template}\">\n    {{ text }}\n</ng-container>\n<tui-expand\n    *ngIf=\"isExpandable\"\n    role=\"group\"\n    class=\"t-children\"\n    [expanded]=\"expanded$ | async\"\n>\n    <div>\n        <ng-content select=\"tui-tree-item\"></ng-content>\n        <ng-content select=\"tui-tree\"></ng-content>\n    </div>\n</tui-expand>\n<ng-container *ngIf=\"attached$ | async\"></ng-container>\n", styles: [":host{display:block}.t-children{position:relative;margin-left:var(--tui-tree-item-indent, 1.5rem)}\n"], components: [{ type: i1.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }], directives: [{ type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree-item',
                    templateUrl: './tree-item.template.html',
                    styleUrls: ['./tree-item.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_TREE_ITEM_PROVIDERS,
                    host: {
                        role: 'treeitem',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTROLLER)]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_LEVEL)]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTENT)]
                }] }]; }, propDecorators: { nested: [{
                type: ContentChildren,
                args: [TUI_TREE_NODE]
            }], isExpandable: [{
                type: HostBinding,
                args: ['class._expandable']
            }] } });

class TuiTreeNodeDirective {
    constructor(directive, component) {
        this.directive = directive;
        this.component = component;
    }
    set value(value) {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);
    }
    ngOnDestroy() {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);
    }
}
TuiTreeNodeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeNodeDirective, deps: [{ token: TUI_TREE_ACCESSOR, optional: true }, { token: TuiTreeItemComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeNodeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: { value: ["tuiTreeNode", "value"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeNodeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-tree-item[tuiTreeNode]',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_TREE_ACCESSOR]
                }] }, { type: TuiTreeItemComponent, decorators: [{
                    type: Inject,
                    args: [TuiTreeItemComponent]
                }] }]; }, propDecorators: { value: [{
                type: Input,
                args: ['tuiTreeNode']
            }] } });

class TuiTreeComponent {
    constructor(directive) {
        this.directive = directive;
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
        this.content = ({ $implicit }) => String($implicit);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        var _a, _b;
        this.check$.next();
        (_a = this.item) === null || _a === void 0 ? void 0 : _a.checkChanges();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.checkChanges();
    }
    get handler() {
        var _a;
        return ((_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) || TuiTreeChildrenDirective.defaultHandler;
    }
}
TuiTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeComponent, deps: [{ token: TuiTreeChildrenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeComponent, selector: "tui-tree[value]", inputs: { value: "value", content: "content" }, host: { attributes: { "role": "tree" } }, providers: [
        {
            provide: TUI_TREE_NODE,
            useExisting: TuiTreeComponent,
        },
    ], viewQueries: [{ propertyName: "item", first: true, predicate: TuiTreeItemComponent, descendants: true }, { propertyName: "child", first: true, predicate: TuiTreeComponent, descendants: true }], ngImport: i0, template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <ng-container *ngIf=\"$any(value) !== children\">\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: value, node: view}\">\n            {{ text }}\n        </ng-container>\n    </ng-container>\n    <tui-tree\n        *ngFor=\"let child of children\"\n        [value]=\"child\"\n        [content]=\"content\"\n    ></tui-tree>\n</tui-tree-item>\n", styles: [":host{position:relative;display:block}\n"], components: [{ type: TuiTreeItemComponent, selector: "tui-tree-item" }, { type: TuiTreeComponent, selector: "tui-tree[value]", inputs: ["value", "content"] }], directives: [{ type: i2$1.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: ["tuiTreeNode"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree[value]',
                    templateUrl: './tree.template.html',
                    styleUrls: ['./tree.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: TUI_TREE_NODE,
                            useExisting: TuiTreeComponent,
                        },
                    ],
                    host: {
                        role: 'tree',
                    },
                }]
        }], ctorParameters: function () { return [{ type: TuiTreeChildrenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiTreeChildrenDirective]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], item: [{
                type: ViewChild,
                args: [TuiTreeItemComponent]
            }], child: [{
                type: ViewChild,
                args: [TuiTreeComponent]
            }], content: [{
                type: Input
            }] } });

class TuiTreeControllerDirective {
    constructor() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    register(item, value) {
        this.items.set(item, value);
    }
    unregister(item) {
        this.items.delete(item);
    }
    isExpanded(item) {
        var _a;
        const value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        const value = this.items.get(item);
        const expanded = this.isExpanded(item);
        if (!tuiIsPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    }
}
TuiTreeControllerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeControllerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeControllerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeControllerDirective, selector: "[tuiTreeController][map]", inputs: { fallback: ["tuiTreeController", "fallback"], map: "map" }, outputs: { toggled: "toggled" }, providers: [
        {
            provide: TUI_TREE_ACCESSOR,
            useExisting: TuiTreeControllerDirective,
        },
        {
            provide: TUI_TREE_CONTROLLER,
            useExisting: TuiTreeControllerDirective,
        },
    ], exportAs: ["tuiTreeController"], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "fallback", void 0);
__decorate([
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "map", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeControllerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTreeController][map]',
                    exportAs: 'tuiTreeController',
                    providers: [
                        {
                            provide: TUI_TREE_ACCESSOR,
                            useExisting: TuiTreeControllerDirective,
                        },
                        {
                            provide: TUI_TREE_CONTROLLER,
                            useExisting: TuiTreeControllerDirective,
                        },
                    ],
                }]
        }], propDecorators: { fallback: [{
                type: Input,
                args: ['tuiTreeController']
            }], map: [{
                type: Input
            }], toggled: [{
                type: Output
            }] } });

class TuiTreeItemControllerDirective {
    constructor() {
        this.map = new WeakMap();
        this.fallback = true;
    }
    isExpanded(item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        this.map.set(item, !this.isExpanded(item));
    }
}
TuiTreeItemControllerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemControllerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeItemControllerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemControllerDirective, selector: "[tuiTreeController]:not([map])", inputs: { fallback: ["tuiTreeController", "fallback"] }, providers: [
        {
            provide: TUI_TREE_CONTROLLER,
            useExisting: TuiTreeItemControllerDirective,
        },
    ], exportAs: ["tuiTreeController"], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiTreeItemControllerDirective.prototype, "fallback", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemControllerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTreeController]:not([map])',
                    exportAs: 'tuiTreeController',
                    providers: [
                        {
                            provide: TUI_TREE_CONTROLLER,
                            useExisting: TuiTreeItemControllerDirective,
                        },
                    ],
                }]
        }], propDecorators: { fallback: [{
                type: Input,
                args: ['tuiTreeController']
            }] } });

class TuiTreeService {
    constructor(loading, start, loader) {
        this.loading = loading;
        this.start = start;
        this.loader = loader;
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap(item => this.loader.loadChildren(item).pipe(tap(children => this.map.set(item, children)), map(children => children.filter(item => !this.loader.hasChildren(item))), tap(children => children.forEach(child => this.map.set(child, []))))), startWith(null), map(() => this.start));
    }
    getChildren(item) {
        return this.map.get(item) || [this.loading];
    }
    loadChildren(item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    }
}
TuiTreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeService, deps: [{ token: TUI_TREE_LOADING }, { token: TUI_TREE_START }, { token: TUI_TREE_LOADER }], target: i0.ɵɵFactoryTarget.Injectable });
TuiTreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TREE_LOADING]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TREE_START]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TREE_LOADER]
                }] }]; } });

class TuiTreeModule {
}
TuiTreeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTreeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeModule, declarations: [TuiTreeComponent,
        TuiTreeItemComponent,
        TuiTreeItemContentComponent,
        TuiTreeChildrenDirective,
        TuiTreeItemControllerDirective,
        TuiTreeControllerDirective,
        TuiTreeNodeDirective], imports: [CommonModule,
        PolymorpheusModule,
        TuiExpandModule,
        TuiLetModule,
        TuiButtonModule], exports: [TuiTreeComponent,
        TuiTreeItemComponent,
        TuiTreeChildrenDirective,
        TuiTreeItemControllerDirective,
        TuiTreeControllerDirective] });
TuiTreeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiExpandModule,
            TuiLetModule,
            TuiButtonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiExpandModule,
                        TuiLetModule,
                        TuiButtonModule,
                    ],
                    declarations: [
                        TuiTreeComponent,
                        TuiTreeItemComponent,
                        TuiTreeItemContentComponent,
                        TuiTreeChildrenDirective,
                        TuiTreeItemControllerDirective,
                        TuiTreeControllerDirective,
                        TuiTreeNodeDirective,
                    ],
                    exports: [
                        TuiTreeComponent,
                        TuiTreeItemComponent,
                        TuiTreeChildrenDirective,
                        TuiTreeItemControllerDirective,
                        TuiTreeControllerDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_DEFAULT_TREE_CONTROLLER, TUI_TREE_ACCESSOR, TUI_TREE_CONTENT, TUI_TREE_CONTROLLER, TUI_TREE_ITEM_CONTENT, TUI_TREE_ITEM_PROVIDERS, TUI_TREE_LEVEL, TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_NODE, TUI_TREE_START, TuiTreeChildrenDirective, TuiTreeComponent, TuiTreeControllerDirective, TuiTreeItemComponent, TuiTreeItemContentComponent, TuiTreeItemControllerDirective, TuiTreeModule, TuiTreeNodeDirective, TuiTreeService };
//# sourceMappingURL=taiga-ui-kit-components-tree.js.map
