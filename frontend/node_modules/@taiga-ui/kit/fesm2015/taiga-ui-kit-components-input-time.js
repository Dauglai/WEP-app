import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, Component, ChangeDetectionStrategy, Inject, ChangeDetectorRef, Optional, Self, ViewChild, Input, HostListener, Directive, NgModule } from '@angular/core';
import * as i6 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i2 from '@taiga-ui/cdk';
import { TuiIdService, AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, tuiIsNativeFocused, TuiTime, TUI_STRICT_MATCHER, tuiIsElement, tuiIsInput, TUI_IS_MOBILE, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_TEXTFIELD_HOST, TUI_TEXTFIELD_SIZE, tuiAsDataListHost, tuiAsOptionContent, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiDataListModule, TuiWrapperModule, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiSvgModule } from '@taiga-ui/core';
import { TUI_SELECT_OPTION, TuiSelectOptionModule } from '@taiga-ui/kit/components/select-option';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_TIME_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiCreateTimeMask, tuiCreateAutoCorrectedTimePipe } from '@taiga-ui/kit/utils/mask';
import { map } from 'rxjs/operators';
import { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@taiga-ui/kit/directives';
import { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import * as i5 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i7 from 'rxjs';

const TUI_INPUT_TIME_DEFAULT_OPTIONS = {
    icon: ({ $implicit }) => ($implicit === `s` ? `tuiIconClock` : `tuiIconClockLarge`),
    mode: `HH:MM`,
    postfix: ``,
    maxValues: MAX_TIME_VALUES,
    itemSize: `m`,
    nativePicker: false,
};
/**
 * Default parameters for InputTime component
 */
const TUI_INPUT_TIME_OPTIONS = new InjectionToken(`[TUI_INPUT_TIME_OPTIONS]`, {
    factory: () => TUI_INPUT_TIME_DEFAULT_OPTIONS,
});
const tuiInputTimeOptionsProvider = (options) => ({
    provide: TUI_INPUT_TIME_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_INPUT_TIME_DEFAULT_OPTIONS), options),
});

class TuiNativeTimeComponent {
    constructor(host, idService) {
        this.host = host;
        this.autoIdString = idService.generate();
    }
    get items() {
        return this.host.items.map(item => item.toString(this.host.mode));
    }
    get value() {
        return this.host.value.length === this.host.mode.length ? this.host.value : '';
    }
    get step() {
        switch (this.host.mode) {
            case 'HH:MM:SS':
                return 1;
            case 'HH:MM:SS.MSS':
                return 0.001;
            default:
                return 60;
        }
    }
    onChange(value) {
        this.host.onValueChange(value);
    }
}
TuiNativeTimeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeTimeComponent, deps: [{ token: TUI_TEXTFIELD_HOST }, { token: TuiIdService }], target: i0.ɵɵFactoryTarget.Component });
TuiNativeTimeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeTimeComponent, selector: "input[tuiTime]", host: { attributes: { "type": "time" }, listeners: { "change.stop": "onChange($event.target.value)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.list": "autoIdString", "tabIndex": "-1", "value": "value", "step": "step" } }, ngImport: i0, template: `
        <datalist
            *ngIf="items.length"
            [id]="autoIdString"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `, isInline: true, styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], directives: [{ type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeTimeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[tuiTime]',
                    template: `
        <datalist
            *ngIf="items.length"
            [id]="autoIdString"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `,
                    host: {
                        type: 'time',
                        '[attr.list]': 'autoIdString',
                        '[tabIndex]': '-1',
                        '[value]': 'value',
                        '[step]': 'step',
                        '(change.stop)': 'onChange($event.target.value)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    },
                    styleUrls: ['./native-time.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_HOST]
                }] }, { type: i2.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }]; } });

class TuiInputTimeComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, timeTexts$, options, isMobile, textfieldSize, isIos) {
        super(control, cdr);
        this.timeTexts$ = timeTexts$;
        this.options = options;
        this.isMobile = isMobile;
        this.textfieldSize = textfieldSize;
        this.isIos = isIos;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.items = [];
        this.itemSize = this.options.itemSize;
        this.strict = false;
        this.mode = this.options.mode;
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.postfix = this.options.postfix;
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get canOpen() {
        return this.interactive && !!this.filtered.length;
    }
    get filtered() {
        return this.filter(this.items, this.mode, this.computedSearch);
    }
    get showNativePicker() {
        return (this.nativePicker &&
            (!this.isIos || (this.mode === 'HH:MM' && !this.items.length)));
    }
    get nativeDatalist() {
        return this.nativePicker && !this.isIos;
    }
    get size() {
        return this.textfieldSize.size;
    }
    get textMaskOptions() {
        return this.calculateMask(this.mode);
    }
    get computedValue() {
        return this.value ? this.value.toString(this.mode) : this.nativeValue;
    }
    get computedSearch() {
        return this.computedValue.length !== this.mode.length ? this.computedValue : '';
    }
    get innerPseudoFocused() {
        if (this.pseudoFocus === false) {
            return false;
        }
        if ((this.open && this.canOpen) || this.computedFocused) {
            return true;
        }
        return null;
    }
    get icon() {
        return this.options.icon;
    }
    get nativeValue() {
        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    getFiller$(mode) {
        return this.timeTexts$.pipe(map(texts => texts[mode]));
    }
    onClick() {
        this.open = !this.open;
    }
    onValueChange(value) {
        this.open = !!this.items.length;
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        const match = this.getMatch(value);
        if (match !== undefined) {
            this.value = match;
            return;
        }
        if (value.length !== this.mode.length) {
            this.value = null;
            return;
        }
        const time = TuiTime.fromString(value);
        this.value = this.strict ? this.findNearestTimeFromItems(time) : time;
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused ||
            this.value !== null ||
            this.nativeValue === '' ||
            this.mode === 'HH:MM') {
            return;
        }
        this.value = TuiTime.fromString(this.nativeValue);
        setTimeout(() => {
            if (this.nativeValue.endsWith('.') || this.nativeValue.endsWith(':')) {
                this.nativeValue = this.nativeValue.slice(0, -1);
            }
        });
    }
    onArrowUp(event) {
        if (this.items.length) {
            return;
        }
        this.processArrow(event, 1);
    }
    onArrowDown(event) {
        if (this.items.length) {
            return;
        }
        this.processArrow(event, -1);
    }
    handleOption(item) {
        this.focusInput();
        this.value = item;
    }
    onOpen(open) {
        this.open = open;
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = value ? this.computedValue : '';
    }
    get nativePicker() {
        return !!this.options.nativePicker && this.isMobile;
    }
    calculateMask(mode) {
        return {
            mask: tuiCreateTimeMask(mode, this.options.maxValues),
            pipe: tuiCreateAutoCorrectedTimePipe(mode, this.options.maxValues),
            guide: false,
        };
    }
    filter(items, mode, search) {
        return items.filter(item => item.toString(mode).includes(search));
    }
    findNearestTimeFromItems(value) {
        return this.items.reduce((previous, current) => Math.abs(current.toAbsoluteMilliseconds() - value.toAbsoluteMilliseconds()) <
            Math.abs(previous.toAbsoluteMilliseconds() - value.toAbsoluteMilliseconds())
            ? current
            : previous);
    }
    getMatch(value) {
        return this.items.find(item => TUI_STRICT_MATCHER(item, value));
    }
    close() {
        this.open = false;
    }
    processArrow(event, shift) {
        const { target } = event;
        if (this.readOnly || !tuiIsElement(target) || !tuiIsInput(target)) {
            return;
        }
        const selectionStart = target.selectionStart || 0;
        this.shiftTime(this.calculateShift(selectionStart, shift));
        target.setSelectionRange(selectionStart, selectionStart);
        event.preventDefault();
    }
    calculateShift(selectionStart, shift) {
        if (selectionStart <= 2) {
            return { hours: shift };
        }
        if (selectionStart <= 5) {
            return { minutes: shift };
        }
        if (selectionStart <= 8) {
            return { seconds: shift };
        }
        return { ms: shift };
    }
    shiftTime(shift) {
        if (this.value === null) {
            return;
        }
        const increasedTime = this.value.shift(shift);
        // Manual update so we can set caret position properly
        this.nativeValue = increasedTime.toString(this.mode);
        this.value = increasedTime;
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
            this.close();
        }
    }
}
TuiInputTimeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TIME_TEXTS }, { token: TUI_INPUT_TIME_OPTIONS }, { token: TUI_IS_MOBILE }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_IS_IOS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputTimeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputTimeComponent, selector: "tui-input-time", inputs: { disabledItemHandler: "disabledItemHandler", items: "items", itemSize: "itemSize", strict: "strict", mode: "mode", postfix: "postfix" }, host: { listeners: { "click": "onClick()" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputTimeComponent),
        tuiAsControl(TuiInputTimeComponent),
        tuiAsDataListHost(TuiInputTimeComponent),
        tuiAsOptionContent(TUI_SELECT_OPTION),
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-wrapper\"\n    [canOpen]=\"canOpen && !nativeDatalist\"\n    [content]=\"dropdownContent\"\n    [open]=\"canOpen && open\"\n    (openChange)=\"onOpen($event)\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [tuiTextfieldFiller]=\"(getFiller$(mode) | async) || ''\"\n        [nativeId]=\"nativeId\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoActive]=\"pseudoActive\"\n        [invalid]=\"computedInvalid\"\n        [focusable]=\"focusable\"\n        [disabled]=\"disabled\"\n        [readOnly]=\"readOnly\"\n        [textMask]=\"textMaskOptions\"\n        [tuiTextfieldIcon]=\"iconContent\"\n        [value]=\"computedValue\"\n        [postfix]=\"postfix\"\n        (valueChange)=\"onValueChange($event)\"\n        (keydown.arrowUp)=\"onArrowUp($event)\"\n        (keydown.arrowDown)=\"onArrowDown($event)\"\n    >\n        <ng-content></ng-content>\n        <input\n            tuiTextfield\n            inputmode=\"numeric\"\n        />\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n<ng-template #dropdownContent>\n    <tui-data-list\n        automation-id=\"tui-input-time__dropdown\"\n        [size]=\"itemSize\"\n    >\n        <button\n            *ngFor=\"let item of filtered\"\n            tuiOption\n            automation-id=\"tui-input-time__item\"\n            [disabled]=\"disabledItemHandler(item)\"\n            [value]=\"item\"\n        >\n            {{ item }}\n        </button>\n    </tui-data-list>\n</ng-template>\n\n<ng-template #iconContent>\n    <tui-svg\n        *polymorpheusOutlet=\"icon as src; context: {$implicit: size}\"\n        tuiWrapper\n        appearance=\"icon\"\n        [src]=\"src\"\n    ></tui-svg>\n    <input\n        *ngIf=\"showNativePicker\"\n        tuiTime\n    />\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-wrapper{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }, { type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: TuiNativeTimeComponent, selector: "input[tuiTime]" }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i3.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i3.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i4.AsyncPipe }, viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputTimeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputTimeComponent.prototype, "items", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputTimeComponent.prototype, "itemSize", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputTimeComponent.prototype, "strict", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputTimeComponent.prototype, "mode", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputTimeComponent.prototype, "postfix", void 0);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "getFiller$", null);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "calculateMask", null);
__decorate([
    tuiPure
], TuiInputTimeComponent.prototype, "filter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-time',
                    templateUrl: './input-time.template.html',
                    styleUrls: ['./input-time.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputTimeComponent),
                        tuiAsControl(TuiInputTimeComponent),
                        tuiAsDataListHost(TuiInputTimeComponent),
                        tuiAsOptionContent(TUI_SELECT_OPTION),
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i6.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i7.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TIME_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_TIME_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], disabledItemHandler: [{
                type: Input
            }], items: [{
                type: Input
            }], itemSize: [{
                type: Input
            }], strict: [{
                type: Input
            }], mode: [{
                type: Input
            }], postfix: [{
                type: Input
            }], getFiller$: [], onClick: [{
                type: HostListener,
                args: ['click']
            }], calculateMask: [], filter: [] } });

class TuiInputTimeDirective extends AbstractTuiTextfieldHost {
    get value() {
        return this.host.computedValue;
    }
    get mode() {
        return this.host.mode;
    }
    get items() {
        return this.host.items;
    }
    onValueChange(value) {
        if (!value) {
            this.host.nativeValue = '';
        }
        this.host.onValueChange(value);
    }
    process(input) {
        input.inputMode = 'numeric';
    }
}
TuiInputTimeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputTimeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputTimeDirective, selector: "tui-input-time", providers: [tuiAsTextfieldHost(TuiInputTimeDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-time',
                    providers: [tuiAsTextfieldHost(TuiInputTimeDirective)],
                }]
        }] });

class TuiInputTimeModule {
}
TuiInputTimeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputTimeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeModule, declarations: [TuiInputTimeComponent, TuiNativeTimeComponent, TuiInputTimeDirective], imports: [CommonModule,
        TextMaskModule,
        TuiSelectOptionModule,
        TuiDataListModule,
        TuiWrapperModule,
        TuiHostedDropdownModule,
        TuiPrimitiveTextfieldModule,
        TuiValueAccessorModule,
        TuiTextfieldControllerModule,
        TuiSvgModule,
        PolymorpheusModule], exports: [TuiInputTimeComponent, TuiInputTimeDirective] });
TuiInputTimeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeModule, imports: [[
            CommonModule,
            TextMaskModule,
            TuiSelectOptionModule,
            TuiDataListModule,
            TuiWrapperModule,
            TuiHostedDropdownModule,
            TuiPrimitiveTextfieldModule,
            TuiValueAccessorModule,
            TuiTextfieldControllerModule,
            TuiSvgModule,
            PolymorpheusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputTimeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TextMaskModule,
                        TuiSelectOptionModule,
                        TuiDataListModule,
                        TuiWrapperModule,
                        TuiHostedDropdownModule,
                        TuiPrimitiveTextfieldModule,
                        TuiValueAccessorModule,
                        TuiTextfieldControllerModule,
                        TuiSvgModule,
                        PolymorpheusModule,
                    ],
                    declarations: [TuiInputTimeComponent, TuiNativeTimeComponent, TuiInputTimeDirective],
                    exports: [TuiInputTimeComponent, TuiInputTimeDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_TIME_DEFAULT_OPTIONS, TUI_INPUT_TIME_OPTIONS, TuiInputTimeComponent, TuiInputTimeDirective, TuiInputTimeModule, tuiInputTimeOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-time.js.map
