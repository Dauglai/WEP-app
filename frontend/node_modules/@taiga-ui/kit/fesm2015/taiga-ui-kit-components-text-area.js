import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, ContentChild, Input, HostBinding, HostListener, Directive, NgModule } from '@angular/core';
import * as i3 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import * as i4 from '@taiga-ui/cdk';
import { AbstractTuiControl, tuiIsNativeFocused, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, TuiFocusableModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { tuiGetBorder, TUI_MODE, TUI_TEXTFIELD_WATCHED_CONTROLLER, TuiHintOptionsDirective, TEXTFIELD_CONTROLLER_PROVIDER, MODE_PROVIDER, TuiTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiScrollbarModule, TuiTooltipModule, TuiWrapperModule, TuiSvgModule, TuiPrimitiveTextfieldModule } from '@taiga-ui/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i6 from 'rxjs';

const DEFAULT_ROWS = 20;
const LINE_HEIGHT_M = 20;
const LINE_HEIGHT_L = 24;
class TuiTextAreaComponent extends AbstractTuiControl {
    constructor(control, cdr, isIOS, mode$, controller, hintOptions) {
        super(control, cdr);
        this.isIOS = isIOS;
        this.mode$ = mode$;
        this.controller = controller;
        this.hintOptions = hintOptions;
        this.rows = DEFAULT_ROWS;
        this.maxLength = null;
        this.expandable = false;
    }
    get labelOutside() {
        return this.controller.labelOutside;
    }
    get nativeFocusableElement() {
        var _a, _b;
        if (this.computedDisabled) {
            return null;
        }
        return (((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeElement) || ((_b = this.focusableElement) === null || _b === void 0 ? void 0 : _b.nativeElement) || null);
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get appearance() {
        return this.controller.appearance;
    }
    get size() {
        return this.controller.size;
    }
    get border() {
        return tuiGetBorder(false, this.hasCleaner, this.hasTooltip);
    }
    get hasCleaner() {
        return this.controller.cleaner && this.hasValue && this.interactive;
    }
    get hasTooltip() {
        var _a;
        return !!((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.content) && !this.computedDisabled;
    }
    get hasValue() {
        return this.value !== '';
    }
    get hasCounter() {
        return !!this.maxLength && this.interactive;
    }
    get hasPlaceholder() {
        return this.placeholderRaisable || (!this.hasValue && !this.hasExampleText);
    }
    get iconCleaner() {
        return this.controller.options.iconCleaner;
    }
    get hasExampleText() {
        var _a;
        return (!!((_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeElement.placeholder) &&
            this.focused &&
            !this.hasValue &&
            !this.readOnly);
    }
    get computeMaxHeight() {
        return this.expandable ? this.rows * this.lineHeight : null;
    }
    get placeholderRaised() {
        return (this.placeholderRaisable &&
            ((this.computedFocused && !this.readOnly) || this.hasValue));
    }
    get fittedContent() {
        return this.value.slice(0, this.maxLength || Infinity);
    }
    get extraContent() {
        return this.value.slice(this.maxLength || Infinity);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onValueChange(value) {
        this.value = value;
    }
    onMouseDown(event) {
        if (event.target === this.nativeFocusableElement) {
            return;
        }
        event.preventDefault();
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus();
        }
    }
    getFallbackValue() {
        return '';
    }
    get lineHeight() {
        return this.controller.size === 'm' ? LINE_HEIGHT_M : LINE_HEIGHT_L;
    }
    get placeholderRaisable() {
        return this.size !== 's' && !this.controller.labelOutside;
    }
}
TuiTextAreaComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_IOS }, { token: TUI_MODE }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }, { token: TuiHintOptionsDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiTextAreaComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextAreaComponent, selector: "tui-text-area", inputs: { rows: "rows", maxLength: "maxLength", expandable: "expandable" }, host: { listeners: { "$.data-mode.attr": "mode$", "focusin": "onFocused(true)", "focusout": "onFocused(false)" }, properties: { "class._ios": "isIOS", "class._expandable": "this.expandable", "class._label-outside": "this.labelOutside", "attr.data-size": "this.size", "style.--border-end.rem": "this.border", "class._has-tooltip": "this.hasTooltip", "class._has-value": "this.hasValue", "class._has-counter": "this.hasCounter" } }, providers: [
        tuiAsFocusableItemAccessor(TuiTextAreaComponent),
        tuiAsControl(TuiTextAreaComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
        MODE_PROVIDER,
    ], queries: [{ propertyName: "textfield", first: true, predicate: TuiTextfieldComponent, descendants: true, read: ElementRef }], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"hintOptions?.change$ | async\"></ng-container>\n<div\n    tuiWrapper\n    automation-id=\"tui-text-area__wrapper\"\n    class=\"t-outline\"\n    [appearance]=\"appearance\"\n    [disabled]=\"disabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover\"\n    [readOnly]=\"readOnly\"\n    [invalid]=\"computedInvalid\"\n>\n    <div\n        *ngIf=\"hasCounter\"\n        automation-id=\"tui-text-area__counter\"\n        class=\"t-counter\"\n    >\n        {{ value.length }}/{{ maxLength }}\n    </div>\n\n    <label\n        class=\"t-content\"\n        (mousedown)=\"onMouseDown($event)\"\n    >\n        <div class=\"t-wrapper\">\n            <div\n                *ngIf=\"hasPlaceholder\"\n                automation-id=\"tui-text-area__placeholder\"\n                class=\"t-placeholder\"\n                [class.t-placeholder_raised]=\"placeholderRaised\"\n            >\n                <ng-content></ng-content>\n            </div>\n            <tui-scrollbar\n                automation-id=\"tui-text-area__scrollbar\"\n                class=\"t-box\"\n                [style.maxHeight.px]=\"computeMaxHeight\"\n            >\n                <div class=\"t-input-wrapper\">\n                    <div class=\"t-relative\">\n                        <div\n                            aria-hidden=\"true\"\n                            class=\"t-pseudo-content\"\n                        >\n                            <span [textContent]=\"fittedContent || nativeFocusableElement?.placeholder\"></span>\n                            <span\n                                class=\"t-pseudo-content__extra\"\n                                [textContent]=\"extraContent\"\n                            ></span>\n                            &nbsp;\n                        </div>\n                        <textarea\n                            #focusableElement\n                            automation-id=\"tui-text-area__native\"\n                            class=\"t-input\"\n                            [id]=\"id\"\n                            [tuiFocusable]=\"computedFocusable\"\n                            [disabled]=\"computedDisabled\"\n                            [readOnly]=\"readOnly\"\n                            [(ngModel)]=\"value\"\n                        ></textarea>\n                        <ng-content select=\"textarea\"></ng-content>\n                    </div>\n                </div>\n            </tui-scrollbar>\n        </div>\n        <div class=\"t-icons\">\n            <ng-container *ngIf=\"hasCleaner\">\n                <tui-svg\n                    *polymorpheusOutlet=\"iconCleaner as src; context: {$implicit: size}\"\n                    tuiWrapper\n                    appearance=\"icon\"\n                    class=\"t-cleaner\"\n                    [src]=\"src\"\n                    (click.stop)=\"onValueChange('')\"\n                ></tui-svg>\n            </ng-container>\n            <tui-tooltip\n                *ngIf=\"hintOptions && hintOptions.content && !computedDisabled\"\n                automation-id=\"tui-text-area__tooltip\"\n                class=\"t-tooltip\"\n                [describeId]=\"id\"\n                [direction]=\"hintOptions.direction\"\n                [appearance]=\"hintOptions.appearance\"\n                [content]=\"hintOptions.content\"\n                [showDelay]=\"hintOptions.showDelay\"\n                [hideDelay]=\"hintOptions.hideDelay\"\n            ></tui-tooltip>\n        </div>\n    </label>\n</div>\n", styles: [":host{position:relative;z-index:0;display:flex;font:var(--tui-font-text-m);flex-direction:column;min-height:var(--tui-textarea-height, 6.75rem);border-radius:var(--tui-radius-m);color:var(--tui-text-01)}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-size=s]{--tui-textarea-height: 4.5625rem;font:var(--tui-font-text-s)}:host[data-size=m]{--tui-textarea-height: 5.5rem;font:var(--tui-font-text-s)}:host[data-size=m]._has-counter{--tui-textarea-height: 6.625rem}:host[data-size=l]._has-counter{--tui-textarea-height: 7.875rem}.t-outline{min-height:inherit}.t-content{display:block;margin-top:0;margin-bottom:0;min-height:inherit;box-sizing:border-box;overflow:hidden;cursor:text}:host._disabled .t-content{cursor:auto;opacity:var(--tui-disabled-opacity)}:host:not(._expandable) .t-content{position:absolute;top:0;left:0;bottom:1px;right:0;min-height:auto}:host._has-counter:not(._expandable) .t-content{bottom:1.6875rem}.t-wrapper{position:relative;width:100%;height:100%;min-height:inherit;padding-bottom:.4375rem;box-sizing:border-box}:host[data-size=s] .t-wrapper{padding-top:.375rem}:host[data-size=m]._label-outside .t-wrapper{padding-top:.75rem}:host[data-size=l]._label-outside .t-wrapper{padding-top:1rem}:host[data-size=m]:not(._label-outside) .t-wrapper{padding-top:1.25rem}:host[data-size=l]:not(._label-outside) .t-wrapper{padding-top:1.625rem}:host-context(table)[data-size=m]._label-outside .t-wrapper{padding-bottom:.75rem}:host-context(table)[data-size=l]._label-outside .t-wrapper{padding-bottom:1rem}.t-input-wrapper{min-height:inherit;width:100%;flex:1}.t-relative{position:relative;min-height:inherit}.t-box{display:flex;min-height:100%;width:100%}:host:not(._expandable) .t-box{height:100%}:host._has-counter._expandable .t-box{margin-bottom:1.25rem}.t-pseudo-content{white-space:pre-wrap;word-wrap:break-word;pointer-events:none;color:transparent;overflow:hidden;border:solid transparent;border-width:0 var(--border-end, 0) 0 var(--border-start, 0);border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0)}:host[data-size=m] .t-pseudo-content{padding:0 .75rem}:host[data-size=l] .t-pseudo-content{padding:0 1rem}.t-pseudo-content__extra{background-color:var(--tui-error-bg-night)}.t-input{padding:0;margin:0;border:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;resize:none;overflow:hidden;outline:none;border:solid transparent;border-width:0 var(--border-end, 0) 0 var(--border-start, 0);border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0)}.t-input:-webkit-autofill,.t-input:-webkit-autofill:hover,.t-input:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}.t-input:not(:last-of-type){display:none}.t-input::placeholder{color:var(--tui-text-03);opacity:0}:host[data-mode=onDark] .t-input::placeholder{color:var(--tui-text-03-night)}:host._focused .t-input:not(:-moz-read-only)::placeholder{opacity:1}:host._focused .t-input:not(:read-only)::placeholder{opacity:1}:host[data-size=m] .t-input{padding:0 .75rem}:host[data-size=l] .t-input{padding:0 1rem}:host[data-mode=onDark]._disabled .t-input{color:var(--tui-text-03-night)}@supports (-webkit-marquee-repetition: infinite) and (object-fit: fill){:host._ios .t-input{padding-left:.8125rem}}.t-placeholder{transition-property:transform,font-size,color,letter-spacing;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;font:var(--tui-font-text-s);color:var(--tui-text-01);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;width:100%;-webkit-user-select:none;-moz-user-select:none;user-select:none;color:var(--tui-text-02);pointer-events:none;will-change:transform;transform:translateY(0);position:absolute;left:0;max-width:100%;padding:0 1rem;border:solid transparent;border-width:0 var(--border-end, 0) 0 var(--border-start, 0);border-inline-start-width:var(--border-start, 0);border-inline-end-width:var(--border-end, 0);box-sizing:border-box}.t-placeholder_raised{transform:translateY(-.625rem)}:host[data-size=m] .t-placeholder_raised{font:var(--tui-font-text-xs);transform:translateY(-.5rem);letter-spacing:.025rem}:host._invalid:not(._focused) .t-placeholder_raised,:host._invalid:not(._focused):hover .t-placeholder_raised{color:var(--tui-error-fill)}:host[data-mode=onDark]._invalid:not(._focused) .t-placeholder_raised,:host[data-mode=onDark]._invalid:not(._focused):hover .t-placeholder_raised{color:var(--tui-error-fill-night)}:host._focused .t-placeholder,:host[data-size=m]._focused._label-outside .t-placeholder,:host[data-size=l]._focused._label-outside .t-placeholder{color:var(--tui-text-03)}:host[data-size=l] .t-placeholder{font-size:.9375rem}:host[data-size=l] .t-placeholder_raised{font-size:.8156rem}:host[data-size=m]._focused:not(._label-outside) .t-placeholder,:host[data-size=l]._focused:not(._label-outside) .t-placeholder{color:var(--tui-text-01)}:host[data-mode=onDark] .t-placeholder{color:var(--tui-text-02-night)}:host[data-size=m][data-mode=onDark]._focused:not(._label-outside) .t-placeholder,:host[data-size=l][data-mode=onDark]._focused:not(._label-outside) .t-placeholder{color:var(--tui-text-01-night)}:host[data-mode=onDark]._focused .t-placeholder,:host[data-size=m][data-mode=onDark]._focused._label-outside .t-placeholder,:host[data-size=l][data-mode=onDark]._focused._label-outside .t-placeholder{color:var(--tui-text-02-night)}@supports (-webkit-hyphens: none){.t-placeholder{will-change:unset;transition-property:transform,color,letter-spacing}}:host[data-size=s] .t-placeholder{top:.375rem;padding:0 .75rem}:host[data-size=m] .t-placeholder{top:.75rem;padding:0 .75rem}:host[data-size=l] .t-placeholder{top:1.12rem}:host._label-outside .t-placeholder{overflow:initial;height:auto;white-space:initial}.t-icons{position:absolute;top:0;left:0;bottom:0;right:0;display:flex;justify-content:flex-end;pointer-events:none;padding:1rem .75rem}:host[data-size=m] .t-icons{padding:.75rem}.t-cleaner{position:relative;display:flex;width:1.5rem;height:1.5rem;margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer;pointer-events:auto}:host._readonly .t-cleaner,:host._disabled .t-cleaner{pointer-events:none}.t-tooltip{pointer-events:auto;margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0}.t-counter{position:absolute;right:.75rem;bottom:.5rem;font:var(--tui-font-text-s);pointer-events:none;margin-top:auto;text-align:right;color:var(--tui-text-03)}:host[data-mode=onDark] .t-counter{color:var(--tui-text-03-night)}\n"], components: [{ type: i1.TuiScrollbarComponent, selector: "tui-scrollbar", inputs: ["hidden"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i1.TuiTooltipComponent, selector: "tui-tooltip", inputs: ["content", "direction", "appearance", "showDelay", "hideDelay", "describeId"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i4.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTextAreaComponent.prototype, "rows", void 0);
__decorate([
    tuiDefaultProp()
], TuiTextAreaComponent.prototype, "maxLength", void 0);
__decorate([
    tuiDefaultProp()
], TuiTextAreaComponent.prototype, "expandable", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-text-area',
                    templateUrl: './text-area.template.html',
                    styleUrls: ['./text-area.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiTextAreaComponent),
                        tuiAsControl(TuiTextAreaComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                        MODE_PROVIDER,
                    ],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                        '[class._ios]': 'isIOS',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }, { type: i6.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: i1.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }, { type: i1.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], textfield: [{
                type: ContentChild,
                args: [TuiTextfieldComponent, { read: ElementRef }]
            }], rows: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], expandable: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._expandable']
            }], labelOutside: [{
                type: HostBinding,
                args: ['class._label-outside']
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }], border: [{
                type: HostBinding,
                args: ['style.--border-end.rem']
            }], hasTooltip: [{
                type: HostBinding,
                args: ['class._has-tooltip']
            }], hasValue: [{
                type: HostBinding,
                args: ['class._has-value']
            }], hasCounter: [{
                type: HostBinding,
                args: ['class._has-counter']
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }] } });

class TuiTextAreaDirective extends AbstractTuiTextfieldHost {
    onValueChange(value) {
        this.host.onValueChange(value);
    }
}
TuiTextAreaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiTextAreaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTextAreaDirective, selector: "tui-text-area", providers: [tuiAsTextfieldHost(TuiTextAreaDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-text-area',
                    providers: [tuiAsTextfieldHost(TuiTextAreaDirective)],
                }]
        }] });

class TuiTextAreaModule {
}
TuiTextAreaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTextAreaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaModule, declarations: [TuiTextAreaComponent, TuiTextAreaDirective], imports: [CommonModule,
        FormsModule,
        TuiFocusableModule,
        TuiScrollbarModule,
        TuiTooltipModule,
        TuiWrapperModule,
        TuiSvgModule,
        TuiPrimitiveTextfieldModule,
        PolymorpheusModule], exports: [TuiTextAreaComponent, TuiTextAreaDirective, TuiTextfieldComponent] });
TuiTextAreaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaModule, imports: [[
            CommonModule,
            FormsModule,
            TuiFocusableModule,
            TuiScrollbarModule,
            TuiTooltipModule,
            TuiWrapperModule,
            TuiSvgModule,
            TuiPrimitiveTextfieldModule,
            PolymorpheusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTextAreaModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        TuiFocusableModule,
                        TuiScrollbarModule,
                        TuiTooltipModule,
                        TuiWrapperModule,
                        TuiSvgModule,
                        TuiPrimitiveTextfieldModule,
                        PolymorpheusModule,
                    ],
                    declarations: [TuiTextAreaComponent, TuiTextAreaDirective],
                    exports: [TuiTextAreaComponent, TuiTextAreaDirective, TuiTextfieldComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { DEFAULT_ROWS, LINE_HEIGHT_L, LINE_HEIGHT_M, TuiTextAreaComponent, TuiTextAreaDirective, TuiTextAreaModule };
//# sourceMappingURL=taiga-ui-kit-components-text-area.js.map
