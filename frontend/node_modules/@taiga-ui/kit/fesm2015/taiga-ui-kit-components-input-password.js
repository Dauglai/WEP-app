import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Directive, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import { AbstractTuiControl, tuiAsFocusableItemAccessor, tuiAsControl, tuiPure, tuiIsInput } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_TEXTFIELD_SIZE, TuiHintOptionsDirective, TUI_MODE, MODE_PROVIDER, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiWrapperModule, TuiSvgModule, TuiHintModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_PASSWORD_TEXTS } from '@taiga-ui/kit/tokens';
import * as i5 from 'rxjs';
import { EMPTY, combineLatest } from 'rxjs';
import { map, startWith } from 'rxjs/operators';
import * as i2 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';

/** Default values for the input password options. */
const TUI_INPUT_PASSWORD_DEFAULT_OPTIONS = {
    icons: {
        hide: ({ $implicit }) => $implicit === `s` ? `tuiIconEyeOff` : `tuiIconEyeOffLarge`,
        show: ({ $implicit }) => ($implicit === `s` ? `tuiIconEye` : `tuiIconEyeLarge`),
    },
};
/**
 * Default parameters for input password component
 */
const TUI_INPUT_PASSWORD_OPTIONS = new InjectionToken(`[TUI_INPUT_PASSWORD_OPTIONS]`, {
    factory: () => TUI_INPUT_PASSWORD_DEFAULT_OPTIONS,
});
const tuiInputPasswordOptionsProvider = (options) => ({
    provide: TUI_INPUT_PASSWORD_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_INPUT_PASSWORD_DEFAULT_OPTIONS), options),
});

class TuiInputPasswordComponent extends AbstractTuiControl {
    constructor(control, cdr, textfieldSize, passwordTexts$, options, hintOptions, mode$) {
        var _a;
        super(control, cdr);
        this.textfieldSize = textfieldSize;
        this.passwordTexts$ = passwordTexts$;
        this.options = options;
        this.hintOptions = hintOptions;
        this.mode$ = mode$;
        this.directive$ = ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.change$) || EMPTY;
        this.isPasswordHidden = true;
        this.computedAppearance$ = combineLatest([
            this.mode$.pipe(map(val => (val === 'onDark' ? 'onDark' : ''))),
            this.directive$.pipe(startWith(null), map(() => { var _a; return ((_a = this.hintOptions) === null || _a === void 0 ? void 0 : _a.appearance) || ''; })),
        ]).pipe(map(([mode, controller]) => controller || mode), startWith(''));
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get icon() {
        return this.isPasswordHidden ? this.options.icons.hide : this.options.icons.show;
    }
    get context() {
        return this.getContext(this.textfieldSize.size);
    }
    get inputType() {
        return this.isPasswordHidden || !this.interactive ? 'password' : 'text';
    }
    onValueChange(textValue) {
        this.value = textValue;
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    togglePasswordVisibility() {
        this.isPasswordHidden = !this.isPasswordHidden;
    }
    getFallbackValue() {
        return '';
    }
    getContext($implicit) {
        return { $implicit };
    }
}
TuiInputPasswordComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_PASSWORD_TEXTS }, { token: TUI_INPUT_PASSWORD_OPTIONS }, { token: TuiHintOptionsDirective, optional: true }, { token: TUI_MODE }], target: i0.ɵɵFactoryTarget.Component });
TuiInputPasswordComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPasswordComponent, selector: "tui-input-password", providers: [
        tuiAsFocusableItemAccessor(TuiInputPasswordComponent),
        tuiAsControl(TuiInputPasswordComponent),
        MODE_PROVIDER,
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    class=\"t-textfield\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoActive]=\"pseudoActive\"\n    [invalid]=\"computedInvalid\"\n    [focusable]=\"focusable\"\n    [nativeId]=\"nativeId\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [tuiTextfieldIcon]=\"interactive ? iconContent : ''\"\n    [(value)]=\"value\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-primitive-textfield>\n\n<ng-template\n    #iconContent=\"polymorpheus\"\n    [polymorpheus]=\"type\"\n>\n    <ng-container *ngIf=\"passwordTexts$ | async as texts\">\n        <tui-svg\n            *polymorpheusOutlet=\"icon as src; context: context\"\n            tuiWrapper\n            appearance=\"icon\"\n            automation-id=\"tui-password__icon\"\n            class=\"t-icon\"\n            [tuiHint]=\"texts[0] && texts[1] && hintContent\"\n            [tuiHintDirection]=\"hintOptions?.direction || 'bottom-left'\"\n            [tuiHintAppearance]=\"(computedAppearance$ | async) || ''\"\n            [src]=\"src\"\n            (click)=\"togglePasswordVisibility()\"\n        ></tui-svg>\n\n        <ng-template\n            #hintContent=\"polymorpheus\"\n            polymorpheus\n        >\n            {{ isPasswordHidden ? texts[0] : texts[1] }}\n        </ng-template>\n    </ng-container>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-icon{cursor:pointer;pointer-events:auto}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i2.PolymorpheusTemplate, selector: "ng-template[polymorpheus]", inputs: ["polymorpheus"], exportAs: ["polymorpheus"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i1.TuiHintDirective, selector: "[tuiHint]:not(ng-container)", inputs: ["tuiHint", "tuiHintContext", "tuiHintAppearance"] }, { type: i1.TuiHintDriverDirective, selector: "[tuiHint]" }, { type: i1.TuiHintHoverDirective, selector: "[tuiHint]:not(ng-container)", inputs: ["tuiHintShowDelay", "tuiHintHideDelay"], exportAs: ["tuiHintHover"] }, { type: i1.TuiHintPositionDirective, selector: "[tuiHint]:not([tuiHintCustomPosition])", inputs: ["tuiHintDirection"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiPure
], TuiInputPasswordComponent.prototype, "getContext", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-password',
                    templateUrl: './input-password.template.html',
                    styleUrls: ['./input-password.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputPasswordComponent),
                        tuiAsControl(TuiInputPasswordComponent),
                        MODE_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PASSWORD_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_PASSWORD_OPTIONS]
                }] }, { type: i1.TuiHintOptionsDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiHintOptionsDirective]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], getContext: [] } });

class TuiInputPasswordDirective extends AbstractTuiTextfieldHost {
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    process(input) {
        this.input = input;
    }
    ngDoCheck() {
        if (this.host.nativeFocusableElement &&
            tuiIsInput(this.host.nativeFocusableElement)) {
            this.host.nativeFocusableElement.type = this.host.inputType;
        }
    }
}
TuiInputPasswordDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputPasswordDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPasswordDirective, selector: "tui-input-password", providers: [tuiAsTextfieldHost(TuiInputPasswordDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-password',
                    providers: [tuiAsTextfieldHost(TuiInputPasswordDirective)],
                }]
        }] });

class TuiInputPasswordModule {
}
TuiInputPasswordModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputPasswordModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordModule, declarations: [TuiInputPasswordComponent, TuiInputPasswordDirective], imports: [CommonModule,
        FormsModule,
        PolymorpheusModule,
        TuiWrapperModule,
        TuiSvgModule,
        TuiHintModule,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule], exports: [TuiInputPasswordComponent,
        TuiInputPasswordDirective,
        TuiTextfieldComponent] });
TuiInputPasswordModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordModule, imports: [[
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiWrapperModule,
            TuiSvgModule,
            TuiHintModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPasswordModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusModule,
                        TuiWrapperModule,
                        TuiSvgModule,
                        TuiHintModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                    ],
                    declarations: [TuiInputPasswordComponent, TuiInputPasswordDirective],
                    exports: [
                        TuiInputPasswordComponent,
                        TuiInputPasswordDirective,
                        TuiTextfieldComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_PASSWORD_DEFAULT_OPTIONS, TUI_INPUT_PASSWORD_OPTIONS, TuiInputPasswordComponent, TuiInputPasswordDirective, TuiInputPasswordModule, tuiInputPasswordOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-password.js.map
