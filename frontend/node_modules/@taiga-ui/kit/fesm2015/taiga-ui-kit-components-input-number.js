import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, ContentChildren, HostListener, Directive, NgModule } from '@angular/core';
import * as i6 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i5 from '@taiga-ui/cdk';
import { AbstractTuiNullableControl, EMPTY_QUERY, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, TuiMapperPipeModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { tuiCreateNumberMask, tuiEnableAutoCorrectDecimalSymbol, tuiCreateAutoCorrectedNumberPipe, tuiMaskedMoneyValueIsEmpty, tuiMaskedNumberStringToNumber, TUI_DECIMAL_SYMBOLS, tuiGetFractionPartPadded, tuiFormatNumber, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusOutletDirective, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i2 from '@taiga-ui/kit/directives';
import { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';

const DEFAULT_MAX_LENGTH = 18;
class TuiInputNumberComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, numberFormat, isIOS) {
        super(control, cdr);
        this.numberFormat = numberFormat;
        this.isIOS = isIOS;
        this.unfinishedValue = '';
        this.min = Number.MIN_SAFE_INTEGER;
        this.max = Number.MAX_SAFE_INTEGER;
        this.decimal = 'not-zero';
        this.precision = 2;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.prefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.postfix = '';
        this.polymorpheusValueContent = EMPTY_QUERY;
        this.mask = (allowNegative, decimal, decimalLimit, nativeFocusableElement) => ({
            mask: tuiCreateNumberMask({
                allowNegative,
                decimalLimit,
                allowDecimal: decimal !== 'never',
                requireDecimal: decimal === 'always',
                decimalSymbol: this.numberFormat.decimalSeparator,
                thousandSymbol: this.numberFormat.thousandSeparator,
                autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(this.numberFormat),
            }),
            pipe: tuiCreateAutoCorrectedNumberPipe(decimal === 'always' ? decimalLimit : 0, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, nativeFocusableElement, allowNegative, this.isIOS),
            guide: false,
        });
    }
    get nativeFocusableElement() {
        return !this.primitiveTextfield || this.computedDisabled
            ? null
            : this.primitiveTextfield.nativeFocusableElement;
    }
    get focused() {
        return !!this.primitiveTextfield && this.primitiveTextfield.focused;
    }
    get isNegativeAllowed() {
        return this.min < 0;
    }
    get inputMode() {
        if (this.isIOS && this.isNegativeAllowed) {
            // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'
            return 'text';
        }
        return this.decimal === 'never' ? 'numeric' : 'decimal';
    }
    get calculatedMaxLength() {
        const decimalPart = this.decimal !== 'never' &&
            this.nativeValue.includes(this.numberFormat.decimalSeparator);
        const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;
        const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;
        return DEFAULT_MAX_LENGTH + precision + takeThousand;
    }
    get formattedValue() {
        return this.getFormattedValue(this.value || 0);
    }
    get computedValue() {
        if (this.focused) {
            return this.nativeValue;
        }
        return this.value === null ? '' : this.formattedValue;
    }
    onZero(event) {
        const decimal = this.nativeValue.split(this.numberFormat.decimalSeparator)[1] || '';
        const { nativeFocusableElement } = this;
        if (decimal.length < this.precision ||
            !nativeFocusableElement ||
            !nativeFocusableElement.selectionStart ||
            this.nativeValue[nativeFocusableElement.selectionStart] !== '0') {
            return;
        }
        event.preventDefault();
        nativeFocusableElement.selectionStart++;
    }
    onValueChange(value) {
        if (tuiMaskedMoneyValueIsEmpty(value)) {
            this.value = null;
            return;
        }
        if (this.isNativeValueNotFinished) {
            this.unfinishedValue = value;
            return;
        }
        this.unfinishedValue = null;
        const capped = this.absoluteCapInputValue(value);
        if (capped === null || Number.isNaN(capped)) {
            return;
        }
        this.value = capped;
        if (capped !==
            tuiMaskedNumberStringToNumber(value, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)) {
            this.nativeValue = this.formattedValue;
        }
    }
    onKeyDown(event) {
        if (!TUI_DECIMAL_SYMBOLS.includes(event.key)) {
            return;
        }
        if (this.decimal === 'never') {
            event.preventDefault();
            return;
        }
        if (this.nativeValue.includes(this.numberFormat.decimalSeparator)) {
            event.preventDefault();
            this.setCaretAfterComma();
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        const nativeNumberValue = this.unfinishedValue
            ? tuiMaskedNumberStringToNumber(this.unfinishedValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)
            : this.nativeNumberValue;
        this.unfinishedValue = null;
        if (Number.isNaN(nativeNumberValue)) {
            this.clear();
            return;
        }
        this.value = Math.min(this.max, Math.max(this.min, nativeNumberValue));
        this.nativeValue = this.formattedValue;
    }
    getFormattedValue(value) {
        const absValue = Math.abs(value);
        const hasFraction = absValue % 1 > 0;
        let decimalLimit = this.decimal === 'always' || (hasFraction && this.decimal !== 'never')
            ? this.precision
            : 0;
        const fraction = hasFraction
            ? tuiGetFractionPartPadded(value, this.precision)
            : '';
        if (this.focused && this.decimal !== 'always') {
            decimalLimit = fraction.length;
        }
        return tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), { decimalLimit }));
    }
    get isNativeValueNotFinished() {
        const nativeNumberValue = this.nativeNumberValue;
        return nativeNumberValue < 0
            ? nativeNumberValue > this.max
            : nativeNumberValue < this.min;
    }
    get nativeValue() {
        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
    }
    set nativeValue(value) {
        if (!this.primitiveTextfield || !this.nativeFocusableElement) {
            return;
        }
        this.primitiveTextfield.value = value;
        this.nativeFocusableElement.value = value;
    }
    get nativeNumberValue() {
        return tuiMaskedNumberStringToNumber(this.nativeValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
    }
    clear() {
        this.nativeValue = '';
        this.value = null;
    }
    absoluteCapInputValue(inputValue) {
        const value = tuiMaskedNumberStringToNumber(inputValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
        const capped = value < 0
            ? Math.max(Math.max(this.min, Number.MIN_SAFE_INTEGER), value)
            : Math.min(value, Math.min(this.max, Number.MAX_SAFE_INTEGER));
        const ineligibleValue = Number.isNaN(capped) || capped < this.min || capped > this.max;
        return ineligibleValue ? null : capped;
    }
    setCaretAfterComma() {
        if (!this.nativeFocusableElement) {
            return;
        }
        const afterCommaPosition = this.nativeValue.length - this.precision;
        this.nativeFocusableElement.setSelectionRange(afterCommaPosition, afterCommaPosition);
    }
}
TuiInputNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_NUMBER_FORMAT }, { token: TUI_IS_IOS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputNumberComponent, selector: "tui-input-number", inputs: { min: "min", max: "max", decimal: "decimal", precision: "precision", prefix: "prefix", postfix: "postfix" }, host: { listeners: { "keydown.0": "onZero($event)" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputNumberComponent),
        tuiAsControl(TuiInputNumberComponent),
    ], queries: [{ propertyName: "polymorpheusValueContent", predicate: PolymorpheusOutletDirective, descendants: true }], viewQueries: [{ propertyName: "primitiveTextfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-primitive-textfield\n    tuiValueAccessor\n    class=\"t-textfield\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoActive]=\"pseudoActive\"\n    [invalid]=\"computedInvalid\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"computedDisabled\"\n    [textMask]=\"isNegativeAllowed | tuiMapper : mask : decimal : precision : nativeFocusableElement\"\n    [value]=\"computedValue\"\n    [prefix]=\"prefix\"\n    [postfix]=\"postfix\"\n    [focusable]=\"focusable\"\n    (valueChange)=\"onValueChange($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (keydown)=\"onKeyDown($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n    <div\n        *ngIf=\"polymorpheusValueContent.length\"\n        ngProjectAs=\"tuiContent\"\n        class=\"t-value-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-primitive-textfield>\n\n<ng-container *ngIf=\"polymorpheusValueContent.changes | async\"></ng-container>\n\n<ng-template #valueContent>\n    <ng-content select=\"tuiContent\"></ng-content>\n</ng-template>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-textfield{border-radius:inherit;text-align:inherit}.t-value-content{width:100%}\n"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i2.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i2.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "tuiMapper": i5.TuiMapperPipe, "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputNumberComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputNumberComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputNumberComponent.prototype, "decimal", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputNumberComponent.prototype, "precision", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputNumberComponent.prototype, "prefix", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputNumberComponent.prototype, "postfix", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-number',
                    templateUrl: './input-number.template.html',
                    styleUrls: ['./input-number.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputNumberComponent),
                        tuiAsControl(TuiInputNumberComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i6.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_IOS]
                }] }]; }, propDecorators: { primitiveTextfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], decimal: [{
                type: Input
            }], precision: [{
                type: Input
            }], prefix: [{
                type: Input
            }], postfix: [{
                type: Input
            }], polymorpheusValueContent: [{
                type: ContentChildren,
                args: [PolymorpheusOutletDirective, { descendants: true }]
            }], onZero: [{
                type: HostListener,
                args: ['keydown.0', ['$event']]
            }] } });

class TuiInputNumberDirective extends AbstractTuiTextfieldHost {
    get value() {
        return this.host.computedValue;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    ngDoCheck() {
        if (!this.host.nativeFocusableElement) {
            return;
        }
        this.host.nativeFocusableElement.maxLength = this.host.calculatedMaxLength;
        this.host.nativeFocusableElement.inputMode = this.host.inputMode;
    }
}
TuiInputNumberDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputNumberDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputNumberDirective, selector: "tui-input-number", providers: [tuiAsTextfieldHost(TuiInputNumberDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-number',
                    providers: [tuiAsTextfieldHost(TuiInputNumberDirective)],
                }]
        }] });

class TuiInputNumberModule {
}
TuiInputNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberModule, declarations: [TuiInputNumberComponent, TuiInputNumberDirective], imports: [CommonModule,
        TextMaskModule,
        TuiMapperPipeModule,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule,
        TuiValueAccessorModule,
        PolymorpheusModule], exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent] });
TuiInputNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberModule, imports: [[
            CommonModule,
            TextMaskModule,
            TuiMapperPipeModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiValueAccessorModule,
            PolymorpheusModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputNumberModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TextMaskModule,
                        TuiMapperPipeModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiValueAccessorModule,
                        PolymorpheusModule,
                    ],
                    declarations: [TuiInputNumberComponent, TuiInputNumberDirective],
                    exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputNumberComponent, TuiInputNumberDirective, TuiInputNumberModule };
//# sourceMappingURL=taiga-ui-kit-components-input-number.js.map
