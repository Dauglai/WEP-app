import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, HostBinding, NgModule } from '@angular/core';
import { tuiPx, tuiIsNumber, tuiIsString, tuiDefaultProp } from '@taiga-ui/cdk';
import * as i2 from '@taiga-ui/core';
import { tuiSizeBigger, TuiSvgModule } from '@taiga-ui/core';
import * as i1 from '@taiga-ui/kit/components/badge';
import { TuiBadgeModule } from '@taiga-ui/kit/components/badge';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

const BADGE_SIZE = {
    xs: 'xs',
    s: 's',
    m: 's',
    l: 'm',
    xl: 'm',
    xxl: 'l',
};
class TuiBadgedContentComponent {
    constructor() {
        this.size = 'm';
        this.colorTop = '';
        this.colorBottom = '';
        this.rounded = false;
    }
    get topNotification() {
        return !this.contentTop && this.colorTop ? this.colorTop : '';
    }
    get bottomNotification() {
        return !this.contentBottom && this.colorBottom ? this.colorBottom : '';
    }
    get badgeSize() {
        return BADGE_SIZE[this.size];
    }
    get badgeHidden() {
        return this.size === 'xs';
    }
    get sizeBig() {
        return tuiSizeBigger(this.size);
    }
    get boxShadow() {
        const borderWidth = this.sizeBig ? 3 : 2;
        return `0 0 0 ${tuiPx(borderWidth)}`;
    }
    contentIsNumber(content) {
        return tuiIsNumber(content === null || content === void 0 ? void 0 : content.valueOf());
    }
    contentIsString(content) {
        return tuiIsString(content === null || content === void 0 ? void 0 : content.valueOf());
    }
    getStatus(color) {
        return color ? 'custom' : 'primary';
    }
}
TuiBadgedContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBadgedContentComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiBadgedContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiBadgedContentComponent, selector: "tui-badged-content", inputs: { contentTop: "contentTop", contentBottom: "contentBottom", size: "size", colorTop: "colorTop", colorBottom: "colorBottom", rounded: "rounded" }, host: { properties: { "class._with-top": "this.contentTop", "class._with-bottom": "this.contentBottom", "attr.data-size": "this.size", "class._rounded": "this.rounded" } }, ngImport: i0, template: "<ng-content></ng-content>\n\n<div\n    *ngIf=\"topNotification\"\n    class=\"t-notification t-notification_top\"\n    [style.background]=\"topNotification\"\n    [style.boxShadow]=\"boxShadow\"\n></div>\n\n<div\n    *ngIf=\"bottomNotification\"\n    class=\"t-notification t-notification_bottom\"\n    [style.background]=\"bottomNotification\"\n    [style.boxShadow]=\"boxShadow\"\n></div>\n\n<div\n    *ngIf=\"contentTop\"\n    class=\"t-content t-content_top\"\n    [style.boxShadow]=\"boxShadow\"\n>\n    <ng-container *polymorpheusOutlet=\"contentTop as content\">\n        <tui-badge\n            *ngIf=\"contentIsNumber(content)\"\n            [status]=\"getStatus(colorTop)\"\n            [style.backgroundColor]=\"colorTop\"\n            [size]=\"badgeSize\"\n            [value]=\"contentTop\"\n        ></tui-badge>\n        <tui-svg\n            *ngIf=\"contentIsString(content)\"\n            class=\"t-icon\"\n            [style.color]=\"colorTop\"\n            [src]=\"content\"\n        ></tui-svg>\n    </ng-container>\n</div>\n\n<div\n    *ngIf=\"contentBottom && sizeBig\"\n    class=\"t-content t-content_bottom\"\n    [style.boxShadow]=\"boxShadow\"\n>\n    <ng-container *polymorpheusOutlet=\"contentBottom as content\">\n        <tui-badge\n            *ngIf=\"contentIsNumber(content)\"\n            [status]=\"getStatus(colorBottom)\"\n            [style.backgroundColor]=\"colorBottom\"\n            [size]=\"badgeSize\"\n            [value]=\"contentBottom\"\n        ></tui-badge>\n        <tui-svg\n            *ngIf=\"contentIsString(content)\"\n            class=\"t-icon\"\n            [style.color]=\"colorBottom\"\n            [src]=\"content\"\n        ></tui-svg>\n    </ng-container>\n</div>\n", styles: [":host{position:relative;display:inline-block;color:var(--tui-base-01)}.t-notification{position:absolute;border-radius:100%;box-shadow:0 0 0 2px currentColor;background-color:currentColor}:host[data-size=xs]:not(._rounded) .t-notification_top,:host[data-size=s]:not(._rounded) .t-notification_top,:host[data-size=m]:not(._rounded) .t-notification_top{top:-.125rem;right:-.125rem}:host[data-size=l]:not(._rounded) .t-notification_top,:host[data-size=xl]:not(._rounded) .t-notification_top{top:-.25rem;right:-.25rem}:host[data-size=xxl]:not(._rounded) .t-notification_top{top:-.5rem;right:-.5rem}:host[data-size=xs]._rounded .t-notification_top{top:0;right:0}:host[data-size=s]._rounded .t-notification_top{top:.0625rem;right:.0625rem}:host[data-size=m]._rounded .t-notification_top{top:.1875rem;right:.1875rem}:host[data-size=l]._rounded .t-notification_top{top:.25rem;right:.25rem}:host[data-size=xl]._rounded .t-notification_top{top:.375rem;right:.375rem}:host[data-size=xxl]._rounded .t-notification_top{top:.5rem;right:.5rem}:host[data-size=m]:not(._rounded) .t-notification_bottom{bottom:-.125rem;right:-.125rem}:host[data-size=l]:not(._rounded) .t-notification_bottom,:host[data-size=xl]:not(._rounded) .t-notification_bottom{bottom:-.25rem;right:-.25rem}:host[data-size=xxl]:not(._rounded) .t-notification_bottom{bottom:-.5rem;right:-.5rem}:host[data-size=m]._rounded .t-notification_bottom{bottom:.1875rem;right:.1875rem}:host[data-size=l]._rounded .t-notification_bottom{bottom:.25rem;right:.25rem}:host[data-size=xl]._rounded .t-notification_bottom{bottom:.375rem;right:.375rem}:host[data-size=xxl]._rounded .t-notification_bottom{bottom:.5rem;right:.5rem}:host[data-size=xs] .t-notification,:host[data-size=s] .t-notification,:host[data-size=m] .t-notification{width:.5rem;height:.5rem}:host[data-size=l] .t-notification{width:.75rem;height:.75rem}:host[data-size=xl] .t-notification{width:1rem;height:1rem}:host[data-size=xxl] .t-notification{width:1.5rem;height:1.5rem}.t-icon{color:var(--tui-success-fill)}:host[data-size=xs] .t-icon{transform:scale(.66666667);margin:-.25rem}:host[data-size=s] .t-icon,:host[data-size=m] .t-icon{width:1.5rem;height:1.5rem;margin:-.125rem}:host[data-size=l] .t-icon,:host[data-size=xl] .t-icon{transform:scale(1.2)}:host[data-size=xxl] .t-icon{transform:scale(1.6)}.t-content{position:absolute;display:flex;align-items:center;justify-content:center;border-radius:6.25rem;overflow:hidden;background-color:currentColor;box-shadow:0 0 0 2px currentColor}:host[data-size=xxl]._with-top:not(._rounded) .t-content_top,:host[data-size=l]._with-top:not(._rounded) .t-content_top{right:-.5rem;top:-.5rem}:host[data-size=xl]._with-top:not(._rounded) .t-content_top{right:-.375rem;top:-.375rem}:host[data-size=m]._with-top:not(._rounded) .t-content_top,:host[data-size=s]._with-top:not(._rounded) .t-content_top,:host[data-size=xs]._with-top:not(._rounded) .t-content_top{right:-.25rem;top:-.25rem}:host[data-size=xxl]._with-top._rounded .t-content_top{right:.25rem;top:.25rem}:host[data-size=xl]._with-top._rounded .t-content_top{right:.125rem;top:.125rem}:host[data-size=l]._with-top._rounded .t-content_top,:host[data-size=m]._with-top._rounded .t-content_top,:host[data-size=s]._with-top._rounded .t-content_top,:host[data-size=xs]._with-top._rounded .t-content_top{right:-.25rem;top:-.25rem}:host[data-size=xxl]._with-bottom:not(._rounded) .t-content_bottom,:host[data-size=l]._with-bottom:not(._rounded) .t-content_bottom{bottom:-.5rem;right:-.5rem}:host[data-size=xl]._with-bottom:not(._rounded) .t-content_bottom{bottom:-.375rem;right:-.375rem}:host[data-size=m]._with-bottom:not(._rounded) .t-content_bottom{bottom:-.25rem;right:-.25rem}:host[data-size=xxl]._with-bottom._rounded .t-content_bottom{bottom:.25rem;right:.25rem}:host[data-size=xl]._with-bottom._rounded .t-content_bottom{bottom:.125rem;right:.125rem}:host[data-size=l]._with-bottom._rounded .t-content_bottom,:host[data-size=m]._with-bottom._rounded .t-content_bottom{bottom:-.25rem;right:-.25rem}:host[data-size=xxl] .t-content{height:2rem;min-width:2rem}:host[data-size=xl] .t-content,:host[data-size=l] .t-content{height:1.5rem;min-width:1.5rem}:host[data-size=m] .t-content,:host[data-size=s] .t-content{height:1.25rem;min-width:1.25rem}:host[data-size=xs] .t-content{height:1rem;min-width:1rem}\n"], components: [{ type: i1.TuiBadgeComponent, selector: "tui-badge", inputs: ["value", "size", "status", "hoverable"] }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiBadgedContentComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiBadgedContentComponent.prototype, "colorTop", void 0);
__decorate([
    tuiDefaultProp()
], TuiBadgedContentComponent.prototype, "colorBottom", void 0);
__decorate([
    tuiDefaultProp()
], TuiBadgedContentComponent.prototype, "rounded", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBadgedContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-badged-content',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    templateUrl: './badged-content.template.html',
                    styleUrls: ['./badged-content.style.less'],
                }]
        }], propDecorators: { contentTop: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._with-top']
            }], contentBottom: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._with-bottom']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], colorTop: [{
                type: Input
            }], colorBottom: [{
                type: Input
            }], rounded: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._rounded']
            }] } });

class TuiBadgedContentModule {
}
TuiBadgedContentModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBadgedContentModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiBadgedContentModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBadgedContentModule, declarations: [TuiBadgedContentComponent], imports: [CommonModule, PolymorpheusModule, TuiSvgModule, TuiBadgeModule], exports: [TuiBadgedContentComponent] });
TuiBadgedContentModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBadgedContentModule, imports: [[CommonModule, PolymorpheusModule, TuiSvgModule, TuiBadgeModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiBadgedContentModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, PolymorpheusModule, TuiSvgModule, TuiBadgeModule],
                    declarations: [TuiBadgedContentComponent],
                    exports: [TuiBadgedContentComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiBadgedContentComponent, TuiBadgedContentModule };
//# sourceMappingURL=taiga-ui-kit-components-badged-content.js.map
