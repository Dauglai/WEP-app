import { CommonModule } from '@angular/common';
import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Input, HostBinding, ElementRef, Directive, Inject, ViewChild, NgModule } from '@angular/core';
import * as i1$1 from '@taiga-ui/cdk';
import { tuiDefaultProp, tuiIsEdgeOlderThan, CHROMIUM_EDGE_START_VERSION, TuiResizeService, TuiDestroyService, tuiPure, tuiIsString, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import { __decorate } from 'tslib';
import { USER_AGENT, WINDOW } from '@ng-web-apis/common';
import { map } from 'rxjs/operators';
import * as i1 from 'rxjs';

class TuiProgressBarComponent {
    constructor() {
        this.size = 'm';
    }
}
TuiProgressBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiProgressBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressBarComponent, selector: "progress[tuiProgressBar]", inputs: { color: "color", size: "size" }, host: { properties: { "style.--tui-progress-color": "this.color", "attr.data-size": "this.size" } }, ngImport: i0, template: '', isInline: true, styles: ["@keyframes tuiIndeterminateAnimation{50%{background-position:left}}:host{-webkit-appearance:none;-moz-appearance:none;appearance:none;border:none;background-color:var(--tui-base-03);display:block;width:100%;color:var(--tui-primary);border-radius:var(--tui-radius-xs);overflow:hidden}:host::-webkit-progress-value{-webkit-transition:width var(--tui-duration) linear;transition:width var(--tui-duration) linear}:host::-webkit-progress-value{background:var(--tui-progress-color, currentColor)}:host::-moz-progress-bar{background:var(--tui-progress-color, currentColor)}:host::-webkit-progress-bar{background-color:var(--tui-base-03)}:host[data-size=m]{height:1.5rem}:host[data-size=s]{height:.5rem}:host[data-size=s]::-webkit-progress-value{border-radius:var(--tui-radius-xs)}:host[data-size=s]::-moz-progress-bar{border-radius:var(--tui-radius-xs)}:host:indeterminate{background:transparent;background-image:linear-gradient(to right,var(--tui-base-03) 0 45%,var(--tui-progress-color, currentColor) 45% 55%,var(--tui-base-03) 55% 100%);background-size:225%;background-position:right;animation:tuiIndeterminateAnimation 3s infinite ease-in-out}:host:indeterminate::-webkit-progress-bar{background:transparent}:host:indeterminate::-webkit-progress-value{background:transparent}:host:indeterminate::-moz-progress-bar{background:transparent}:host-context(label[tuiProgressLabel]):not(:first-child){position:absolute;top:0;left:0;width:100%;height:100%;background-color:transparent}:host-context(label[tuiProgressLabel]):not(:first-child)::-webkit-progress-bar{background-color:transparent}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiProgressBarComponent.prototype, "size", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressBarComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'progress[tuiProgressBar]',
                    template: '',
                    styleUrls: ['./progress-bar.component.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { color: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['style.--tui-progress-color']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }] } });

function calculateColorSegments(colors, progressWidth) {
    const segmentWidth = Math.ceil(progressWidth / colors.length);
    const colorsString = colors.reduce((acc, color, i) => `${acc}, ${color} ${i * segmentWidth}px ${(i + 1) * segmentWidth}px`, '');
    return `linear-gradient(to right ${colorsString})`;
}
class TuiProgressColorSegmentsDirective {
    constructor(el, resize$, userAgent) {
        this.el = el;
        this.resize$ = resize$;
        this.userAgent = userAgent;
        // TODO: drop support of legacy Edge (EdgeHTML) in v4.x
        this.isOldBrowsers = tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent);
        this.colors = [];
    }
    get calcSegments$() {
        return this.resize$.pipe(map(() => this.isOldBrowsers
            ? this.colors[0]
            : calculateColorSegments(this.colors, this.el.nativeElement.offsetWidth)));
    }
}
TuiProgressColorSegmentsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressColorSegmentsDirective, deps: [{ token: ElementRef }, { token: TuiResizeService }, { token: USER_AGENT }], target: i0.ɵɵFactoryTarget.Directive });
TuiProgressColorSegmentsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressColorSegmentsDirective, selector: "progress[tuiProgressBar][tuiProgressColorSegments]", inputs: { colors: ["tuiProgressColorSegments", "colors"] }, host: { listeners: { "$.style.--tui-progress-color": "0" }, properties: { "$.style.--tui-progress-color": "calcSegments$" } }, providers: [TuiDestroyService, TuiResizeService], ngImport: i0 });
__decorate([
    tuiPure
], TuiProgressColorSegmentsDirective.prototype, "calcSegments$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressColorSegmentsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'progress[tuiProgressBar][tuiProgressColorSegments]',
                    host: {
                        '[$.style.--tui-progress-color]': 'calcSegments$',
                        '($.style.--tui-progress-color)': '0',
                    },
                    providers: [TuiDestroyService, TuiResizeService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [USER_AGENT]
                }] }]; }, propDecorators: { colors: [{
                type: Input,
                args: ['tuiProgressColorSegments']
            }], calcSegments$: [] } });

class TuiProgressCircleComponent {
    constructor(userAgent, win, el) {
        this.userAgent = userAgent;
        this.win = win;
        this.el = el;
        this.value = 0;
        this.max = 1;
        this.color = null;
        this.size = 'm';
    }
    get progressPercentage() {
        return this.value / this.max;
    }
    // TODO: drop support of legacy Edge (EdgeHTML) in v4.x
    get oldEdgeRadiusFallback() {
        if (!tuiIsEdgeOlderThan(CHROMIUM_EDGE_START_VERSION, this.userAgent)) {
            return null;
        }
        const strokeWidth = parseInt(this.win.getComputedStyle(this.progressCircle.nativeElement).strokeWidth, 10);
        return (this.el.nativeElement.offsetWidth - strokeWidth) / 2;
    }
}
TuiProgressCircleComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressCircleComponent, deps: [{ token: USER_AGENT }, { token: WINDOW }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiProgressCircleComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressCircleComponent, selector: "tui-progress-circle", inputs: { value: "value", max: "max", color: "color", size: "size" }, host: { properties: { "style.--tui-progress-color": "this.color", "attr.data-size": "this.size", "style.--progress-percentage": "this.progressPercentage" } }, viewQueries: [{ propertyName: "progressCircle", first: true, predicate: ["progressCircle"], descendants: true, static: true }], ngImport: i0, template: "<progress\n    class=\"t-hidden-progress\"\n    [value]=\"value\"\n    [max]=\"max\"\n></progress>\n\n<svg\n    height=\"100%\"\n    width=\"100%\"\n    aria-hidden=\"true\"\n    class=\"t-svg\"\n>\n    <circle\n        cx=\"50%\"\n        cy=\"50%\"\n        class=\"t-track\"\n        [attr.r]=\"oldEdgeRadiusFallback\"\n    ></circle>\n\n    <circle\n        #progressCircle\n        cx=\"50%\"\n        cy=\"50%\"\n        class=\"t-progress\"\n        [attr.r]=\"oldEdgeRadiusFallback\"\n    ></circle>\n</svg>\n", styles: [":host{position:relative;display:block;color:var(--tui-primary);transform:rotate(-90deg);transform-origin:center;font-size:1rem}:host[data-size=s]{width:2em;height:2em}:host[data-size=s] .t-track{r:.75em;stroke-width:.5em}:host[data-size=s] .t-progress{r:.75em;stroke-width:.5em;stroke-dasharray:4.71238898em;stroke-dashoffset:calc(4.71238898em - var(--progress-percentage) * 4.71238898em)}:host[data-size=m]{width:3em;height:3em}:host[data-size=m] .t-track{r:1.375em;stroke-width:.25em}:host[data-size=m] .t-progress{r:1.3125em;stroke-width:.375em;stroke-dasharray:8.24668072em;stroke-dashoffset:calc(8.24668072em - var(--progress-percentage) * 8.24668072em)}:host[data-size=l]{width:4em;height:4em}:host[data-size=l] .t-track{r:1.875em;stroke-width:.25em}:host[data-size=l] .t-progress{r:1.8125em;stroke-width:.375em;stroke-dasharray:11.38827337em;stroke-dashoffset:calc(11.38827337em - var(--progress-percentage) * 11.38827337em)}:host[data-size=xl]{width:7em;height:7em}:host[data-size=xl] .t-track{r:3.375em;stroke-width:.25em}:host[data-size=xl] .t-progress{r:3.3125em;stroke-width:.375em;stroke-dasharray:20.81305133em;stroke-dashoffset:calc(20.81305133em - var(--progress-percentage) * 20.81305133em)}.t-track{fill:transparent;stroke:var(--tui-base-03)}.t-progress{fill:transparent;stroke:var(--tui-progress-color, currentColor);transition:stroke-dashoffset var(--tui-duration) linear}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}.t-svg{overflow:unset}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "value", void 0);
__decorate([
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "color", void 0);
__decorate([
    tuiDefaultProp()
], TuiProgressCircleComponent.prototype, "size", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressCircleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-progress-circle',
                    templateUrl: './progress-circle.template.html',
                    styleUrls: ['./progress-circle.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [USER_AGENT]
                }] }, { type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { progressCircle: [{
                type: ViewChild,
                args: ['progressCircle', { static: true }]
            }], value: [{
                type: Input
            }], max: [{
                type: Input
            }], color: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['style.--tui-progress-color']
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], progressPercentage: [{
                type: HostBinding,
                args: ['style.--progress-percentage']
            }] } });

class TuiProgressLabelComponent {
}
TuiProgressLabelComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressLabelComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiProgressLabelComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressLabelComponent, selector: "label[tuiProgressLabel]", ngImport: i0, template: "<ng-content select=\"progress\"></ng-content>\n<ng-content select=\"tui-progress-circle\"></ng-content>\n<span class=\"t-label\">\n    <ng-content></ng-content>\n</span>\n", styles: [":host{position:relative;display:inline-block}.t-label{position:absolute;top:0;left:0;width:100%;height:100%;display:flex;font:var(--tui-font-text-s);color:var(--tui-text-01);flex-direction:column;justify-content:center;align-items:center}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressLabelComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'label[tuiProgressLabel]',
                    templateUrl: './progress-label.template.html',
                    styleUrls: ['./progress-label.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }] });

class TuiProgressSegmentedComponent {
    constructor() {
        this.value = 0;
        this.max = 1;
        this.size = 'm';
        this.colors = 'var(--tui-primary)';
    }
    getActiveColor(index = 0) {
        return tuiIsString(this.colors)
            ? this.colors
            : this.colors[index] || this.colors[this.colors.length - 1];
    }
}
TuiProgressSegmentedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressSegmentedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiProgressSegmentedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressSegmentedComponent, selector: "tui-progress-segmented", inputs: { value: "value", max: "max", size: "size", colors: "colors" }, host: { properties: { "attr.data-size": "this.size" } }, ngImport: i0, template: "<progress\n    class=\"t-hidden-progress\"\n    [value]=\"value\"\n    [max]=\"max\"\n></progress>\n\n<span\n    *tuiRepeatTimes=\"let index of max\"\n    aria-hidden=\"true\"\n    class=\"t-segment\"\n    [style.background]=\"index < value ? getActiveColor(index) : null\"\n></span>\n", styles: [":host{display:flex}.t-segment{transition-property:background-color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background-color:var(--tui-base-03)}.t-segment:not(:last-child){margin-right:.25rem}:host[data-size=s] .t-segment{height:.25rem}:host[data-size=m] .t-segment{height:.5rem}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}\n"], directives: [{ type: i1$1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp((value) => Number.isInteger(value) && value >= 0, 'Must be non-negative integer between 0 and max')
], TuiProgressSegmentedComponent.prototype, "value", void 0);
__decorate([
    tuiDefaultProp((value) => Number.isInteger(value) && value > 0, 'Must be positive integer')
], TuiProgressSegmentedComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiProgressSegmentedComponent.prototype, "colors", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressSegmentedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-progress-segmented',
                    templateUrl: './progress-segmented.template.html',
                    styleUrls: ['./progress-segmented.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], max: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], colors: [{
                type: Input
            }] } });

class TuiProgressModule {
}
TuiProgressModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiProgressModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressModule, declarations: [TuiProgressBarComponent,
        TuiProgressColorSegmentsDirective,
        TuiProgressCircleComponent,
        TuiProgressLabelComponent,
        TuiProgressSegmentedComponent], imports: [CommonModule, TuiRepeatTimesModule], exports: [TuiProgressBarComponent,
        TuiProgressCircleComponent,
        TuiProgressColorSegmentsDirective,
        TuiProgressLabelComponent,
        TuiProgressSegmentedComponent] });
TuiProgressModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressModule, imports: [[CommonModule, TuiRepeatTimesModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiRepeatTimesModule],
                    declarations: [
                        TuiProgressBarComponent,
                        TuiProgressColorSegmentsDirective,
                        TuiProgressCircleComponent,
                        TuiProgressLabelComponent,
                        TuiProgressSegmentedComponent,
                    ],
                    exports: [
                        TuiProgressBarComponent,
                        TuiProgressCircleComponent,
                        TuiProgressColorSegmentsDirective,
                        TuiProgressLabelComponent,
                        TuiProgressSegmentedComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiProgressBarComponent, TuiProgressCircleComponent, TuiProgressColorSegmentsDirective, TuiProgressLabelComponent, TuiProgressModule, TuiProgressSegmentedComponent };
//# sourceMappingURL=taiga-ui-kit-components-progress.js.map
