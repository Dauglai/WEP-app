import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Inject, ContentChildren, forwardRef, Input, HostBinding, Output, HostListener, NgModule } from '@angular/core';
import * as i2 from '@taiga-ui/cdk';
import { EMPTY_QUERY, tuiQueryListChanges, tuiGetOriginalArrayFromQueryList, tuiIsElement, tuiMoveFocus, TuiScrollService, TuiResizeService, TuiDestroyService, tuiDefaultProp, tuiPure, TuiFocusVisibleService } from '@taiga-ui/cdk';
import * as i1$1 from '@taiga-ui/core';
import { TUI_ANIMATIONS_DURATION, TuiRouterLinkActiveService, TuiSvgModule } from '@taiga-ui/core';
import * as i3 from 'rxjs';
import { identity } from 'rxjs';
import { delay, filter } from 'rxjs/operators';
import * as i1 from '@angular/common';
import { CommonModule } from '@angular/common';

class TuiStepperComponent {
    constructor(cdr, el, scrollService, resize$, duration) {
        this.cdr = cdr;
        this.el = el;
        this.scrollService = scrollService;
        this.duration = duration;
        this.steps = EMPTY_QUERY;
        this.orientation = 'horizontal';
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
        resize$.subscribe(() => this.scrollIntoView(this.activeItemIndex));
    }
    set activeIndex(index) {
        this.activeItemIndex = index;
        this.scrollIntoView(index);
    }
    get changes$() {
        // Delay is required to trigger change detection after steps are rendered,
        // so they can update their "active" status
        return tuiQueryListChanges(this.steps).pipe(delay(0));
    }
    onHorizontal(event, step) {
        if (this.orientation !== 'horizontal' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    onVertical(event, step) {
        if (this.orientation !== 'vertical' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    indexOf(step) {
        return tuiGetOriginalArrayFromQueryList(this.steps).findIndex(({ nativeElement }) => nativeElement === step);
    }
    isActive(index) {
        return index === this.activeItemIndex;
    }
    activate(index) {
        if (this.activeItemIndex === index) {
            return;
        }
        this.activeItemIndex = index;
        this.activeItemIndexChange.emit(index);
        this.cdr.markForCheck();
        this.scrollIntoView(index);
    }
    getNativeElements(queryList) {
        return queryList.map(({ nativeElement }) => nativeElement);
    }
    moveFocus(current, step) {
        if (!tuiIsElement(current)) {
            return;
        }
        const stepElements = this.getNativeElements(this.steps);
        const index = stepElements.findIndex(item => item === current);
        tuiMoveFocus(index, stepElements, step);
    }
    scrollIntoView(index) {
        const step = this.getNativeElements(this.steps)[index];
        if (!step) {
            return;
        }
        const { nativeElement } = this.el;
        const { clientHeight, clientWidth, offsetTop, offsetLeft } = nativeElement;
        const { offsetHeight, offsetWidth, offsetTop: stepOffsetTop, offsetLeft: stepOffsetLeft, } = step;
        const top = stepOffsetTop - offsetTop - clientHeight / 2 + offsetHeight / 2;
        const left = stepOffsetLeft - offsetLeft - clientWidth / 2 + offsetWidth / 2;
        this.scrollService
            .scroll$(nativeElement, Math.max(0, top), Math.max(0, left), this.duration / 3)
            .subscribe();
    }
}
TuiStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperComponent, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: TuiScrollService }, { token: TuiResizeService }, { token: TUI_ANIMATIONS_DURATION }], target: i0.ɵɵFactoryTarget.Component });
TuiStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiStepperComponent, selector: "tui-stepper, nav[tuiStepper]", inputs: { orientation: "orientation", activeIndex: ["activeItemIndex", "activeIndex"] }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { listeners: { "keydown.arrowRight": "onHorizontal($event,1)", "keydown.arrowLeft": "onHorizontal($event,-1)", "keydown.arrowDown": "onVertical($event,1)", "keydown.arrowUp": "onVertical($event,-1)" }, properties: { "attr.data-orientation": "this.orientation" } }, providers: [TuiResizeService, TuiDestroyService], queries: [{ propertyName: "steps", predicate: i0.forwardRef(function () { return TuiStepComponent; }), read: ElementRef }], ngImport: i0, template: "<ng-container *ngIf=\"changes$ | async\"></ng-container>\n<ng-content></ng-content>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;scroll-behavior:smooth;display:flex;overflow:auto;counter-reset:steps}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}@media screen and (prefers-reduced-motion: reduce){:host{scroll-behavior:auto}}:host[data-orientation=vertical]{flex-direction:column}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiStepperComponent.prototype, "orientation", void 0);
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "changes$", null);
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "getNativeElements", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-stepper, nav[tuiStepper]',
                    templateUrl: './stepper.template.html',
                    styleUrls: ['./stepper.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiResizeService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.TuiScrollService, decorators: [{
                    type: Inject,
                    args: [TuiScrollService]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }]; }, propDecorators: { steps: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiStepComponent), { read: ElementRef }]
            }], orientation: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-orientation']
            }], activeIndex: [{
                type: Input,
                args: ['activeItemIndex']
            }], activeItemIndexChange: [{
                type: Output
            }], changes$: [], onHorizontal: [{
                type: HostListener,
                args: ['keydown.arrowRight', ['$event', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowLeft', ['$event', '-1']]
            }], onVertical: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['$event', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp', ['$event', '-1']]
            }], getNativeElements: [] } });

class TuiStepComponent {
    constructor(focusVisible$, routerLinkActive$, stepper, el) {
        this.stepper = stepper;
        this.el = el;
        this.stepState = 'normal';
        this.icon = '';
        this.focusVisible = false;
        routerLinkActive$.pipe(filter(identity)).subscribe(() => {
            this.activate();
        });
        focusVisible$.subscribe(visible => {
            this.focusVisible = visible;
        });
    }
    get isActive() {
        return this.stepper.isActive(this.index);
    }
    get isVertical() {
        return this.stepper.orientation === 'vertical';
    }
    get tabIndex() {
        return this.isActive ? 0 : -1;
    }
    get index() {
        return this.stepper.indexOf(this.el.nativeElement);
    }
    activate() {
        this.stepper.activate(this.index);
    }
}
TuiStepComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepComponent, deps: [{ token: TuiFocusVisibleService }, { token: TuiRouterLinkActiveService }, { token: TuiStepperComponent }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiStepComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiStepComponent, selector: "button[tuiStep], a[tuiStep]:not([routerLink]), a[tuiStep][routerLink][routerLinkActive]", inputs: { stepState: "stepState", icon: "icon" }, host: { attributes: { "type": "button" }, listeners: { "click": "activate()" }, properties: { "attr.data-state": "this.stepState", "class._focus-visible": "this.focusVisible", "class._active": "this.isActive", "class._vertical": "this.isVertical", "tabIndex": "this.tabIndex" } }, providers: [TuiDestroyService, TuiRouterLinkActiveService, TuiFocusVisibleService], ngImport: i0, template: "<tui-svg\n    *ngIf=\"icon\"\n    class=\"t-marker t-marker_custom\"\n    [src]=\"icon\"\n></tui-svg>\n<tui-svg\n    src=\"tuiIconWarningLarge\"\n    class=\"t-marker t-marker_error\"\n></tui-svg>\n<tui-svg\n    src=\"tuiIconCheckLarge\"\n    class=\"t-marker t-marker_pass\"\n></tui-svg>\n<div class=\"t-marker t-marker_index\"></div>\n<ng-content></ng-content>\n", styles: [":host{-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;position:relative;display:flex;align-items:center;flex-shrink:0;color:var(--tui-link);margin-right:1.5rem;outline:none;cursor:pointer;text-decoration:none;counter-increment:steps}:host:disabled{pointer-events:none;color:var(--tui-base-07)}:host:hover{color:var(--tui-link-hover)}:host:not(:last-of-type)._vertical{margin-bottom:1.25rem}:host._active,:host._active:hover{color:var(--tui-text-01);cursor:default}:host._focus-visible:before{content:\"\";position:absolute;left:2.75rem;right:0;top:50%;height:1.5rem;margin-top:-.75rem;background:var(--tui-selection)}.t-marker{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:flex;width:2rem;height:2rem;border-radius:100%;margin-right:.75rem;flex-shrink:0;align-items:center;justify-content:center;background:var(--tui-secondary);color:var(--tui-link)}:host:disabled .t-marker{background:var(--tui-base-03);color:var(--tui-base-07)}.t-marker_index:before{content:counter(steps)}:host:hover .t-marker_index{color:var(--tui-link-hover);background:var(--tui-secondary-hover)}:host._active .t-marker_index{color:var(--tui-primary-text);background:var(--tui-primary)}:host:not([data-state=\"normal\"]):not(._active) .t-marker_index,:host:not(._active) .t-marker_custom~.t-marker_index{display:none}.t-marker_error{background:var(--tui-error-bg);color:var(--tui-error-fill)}:host:hover .t-marker_error{background:var(--tui-error-bg-hover);color:var(--tui-error-fill)}:host:not([data-state=\"error\"]) .t-marker_error,:host._active .t-marker_error{display:none}:host:not([data-state=\"pass\"]) .t-marker_pass,:host._active .t-marker_pass{display:none}:host:not([data-state=\"normal\"]) .t-marker_custom,:host._active .t-marker_custom{display:none}:host:hover .t-marker_custom{color:var(--tui-link-hover);background:var(--tui-secondary-hover)}\n"], components: [{ type: i1$1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiStepComponent.prototype, "stepState", void 0);
__decorate([
    tuiDefaultProp()
], TuiStepComponent.prototype, "icon", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'button[tuiStep], a[tuiStep]:not([routerLink]), a[tuiStep][routerLink][routerLinkActive]',
                    templateUrl: './step.template.html',
                    styleUrls: ['./step.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService, TuiRouterLinkActiveService, TuiFocusVisibleService],
                    host: {
                        type: 'button',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i2.TuiFocusVisibleService, decorators: [{
                    type: Inject,
                    args: [TuiFocusVisibleService]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiRouterLinkActiveService]
                }] }, { type: TuiStepperComponent, decorators: [{
                    type: Inject,
                    args: [TuiStepperComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { stepState: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-state']
            }], icon: [{
                type: Input
            }], focusVisible: [{
                type: HostBinding,
                args: ['class._focus-visible']
            }], isActive: [{
                type: HostBinding,
                args: ['class._active']
            }], isVertical: [{
                type: HostBinding,
                args: ['class._vertical']
            }], tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], activate: [{
                type: HostListener,
                args: ['click']
            }] } });

class TuiStepperModule {
}
TuiStepperModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiStepperModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperModule, declarations: [TuiStepperComponent, TuiStepComponent], imports: [CommonModule, TuiSvgModule], exports: [TuiStepperComponent, TuiStepComponent] });
TuiStepperModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperModule, imports: [[CommonModule, TuiSvgModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiSvgModule],
                    declarations: [TuiStepperComponent, TuiStepComponent],
                    exports: [TuiStepperComponent, TuiStepComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiStepComponent, TuiStepperComponent, TuiStepperModule };
//# sourceMappingURL=taiga-ui-kit-components-stepper.js.map
