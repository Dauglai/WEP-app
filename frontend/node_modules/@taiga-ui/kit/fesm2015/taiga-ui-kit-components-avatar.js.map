{"version":3,"file":"taiga-ui-kit-components-avatar.js","sources":["../../../projects/kit/components/avatar/avatar-options.ts","../../../projects/kit/components/avatar/avatar.component.ts","../../../projects/kit/components/avatar/avatar.template.html","../../../projects/kit/components/avatar/avatar.module.ts","../../../projects/kit/components/avatar/taiga-ui-kit-components-avatar.ts"],"sourcesContent":["import {InjectionToken, ValueProvider} from '@angular/core';\nimport {TuiSizeXXL, TuiSizeXXS} from '@taiga-ui/core';\n\nexport interface TuiAvatarOptions {\n    readonly size: TuiSizeXXL | TuiSizeXXS;\n    readonly autoColor: boolean;\n    readonly rounded: boolean;\n}\n\n/** Default values for the avatar options. */\nexport const TUI_AVATAR_DEFAULT_OPTIONS: TuiAvatarOptions = {\n    size: `m`,\n    autoColor: false,\n    rounded: false,\n};\n\n/**\n * Default parameters for avatar component\n */\nexport const TUI_AVATAR_OPTIONS = new InjectionToken<TuiAvatarOptions>(\n    `[TUI_AVATAR_OPTIONS]`,\n    {\n        factory: () => TUI_AVATAR_DEFAULT_OPTIONS,\n    },\n);\n\nexport const tuiAvatarOptionsProvider: (\n    options: Partial<TuiAvatarOptions>,\n) => ValueProvider = (options: Partial<TuiAvatarOptions>) => ({\n    provide: TUI_AVATAR_OPTIONS,\n    useValue: {...TUI_AVATAR_DEFAULT_OPTIONS, ...options},\n});\n","import {\n    ChangeDetectionStrategy,\n    Component,\n    HostBinding,\n    Inject,\n    Input,\n} from '@angular/core';\nimport {SafeHtml, SafeResourceUrl} from '@angular/platform-browser';\nimport {tuiDefaultProp, tuiIsString, tuiPure, tuiRequiredSetter} from '@taiga-ui/cdk';\nimport {tuiSizeBigger, TuiSizeXXL, TuiSizeXXS} from '@taiga-ui/core';\nimport {tuiStringHashToHsl} from '@taiga-ui/kit/utils/format';\n\nimport {TUI_AVATAR_OPTIONS, TuiAvatarOptions} from './avatar-options';\n\n@Component({\n    selector: 'tui-avatar',\n    templateUrl: './avatar.template.html',\n    styleUrls: ['./avatar.style.less'],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TuiAvatarComponent {\n    @Input()\n    @HostBinding('attr.data-size')\n    @tuiDefaultProp()\n    size = this.options.size;\n\n    @Input('avatarUrl')\n    @tuiRequiredSetter()\n    set avatarUrlSetter(avatarUrl: SafeResourceUrl | string | null) {\n        this.avatarUrl = avatarUrl;\n        this.isUrlValid = !!avatarUrl && !this.iconAvatar;\n    }\n\n    @Input()\n    @tuiDefaultProp()\n    text = '';\n\n    @Input()\n    @tuiDefaultProp()\n    fallback: SafeHtml | string | null = null;\n\n    @Input()\n    @tuiDefaultProp()\n    autoColor: boolean = this.options.autoColor;\n\n    @Input()\n    @HostBinding('class._rounded')\n    @tuiDefaultProp()\n    rounded: boolean = this.options.rounded;\n\n    avatarUrl: SafeResourceUrl | string | null = null;\n\n    isUrlValid = false;\n\n    constructor(@Inject(TUI_AVATAR_OPTIONS) private readonly options: TuiAvatarOptions) {}\n\n    @HostBinding('style.background')\n    get bgColor(): string {\n        return this.autoColor ? tuiStringHashToHsl(this.text) : '';\n    }\n\n    @HostBinding('class._has-avatar')\n    get hasAvatar(): boolean {\n        return this.avatarUrl !== null && this.isUrlValid;\n    }\n\n    get iconAvatar(): boolean {\n        return tuiIsString(this.avatarUrl) && !!this.avatarUrl?.startsWith('tuiIcon');\n    }\n\n    get useFallback(): boolean {\n        return (\n            !!this.fallback && !!this.avatarUrl && !this.isUrlValid && !this.text.length\n        );\n    }\n\n    get computedText(): string {\n        return this.hasAvatar || this.iconAvatar || this.text === ''\n            ? ''\n            : this.getSlicedText(this.text, this.size);\n    }\n\n    get stringAvatar(): string {\n        return this.iconAvatar ? String(this.avatarUrl) : '';\n    }\n\n    onError(): void {\n        this.isUrlValid = false;\n    }\n\n    @tuiPure\n    private getSlicedText(text: string, size: TuiSizeXXL | TuiSizeXXS): string {\n        const words = text.split(' ');\n\n        return words.length > 1 && tuiSizeBigger(size)\n            ? words[0].slice(0, 1) + words[1].slice(0, 1)\n            : words[0].slice(0, 1);\n    }\n}\n","<!-- eslint-disable @html-eslint/require-img-alt -->\n<img\n    *ngIf=\"isUrlValid\"\n    loading=\"lazy\"\n    class=\"t-image\"\n    [attr.alt]=\"text\"\n    [src]=\"avatarUrl || ''\"\n    (error)=\"onError()\"\n/>\n<tui-svg\n    *ngIf=\"useFallback\"\n    class=\"t-icon\"\n    [src]=\"fallback!\"\n></tui-svg>\n<tui-svg\n    *ngIf=\"stringAvatar\"\n    class=\"t-icon\"\n    [src]=\"stringAvatar\"\n></tui-svg>\n<span class=\"t-text\">{{ computedText }}</span>\n","import {CommonModule} from '@angular/common';\nimport {NgModule} from '@angular/core';\nimport {TuiSvgModule} from '@taiga-ui/core';\nimport {TuiLazyLoadingModule} from '@taiga-ui/kit/directives';\n\nimport {TuiAvatarComponent} from './avatar.component';\n\n@NgModule({\n    imports: [CommonModule, TuiLazyLoadingModule, TuiSvgModule],\n    declarations: [TuiAvatarComponent],\n    exports: [TuiAvatarComponent],\n})\nexport class TuiAvatarModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":"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"}