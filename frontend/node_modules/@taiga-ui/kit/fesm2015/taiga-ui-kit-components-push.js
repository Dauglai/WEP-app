import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, Component, ChangeDetectionStrategy, Inject, Input, Output, Directive, Optional, SkipSelf, InjectionToken, TemplateRef, ChangeDetectorRef, forwardRef, Self, HostBinding, inject, Injectable, NgModule } from '@angular/core';
import { tuiIsObserved, tuiDefaultProp, tuiIfMap, TuiDestroyService, AbstractTuiDialogService, TUI_ALERTS } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_CLOSE_WORD, TuiModeDirective, TUI_BUTTON_OPTIONS, TUI_ANIMATION_OPTIONS, tuiFadeIn, tuiSlideInRight, tuiHeightCollapse, TuiButtonModule, TuiLinkModule, TuiSvgModule, TuiFormatDatePipeModule } from '@taiga-ui/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from 'rxjs';
import { Subject } from 'rxjs';
import * as i5 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusTemplate, POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { takeUntil } from 'rxjs/operators';

class TuiPushComponent {
    constructor(closeWord$) {
        this.closeWord$ = closeWord$;
        this.heading = '';
        this.type = '';
        this.timestamp = 0;
        this.close = new EventEmitter();
    }
    get closeable() {
        return tuiIsObserved(this.close);
    }
}
TuiPushComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushComponent, deps: [{ token: TUI_CLOSE_WORD }], target: i0.ɵɵFactoryTarget.Component });
TuiPushComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPushComponent, selector: "tui-push", inputs: { heading: "heading", type: "type", timestamp: "timestamp" }, outputs: { close: "close" }, ngImport: i0, template: "<div class=\"t-image\">\n    <ng-content select=\"img\"></ng-content>\n</div>\n<button\n    *ngIf=\"closeable\"\n    type=\"button\"\n    tuiIconButton\n    icon=\"tuiIconCloseLarge\"\n    size=\"xs\"\n    appearance=\"\"\n    shape=\"rounded\"\n    class=\"t-close\"\n    [title]=\"closeWord$ | async\"\n    (click)=\"close.emit()\"\n></button>\n<div class=\"t-top\">\n    <span class=\"t-icon\">\n        <ng-content select=\"tui-svg\"></ng-content>\n    </span>\n    {{ type }}\n    <span\n        *ngIf=\"timestamp\"\n        class=\"t-time\"\n        [textContent]=\"timestamp | tuiFormatDate | async\"\n    ></span>\n</div>\n<h3\n    automation-id=\"tui-push__heading\"\n    class=\"t-heading\"\n>\n    {{ heading }}\n</h3>\n<div class=\"t-content\">\n    <ng-content></ng-content>\n</div>\n<div class=\"t-actions\">\n    <span class=\"t-button\">\n        <ng-content select=\"[tuiButton]\"></ng-content>\n    </span>\n    <span class=\"t-link\">\n        <ng-content select=\"[tuiLink]\"></ng-content>\n    </span>\n</div>\n", styles: [":host{box-shadow:0 .25rem 1.5rem #0000001f;position:relative;display:block;width:22.5rem;max-width:100%;box-sizing:border-box;padding:1.25rem 1.25rem .25rem;overflow:hidden;font:var(--tui-font-text-m);border-radius:var(--tui-radius-xl);background:var(--tui-elevation-02)}.t-image{display:flex;flex-direction:column;max-height:10.625rem;overflow:hidden;margin:-1.25rem -1.25rem 1.25rem}.t-close{position:absolute;top:.75rem;right:.75rem;color:#0000008a;background:rgba(242,242,242,.32);-webkit-backdrop-filter:blur(1rem);backdrop-filter:blur(1rem)}.t-top{display:flex;align-items:center;font:var(--tui-font-text-s);color:var(--tui-text-02)}.t-icon{height:1.25rem;margin-right:.5rem;transform:scale(.833);transform-origin:top left;color:var(--tui-link)}.t-time:before{content:\"\\2022\";display:inline-block;width:1rem;text-align:center}.t-heading{line-height:1.25rem;font-weight:bold;margin:.75rem 0 .25rem}.t-heading,.t-content{display:-webkit-box;-webkit-box-orient:vertical;-webkit-line-clamp:2;word-break:break-word;overflow:hidden}.t-actions{display:flex;align-items:center;font:var(--tui-font-text-s)}.t-button:not(:empty){margin:.75rem .75rem .75rem 0}.t-link{margin:.75rem 0}.t-link:empty{margin:.5rem}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe, "tuiFormatDate": i1.TuiFormatDatePipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPushComponent.prototype, "heading", void 0);
__decorate([
    tuiDefaultProp()
], TuiPushComponent.prototype, "type", void 0);
__decorate([
    tuiDefaultProp()
], TuiPushComponent.prototype, "timestamp", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-push',
                    templateUrl: './push.template.html',
                    styleUrls: ['./push.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }]; }, propDecorators: { heading: [{
                type: Input
            }], type: [{
                type: Input
            }], timestamp: [{
                type: Input
            }], close: [{
                type: Output
            }] } });

class TuiPushDirective extends TuiModeDirective {
    constructor(modeDirective) {
        var _a;
        super();
        this.modeDirective = modeDirective;
        this.size = 's';
        this.shape = null;
        this.change$ = ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.change$) || new Subject();
    }
    get appearance() {
        var _a;
        return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) === 'onDark' ? 'accent' : 'secondary';
    }
}
TuiPushDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushDirective, deps: [{ token: TuiModeDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiPushDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPushDirective, selector: "tui-push", providers: [
        {
            provide: TuiModeDirective,
            useExisting: TuiPushDirective,
        },
        {
            provide: TUI_BUTTON_OPTIONS,
            useExisting: TuiPushDirective,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-push',
                    providers: [
                        {
                            provide: TuiModeDirective,
                            useExisting: TuiPushDirective,
                        },
                        {
                            provide: TUI_BUTTON_OPTIONS,
                            useExisting: TuiPushDirective,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiModeDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TuiModeDirective]
                }] }]; } });

const TUI_PUSH_DEFAULT_OPTIONS = {
    heading: ``,
    type: ``,
    timestamp: 0,
    image: ``,
    icon: ``,
    iconColor: ``,
    buttons: [],
};
/**
 * Default parameters for Push component
 */
const TUI_PUSH_OPTIONS = new InjectionToken(`[TUI_PUSH_OPTIONS]`, {
    factory: () => TUI_PUSH_DEFAULT_OPTIONS,
});
function tuiPushOptionsProvider(options) {
    return {
        provide: TUI_PUSH_OPTIONS,
        useValue: Object.assign(Object.assign({}, TUI_PUSH_DEFAULT_OPTIONS), options),
    };
}

class TuiPushAlertDirective extends PolymorpheusTemplate {
    constructor(template, cdr, destroy$, push) {
        super(template, cdr);
        this.show$ = new Subject();
        this.show$
            .pipe(tuiIfMap(() => push.open(this)), takeUntil(destroy$))
            .subscribe();
    }
    set tuiPush(show) {
        this.show$.next(show);
    }
}
TuiPushAlertDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushAlertDirective, deps: [{ token: TemplateRef }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }, { token: forwardRef(() => TuiPushService) }], target: i0.ɵɵFactoryTarget.Directive });
TuiPushAlertDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPushAlertDirective, selector: "[tuiPush]", inputs: { tuiPush: "tuiPush" }, providers: [TuiDestroyService], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushAlertDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiPush]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: TuiPushService, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiPushService)]
                }] }]; }, propDecorators: { tuiPush: [{
                type: Input
            }] } });

class TuiPushAlertComponent {
    constructor(options, context) {
        this.options = options;
        this.context = context;
        this.animation = Object.assign({ value: '' }, this.options);
    }
    get isDirective() {
        return this.context.content instanceof TuiPushAlertDirective;
    }
}
TuiPushAlertComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushAlertComponent, deps: [{ token: TUI_ANIMATION_OPTIONS }, { token: POLYMORPHEUS_CONTEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiPushAlertComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPushAlertComponent, selector: "tui-push-alert", host: { attributes: { "role": "alert" }, properties: { "@tuiFadeIn": "this.animation", "@tuiSlideInRight": "this.animation", "@tuiHeightCollapse": "this.animation" } }, ngImport: i0, template: "<tui-push\n    *ngIf=\"!isDirective; else $any(context.content).template\"\n    [heading]=\"context.heading\"\n    [type]=\"context.type\"\n    [timestamp]=\"context.timestamp\"\n    (close)=\"context.$implicit.complete()\"\n>\n    <img\n        *ngIf=\"context.image\"\n        alt=\"\"\n        [src]=\"context.image\"\n    />\n    <tui-svg\n        *ngIf=\"context.icon\"\n        [style.color]=\"context.iconColor\"\n        [src]=\"context.icon\"\n    ></tui-svg>\n    <div\n        *polymorpheusOutlet=\"context.content as text\"\n        [innerHTML]=\"text\"\n    ></div>\n    <button\n        *ngIf=\"context.buttons.length > 1\"\n        type=\"button\"\n        tuiButton\n        (click)=\"context.$implicit.next(context.buttons[0])\"\n    >\n        {{ context.buttons[0] }}\n    </button>\n    <button\n        *ngIf=\"context.buttons.length\"\n        tuiLink\n        type=\"button\"\n        (click)=\"context.$implicit.next(context.buttons[context.buttons.length - 1])\"\n    >\n        {{ context.buttons[context.buttons.length - 1] }}\n    </button>\n</tui-push>\n", styles: [":host{max-width:calc(100% - 2rem);margin:0 1rem 1rem auto}:host:first-child{margin-top:auto}\n"], components: [{ type: TuiPushComponent, selector: "tui-push", inputs: ["heading", "type", "timestamp"], outputs: ["close"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TuiPushDirective, selector: "tui-push" }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushAlertComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-push-alert',
                    templateUrl: './push-alert.template.html',
                    styleUrls: ['./push-alert.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiFadeIn, tuiSlideInRight, tuiHeightCollapse],
                    host: { role: 'alert' },
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }]; }, propDecorators: { animation: [{
                type: HostBinding,
                args: ['@tuiFadeIn']
            }, {
                type: HostBinding,
                args: ['@tuiSlideInRight']
            }, {
                type: HostBinding,
                args: ['@tuiHeightCollapse']
            }] } });

class TuiPushService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.component = new PolymorpheusComponent(TuiPushAlertComponent);
        this.defaultOptions = inject(TUI_PUSH_OPTIONS);
    }
}
TuiPushService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TuiPushService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushService, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushService, decorators: [{
            type: Injectable,
            args: [{ providedIn: `root` }]
        }] });

class TuiPushModule {
}
TuiPushModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPushModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushModule, declarations: [TuiPushComponent,
        TuiPushDirective,
        TuiPushAlertComponent,
        TuiPushAlertDirective], imports: [CommonModule,
        PolymorpheusModule,
        TuiButtonModule,
        TuiLinkModule,
        TuiSvgModule,
        TuiFormatDatePipeModule], exports: [TuiPushComponent,
        TuiPushDirective,
        TuiPushAlertComponent,
        TuiPushAlertDirective] });
TuiPushModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushModule, providers: [
        {
            provide: TUI_ALERTS,
            useExisting: TuiPushService,
            multi: true,
        },
    ], imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiButtonModule,
            TuiLinkModule,
            TuiSvgModule,
            TuiFormatDatePipeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiButtonModule,
                        TuiLinkModule,
                        TuiSvgModule,
                        TuiFormatDatePipeModule,
                    ],
                    declarations: [
                        TuiPushComponent,
                        TuiPushDirective,
                        TuiPushAlertComponent,
                        TuiPushAlertDirective,
                    ],
                    exports: [
                        TuiPushComponent,
                        TuiPushDirective,
                        TuiPushAlertComponent,
                        TuiPushAlertDirective,
                    ],
                    providers: [
                        {
                            provide: TUI_ALERTS,
                            useExisting: TuiPushService,
                            multi: true,
                        },
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_PUSH_DEFAULT_OPTIONS, TUI_PUSH_OPTIONS, TuiPushAlertComponent, TuiPushAlertDirective, TuiPushComponent, TuiPushDirective, TuiPushModule, TuiPushService, tuiPushOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-push.js.map
