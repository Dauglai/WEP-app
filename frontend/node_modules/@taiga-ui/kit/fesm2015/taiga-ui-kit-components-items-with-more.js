import * as i0 from '@angular/core';
import { Directive, Input, NgZone, ElementRef, Injectable, Inject, TemplateRef, Component, ChangeDetectionStrategy, ContentChildren, ContentChild, NgModule } from '@angular/core';
import { MutationObserverService, MUTATION_OBSERVER_INIT } from '@ng-web-apis/mutation-observer';
import * as i2 from '@taiga-ui/cdk';
import { AbstractTuiController, tuiDefaultProp, tuiZoneOptimized, tuiClamp, TuiResizeService, EMPTY_QUERY, TuiDestroyService, TuiItemDirective, TuiItemModule, TuiLetModule } from '@taiga-ui/cdk';
import { __decorate } from 'tslib';
import * as i1 from 'rxjs';
import { Observable, merge } from 'rxjs';
import { throttleTime, map, distinctUntilChanged, share } from 'rxjs/operators';
import * as i1$1 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i3 from '@taiga-ui/kit/directives';
import { TuiProjectClassModule } from '@taiga-ui/kit/directives';

class TuiItemsWithMoreDirective extends AbstractTuiController {
    constructor() {
        super(...arguments);
        this.itemsLimit = Infinity;
        this.required = -1;
    }
}
TuiItemsWithMoreDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiItemsWithMoreDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiItemsWithMoreDirective, selector: "tui-items-with-more", inputs: { itemsLimit: "itemsLimit", required: "required" }, usesInheritance: true, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiItemsWithMoreDirective.prototype, "itemsLimit", void 0);
__decorate([
    tuiDefaultProp()
], TuiItemsWithMoreDirective.prototype, "required", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-items-with-more',
                }]
        }], propDecorators: { itemsLimit: [{
                type: Input
            }], required: [{
                type: Input
            }] } });

class TuiItemsWithMoreService extends Observable {
    constructor(ngZone, el, mutation$, resize$, directive) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.ngZone = ngZone;
        this.el = el;
        this.mutation$ = mutation$;
        this.resize$ = resize$;
        this.directive = directive;
        this.stream$ = merge(this.directive.change$, this.mutation$, this.resize$).pipe(throttleTime(0), map(() => this.getOverflowIndex()), distinctUntilChanged(), tuiZoneOptimized(this.ngZone), share());
    }
    getOverflowIndex() {
        var _a;
        const { clientWidth, children } = this.el.nativeElement;
        const items = Array.from(children, ({ clientWidth }) => clientWidth);
        const first = this.directive.required === -1 ? 0 : this.directive.required;
        const last = items.length - 1;
        const more = ((_a = children[last]) === null || _a === void 0 ? void 0 : _a.tagName) === `SPAN` ? items[last] : 0;
        items.unshift(...items.splice(first, 1));
        let total = items.reduce((sum, width) => sum + width, 0) - more;
        if (total <= clientWidth && this.directive.itemsLimit >= items.length) {
            return this.maxItems;
        }
        for (let i = last - 1; i > 0; i--) {
            total -= items[i];
            if (total + more <= clientWidth) {
                return tuiClamp(i > this.directive.required ? i - 1 : i - 2, -1, this.maxItems);
            }
        }
        return -1;
    }
    get maxItems() {
        return this.directive.itemsLimit > this.directive.required
            ? this.directive.itemsLimit - 1
            : this.directive.itemsLimit - 2;
    }
}
TuiItemsWithMoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreService, deps: [{ token: NgZone }, { token: ElementRef }, { token: MutationObserverService }, { token: TuiResizeService }, { token: TuiItemsWithMoreDirective }], target: i0.ɵɵFactoryTarget.Injectable });
TuiItemsWithMoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [MutationObserverService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: TuiItemsWithMoreDirective, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreDirective]
                }] }]; } });

class TuiMoreDirective {
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
}
TuiMoreDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoreDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiMoreDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiMoreDirective, selector: "[tuiMore]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMoreDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiMore]',
                }]
        }] });

class TuiItemsWithMoreComponent {
    constructor(directive, lastVisibleIndex$) {
        this.directive = directive;
        this.lastVisibleIndex$ = lastVisibleIndex$;
        this.items = EMPTY_QUERY;
    }
}
TuiItemsWithMoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreComponent, deps: [{ token: TuiItemsWithMoreDirective }, { token: TuiItemsWithMoreService }], target: i0.ɵɵFactoryTarget.Component });
TuiItemsWithMoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiItemsWithMoreComponent, selector: "tui-items-with-more", providers: [
        MutationObserverService,
        TuiResizeService,
        TuiDestroyService,
        TuiItemsWithMoreService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: {
                childList: true,
                characterData: true,
                subtree: true,
            },
        },
    ], queries: [{ propertyName: "more", first: true, predicate: TuiMoreDirective, descendants: true, read: TemplateRef }, { propertyName: "items", predicate: TuiItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<ng-container *tuiLet=\"(lastVisibleIndex$ | async) || 0 as lastIndex\">\n    <div\n        *ngFor=\"let item of items; let index = index\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"index > lastIndex && index !== directive.required\"\n        [tuiProjectClass]=\"['_active']\"\n    >\n        <ng-container *ngTemplateOutlet=\"item\"></ng-container>\n    </div>\n    <span\n        *ngIf=\"more && lastIndex < items.length - 1\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"lastIndex >= items.length - 1\"\n        [tuiProjectClass]=\"['_active']\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex}\"\n        ></ng-container>\n    </span>\n</ng-container>\n", styles: [":host{position:relative;display:flex;align-items:center;white-space:nowrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;visibility:hidden}\n"], directives: [{ type: i1$1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i1$1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiProjectClassDirective, selector: "[tuiProjectClass]", inputs: ["tuiProjectClass"] }, { type: i1$1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i1$1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-items-with-more',
                    templateUrl: './items-with-more.template.html',
                    styleUrls: ['./items-with-more.style.less'],
                    providers: [
                        MutationObserverService,
                        TuiResizeService,
                        TuiDestroyService,
                        TuiItemsWithMoreService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                                characterData: true,
                                subtree: true,
                            },
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: TuiItemsWithMoreDirective, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreDirective]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreService]
                }] }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef, descendants: true }]
            }], more: [{
                type: ContentChild,
                args: [TuiMoreDirective, { read: TemplateRef }]
            }] } });

class TuiItemsWithMoreModule {
}
TuiItemsWithMoreModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiItemsWithMoreModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreModule, declarations: [TuiItemsWithMoreComponent,
        TuiItemsWithMoreDirective,
        TuiMoreDirective], imports: [CommonModule, TuiItemModule, TuiLetModule, TuiProjectClassModule], exports: [TuiItemsWithMoreComponent,
        TuiItemsWithMoreDirective,
        TuiMoreDirective,
        TuiItemDirective] });
TuiItemsWithMoreModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreModule, imports: [[CommonModule, TuiItemModule, TuiLetModule, TuiProjectClassModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiItemModule, TuiLetModule, TuiProjectClassModule],
                    declarations: [
                        TuiItemsWithMoreComponent,
                        TuiItemsWithMoreDirective,
                        TuiMoreDirective,
                    ],
                    exports: [
                        TuiItemsWithMoreComponent,
                        TuiItemsWithMoreDirective,
                        TuiMoreDirective,
                        TuiItemDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiItemsWithMoreComponent, TuiItemsWithMoreDirective, TuiItemsWithMoreModule, TuiItemsWithMoreService, TuiMoreDirective };
//# sourceMappingURL=taiga-ui-kit-components-items-with-more.js.map
