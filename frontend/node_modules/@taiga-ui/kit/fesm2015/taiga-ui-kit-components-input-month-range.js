import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, Directive, NgModule } from '@angular/core';
import * as i5 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i3 from '@taiga-ui/cdk';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, TuiDay, tuiDateClamp, CHAR_EN_DASH, TuiMonthRange, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, AbstractTuiControl, TuiDestroyService, TuiPreventDefaultModule, TuiActiveZoneModule, TuiMapperPipeModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TuiMonthPipe, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiHostedDropdownModule, TuiPrimitiveTextfieldModule, TuiSvgModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_MONTH_FORMATTER, TUI_INPUT_DATE_OPTIONS } from '@taiga-ui/kit/tokens';
import * as i2 from '@taiga-ui/kit/components/calendar-month';
import { TuiCalendarMonthModule } from '@taiga-ui/kit/components/calendar-month';
import * as i4 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i2$1 from 'rxjs';
import { Subject, combineLatest } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';

class TuiInputMonthRangeComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, formatter, options) {
        super(control, cdr);
        this.formatter = formatter;
        this.options = options;
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.defaultActiveYear = TuiDay.currentLocal();
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get computedDefaultActiveYear() {
        var _a;
        return (((_a = this.value) === null || _a === void 0 ? void 0 : _a.from) || tuiDateClamp(this.defaultActiveYear, this.min, this.max));
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    computeValue(from, to) {
        const formattedTo = from === to && this.focused && !this.readOnly ? '' : to;
        return `${from} ${CHAR_EN_DASH} ${formattedTo}`;
    }
    onValueChange(value) {
        if (value) {
            return;
        }
        this.value = null;
        this.onOpenChange(true);
    }
    onMonthClick(month) {
        if (this.value === null || !this.value.isSingleMonth) {
            this.writeValue(new TuiMonthRange(month, month));
            return;
        }
        this.value = TuiMonthRange.sort(this.value.from, month);
        this.close();
    }
    onOpenChange(open) {
        this.open = open;
    }
    onActiveZone(focused) {
        var _a;
        this.updateFocused(focused);
        if (focused) {
            return;
        }
        if ((_a = this.value) === null || _a === void 0 ? void 0 : _a.isSingleMonth) {
            this.value = new TuiMonthRange(this.value.from, this.value.from);
        }
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    close() {
        this.open = false;
    }
}
TuiInputMonthRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_MONTH_FORMATTER }, { token: TUI_INPUT_DATE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputMonthRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputMonthRangeComponent, selector: "tui-input-month-range", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", defaultActiveYear: "defaultActiveYear" }, providers: [
        tuiAsFocusableItemAccessor(TuiInputMonthRangeComponent),
        tuiAsControl(TuiInputMonthRangeComponent),
        TUI_MONTH_FORMATTER_PROVIDER,
        TuiMonthPipe,
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [disabled]=\"computedDisabled\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"calendarIcon\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [invalid]=\"computedInvalid\"\n        [value]=\"\n            value\n                ? computeValue(value.from | tuiMapper : formatter | async, value.to | tuiMapper : formatter | async)\n                : ''\n        \"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [value]=\"value\"\n            [year]=\"computedDefaultActiveYear\"\n            (monthClick)=\"onMonthClick($event)\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiCalendarMonthComponent, selector: "tui-calendar-month", inputs: ["value", "year", "disabledItemHandler", "min", "max"], outputs: ["monthClick", "hoveredItemChange", "yearChange"] }], directives: [{ type: i3.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i3.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i4.AsyncPipe, "tuiMapper": i3.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputMonthRangeComponent.prototype, "defaultActiveYear", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-month-range',
                    templateUrl: './input-month-range.template.html',
                    styleUrls: ['./input-month-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputMonthRangeComponent),
                        tuiAsControl(TuiInputMonthRangeComponent),
                        TUI_MONTH_FORMATTER_PROVIDER,
                        TuiMonthPipe,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MONTH_FORMATTER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], defaultActiveYear: [{
                type: Input
            }] } });

class TuiInputMonthRangeDirective extends AbstractTuiTextfieldHost {
    constructor(host, formatter, destroy$) {
        super(host);
        this.value$ = new Subject();
        this.localizedValue = ['', ''];
        this.value$
            .pipe(distinctUntilChanged(), switchMap((value) => combineLatest([
            formatter((value === null || value === void 0 ? void 0 : value.from) || null),
            formatter((value === null || value === void 0 ? void 0 : value.to) || null),
        ])), takeUntil(destroy$))
            .subscribe(localizedValue => {
            this.localizedValue = localizedValue;
        });
    }
    get readOnly() {
        return true;
    }
    get value() {
        return this.localizedValue[0]
            ? this.host.computeValue(...this.localizedValue)
            : '';
    }
    ngDoCheck() {
        this.value$.next(this.host.value);
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
}
TuiInputMonthRangeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeDirective, deps: [{ token: AbstractTuiControl }, { token: TUI_MONTH_FORMATTER }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiInputMonthRangeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputMonthRangeDirective, selector: "tui-input-month-range", providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective), TuiDestroyService], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-month-range',
                    providers: [tuiAsTextfieldHost(TuiInputMonthRangeDirective), TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: TuiInputMonthRangeComponent, decorators: [{
                    type: Inject,
                    args: [AbstractTuiControl]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MONTH_FORMATTER]
                }] }, { type: i2$1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; } });

class TuiInputMonthRangeModule {
}
TuiInputMonthRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputMonthRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeModule, declarations: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective], imports: [CommonModule,
        TuiCalendarMonthModule,
        TuiHostedDropdownModule,
        TuiPrimitiveTextfieldModule,
        TuiSvgModule,
        TuiPreventDefaultModule,
        TuiActiveZoneModule,
        TuiMapperPipeModule,
        TuiTextfieldControllerModule], exports: [TuiInputMonthRangeComponent,
        TuiInputMonthRangeDirective,
        TuiTextfieldComponent] });
TuiInputMonthRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeModule, imports: [[
            CommonModule,
            TuiCalendarMonthModule,
            TuiHostedDropdownModule,
            TuiPrimitiveTextfieldModule,
            TuiSvgModule,
            TuiPreventDefaultModule,
            TuiActiveZoneModule,
            TuiMapperPipeModule,
            TuiTextfieldControllerModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthRangeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiCalendarMonthModule,
                        TuiHostedDropdownModule,
                        TuiPrimitiveTextfieldModule,
                        TuiSvgModule,
                        TuiPreventDefaultModule,
                        TuiActiveZoneModule,
                        TuiMapperPipeModule,
                        TuiTextfieldControllerModule,
                    ],
                    declarations: [TuiInputMonthRangeComponent, TuiInputMonthRangeDirective],
                    exports: [
                        TuiInputMonthRangeComponent,
                        TuiInputMonthRangeDirective,
                        TuiTextfieldComponent,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputMonthRangeComponent, TuiInputMonthRangeDirective, TuiInputMonthRangeModule };
//# sourceMappingURL=taiga-ui-kit-components-input-month-range.js.map
