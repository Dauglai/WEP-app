import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, HostListener, NgModule } from '@angular/core';
import * as i3 from '@angular/forms';
import { NgControl, FormsModule, ReactiveFormsModule } from '@angular/forms';
import * as i2 from '@taiga-ui/cdk';
import { AbstractTuiControl, tuiIsNativeFocused, tuiClamp, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, TuiFocusableModule, TuiRepeatTimesModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TuiSvgModule } from '@taiga-ui/core';

const TUI_RATING_DEFAULT_OPTIONS = {
    min: 0,
    max: 5,
    iconNormal: `tuiIconStarLarge`,
    iconFilled: `tuiIconStarLarge`,
};
/**
 * Default parameters for Rating component
 */
const TUI_RATING_OPTIONS = new InjectionToken(`[TUI_RATING_OPTIONS]`, {
    factory: () => TUI_RATING_DEFAULT_OPTIONS,
});
const tuiRatingOptionsProvider = (options) => ({
    provide: TUI_RATING_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_RATING_DEFAULT_OPTIONS), options),
});

class TuiRatingComponent extends AbstractTuiControl {
    constructor(ngControl, cdr, options) {
        super(ngControl, cdr);
        this.options = options;
        this.min = this.options.min;
        this.max = this.options.max;
        this.iconNormal = this.options.iconNormal;
        this.iconFilled = this.options.iconFilled;
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.focusableElement
            ? null
            : this.focusableElement.nativeElement;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get isFocusable() {
        return !(this.readOnly || this.disabled);
    }
    get percent() {
        return tuiClamp((100 * this.value) / this.max, 0, 100);
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    setRateByReverseIndex(index) {
        this.value = this.max - index;
    }
    setRate(value) {
        this.value = value;
    }
    getFallbackValue() {
        return 0;
    }
}
TuiRatingComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRatingComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_RATING_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiRatingComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiRatingComponent, selector: "tui-rating", inputs: { min: "min", max: "max", iconNormal: "iconNormal", iconFilled: "iconFilled" }, host: { listeners: { "focusin": "onFocused(true)", "focusout": "onFocused(false)" } }, providers: [
        tuiAsFocusableItemAccessor(TuiRatingComponent),
        tuiAsControl(TuiRatingComponent),
    ], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<label>\n    <ng-content></ng-content>\n\n    <div class=\"t-host\">\n        <div class=\"t-interactive\">\n            <tui-svg\n                *tuiRepeatTimes=\"let index of max\"\n                class=\"t-icon-rating t-icon-filled\"\n                [class.t-icon-rating-last]=\"index === 0\"\n                [src]=\"iconFilled\"\n                (click)=\"setRateByReverseIndex(index)\"\n            ></tui-svg>\n        </div>\n\n        <div\n            class=\"t-wrapper\"\n            [style.width.%]=\"percent\"\n        >\n            <tui-svg\n                *tuiRepeatTimes=\"let index of max\"\n                class=\"t-icon-rating t-icon-filled\"\n                [class.t-icon-rating-last]=\"index === 0\"\n                [src]=\"iconFilled\"\n            ></tui-svg>\n        </div>\n\n        <tui-svg\n            *tuiRepeatTimes=\"let index of max\"\n            class=\"t-icon-rating\"\n            [class.t-icon-rating-last]=\"max - 1 === index\"\n            [src]=\"iconNormal\"\n        ></tui-svg>\n\n        <input\n            #focusableElement\n            type=\"range\"\n            step=\"1\"\n            class=\"t-input\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [ngModel]=\"value\"\n            [tuiFocusable]=\"isFocusable\"\n            (ngModelChange)=\"setRate($event)\"\n        />\n    </div>\n</label>\n", styles: [":host._readonly,:host._disabled{pointer-events:none}:host._disabled{opacity:var(--tui-disabled-opacity)}.t-host{position:relative;display:inline-flex}.t-icon-rating{width:var(--tui-rating-size, 1.5rem);height:var(--tui-rating-size, 1.5rem);padding:0 var(--tui-rating-gap, 0) 0 0}.t-icon-rating-last{padding-right:0}.t-input{pointer-events:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;background:transparent}.t-input::-webkit-slider-thumb{display:none}.t-input::-moz-range-thumb{opacity:0}.t-input,.t-wrapper,.t-interactive{position:absolute;left:0;bottom:0;width:100%;height:100%}.t-wrapper,.t-interactive{display:inline-flex;overflow:hidden;flex-direction:row-reverse;justify-content:flex-end;white-space:nowrap}.t-wrapper{pointer-events:none}.t-interactive{opacity:0}@media (hover: hover) and (pointer: fine){.t-interactive:hover{opacity:1}.t-interactive:hover~.t-wrapper{visibility:hidden}.t-interactive:hover .t-icon-filled{opacity:0}.t-interactive:hover .t-icon-filled:hover,.t-interactive:hover .t-icon-filled:hover~.t-icon-filled{opacity:1}}.t-icon-filled{position:relative;cursor:pointer;fill:currentColor}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { type: i3.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i2.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiRatingComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiRatingComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiRatingComponent.prototype, "iconNormal", void 0);
__decorate([
    tuiDefaultProp()
], TuiRatingComponent.prototype, "iconFilled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRatingComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-rating',
                    templateUrl: './rating.template.html',
                    styleUrls: ['./rating.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiRatingComponent),
                        tuiAsControl(TuiRatingComponent),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_RATING_OPTIONS]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], iconNormal: [{
                type: Input
            }], iconFilled: [{
                type: Input
            }], onFocused: [{
                type: HostListener,
                args: ['focusin', ['true']]
            }, {
                type: HostListener,
                args: ['focusout', ['false']]
            }] } });

class TuiRatingModule {
}
TuiRatingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRatingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiRatingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRatingModule, declarations: [TuiRatingComponent], imports: [TuiSvgModule,
        TuiFocusableModule,
        TuiRepeatTimesModule,
        FormsModule,
        ReactiveFormsModule], exports: [TuiRatingComponent] });
TuiRatingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRatingModule, imports: [[
            TuiSvgModule,
            TuiFocusableModule,
            TuiRepeatTimesModule,
            FormsModule,
            ReactiveFormsModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRatingModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        TuiSvgModule,
                        TuiFocusableModule,
                        TuiRepeatTimesModule,
                        FormsModule,
                        ReactiveFormsModule,
                    ],
                    declarations: [TuiRatingComponent],
                    exports: [TuiRatingComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_RATING_DEFAULT_OPTIONS, TUI_RATING_OPTIONS, TuiRatingComponent, TuiRatingModule, tuiRatingOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-rating.js.map
