import * as i0 from '@angular/core';
import { InjectionToken, ElementRef, Optional, Component, ChangeDetectionStrategy, Inject, HostBinding, EventEmitter, Directive, Input, Output, HostListener, NgZone, ChangeDetectorRef, ContentChildren, forwardRef, TemplateRef, ViewChild, NgModule } from '@angular/core';
import * as i2 from '@angular/router';
import { RouterLinkActive } from '@angular/router';
import * as i4 from '@taiga-ui/cdk';
import { TuiDestroyService, TuiFocusVisibleService, tuiTypedFromEvent, tuiIsNativeFocused, tuiMoveFocus, tuiDefaultProp, tuiZonefree, EMPTY_QUERY, TuiResizeService, tuiPure, tuiClamp, tuiIsElement, tuiGetClosestFocusable, tuiToInt, TuiItemDirective, TuiFocusableModule, TuiItemModule } from '@taiga-ui/cdk';
import * as i2$1 from '@taiga-ui/core';
import { TuiRouterLinkActiveService, MODE_PROVIDER, TUI_MODE, TuiHostedDropdownModule, TuiSvgModule } from '@taiga-ui/core';
import { TUI_TAB_MARGIN, TUI_MORE_WORD } from '@taiga-ui/kit/tokens';
import { MutationObserverService, MUTATION_OBSERVER_INIT } from '@ng-web-apis/mutation-observer';
import * as i3 from 'rxjs';
import { EMPTY, merge, identity, ReplaySubject, of } from 'rxjs';
import { filter, map, switchMap, share, debounceTime, tap, startWith, takeUntil } from 'rxjs/operators';
import * as i5 from '@angular/common';
import { DOCUMENT, CommonModule } from '@angular/common';
import { __decorate } from 'tslib';
import * as i8 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { asCallable } from '@tinkoff/ng-event-plugins';

/**
 * Stream of tab activation events
 */
const TUI_TAB_EVENT = new InjectionToken(`[TUI_TAB_EVENT]`);
const TUI_TAB_ACTIVATE = `tui-tab-activate`;
const TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            TuiRouterLinkActiveService,
            [new Optional(), MutationObserverService],
            [new Optional(), RouterLinkActive],
        ],
        useFactory: ({ nativeElement }, routerLinkActiveService, mutationObserverService, routerLinkActive) => {
            const mutationObserver = routerLinkActive && mutationObserverService
                ? mutationObserverService.pipe(filter(() => routerLinkActive.isActive))
                : EMPTY;
            return merge(mutationObserver, routerLinkActiveService.pipe(filter(identity)), nativeElement.matches(`button`)
                ? tuiTypedFromEvent(nativeElement, `click`)
                : EMPTY).pipe(map(() => nativeElement.dispatchEvent(new CustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }))));
        },
    },
    MODE_PROVIDER,
];

class TuiTabComponent {
    constructor(routerLinkActive, el, mode$, event$, margin, focusVisible$) {
        this.routerLinkActive = routerLinkActive;
        this.el = el;
        this.mode$ = mode$;
        this.event$ = event$;
        this.margin = margin;
        this.focusVisible = false;
        focusVisible$.subscribe(visible => {
            this.focusVisible = visible;
        });
    }
    get isActive() {
        return !!this.routerLinkActive && this.routerLinkActive.isActive;
    }
    ngOnDestroy() {
        if (tuiIsNativeFocused(this.el.nativeElement)) {
            this.el.nativeElement.blur();
        }
    }
}
TuiTabComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabComponent, deps: [{ token: RouterLinkActive, optional: true }, { token: ElementRef }, { token: TUI_MODE }, { token: TUI_TAB_EVENT }, { token: TUI_TAB_MARGIN }, { token: TuiFocusVisibleService }], target: i0.ɵɵFactoryTarget.Component });
TuiTabComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabComponent, selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]", host: { attributes: { "type": "button" }, listeners: { "$.data-mode.attr": "mode$" }, properties: { "style.cursor": "\"pointer\"", "style.--tui-tab-margin.px": "margin", "class._focus-visible": "this.focusVisible", "class._active": "this.isActive" } }, providers: TUI_TAB_PROVIDERS, ngImport: i0, template: "<ng-container *ngIf=\"event$ | async\"></ng-container>\n<span class=\"t-highlight\">\n    <ng-content></ng-content>\n</span>\n", styles: [":host-context(._underline):hover{box-shadow:inset 0 -2px var(--tui-base-03)}:host-context(tui-tabs >):first-child,:host-context([tuiTabs] >):first-child,:host-context(tui-tabs > :first-child),:host-context([tuiTabs] > :first-child){margin-left:0}:host{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0;border:0;background:none;font-size:inherit;line-height:inherit;position:relative;display:flex;flex-shrink:0;height:100%;box-sizing:border-box;justify-content:space-between;align-items:center;white-space:nowrap;cursor:pointer;outline:none;text-decoration:none;color:inherit;transition-property:color,box-shadow,opacity;margin-left:var(--tui-tab-margin, 1.5rem)}:host:disabled{opacity:var(--tui-disabled-opacity);pointer-events:none}:host:not([data-mode])._active{opacity:1;color:var(--tui-text-01);box-shadow:none}:host[data-mode=onDark]{color:#ffffffb8}:host[data-mode=onDark]:hover,:host[data-mode=onDark]._active{color:#fff}:host[data-mode=onDark]._focus-visible .t-highlight{background:var(--tui-clear-inverse);color:var(--tui-text-01)}:host[data-mode=onLight]{color:var(--tui-text-02)}:host[data-mode=onLight]:hover,:host[data-mode=onLight]._active{color:var(--tui-text-01)}:host[data-mode=onLight]._focus-visible .t-highlight{background:var(--tui-text-01);color:#fff}:host._focus-visible .t-highlight{background:var(--tui-selection)}:host._android{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;height:3rem;flex:1;flex-shrink:0;justify-content:center;margin:0;text-transform:uppercase;color:var(--tui-base-09);opacity:.5;font-size:.875rem;font-weight:500;letter-spacing:-.008125rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,\"Helvetica Neue\",sans-serif}:host._android:hover{box-shadow:none}:host._android._active{opacity:1;color:var(--tui-base-09)}:host._android .t-highlight{width:auto}:host._ios{height:1.75rem;flex:1;flex-shrink:0;justify-content:center;margin:0;color:var(--tui-base-01);opacity:1;font-size:.8125rem;font-weight:500;letter-spacing:-.005rem;font-family:-apple-system,BlinkMacSystemFont,Roboto,\"Helvetica Neue\",sans-serif}:host._ios:hover{box-shadow:none}:host._ios._active{font-size:.875rem;font-weight:600;color:var(--tui-link)}:host._ios .t-highlight{width:auto}@media (hover: hover){:host:hover{color:var(--tui-text-01)}}.t-highlight{display:inline-flex;width:100%;align-items:center;justify-content:inherit}.t-highlight ::ng-deep>*{flex-shrink:0}:host-context(tui-tabs[data-vertical]),:host-context([tuiTabs][data-vertical]){min-height:2.75rem;height:auto;white-space:normal;margin:0;text-align:left;padding:.25rem 1.25rem .25rem 0}:host-context(tui-tabs[data-vertical]):after,:host-context([tuiTabs][data-vertical]):after{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;content:\"\";position:absolute;top:0;bottom:0;right:0;width:2px;background:var(--tui-primary);transform:scaleX(0);transform-origin:right}:host-context(tui-tabs[data-vertical]):hover,:host-context([tuiTabs][data-vertical]):hover{box-shadow:inset -2px 0 var(--tui-base-03)}:host-context(tui-tabs[data-vertical])._active:after,:host-context([tuiTabs][data-vertical])._active:after{transform:none}:host-context(tui-tabs[data-vertical=\"right\"]),:host-context([tuiTabs][data-vertical=\"right\"]){text-align:right;padding:.25rem 0 .25rem 1.25rem}:host-context(tui-tabs[data-vertical=\"right\"]):after,:host-context([tuiTabs][data-vertical=\"right\"]):after{right:auto;left:0;transform-origin:left}:host-context(tui-tabs[data-vertical=\"right\"]):hover,:host-context([tuiTabs][data-vertical=\"right\"]):hover{box-shadow:inset 2px 0 var(--tui-base-03)}\n"], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]',
                    templateUrl: './tab.template.html',
                    styleUrls: ['./tab.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_TAB_PROVIDERS,
                    host: {
                        '($.data-mode.attr)': 'mode$',
                        /**
                         * SSR hack - problem with the Domino renderer that Angular uses for its server-side DOM implementation.
                         * Domino doesn't support CSS variables and some CSS properties like clip-path.
                         * Read more: https://github.com/Tinkoff/taiga-ui/issues/3210#issuecomment-1375788017
                         * ___
                         * TODO: drop this line after Angular team switch over to a new JavaScript DOM API
                         * https://github.com/angular/angular/issues/42170
                         */
                        '[style.cursor]': '"pointer"',
                        '[style.--tui-tab-margin.px]': 'margin',
                        type: 'button',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i2.RouterLinkActive, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [RouterLinkActive]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TAB_EVENT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TAB_MARGIN]
                }] }, { type: i4.TuiFocusVisibleService, decorators: [{
                    type: Inject,
                    args: [TuiFocusVisibleService]
                }] }]; }, propDecorators: { focusVisible: [{
                type: HostBinding,
                args: ['class._focus-visible']
            }], isActive: [{
                type: HostBinding,
                args: ['class._active']
            }] } });

class TuiTabsDirective {
    constructor(el) {
        this.el = el;
        this.activeItemIndex = 0;
        this.activeItemIndexChange = new EventEmitter();
    }
    get tabs() {
        return Array.from(this.el.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        return this.tabs[this.activeItemIndex] || null;
    }
    onActivate(event, element) {
        const index = this.tabs.findIndex(tab => tab === element);
        event.stopPropagation();
        if (index === this.activeItemIndex) {
            return;
        }
        this.activeItemIndexChange.emit(index);
        this.activeItemIndex = index;
    }
    moveFocus(current, step) {
        const { tabs } = this;
        tuiMoveFocus(tabs.indexOf(current), tabs, step);
    }
    ngAfterViewChecked() {
        const { tabs, activeElement } = this;
        tabs.forEach(nativeElement => {
            const active = nativeElement === activeElement;
            nativeElement.classList.toggle('_active', active);
            nativeElement.setAttribute('tabIndex', active ? '0' : '-1');
        });
    }
}
TuiTabsDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiTabsDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabsDirective, selector: "tui-tabs, nav[tuiTabs]", inputs: { activeItemIndex: "activeItemIndex" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { listeners: { "tui-tab-activate": "onActivate($event,$event.target)" } }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiTabsDirective.prototype, "activeItemIndex", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-tabs, nav[tuiTabs]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { activeItemIndex: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], onActivate: [{
                type: HostListener,
                args: [TUI_TAB_ACTIVATE, ['$event', '$event.target']]
            }] } });

const TUI_TABS_DEFAULT_OPTIONS = {
    underline: true,
    exposeActive: true,
    itemsLimit: Infinity,
    minMoreWidth: 0,
};
/**
 * Default parameters for Tabs component
 */
const TUI_TABS_OPTIONS = new InjectionToken(`[TUI_TABS_OPTIONS]`, {
    factory: () => TUI_TABS_DEFAULT_OPTIONS,
});
const tuiTabsOptionsProvider = (options) => ({
    provide: TUI_TABS_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_TABS_DEFAULT_OPTIONS), options),
});

class TuiUnderlineComponent {
    constructor({ nativeElement }, ngZone, animationFrame$, mode$) {
        this.ngZone = ngZone;
        this.animationFrame$ = animationFrame$;
        this.mode$ = mode$;
        this.el$ = new ReplaySubject(1);
        this.refresh$ = this.el$.pipe(switchMap(element => element
            ? this.animationFrame$.pipe(map(() => element), tuiZonefree(this.ngZone))
            : of(null)), share());
        this.transition$ = asCallable(this.el$.pipe(map(element => element && 'all'), debounceTime(50)));
        this.transform$ = asCallable(this.refresh$.pipe(map(element => element ? `translate3d(${element.offsetLeft}px, 0, 0)` : null)));
        this.width$ = asCallable(this.refresh$.pipe(map(element => (element === null || element === void 0 ? void 0 : element.clientWidth) || 0)));
        nativeElement['$.style.transitionProperty'] = this.transition$;
        nativeElement['$.style.transform'] = this.transform$;
        nativeElement['$.style.width.px'] = this.width$;
    }
    set element(element) {
        this.el$.next(element);
    }
}
TuiUnderlineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiUnderlineComponent, deps: [{ token: ElementRef }, { token: NgZone }, { token: ANIMATION_FRAME }, { token: TUI_MODE }], target: i0.ɵɵFactoryTarget.Component });
TuiUnderlineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiUnderlineComponent, selector: "tui-underline", inputs: { element: "element" }, host: { listeners: { "$.data-mode.attr": "mode$", "$.style.transitionProperty": "transition$()", "$.style.transform": "transform$()", "$.style.width.px": "width$()" } }, providers: [MODE_PROVIDER], ngImport: i0, template: '', isInline: true, styles: [":host{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;left:0;height:100%;color:var(--tui-primary);transform:scale(0);box-shadow:inset 0 -.1875rem 0 -.0625rem;transition-property:none;pointer-events:none}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-mode=onLight]{color:var(--tui-text-02)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiUnderlineComponent.prototype, "element", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiUnderlineComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-underline',
                    template: '',
                    styleUrls: ['./underline.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }]; }, propDecorators: { element: [{
                type: Input
            }], transition$: [{
                type: HostListener,
                args: ['$.style.transitionProperty']
            }], transform$: [{
                type: HostListener,
                args: ['$.style.transform']
            }], width$: [{
                type: HostListener,
                args: ['$.style.width.px']
            }] } });

class TuiTabsComponent {
    constructor(options, el, tabs, cdr, resize$) {
        this.options = options;
        this.el = el;
        this.tabs = tabs;
        this.children = EMPTY_QUERY;
        this.underline = this.options.underline;
        resize$.pipe(filter(() => this.underline)).subscribe(() => {
            cdr.detectChanges();
        });
    }
    /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
    get activeItemIndex() {
        return this.tabs.activeItemIndex;
    }
    /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
    set activeItemIndex(index) {
        this.tabs.activeItemIndex = index;
    }
    get activeElement() {
        return this.tabs.activeElement;
    }
    onKeyDownArrow(current, step) {
        this.tabs.moveFocus(current, step);
    }
    ngAfterViewChecked() {
        this.scrollTo(this.tabs.activeItemIndex);
    }
    scrollTo(index) {
        const element = this.tabs.tabs[index];
        if (!element) {
            return;
        }
        const { offsetLeft, offsetWidth } = element;
        const { nativeElement } = this.el;
        if (offsetLeft < nativeElement.scrollLeft) {
            nativeElement.scrollLeft = offsetLeft;
        }
        if (offsetLeft + offsetWidth >
            nativeElement.scrollLeft + nativeElement.offsetWidth) {
            nativeElement.scrollLeft =
                offsetLeft + offsetWidth - nativeElement.offsetWidth;
        }
    }
}
TuiTabsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsComponent, deps: [{ token: TUI_TABS_OPTIONS }, { token: ElementRef }, { token: TuiTabsDirective }, { token: ChangeDetectorRef }, { token: TuiResizeService }], target: i0.ɵɵFactoryTarget.Component });
TuiTabsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabsComponent, selector: "tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])", inputs: { underline: "underline" }, host: { listeners: { "keydown.arrowRight.prevent": "onKeyDownArrow($event.target,1)", "keydown.arrowLeft.prevent": "onKeyDownArrow($event.target,-1)" }, properties: { "class._underline": "this.underline" } }, providers: [
        TuiDestroyService,
        TuiResizeService,
        MutationObserverService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: {
                childList: true,
            },
        },
    ], queries: [{ propertyName: "children", predicate: i0.forwardRef(function () { return TuiTabComponent; }) }], ngImport: i0, template: "<ng-container *ngIf=\"children.changes | async\"></ng-container>\n<ng-content></ng-content>\n<tui-underline\n    *ngIf=\"underline\"\n    class=\"t-underline\"\n    [element]=\"activeElement\"\n></tui-underline>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;position:relative;z-index:0;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}.t-underline{z-index:-1}\n"], components: [{ type: TuiUnderlineComponent, selector: "tui-underline", inputs: ["element"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTabsComponent.prototype, "underline", void 0);
__decorate([
    tuiPure
], TuiTabsComponent.prototype, "scrollTo", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])',
                    templateUrl: './tabs.template.html',
                    styleUrls: ['./tabs.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiResizeService,
                        MutationObserverService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                            },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABS_OPTIONS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: TuiTabsDirective, decorators: [{
                    type: Inject,
                    args: [TuiTabsDirective]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiTabComponent)]
            }], underline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._underline']
            }], onKeyDownArrow: [{
                type: HostListener,
                args: ['keydown.arrowRight.prevent', ['$event.target', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowLeft.prevent', ['$event.target', '-1']]
            }], scrollTo: [] } });

class TuiTabsVerticalComponent {
    constructor(tabs) {
        this.tabs = tabs;
        this.vertical = 'left';
    }
    onKeyDownArrow(current, step) {
        this.tabs.moveFocus(current, step);
    }
}
TuiTabsVerticalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsVerticalComponent, deps: [{ token: TuiTabsDirective }], target: i0.ɵɵFactoryTarget.Component });
TuiTabsVerticalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabsVerticalComponent, selector: "tui-tabs[vertical], nav[tuiTabs][vertical]", inputs: { vertical: "vertical" }, host: { listeners: { "keydown.arrowDown.prevent": "onKeyDownArrow($event.target,1)", "keydown.arrowUp.prevent": "onKeyDownArrow($event.target,-1)" }, properties: { "attr.data-vertical": "this.vertical" } }, ngImport: i0, template: `
        <ng-content></ng-content>
    `, isInline: true, styles: [":host{display:flex;flex-direction:column;font:var(--tui-font-text-m);color:var(--tui-text-02);box-shadow:inset -1px 0 var(--tui-base-03)}:host[data-vertical=right]{box-shadow:inset 1px 0 var(--tui-base-03)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTabsVerticalComponent.prototype, "vertical", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsVerticalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tabs[vertical], nav[tuiTabs][vertical]',
                    template: `
        <ng-content></ng-content>
    `,
                    styleUrls: ['./tabs-vertical.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: TuiTabsDirective, decorators: [{
                    type: Inject,
                    args: [TuiTabsDirective]
                }] }]; }, propDecorators: { vertical: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-vertical']
            }], onKeyDownArrow: [{
                type: HostListener,
                args: ['keydown.arrowDown.prevent', ['$event.target', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp.prevent', ['$event.target', '-1']]
            }] } });

const TUI_TABS_REFRESH = new InjectionToken(`[TUI_TABS_REFRESH]`);
const TUI_TABS_PROVIDERS = [
    TuiResizeService,
    TuiDestroyService,
    MutationObserverService,
    {
        provide: MUTATION_OBSERVER_INIT,
        useValue: {
            childList: true,
            subtree: true,
            characterData: true,
        },
    },
    {
        provide: TUI_TABS_REFRESH,
        deps: [
            TuiResizeService,
            MutationObserverService,
            TuiDestroyService,
            DOCUMENT,
            ElementRef,
            ChangeDetectorRef,
        ],
        useFactory: (resize$, mutations$, destroy$, { body }, { nativeElement }, cdr) => {
            return merge(resize$, mutations$.pipe(tap(() => cdr.detectChanges()))).pipe(
            // Ignoring cases when host is detached from DOM
            filter(() => body.contains(nativeElement)), debounceTime(0), startWith(null), takeUntil(destroy$));
        },
    },
];

class TuiTabsWithMoreComponent {
    constructor(options, margin, refresh$, el, cdr, moreWord$) {
        this.options = options;
        this.margin = margin;
        this.refresh$ = refresh$;
        this.el = el;
        this.cdr = cdr;
        this.moreWord$ = moreWord$;
        this.maxIndex = Infinity;
        this.underline = this.options.underline;
        this.activeItemIndex = 0;
        this.itemsLimit = this.options.itemsLimit;
        this.activeItemIndexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.open = false;
    }
    // TODO: Improve performance
    get tabs() {
        return Array.from(this.el.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        var _a;
        const { tabs } = this;
        const safeActiveIndex = tuiClamp(this.activeItemIndex || 0, 0, tabs.length - 2);
        return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex
            ? tabs[safeActiveIndex] || null
            : ((_a = this.moreButton) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
    }
    get isMoreAlone() {
        return this.lastVisibleIndex < 0 && !this.options.exposeActive;
    }
    get isMoreVisible() {
        return this.lastVisibleIndex < this.items.length - 1;
    }
    get isMoreFocusable() {
        return !!this.moreButton && tuiIsNativeFocused(this.moreButton.nativeElement);
    }
    get isMoreActive() {
        return (this.open ||
            (!this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex));
    }
    get lastVisibleIndex() {
        if (this.itemsLimit + 1 >= this.items.length) {
            return this.maxIndex;
        }
        const offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive
            ? 1
            : 2;
        return Math.min(this.itemsLimit - offset, this.maxIndex);
    }
    ngAfterViewInit() {
        this.refresh$
            .pipe(map(() => this.getMaxIndex()), filter(maxIndex => this.maxIndex !== maxIndex))
            .subscribe(maxIndex => {
            this.maxIndex = maxIndex;
            this.cdr.detectChanges();
        });
    }
    onActiveItemIndexChange(activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    }
    onClick(index) {
        this.open = false;
        this.focusMore();
        this.updateActiveItemIndex(index);
    }
    onArrowRight(event) {
        if (tuiIsElement(event.target) && tuiIsNativeFocused(event.target)) {
            this.focusMore();
        }
    }
    onArrowLeft() {
        const { tabs } = this;
        let index = tabs.length - 2;
        while (index >= 0) {
            tabs[index].focus();
            if (tuiIsNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    }
    onWrapperArrow(event, wrapper, previous) {
        const button = event.target;
        const target = tuiGetClosestFocusable({ initial: button, root: wrapper, previous });
        if (target) {
            target.focus();
        }
    }
    isOverflown(index) {
        return index !== this.activeItemIndex || !this.options.exposeActive;
    }
    shouldShow(index) {
        return index > this.lastVisibleIndex && this.isOverflown(index);
    }
    focusMore() {
        if (this.moreButton) {
            this.moreButton.nativeElement.focus();
        }
    }
    getMaxIndex() {
        const { tabs, activeItemIndex, margin } = this;
        if (tabs.length < 2) {
            return 0;
        }
        const { exposeActive, minMoreWidth } = this.options;
        const { clientWidth } = this.el.nativeElement;
        const activeWidth = tabs[activeItemIndex] ? tabs[activeItemIndex].scrollWidth : 0;
        const moreWidth = Math.max(tabs[tabs.length - 1].scrollWidth, minMoreWidth);
        let maxIndex = tabs.length - 2;
        let total = tabs.reduce((acc, { scrollWidth }) => acc + scrollWidth, 0) +
            maxIndex * margin -
            tabs[tabs.length - 1].scrollWidth;
        if (total <= clientWidth) {
            return Infinity;
        }
        while (maxIndex) {
            total -= tabs[maxIndex].scrollWidth + margin;
            maxIndex--;
            const activeDisplaced = exposeActive && activeItemIndex > maxIndex;
            const activeOffset = activeDisplaced ? activeWidth + margin : 0;
            const currentWidth = total + activeOffset + moreWidth + margin;
            // Needed for different rounding of visible and hidden elements scrollWidth
            const safetyOffset = tuiToInt(this.maxIndex === maxIndex - 1);
            if (currentWidth + safetyOffset < clientWidth) {
                return maxIndex;
            }
        }
        return -1;
    }
    updateActiveItemIndex(activeItemIndex) {
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
        this.maxIndex = this.getMaxIndex();
    }
}
TuiTabsWithMoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsWithMoreComponent, deps: [{ token: TUI_TABS_OPTIONS }, { token: TUI_TAB_MARGIN }, { token: TUI_TABS_REFRESH }, { token: ElementRef }, { token: ChangeDetectorRef }, { token: TUI_MORE_WORD }], target: i0.ɵɵFactoryTarget.Component });
TuiTabsWithMoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabsWithMoreComponent, selector: "tui-tabs-with-more, nav[tuiTabsWithMore]", inputs: { moreContent: "moreContent", dropdownContent: "dropdownContent", underline: "underline", activeItemIndex: "activeItemIndex", itemsLimit: "itemsLimit" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "class._underline": "this.underline" } }, providers: TUI_TABS_PROVIDERS, queries: [{ propertyName: "items", predicate: TuiItemDirective, read: TemplateRef }], viewQueries: [{ propertyName: "moreButton", first: true, predicate: TuiTabComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div class=\"t-wrapper\">\n    <tui-tabs\n        class=\"t-tabs\"\n        [underline]=\"false\"\n        [activeItemIndex]=\"activeItemIndex\"\n        (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n        (keydown.arrowRight)=\"onArrowRight($event)\"\n    >\n        <ng-container *ngFor=\"let item of items; let index = index\">\n            <ng-container\n                *ngIf=\"index <= lastVisibleIndex; else hidden\"\n                [ngTemplateOutlet]=\"item\"\n            ></ng-container>\n            <ng-template #hidden>\n                <div [class.t-overflown]=\"isOverflown(index)\">\n                    <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </tui-tabs>\n    <tui-hosted-dropdown\n        class=\"t-more_wrapper\"\n        [class.t-overflown]=\"!isMoreVisible\"\n        [content]=\"dropdownContent || dropdown\"\n        [(open)]=\"open\"\n    >\n        <button\n            tuiTab\n            [class._active]=\"isMoreActive\"\n            [class.t-no-margin]=\"isMoreAlone\"\n            [tuiFocusable]=\"isMoreFocusable\"\n            (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n        >\n            <ng-container *polymorpheusOutlet=\"moreContent || more as text\">\n                {{ text }}\n            </ng-container>\n        </button>\n        <ng-template #more>\n            {{ moreWord$ | async }}\n            <tui-svg\n                src=\"tuiIconChevronDown\"\n                class=\"t-icon\"\n                [class.t-icon_rotated]=\"open\"\n            ></tui-svg>\n        </ng-template>\n    </tui-hosted-dropdown>\n    <ng-template #dropdown>\n        <div\n            #element\n            class=\"t-dropdown\"\n            (keydown.arrowUp.prevent)=\"onWrapperArrow($event, element, true)\"\n            (keydown.arrowDown.prevent)=\"onWrapperArrow($event, element, false)\"\n        >\n            <div\n                *ngFor=\"let item of items; let index = index\"\n                (tui-tab-activate)=\"onClick(index)\"\n            >\n                <ng-container\n                    *ngIf=\"shouldShow(index)\"\n                    [ngTemplateOutlet]=\"item\"\n                ></ng-container>\n            </div>\n        </div>\n    </ng-template>\n    <tui-underline\n        *ngIf=\"underline\"\n        [element]=\"activeElement\"\n    ></tui-underline>\n</div>\n", styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.t-wrapper{position:relative;display:flex}.t-tabs{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.t-overflown{display:flex;margin:0;width:0;max-width:0;overflow:hidden;visibility:hidden}.t-more_wrapper{height:100%;pointer-events:none}.t-more_wrapper button{pointer-events:auto}.t-icon{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated{transform:rotate(180deg)}.t-dropdown{padding:.5rem 0}.t-dropdown ::ng-deep *[tuiTab]{width:100%;height:2.75rem;justify-content:flex-start;margin:0;padding:0 1rem;color:var(--tui-text-02)}.t-dropdown ::ng-deep *[tuiTab]:before{display:none}.t-dropdown ::ng-deep *[tuiTab]:hover,.t-dropdown ::ng-deep *[tuiTab]:focus,.t-dropdown ::ng-deep *[tuiTab]._active{box-shadow:none;color:var(--tui-base-08);background:var(--tui-base-02)}.t-no-margin{margin-left:0}\n"], components: [{ type: TuiTabsComponent, selector: "tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])", inputs: ["underline"] }, { type: i2$1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: TuiTabComponent, selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]" }, { type: i2$1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: TuiUnderlineComponent, selector: "tui-underline", inputs: ["element"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: TuiTabsDirective, selector: "tui-tabs, nav[tuiTabs]", inputs: ["activeItemIndex"], outputs: ["activeItemIndexChange"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i4.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i8.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "underline", void 0);
__decorate([
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "activeItemIndex", void 0);
__decorate([
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "itemsLimit", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsWithMoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]',
                    templateUrl: './tabs-with-more.template.html',
                    styleUrls: ['./tabs-with-more.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_TABS_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABS_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TAB_MARGIN]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TABS_REFRESH]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MORE_WORD]
                }] }]; }, propDecorators: { moreButton: [{
                type: ViewChild,
                args: [TuiTabComponent, { read: ElementRef }]
            }], moreContent: [{
                type: Input
            }], dropdownContent: [{
                type: Input
            }], underline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._underline']
            }], activeItemIndex: [{
                type: Input
            }], itemsLimit: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef }]
            }] } });

class TuiTabsModule {
}
TuiTabsModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiTabsModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsModule, declarations: [TuiTabsWithMoreComponent,
        TuiTabsComponent,
        TuiTabsDirective,
        TuiTabsVerticalComponent,
        TuiTabComponent,
        TuiUnderlineComponent], imports: [CommonModule,
        PolymorpheusModule,
        TuiHostedDropdownModule,
        TuiSvgModule,
        TuiFocusableModule,
        TuiItemModule], exports: [TuiTabsWithMoreComponent,
        TuiTabsComponent,
        TuiTabsDirective,
        TuiTabsVerticalComponent,
        TuiTabComponent,
        TuiItemDirective] });
TuiTabsModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsModule, imports: [[
            CommonModule,
            PolymorpheusModule,
            TuiHostedDropdownModule,
            TuiSvgModule,
            TuiFocusableModule,
            TuiItemModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        PolymorpheusModule,
                        TuiHostedDropdownModule,
                        TuiSvgModule,
                        TuiFocusableModule,
                        TuiItemModule,
                    ],
                    declarations: [
                        TuiTabsWithMoreComponent,
                        TuiTabsComponent,
                        TuiTabsDirective,
                        TuiTabsVerticalComponent,
                        TuiTabComponent,
                        TuiUnderlineComponent,
                    ],
                    exports: [
                        TuiTabsWithMoreComponent,
                        TuiTabsComponent,
                        TuiTabsDirective,
                        TuiTabsVerticalComponent,
                        TuiTabComponent,
                        TuiItemDirective,
                    ],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_TABS_DEFAULT_OPTIONS, TUI_TABS_OPTIONS, TUI_TABS_PROVIDERS, TUI_TABS_REFRESH, TUI_TAB_ACTIVATE, TUI_TAB_EVENT, TUI_TAB_PROVIDERS, TuiTabComponent, TuiTabsComponent, TuiTabsDirective, TuiTabsModule, TuiTabsVerticalComponent, TuiTabsWithMoreComponent, TuiUnderlineComponent, tuiTabsOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-tabs.js.map
