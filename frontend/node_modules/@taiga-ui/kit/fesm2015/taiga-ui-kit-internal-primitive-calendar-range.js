import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, ChangeDetectorRef, Component, ChangeDetectionStrategy, Inject, Optional, Self, Input, Output, NgModule } from '@angular/core';
import * as i2 from '@taiga-ui/cdk';
import { ALWAYS_FALSE_HANDLER, TuiMonth, TUI_FIRST_DAY, TUI_LAST_DAY, tuiWatch, TuiDestroyService, tuiDefaultProp, TuiMapperPipeModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_DEFAULT_MARKER_HANDLER, TuiScrollbarModule, TuiCalendarModule } from '@taiga-ui/core';
import { TUI_CALENDAR_DATE_STREAM } from '@taiga-ui/kit/tokens';
import { takeUntil } from 'rxjs/operators';
import * as i3 from 'rxjs';

/**
 * @internal
 */
class TuiPrimitiveCalendarRangeComponent {
    constructor(valueChanges, cdr, destroy$) {
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonthFirst = TuiMonth.currentLocal();
        this.defaultViewedMonthSecond = TuiMonth.currentLocal().append({ month: 1 });
        this.min = TUI_FIRST_DAY;
        this.max = TUI_LAST_DAY;
        this.value = null;
        this.dayClick = new EventEmitter();
        this.hoveredItem = null;
        this.userViewedMonthFirst = this.defaultViewedMonthFirst;
        this.userViewedMonthSecond = this.defaultViewedMonthSecond;
        this.monthOffset = (value, offset) => value.append({ month: offset });
        if (!valueChanges) {
            return;
        }
        valueChanges.pipe(tuiWatch(cdr), takeUntil(destroy$)).subscribe(value => {
            this.value = value;
            this.updateViewedMonths();
        });
    }
    get cappedUserViewedMonthSecond() {
        return this.userViewedMonthSecond.monthBefore(this.max)
            ? this.userViewedMonthSecond
            : this.max;
    }
    get cappedUserViewedMonthFirst() {
        return this.userViewedMonthFirst.monthSameOrBefore(this.userViewedMonthSecond)
            ? this.userViewedMonthFirst
            : this.userViewedMonthSecond;
    }
    ngOnInit() {
        this.setInitialMonths();
    }
    onSectionFirstViewedMonth(month) {
        this.userViewedMonthFirst = month;
        this.userViewedMonthSecond = this.userViewedMonthFirst.append({ month: 1 });
    }
    onSectionSecondViewedMonth(month) {
        this.userViewedMonthSecond = month;
        this.userViewedMonthFirst = this.userViewedMonthSecond.append({
            month: -1,
        });
    }
    onDayClick(day) {
        this.dayClick.emit(day);
    }
    setInitialMonths() {
        if (!this.value) {
            this.userViewedMonthSecond = this.updatedViewedMonthSecond(this.defaultViewedMonthSecond);
            this.userViewedMonthFirst = this.updatedViewedMonthFirst(this.defaultViewedMonthFirst);
        }
    }
    updatedViewedMonthSecond(month) {
        if (month.monthSameOrAfter(this.max)) {
            return this.max;
        }
        if (month.monthBefore(this.min)) {
            return this.min.append({ month: 1 });
        }
        return month;
    }
    updatedViewedMonthFirst(month) {
        if (month.monthSameOrAfter(this.userViewedMonthSecond)) {
            return this.userViewedMonthSecond.append({ month: -1 });
        }
        if (month.monthSameOrBefore(this.min)) {
            return this.min;
        }
        return month;
    }
    updateViewedMonths() {
        this.userViewedMonthFirst =
            this.value === null ? this.defaultViewedMonthFirst : this.value.from;
        this.userViewedMonthSecond = this.userViewedMonthFirst.append({ month: 1 });
    }
}
TuiPrimitiveCalendarRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeComponent, deps: [{ token: TUI_CALENDAR_DATE_STREAM, optional: true }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Component });
TuiPrimitiveCalendarRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPrimitiveCalendarRangeComponent, selector: "tui-primitive-calendar-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonthFirst: "defaultViewedMonthFirst", defaultViewedMonthSecond: "defaultViewedMonthSecond", min: "min", max: "max", value: "value" }, outputs: { dayClick: "dayClick" }, providers: [TuiDestroyService], ngImport: i0, template: "<tui-calendar\n    [min]=\"min\"\n    [max]=\"max\"\n    [month]=\"userViewedMonthFirst\"\n    [markerHandler]=\"markerHandler\"\n    [maxViewedMonth]=\"cappedUserViewedMonthSecond | tuiMapper : monthOffset : -1\"\n    [value]=\"value\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [showAdjacent]=\"false\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionFirstViewedMonth($event)\"\n></tui-calendar>\n<tui-calendar\n    class=\"t-border\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [month]=\"userViewedMonthSecond\"\n    [markerHandler]=\"markerHandler\"\n    [minViewedMonth]=\"cappedUserViewedMonthFirst | tuiMapper : monthOffset : 1\"\n    [value]=\"value\"\n    [disabledItemHandler]=\"disabledItemHandler\"\n    [showAdjacent]=\"false\"\n    [(hoveredItem)]=\"hoveredItem\"\n    (dayClick)=\"onDayClick($event)\"\n    (monthChange)=\"onSectionSecondViewedMonth($event)\"\n></tui-calendar>\n", styles: [":host{display:flex}.t-border{border-left:1px solid var(--tui-base-03)}\n"], components: [{ type: i1.TuiCalendarComponent, selector: "tui-calendar", inputs: ["month", "disabledItemHandler", "min", "max", "minViewedMonth", "maxViewedMonth", "hoveredItem", "showAdjacent", "markerHandler", "value"], outputs: ["dayClick", "monthChange", "hoveredItemChange"] }], pipes: { "tuiMapper": i2.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "markerHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "defaultViewedMonthFirst", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "defaultViewedMonthSecond", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiPrimitiveCalendarRangeComponent.prototype, "value", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-primitive-calendar-range',
                    templateUrl: './primitive-calendar-range.template.html',
                    styleUrls: ['./primitive-calendar-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CALENDAR_DATE_STREAM]
                }, {
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i2.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonthFirst: [{
                type: Input
            }], defaultViewedMonthSecond: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], value: [{
                type: Input
            }], dayClick: [{
                type: Output
            }] } });

/**
 * @internal
 */
class TuiPrimitiveCalendarRangeModule {
}
TuiPrimitiveCalendarRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPrimitiveCalendarRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeModule, declarations: [TuiPrimitiveCalendarRangeComponent], imports: [TuiMapperPipeModule, TuiScrollbarModule, TuiCalendarModule], exports: [TuiPrimitiveCalendarRangeComponent] });
TuiPrimitiveCalendarRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeModule, imports: [[TuiMapperPipeModule, TuiScrollbarModule, TuiCalendarModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPrimitiveCalendarRangeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [TuiMapperPipeModule, TuiScrollbarModule, TuiCalendarModule],
                    declarations: [TuiPrimitiveCalendarRangeComponent],
                    exports: [TuiPrimitiveCalendarRangeComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPrimitiveCalendarRangeComponent, TuiPrimitiveCalendarRangeModule };
//# sourceMappingURL=taiga-ui-kit-internal-primitive-calendar-range.js.map
