import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChildren, ViewChild, Input, NgModule } from '@angular/core';
import * as i5 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import * as i4 from '@taiga-ui/cdk';
import { AbstractTuiControl, EMPTY_QUERY, tuiIsNativeFocusedIn, tuiIsNativeFocused, tuiRound, tuiClamp, TUI_IS_MOBILE, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, tuiPure, TuiActiveZoneModule, TuiPressedModule } from '@taiga-ui/cdk';
import * as i3 from '@taiga-ui/core';
import { tuiGetFractionPartPadded, TUI_TEXTFIELD_WATCHED_CONTROLLER, TEXTFIELD_CONTROLLER_PROVIDER, TuiWrapperModule, TuiTextfieldControllerModule } from '@taiga-ui/core';
import * as i1 from '@taiga-ui/kit/components/input-number';
import { TuiInputNumberComponent, TuiInputNumberModule } from '@taiga-ui/kit/components/input-number';
import * as i2 from '@taiga-ui/kit/components/range';
import { TuiRangeComponent, TuiRangeModule } from '@taiga-ui/kit/components/range';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import * as i6 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i7 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

class TuiInputRangeComponent extends AbstractTuiControl {
    constructor(control, cdr, isMobile, el, controller) {
        super(control, cdr);
        this.isMobile = isMobile;
        this.el = el;
        this.controller = controller;
        this.inputNumberRefs = EMPTY_QUERY;
        this.rangeRef = null;
        this.min = 0;
        this.max = 100;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 1;
        this.keySteps = null;
        this.pluralize = null;
        this.lastActiveSide = 'left';
    }
    get leftFocusableElement() {
        var _a;
        return ((_a = this.inputNumberRefs.first) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get rightFocusableElement() {
        var _a;
        return ((_a = this.inputNumberRefs.last) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get nativeFocusableElement() {
        return this.disabled
            ? null
            : this.leftFocusableElement || this.rightFocusableElement;
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    get appearance() {
        return this.controller.appearance;
    }
    get showLeftValueContent() {
        var _a;
        return Boolean(this.leftValueContent &&
            !tuiIsNativeFocused(this.leftFocusableElement) &&
            !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'left'));
    }
    get showRightValueContent() {
        var _a;
        return Boolean(this.rightValueContent &&
            !tuiIsNativeFocused(this.rightFocusableElement) &&
            !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'right'));
    }
    get precision() {
        return tuiGetFractionPartPadded(this.quantum).length;
    }
    get decimal() {
        return this.precision ? 'not-zero' : 'never';
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get step() {
        return (this.max - this.min) / this.computedSteps;
    }
    computeKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onTextInputFocused(focused, right) {
        if (focused) {
            return;
        }
        const [leftTextInputRef, rightTextInputRef] = this.inputNumberRefs;
        const inputRef = right ? rightTextInputRef : leftTextInputRef;
        const valueIndex = right ? 1 : 0;
        if (!inputRef.nativeValue || inputRef.value !== this.value[valueIndex]) {
            this.updateTextInputValue(this.safeCurrentValue[valueIndex], right);
        }
    }
    changeByStep(event, [leftCoefficient, rightCoefficient]) {
        if (this.readOnly) {
            return;
        }
        event.preventDefault();
        const newValue = this.valueGuard([
            this.value[0] + leftCoefficient * this.step,
            this.value[1] + rightCoefficient * this.step,
        ]);
        const leftValueChanged = newValue[0] !== this.value[0];
        const rightValueChanged = newValue[1] !== this.value[1];
        if (leftValueChanged || rightValueChanged) {
            this.safelyUpdateValue(newValue);
            this.updateTextInputValue(newValue[rightValueChanged ? 1 : 0], rightValueChanged);
        }
    }
    onInputLeft(value) {
        this.safelyUpdateValue([value !== null && value !== void 0 ? value : this.safeCurrentValue[0], this.value[1]]);
    }
    onInputRight(value) {
        this.safelyUpdateValue([this.value[0], value !== null && value !== void 0 ? value : this.safeCurrentValue[1]]);
    }
    onRangeValue(value) {
        this.safelyUpdateValue(value);
        const rightValueChanged = this.lastActiveSide === 'right';
        this.updateTextInputValue(this.value[rightValueChanged ? 1 : 0], rightValueChanged);
    }
    focusToTextInput() {
        const element = this.lastActiveSide === 'left'
            ? this.leftFocusableElement
            : this.rightFocusableElement;
        if (!this.isMobile && element) {
            element.focus();
        }
    }
    onActiveThumbChange(activeThumb) {
        this.lastActiveSide = activeThumb;
    }
    getFallbackValue() {
        return [0, 0];
    }
    safelyUpdateValue(value) {
        this.value = this.valueGuard(value);
    }
    valueGuard([leftValue, rightValue]) {
        const leftCalibratedValue = this.calibrate(leftValue);
        const rightCalibratedValue = this.calibrate(rightValue);
        return [
            Math.min(leftCalibratedValue, this.value[1]),
            Math.max(rightCalibratedValue, this.value[0]),
        ];
    }
    calibrate(value) {
        const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return tuiClamp(roundedValue, this.min, this.max);
    }
    updateTextInputValue(value, right) {
        const [leftInputRef, rightInputRef] = this.inputNumberRefs;
        const textInputRef = right ? rightInputRef : leftInputRef;
        if (textInputRef) {
            textInputRef.nativeValue = textInputRef.getFormattedValue(value);
        }
    }
}
TuiInputRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_MOBILE }, { token: ElementRef }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
TuiInputRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputRangeComponent, selector: "tui-input-range", inputs: { min: "min", max: "max", quantum: "quantum", steps: "steps", segments: "segments", keySteps: "keySteps", leftValueContent: "leftValueContent", rightValueContent: "rightValueContent", pluralize: "pluralize" }, host: { properties: { "attr.data-size": "controller.size", "class._label-outside": "controller.labelOutside" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputRangeComponent),
        tuiAsControl(TuiInputRangeComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], viewQueries: [{ propertyName: "rangeRef", first: true, predicate: TuiRangeComponent, descendants: true }, { propertyName: "inputNumberRefs", predicate: TuiInputNumberComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiWrapper\n    class=\"t-wrapper\"\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"disabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-number\n        tuiTextfieldAppearance=\"none\"\n        automation-id=\"tui-input-range__left-input\"\n        class=\"t-left t-text-input\"\n        [min]=\"min\"\n        [max]=\"value[1]\"\n        [precision]=\"precision\"\n        [decimal]=\"decimal\"\n        [postfix]=\"pluralize && !showLeftValueContent ? (value[0] | i18nPlural : pluralize) : ''\"\n        [disabled]=\"computedDisabled\"\n        [readOnly]=\"readOnly\"\n        [ngModel]=\"value[0]\"\n        (ngModelChange)=\"onInputLeft($event)\"\n        (focusedChange)=\"onTextInputFocused($event, false)\"\n        (keydown.arrowUp)=\"changeByStep($event, [1, 0])\"\n        (keydown.arrowDown)=\"changeByStep($event, [-1, 0])\"\n    >\n        <ng-content></ng-content>\n        <div\n            *ngIf=\"showLeftValueContent\"\n            ngProjectAs=\"tuiContent\"\n        >\n            <ng-container *polymorpheusOutlet=\"leftValueContent as text; context: {$implicit: value[0]}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-input-number>\n\n    <div class=\"t-right\">\n        <tui-input-number\n            tuiTextfieldAppearance=\"none\"\n            automation-id=\"tui-input-range__right-input\"\n            class=\"t-text-input\"\n            [min]=\"value[0]\"\n            [max]=\"max\"\n            [precision]=\"precision\"\n            [decimal]=\"decimal\"\n            [disabled]=\"computedDisabled\"\n            [readOnly]=\"readOnly\"\n            [ngModel]=\"value[1]\"\n            (ngModelChange)=\"onInputRight($event)\"\n            (focusedChange)=\"onTextInputFocused($event, true)\"\n            (keydown.arrowUp)=\"changeByStep($event, [0, 1])\"\n            (keydown.arrowDown)=\"changeByStep($event, [0, -1])\"\n        >\n            <div\n                *ngIf=\"showRightValueContent\"\n                ngProjectAs=\"tuiContent\"\n            >\n                <ng-container *polymorpheusOutlet=\"rightValueContent as text; context: {$implicit: value[1]}\">\n                    {{ text }}\n                </ng-container>\n            </div>\n        </tui-input-number>\n\n        <!-- TODO replace by postfix of the right InputNumber (after fix https://github.com/Tinkoff/taiga-ui/issues/1193) -->\n        <span\n            *ngIf=\"!showRightValueContent && pluralize\"\n            automation-id=\"tui-input-range__pluralize-right\"\n            class=\"t-pluralize-right\"\n        >\n            &nbsp;{{ value[1] | i18nPlural : pluralize }}\n        </span>\n    </div>\n\n    <tui-range\n        class=\"t-range\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [step]=\"step\"\n        [segments]=\"segments\"\n        [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n        [focusable]=\"false\"\n        [disabled]=\"readOnly || disabled\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onRangeValue($event)\"\n        (tuiPressedChange)=\"focusToTextInput()\"\n        (activeThumbChange)=\"onActiveThumbChange($event)\"\n    ></tui-range>\n</div>\n", styles: [".t-wrapper{position:relative}.t-left{width:100%}.t-right{position:absolute;right:0;top:0;display:flex;width:50%;height:100%;text-align:right}.t-right .t-text-input{flex:1}.t-text-input{text-align:inherit}.t-pluralize-right{display:flex;align-items:center;padding:1.125rem var(--tui-padding-m) 0 0;margin-left:-.75rem;font:var(--tui-font-text-s)}:host[data-size=l] .t-pluralize-right{font:var(--tui-font-text-m);padding-top:1.25rem;margin-left:-1rem;padding-right:var(--tui-padding-l)}:host._label-outside .t-pluralize-right{padding-top:0}:host._disabled .t-pluralize-right{color:var(--tui-text-03)}:host{display:block;border-radius:var(--tui-radius-m)}.t-range{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0;background:transparent}\n"], components: [{ type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "prefix", "postfix"] }, { type: i2.TuiRangeComponent, selector: "tui-range", inputs: ["min", "max", "step", "size", "segments", "keySteps"] }], directives: [{ type: i3.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i4.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiInputNumberDirective, selector: "tui-input-number" }, { type: i3.TuiTextfieldAppearanceDirective, selector: "[tuiTextfieldAppearance]", inputs: ["tuiTextfieldAppearance"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.TuiRangeChangeDirective, selector: "tui-range", outputs: ["activeThumbChange"] }, { type: i4.TuiPressedDirective, selector: "[tuiPressedChange]", outputs: ["tuiPressedChange"] }], pipes: { "i18nPlural": i6.I18nPluralPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp(q => q > 0, '[quantum] must be positive')
], TuiInputRangeComponent.prototype, "quantum", void 0);
__decorate([
    tuiDefaultProp(s => s >= 0 && Number.isInteger(s), '[steps] must be non-negative integer')
], TuiInputRangeComponent.prototype, "steps", void 0);
__decorate([
    tuiDefaultProp(s => s > 0 && Number.isInteger(s), '[segments] must be positive integer')
], TuiInputRangeComponent.prototype, "segments", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "keySteps", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "pluralize", void 0);
__decorate([
    tuiPure
], TuiInputRangeComponent.prototype, "computeKeySteps", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-range',
                    templateUrl: './input-range.template.html',
                    styleUrls: ['./input-range.style.less'],
                    host: {
                        '[attr.data-size]': 'controller.size',
                        '[class._label-outside]': 'controller.labelOutside',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputRangeComponent),
                        tuiAsControl(TuiInputRangeComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i3.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { inputNumberRefs: [{
                type: ViewChildren,
                args: [TuiInputNumberComponent]
            }], rangeRef: [{
                type: ViewChild,
                args: [TuiRangeComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], quantum: [{
                type: Input
            }], steps: [{
                type: Input
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], leftValueContent: [{
                type: Input
            }], rightValueContent: [{
                type: Input
            }], pluralize: [{
                type: Input
            }], computeKeySteps: [] } });

class TuiInputRangeModule {
}
TuiInputRangeModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputRangeModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeModule, declarations: [TuiInputRangeComponent], imports: [CommonModule,
        FormsModule,
        PolymorpheusModule,
        TuiActiveZoneModule,
        TuiInputNumberModule,
        TuiPressedModule,
        TuiRangeModule,
        TuiWrapperModule,
        TuiTextfieldControllerModule], exports: [TuiInputRangeComponent] });
TuiInputRangeModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeModule, imports: [[
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiActiveZoneModule,
            TuiInputNumberModule,
            TuiPressedModule,
            TuiRangeModule,
            TuiWrapperModule,
            TuiTextfieldControllerModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusModule,
                        TuiActiveZoneModule,
                        TuiInputNumberModule,
                        TuiPressedModule,
                        TuiRangeModule,
                        TuiWrapperModule,
                        TuiTextfieldControllerModule,
                    ],
                    declarations: [TuiInputRangeComponent],
                    exports: [TuiInputRangeComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiInputRangeComponent, TuiInputRangeModule };
//# sourceMappingURL=taiga-ui-kit-components-input-range.js.map
