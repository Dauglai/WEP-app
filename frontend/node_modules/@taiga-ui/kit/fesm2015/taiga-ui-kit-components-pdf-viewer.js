import * as i0 from '@angular/core';
import { Component, ChangeDetectionStrategy, Inject, HostBinding, HostListener, InjectionToken, inject, Injectable, Directive, NgModule } from '@angular/core';
import * as i1 from '@taiga-ui/core';
import { TUI_ANIMATION_OPTIONS, TUI_CLOSE_WORD, tuiSlideInTop, tuiFadeIn, TuiButtonModule } from '@taiga-ui/core';
import * as i2 from '@tinkoff/ng-polymorpheus';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from 'rxjs';
import { AbstractTuiDialogService, AbstractTuiDialogDirective, tuiAsDialog } from '@taiga-ui/cdk';

class TuiPdfViewerComponent {
    constructor(options, closeWord$, context) {
        this.options = options;
        this.closeWord$ = closeWord$;
        this.context = context;
        this.animation = Object.assign({ value: '' }, this.options);
    }
    onKeyDownEsc() {
        this.context.$implicit.complete();
    }
}
TuiPdfViewerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerComponent, deps: [{ token: TUI_ANIMATION_OPTIONS }, { token: TUI_CLOSE_WORD }, { token: POLYMORPHEUS_CONTEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiPdfViewerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPdfViewerComponent, selector: "tui-pdf-viewer", host: { listeners: { "document:keydown.esc": "onKeyDownEsc()" }, properties: { "@tuiSlideInTop": "this.animation", "@tuiFadeIn": "this.animation" } }, ngImport: i0, template: "<header class=\"t-header\">\n    <h2\n        automation-id=\"tui-pdf-viewer__label\"\n        class=\"t-title\"\n    >\n        {{ context.label }}\n    </h2>\n    <div class=\"t-actions\">\n        <!-- TODO: Polymorpheus fix type -->\n        <ng-container *polymorpheusOutlet=\"$any(context.actions) as text; context: context\">\n            {{ text }}\n        </ng-container>\n    </div>\n    <button\n        tuiIconButton\n        shape=\"rounded\"\n        appearance=\"\"\n        size=\"s\"\n        type=\"button\"\n        icon=\"tuiIconCloseLarge\"\n        class=\"t-close\"\n        [title]=\"closeWord$ | async\"\n        (click)=\"context.$implicit.complete()\"\n    ></button>\n</header>\n<section class=\"t-content\">\n    <!-- TODO: Polymorpheus fix type -->\n    <iframe\n        *polymorpheusOutlet=\"$any(context.content) as content; context: context\"\n        title=\"pdf\"\n        class=\"t-iframe\"\n        [src]=\"content\"\n    ></iframe>\n</section>\n", styles: [":host{display:block;width:100%;height:100%;box-sizing:border-box;color:var(--tui-text-01-night);background:#333639}.t-header{display:flex;align-items:center;height:4rem;padding:0 1rem 0 1.5625rem;box-shadow:inset 0 -1px #535659}.t-title{margin:0;font:var(--tui-font-text-m);white-space:nowrap;text-overflow:ellipsis;padding-right:.3125rem;overflow:hidden}.t-actions{display:flex;margin-left:auto}.t-close{transition-property:background;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-left:.75rem;color:var(--tui-text-01-night);background:rgba(255,255,255,.32)}.t-close:hover{background:rgba(255,255,255,.4)}.t-content{height:calc(100% - 4rem);overflow:hidden}.t-iframe{width:100%;height:100%}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i3.AsyncPipe }, animations: [tuiSlideInTop, tuiFadeIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-pdf-viewer',
                    templateUrl: './pdf-viewer.template.html',
                    styleUrls: ['./pdf-viewer.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    animations: [tuiSlideInTop, tuiFadeIn],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_CLOSE_WORD]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }]; }, propDecorators: { animation: [{
                type: HostBinding,
                args: ['@tuiSlideInTop']
            }, {
                type: HostBinding,
                args: ['@tuiFadeIn']
            }], onKeyDownEsc: [{
                type: HostListener,
                args: ['document:keydown.esc']
            }] } });

const TUI_PDF_VIEWER_DEFAULT_OPTIONS = { label: ``, actions: `` };
/**
 * Default parameters for PdfViewer component
 */
const TUI_PDF_VIEWER_OPTIONS = new InjectionToken(`[TUI_PDF_VIEWER_OPTIONS]`, {
    factory: () => TUI_PDF_VIEWER_DEFAULT_OPTIONS,
});
function tuiPdfViewerOptionsProvider(options) {
    return {
        provide: TUI_PDF_VIEWER_OPTIONS,
        useValue: Object.assign(Object.assign({}, TUI_PDF_VIEWER_DEFAULT_OPTIONS), options),
    };
}

const DIALOG = new PolymorpheusComponent(TuiPdfViewerComponent);
class TuiPdfViewerService extends AbstractTuiDialogService {
    constructor() {
        super(...arguments);
        this.component = DIALOG;
        this.defaultOptions = Object.assign(Object.assign({}, inject(TUI_PDF_VIEWER_OPTIONS)), { data: undefined });
    }
    open(content, options = {}) {
        return super.open(content, options);
    }
}
TuiPdfViewerService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
TuiPdfViewerService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerService, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: `root`,
                }]
        }] });

class TuiPdfViewerDirective extends AbstractTuiDialogDirective {
}
TuiPdfViewerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiPdfViewerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPdfViewerDirective, selector: "ng-template[tuiPdfViewer]", inputs: { options: ["tuiPdfViewerOptions", "options"], open: ["tuiPdfViewer", "open"] }, outputs: { openChange: "tuiPdfViewerChange" }, providers: [
        {
            provide: AbstractTuiDialogService,
            useExisting: TuiPdfViewerService,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'ng-template[tuiPdfViewer]',
                    providers: [
                        {
                            provide: AbstractTuiDialogService,
                            useExisting: TuiPdfViewerService,
                        },
                    ],
                    inputs: ['options: tuiPdfViewerOptions', 'open: tuiPdfViewer'],
                    outputs: ['openChange: tuiPdfViewerChange'],
                }]
        }] });

class TuiPdfViewerModule {
}
TuiPdfViewerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPdfViewerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerModule, declarations: [TuiPdfViewerComponent, TuiPdfViewerDirective], imports: [CommonModule, TuiButtonModule, PolymorpheusModule], exports: [TuiPdfViewerComponent, TuiPdfViewerDirective] });
TuiPdfViewerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerModule, providers: [tuiAsDialog(TuiPdfViewerService)], imports: [[CommonModule, TuiButtonModule, PolymorpheusModule]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPdfViewerModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [CommonModule, TuiButtonModule, PolymorpheusModule],
                    declarations: [TuiPdfViewerComponent, TuiPdfViewerDirective],
                    exports: [TuiPdfViewerComponent, TuiPdfViewerDirective],
                    providers: [tuiAsDialog(TuiPdfViewerService)],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_PDF_VIEWER_DEFAULT_OPTIONS, TUI_PDF_VIEWER_OPTIONS, TuiPdfViewerComponent, TuiPdfViewerDirective, TuiPdfViewerModule, TuiPdfViewerService, tuiPdfViewerOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-pdf-viewer.js.map
