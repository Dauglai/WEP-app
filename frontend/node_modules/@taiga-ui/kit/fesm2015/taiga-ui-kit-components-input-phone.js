import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, EventEmitter, ChangeDetectorRef, TemplateRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, Output, ContentChild, Directive, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i2 from '@taiga-ui/cdk';
import { AbstractTuiControl, tuiIsNativeFocused, tuiGetClipboardDataText, TuiDestroyService, tuiAsFocusableItemAccessor, tuiAsControl, tuiRequiredSetter, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { tuiFormatPhone, TUI_MASK_SYMBOLS_REGEXP, TUI_SELECTION_STREAM, TUI_TEXTFIELD_CLEANER, tuiAsDataListHost, TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { takeUntil } from 'rxjs/operators';
import * as i3 from '@taiga-ui/kit/directives';
import { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import * as i5 from 'rxjs';

const TUI_INPUT_PHONE_DEFAULT_OPTIONS = {
    phoneMaskAfterCountryCode: `### ###-##-##`,
    allowText: false,
    countryCode: `+7`,
};
/**
 * Default parameters for input phone component
 */
const TUI_INPUT_PHONE_OPTIONS = new InjectionToken(`[TUI_INPUT_PHONE_OPTIONS]`, {
    factory: () => TUI_INPUT_PHONE_DEFAULT_OPTIONS,
});
const tuiInputPhoneOptionsProvider = (options) => ({
    provide: TUI_INPUT_PHONE_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_INPUT_PHONE_DEFAULT_OPTIONS), options),
});

class TuiInputPhoneComponent extends AbstractTuiControl {
    constructor(control, destroy$, cdr, selection$, textfieldCleaner, options) {
        super(control, cdr);
        this.textfieldCleaner = textfieldCleaner;
        this.options = options;
        this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;
        this.allowText = this.options.allowText;
        this.search = '';
        this.searchChange = new EventEmitter();
        this.textMaskOptions = {
            mask: value => this.allowText && !this.value && isText(value) && value !== '+'
                ? false
                : [
                    ...this.countryCode.split(''),
                    ' ',
                    ...this.phoneMaskAfterCountryCode
                        .replace(/[^#\- ()]+/g, '')
                        .split('')
                        .map(item => (item === '#' ? /\d/ : item)),
                ],
            pipe: value => {
                if (this.allowText) {
                    return value;
                }
                return value === '' && this.focused && !this.readOnly
                    ? `${this.countryCode} `
                    : value.replace(/-$/, '');
            },
            guide: false,
        };
        this.countryCode = this.options.countryCode;
        this.open = false;
        selection$.pipe(takeUntil(destroy$)).subscribe(() => {
            this.setCaretPosition();
        });
    }
    set countryCodeSetter(countryCode) {
        this.updateValueWithNewCountryCode(countryCode);
        this.countryCode = countryCode;
    }
    get nativeFocusableElement() {
        return !this.textfield || this.computedDisabled
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            (!!this.dropdown && this.dropdown.focused));
    }
    get computedValue() {
        return this.value
            ? tuiFormatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode)
            : this.search || '';
    }
    get inputMode() {
        return this.allowText ? 'text' : 'numeric';
    }
    get canOpen() {
        return this.interactive && !!this.datalist;
    }
    get canClean() {
        return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;
    }
    onDrop(event) {
        if (!event.dataTransfer) {
            return;
        }
        this.setValueWithoutPrefix(event.dataTransfer.getData('text'));
        event.preventDefault();
    }
    onPaste(event) {
        this.setValueWithoutPrefix(tuiGetClipboardDataText(event));
    }
    onActiveZone(active) {
        this.updateFocused(active);
        if (active && !this.computedValue && !this.readOnly && !this.allowText) {
            this.updateSearch(this.countryCode);
            return;
        }
        if (this.computedValue === this.countryCode ||
            (this.search !== null &&
                Number.isNaN(parseInt(this.search.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10)))) {
            this.updateSearch('');
        }
    }
    onBackspace(event) {
        const target = event.target;
        if ((target.selectionStart || 0) <= this.nonRemovableLength &&
            target.selectionStart === target.selectionEnd) {
            event.preventDefault();
        }
    }
    onValueChange(value) {
        value = value === '' ? this.countryCode : value;
        const parsed = isText(value)
            ? value
            : value.replace(TUI_MASK_SYMBOLS_REGEXP, '').slice(0, this.maxPhoneLength);
        this.updateSearch(parsed);
        this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;
        this.open = true;
    }
    handleOption(item) {
        this.focusInput();
        this.value = item;
        this.updateSearch('');
        this.open = false;
    }
    setDisabledState() {
        super.setDisabledState();
        this.open = false;
    }
    writeValue(value) {
        super.writeValue(value);
        this.updateSearch('');
    }
    getFallbackValue() {
        return '';
    }
    get caretIsInForbiddenArea() {
        const { nativeFocusableElement } = this;
        if (!nativeFocusableElement) {
            return false;
        }
        const { selectionStart, selectionEnd } = nativeFocusableElement;
        return (tuiIsNativeFocused(nativeFocusableElement) &&
            selectionStart !== null &&
            selectionStart < this.nonRemovableLength &&
            selectionStart === selectionEnd);
    }
    get nonRemovableLength() {
        return this.isTextValue ? 0 : this.countryCode.length + 1;
    }
    get maxPhoneLength() {
        return (this.countryCode.length +
            this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length);
    }
    get isTextValue() {
        return !!this.search && isText(this.search);
    }
    setCaretPosition() {
        if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {
            this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);
        }
    }
    setValueWithoutPrefix(value) {
        if (this.readOnly) {
            return;
        }
        this.open = true;
        this.value = this.cleanValue(value);
        this.updateSearch(this.allowText && isText(value)
            ? value
            : value.replace(TUI_MASK_SYMBOLS_REGEXP, ''));
    }
    cleanValue(value) {
        const reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.slice(1));
        const oldValueExist = this.value.length > this.countryCode.length &&
            this.value.length < this.maxPhoneLength;
        const newValueLength = value.replace(TUI_MASK_SYMBOLS_REGEXP, '').length;
        const cleanNewValue = value.replace(/[^0-9]+/g, '');
        const selectionLength = String(getSelection()).length;
        if (oldValueExist && selectionLength === 0) {
            return `${this.value}${cleanNewValue}`.slice(0, this.maxPhoneLength);
        }
        if (newValueLength < this.maxPhoneLength - 1) {
            return `${this.countryCode}${cleanNewValue}`.slice(0, this.maxPhoneLength);
        }
        return `${this.countryCode}${cleanNewValue.replace(reg, '')}`.slice(0, this.maxPhoneLength);
    }
    focusInput() {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll: true });
        }
    }
    updateSearch(search) {
        if (this.search === search) {
            return;
        }
        this.search = search;
        this.searchChange.emit(search);
    }
    updateValueWithNewCountryCode(newCountryCode) {
        if (!this.isTextValue) {
            this.value = this.value.replace(this.countryCode, newCountryCode);
        }
    }
}
TuiInputPhoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: TuiDestroyService, self: true }, { token: ChangeDetectorRef }, { token: TUI_SELECTION_STREAM }, { token: TUI_TEXTFIELD_CLEANER }, { token: TUI_INPUT_PHONE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputPhoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPhoneComponent, selector: "tui-input-phone", inputs: { countryCodeSetter: ["countryCode", "countryCodeSetter"], phoneMaskAfterCountryCode: "phoneMaskAfterCountryCode", allowText: "allowText", search: "search" }, outputs: { searchChange: "searchChange" }, providers: [
        TuiDestroyService,
        tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
        tuiAsControl(TuiInputPhoneComponent),
        tuiAsDataListHost(TuiInputPhoneComponent),
    ], queries: [{ propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: TuiHostedDropdownComponent, descendants: true }, { propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoFocus]=\"computedFocused\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [textMask]=\"textMaskOptions\"\n        [value]=\"computedValue\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        (valueChange)=\"onValueChange($event)\"\n        (drop)=\"onDrop($event)\"\n        (keydown.backspace)=\"onBackspace($event)\"\n        (paste.prevent)=\"onPaste($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i3.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i1.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiRequiredSetter()
], TuiInputPhoneComponent.prototype, "countryCodeSetter", null);
__decorate([
    tuiDefaultProp()
], TuiInputPhoneComponent.prototype, "phoneMaskAfterCountryCode", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputPhoneComponent.prototype, "allowText", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputPhoneComponent.prototype, "search", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-phone',
                    templateUrl: './input-phone.template.html',
                    styleUrls: ['./input-phone.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
                        tuiAsControl(TuiInputPhoneComponent),
                        tuiAsDataListHost(TuiInputPhoneComponent),
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i5.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SELECTION_STREAM]
                }] }, { type: i1.TuiTextfieldCleanerDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_CLEANER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_PHONE_OPTIONS]
                }] }]; }, propDecorators: { dropdown: [{
                type: ViewChild,
                args: [TuiHostedDropdownComponent]
            }], textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], countryCodeSetter: [{
                type: Input,
                args: ['countryCode']
            }], phoneMaskAfterCountryCode: [{
                type: Input
            }], allowText: [{
                type: Input
            }], search: [{
                type: Input
            }], searchChange: [{
                type: Output
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }] } });
function isText(value) {
    return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));
}

class TuiInputPhoneDirective extends AbstractTuiTextfieldHost {
    get value() {
        return this.host.computedValue;
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    process(input) {
        this.input = input;
    }
    ngDoCheck() {
        if (!this.input) {
            return;
        }
        this.input.type = 'tel';
        this.input.inputMode = this.host.inputMode;
    }
}
TuiInputPhoneDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputPhoneDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPhoneDirective, selector: "tui-input-phone", providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-phone',
                    providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)],
                }]
        }] });

class TuiInputPhoneModule {
}
TuiInputPhoneModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputPhoneModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneModule, declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective], imports: [TextMaskModule,
        TuiPrimitiveTextfieldModule,
        TuiHostedDropdownModule,
        TuiTextfieldControllerModule,
        TuiActiveZoneModule,
        TuiValueAccessorModule], exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent] });
TuiInputPhoneModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneModule, imports: [[
            TextMaskModule,
            TuiPrimitiveTextfieldModule,
            TuiHostedDropdownModule,
            TuiTextfieldControllerModule,
            TuiActiveZoneModule,
            TuiValueAccessorModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        TextMaskModule,
                        TuiPrimitiveTextfieldModule,
                        TuiHostedDropdownModule,
                        TuiTextfieldControllerModule,
                        TuiActiveZoneModule,
                        TuiValueAccessorModule,
                    ],
                    declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],
                    exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_PHONE_DEFAULT_OPTIONS, TUI_INPUT_PHONE_OPTIONS, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, tuiInputPhoneOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-phone.js.map
