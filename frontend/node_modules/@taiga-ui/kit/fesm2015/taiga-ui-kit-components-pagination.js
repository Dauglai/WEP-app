import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, ElementRef, Component, ChangeDetectionStrategy, Inject, Optional, ViewChildren, Input, Output, NgModule } from '@angular/core';
import * as i2 from '@taiga-ui/cdk';
import { AbstractTuiInteractive, EMPTY_QUERY, tuiIsNativeFocusedIn, tuiClamp, tuiAsFocusableItemAccessor, TUI_FOCUSABLE_ITEM_ACCESSOR, tuiDefaultProp, TuiRepeatTimesModule, TuiLetModule, TuiPreventDefaultModule, TuiActiveZoneModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TuiModeDirective, TuiButtonModule } from '@taiga-ui/core';
import { TUI_PAGINATION_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiHorizontalDirectionToNumber } from '@taiga-ui/kit/utils/math';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i5 from 'rxjs';

const DOTS_LENGTH = 1;
const ACTIVE_ITEM_LENGTH = 1;
class TuiPaginationComponent extends AbstractTuiInteractive {
    constructor(el, modeDirective, texts$) {
        super();
        this.el = el;
        this.modeDirective = modeDirective;
        this.texts$ = texts$;
        this.els = EMPTY_QUERY;
        this.length = 1;
        this.size = 'm';
        this.disabled = false;
        /**
         * Amount of visible pages around active page
         */
        this.activePadding = 1;
        /**
         * Amount of visible pages at the edges
         */
        this.sidePadding = 1;
        /**
         * Active page index
         */
        this.index = 0;
        this.indexChange = new EventEmitter();
    }
    get nativeFocusableElement() {
        if (this.disabled) {
            return null;
        }
        let activeElementIndex = 0;
        const { elementsLength } = this;
        for (let i = 0; i < elementsLength; i++) {
            const itemIndex = this.getItemIndexByElementIndex(i);
            if (itemIndex) {
                activeElementIndex++;
            }
            if (itemIndex === this.index) {
                break;
            }
        }
        const activeElement = this.els.find((_, index) => index === activeElementIndex);
        return activeElement ? activeElement.nativeFocusableElement : null;
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    /**
     * Number of items in a container.
     */
    get elementsLength() {
        return this.itemsFit ? this.length : this.maxElementsLength;
    }
    get sizeM() {
        return this.size === 'm';
    }
    get mode() {
        return this.modeDirective ? this.modeDirective.mode : null;
    }
    get arrowIsDisabledLeft() {
        return this.index === 0;
    }
    get arrowIsDisabledRight() {
        return this.reverseIndex === 0;
    }
    elementIsFocusable(index) {
        return this.index === index && !this.focused;
    }
    /**
     * Get index by element index
     * @param elementIndex
     * @returns index or null (for '…')
     */
    getItemIndexByElementIndex(elementIndex) {
        if (!this.sizeM) {
            return elementIndex;
        }
        if (elementIndex < this.sidePadding) {
            return elementIndex;
        }
        if (elementIndex === this.sidePadding && this.hasCollapsedItems(this.index)) {
            return null;
        }
        const reverseElementIndex = this.lastElementIndex - elementIndex;
        if (reverseElementIndex === this.sidePadding &&
            this.hasCollapsedItems(this.reverseIndex)) {
            return null;
        }
        if (reverseElementIndex < this.sidePadding) {
            return this.lastIndex - reverseElementIndex;
        }
        const computedIndex = this.index - this.maxHalfLength + elementIndex;
        return tuiClamp(computedIndex, elementIndex, this.lastIndex - reverseElementIndex);
    }
    getElementMode(index) {
        return this.index === index ? "primary" /* Primary */ : "flat" /* Flat */;
    }
    getSmallElementMode(index, mode) {
        return this.index === index && mode !== 'onLight'
            ? "primary" /* Primary */
            : "secondary" /* Secondary */;
    }
    onElementClick(index) {
        this.updateIndex(index);
    }
    onElementKeyDownArrowLeft(element) {
        if (element === this.els.first) {
            return;
        }
        const previous = this.els.find((_, index, array) => array[index + 1] === element);
        if (previous === null || previous === void 0 ? void 0 : previous.nativeFocusableElement) {
            previous.nativeFocusableElement.focus();
        }
    }
    onElementKeyDownArrowRight(element) {
        if (element === this.els.last) {
            return;
        }
        const next = this.els.find((_, index, array) => array[index - 1] === element);
        if (next === null || next === void 0 ? void 0 : next.nativeFocusableElement) {
            next.nativeFocusableElement.focus();
        }
    }
    onArrowClick(direction) {
        this.tryChangeTo(direction);
        this.focusActive();
    }
    onActiveZone(focused) {
        this.updateFocused(focused);
    }
    /**
     * Active index from the end
     */
    get reverseIndex() {
        return this.lastIndex - this.index;
    }
    /**
     * Max number of elements in half (not counting the middle one).
     */
    get maxHalfLength() {
        return this.sidePadding + DOTS_LENGTH + this.activePadding;
    }
    /**
     * Is there '...' anywhere
     */
    get itemsFit() {
        return this.length <= this.maxElementsLength;
    }
    /**
     * Max number of elements
     */
    get maxElementsLength() {
        return this.maxHalfLength * 2 + ACTIVE_ITEM_LENGTH;
    }
    get lastIndex() {
        return this.length - 1;
    }
    get lastElementIndex() {
        return this.elementsLength - 1;
    }
    /**
     * Are there collapsed items at that index
     * @param index
     * @returns there are collapsed items
     */
    hasCollapsedItems(index) {
        return !this.itemsFit && index > this.maxHalfLength;
    }
    tryChangeTo(direction) {
        this.updateIndex(tuiClamp(this.index + tuiHorizontalDirectionToNumber(direction), 0, this.lastIndex));
    }
    focusActive() {
        const { nativeFocusableElement } = this;
        if (nativeFocusableElement) {
            nativeFocusableElement.focus();
        }
    }
    updateIndex(index) {
        if (this.index === index) {
            return;
        }
        this.index = index;
        this.indexChange.emit(index);
    }
}
TuiPaginationComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPaginationComponent, deps: [{ token: ElementRef }, { token: TuiModeDirective, optional: true }, { token: TUI_PAGINATION_TEXTS }], target: i0.ɵɵFactoryTarget.Component });
TuiPaginationComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiPaginationComponent, selector: "tui-pagination", inputs: { length: "length", size: "size", disabled: "disabled", activePadding: "activePadding", sidePadding: "sidePadding", content: "content", index: "index" }, outputs: { indexChange: "indexChange" }, providers: [tuiAsFocusableItemAccessor(TuiPaginationComponent)], viewQueries: [{ propertyName: "els", predicate: ["element"], descendants: true, read: TUI_FOCUSABLE_ITEM_ACCESSOR }], usesInheritance: true, ngImport: i0, template: "<div\n    class=\"t-content\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <ng-container *ngIf=\"sizeM; else smallButtons\">\n        <ng-container *ngIf=\"texts$ | async as texts\">\n            <button\n                tuiIconButton\n                type=\"button\"\n                tuiPreventDefault=\"mousedown\"\n                size=\"s\"\n                appearance=\"flat\"\n                icon=\"tuiIconChevronLeft\"\n                class=\"t-button\"\n                [title]=\"texts[0]\"\n                [disabled]=\"arrowIsDisabledLeft\"\n                [focusable]=\"false\"\n                (click)=\"onArrowClick('left')\"\n            ></button>\n            <ng-container *tuiRepeatTimes=\"let elementIndex of elementsLength\">\n                <ng-container *tuiLet=\"getItemIndexByElementIndex(elementIndex) as index\">\n                    <button\n                        *ngIf=\"index !== null; else dotsTemplate\"\n                        #element\n                        tuiButton\n                        type=\"button\"\n                        automation-id=\"tui-pagination__element\"\n                        shape=\"square\"\n                        size=\"s\"\n                        class=\"t-button\"\n                        [disabled]=\"disabled\"\n                        [focusable]=\"elementIsFocusable(index)\"\n                        [appearance]=\"getElementMode(index)\"\n                        (click)=\"onElementClick(index)\"\n                        (keydown.arrowLeft.prevent)=\"onElementKeyDownArrowLeft(element)\"\n                        (keydown.arrowRight.prevent)=\"onElementKeyDownArrowRight(element)\"\n                    >\n                        <ng-container *polymorpheusOutlet=\"content || index + 1 as text; context: {$implicit: index}\">\n                            {{ text }}\n                        </ng-container>\n                    </button>\n                </ng-container>\n            </ng-container>\n            <button\n                tuiIconButton\n                type=\"button\"\n                tuiPreventDefault=\"mousedown\"\n                size=\"s\"\n                appearance=\"flat\"\n                icon=\"tuiIconChevronRight\"\n                class=\"t-button\"\n                [title]=\"texts[1]\"\n                [disabled]=\"arrowIsDisabledRight\"\n                [focusable]=\"false\"\n                (click)=\"onArrowClick('right')\"\n            ></button>\n        </ng-container>\n    </ng-container>\n    <ng-template #smallButtons>\n        <button\n            *tuiRepeatTimes=\"let indexItem of length\"\n            #element\n            tuiButton\n            type=\"button\"\n            shape=\"square\"\n            class=\"t-button t-button_small\"\n            [class.t-button_active]=\"indexItem === index\"\n            [disabled]=\"disabled\"\n            [focusable]=\"elementIsFocusable(indexItem)\"\n            [appearance]=\"getSmallElementMode(indexItem, mode)\"\n            (click)=\"onElementClick(indexItem)\"\n            (keydown.arrowLeft.prevent)=\"onElementKeyDownArrowLeft(element)\"\n            (keydown.arrowRight.prevent)=\"onElementKeyDownArrowRight(element)\"\n        ></button>\n    </ng-template>\n    <ng-template #dotsTemplate>\n        <div\n            automation-id=\"tui-pagination__element\"\n            class=\"t-dots\"\n        ></div>\n    </ng-template>\n</div>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);display:block;text-align:center}.t-content{display:flex;justify-content:center}.t-button{margin:0 .125rem;flex-shrink:0}.t-button_active{background:currentColor}.t-button.t-button.t-button_small{width:.5rem;height:.5rem;margin:0}.t-button.t-button.t-button_small:not(:first-child){margin-left:.5rem}.t-dots{width:var(--tui-height-s);height:var(--tui-height-s);line-height:var(--tui-height-s);margin:0 .125rem;flex-shrink:0;color:var(--tui-text-03);text-align:center;cursor:default}.t-dots:before{content:\"\\2026\"}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }, { type: i2.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }, { type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp(nonNegativeInteger, 'Must be non-negative integer')
], TuiPaginationComponent.prototype, "length", void 0);
__decorate([
    tuiDefaultProp()
], TuiPaginationComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiPaginationComponent.prototype, "disabled", void 0);
__decorate([
    tuiDefaultProp()
], TuiPaginationComponent.prototype, "activePadding", void 0);
__decorate([
    tuiDefaultProp()
], TuiPaginationComponent.prototype, "sidePadding", void 0);
__decorate([
    tuiDefaultProp(nonNegativeInteger, 'Must be non-negative integer')
], TuiPaginationComponent.prototype, "index", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPaginationComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-pagination',
                    templateUrl: './pagination.template.html',
                    styleUrls: ['./pagination.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [tuiAsFocusableItemAccessor(TuiPaginationComponent)],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiModeDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiModeDirective]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PAGINATION_TEXTS]
                }] }]; }, propDecorators: { els: [{
                type: ViewChildren,
                args: ['element', { read: TUI_FOCUSABLE_ITEM_ACCESSOR }]
            }], length: [{
                type: Input
            }], size: [{
                type: Input
            }], disabled: [{
                type: Input
            }], activePadding: [{
                type: Input
            }], sidePadding: [{
                type: Input
            }], content: [{
                type: Input
            }], index: [{
                type: Input
            }], indexChange: [{
                type: Output
            }] } });
function nonNegativeInteger(length) {
    return Number.isInteger(length) && length >= 0;
}

class TuiPaginationModule {
}
TuiPaginationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPaginationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiPaginationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPaginationModule, declarations: [TuiPaginationComponent], imports: [CommonModule,
        TuiRepeatTimesModule,
        TuiLetModule,
        PolymorpheusModule,
        TuiPreventDefaultModule,
        TuiActiveZoneModule,
        TuiButtonModule], exports: [TuiPaginationComponent] });
TuiPaginationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPaginationModule, imports: [[
            CommonModule,
            TuiRepeatTimesModule,
            TuiLetModule,
            PolymorpheusModule,
            TuiPreventDefaultModule,
            TuiActiveZoneModule,
            TuiButtonModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPaginationModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiRepeatTimesModule,
                        TuiLetModule,
                        PolymorpheusModule,
                        TuiPreventDefaultModule,
                        TuiActiveZoneModule,
                        TuiButtonModule,
                    ],
                    declarations: [TuiPaginationComponent],
                    exports: [TuiPaginationComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiPaginationComponent, TuiPaginationModule };
//# sourceMappingURL=taiga-ui-kit-components-pagination.js.map
