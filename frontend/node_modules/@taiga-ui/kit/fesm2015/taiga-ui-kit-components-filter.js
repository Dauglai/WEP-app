import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, ChangeDetectorRef, ElementRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, Input, HostBinding, Output, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import { AbstractTuiMultipleControl, TUI_DEFAULT_IDENTITY_MATCHER, ALWAYS_FALSE_HANDLER, TUI_DEFAULT_STRINGIFY, tuiIsNativeFocusedIn, tuiDefaultProp } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/kit/components/checkbox-block';
import { TuiCheckboxBlockModule } from '@taiga-ui/kit/components/checkbox-block';
import * as i2 from '@taiga-ui/kit/components/badge';
import { TuiBadgeModule } from '@taiga-ui/kit/components/badge';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i5 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i6 from '@taiga-ui/core';
import { TuiModeModule } from '@taiga-ui/core';

// @bad TODO: Add active zone to track focus
class TuiFilterComponent extends AbstractTuiMultipleControl {
    constructor(control, cdr, el) {
        super(control, cdr);
        this.el = el;
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.items = [];
        this.size = 'm';
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.toggledItem = new EventEmitter();
        this.content = ({ $implicit }) => TUI_DEFAULT_STRINGIFY($implicit);
        this.badgeHandler = item => Number(item);
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    onCheckbox(value, item) {
        this.toggledItem.emit(item);
        this.value = value
            ? [...this.value, item]
            : this.value.filter(arrItem => !this.identityMatcher(arrItem, item));
    }
    isCheckboxEnabled(item) {
        return this.value.some(arrItem => this.identityMatcher(arrItem, item));
    }
}
TuiFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiFilterComponent, selector: "tui-filter", inputs: { identityMatcher: "identityMatcher", items: "items", size: "size", disabledItemHandler: "disabledItemHandler", content: "content", badgeHandler: "badgeHandler" }, outputs: { toggledItem: "toggledItem" }, host: { properties: { "attr.data-size": "this.size" } }, usesInheritance: true, ngImport: i0, template: "<tui-checkbox-block\n    *ngFor=\"let item of items\"\n    automation-id=\"tui-filter__checkbox\"\n    class=\"t-item\"\n    [disabled]=\"disabledItemHandler(item)\"\n    [hideCheckbox]=\"true\"\n    [ngModel]=\"isCheckboxEnabled(item)\"\n    [size]=\"size\"\n    (ngModelChange)=\"onCheckbox($event, item)\"\n>\n    <div\n        automation-id=\"tui-filter__content\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: item}\">\n            {{ text }}\n        </ng-container>\n        <tui-badge\n            *ngIf=\"badgeHandler(item) as badgeValue\"\n            automation-id=\"tui-filter__badge\"\n            tuiMode=\"onLight\"\n            class=\"t-badge\"\n            [class.t-badge_disabled]=\"disabledItemHandler(item)\"\n            [size]=\"size\"\n            [value]=\"badgeValue\"\n        ></tui-badge>\n    </div>\n</tui-checkbox-block>\n", styles: [":host{display:block;margin-bottom:-.25rem}.t-content{display:flex;align-items:center}.t-item{margin-right:.25rem;margin-bottom:.25rem}.t-item:last-child,:host[data-size=l] .t-item:last-child{margin-right:0}:host[data-size=l] .t-item{margin-right:.5rem;margin-bottom:.5rem}.t-badge{margin-left:.25rem}.t-badge_disabled{opacity:var(--tui-disabled-opacity)}\n"], components: [{ type: i1.TuiCheckboxBlockComponent, selector: "tui-checkbox-block", inputs: ["contentAlign", "hideCheckbox", "size"] }, { type: i2.TuiBadgeComponent, selector: "tui-badge", inputs: ["value", "size", "status", "hoverable"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "identityMatcher", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "items", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "badgeHandler", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-filter',
                    templateUrl: './filter.template.html',
                    styleUrls: ['./filter.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { identityMatcher: [{
                type: Input
            }], items: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], disabledItemHandler: [{
                type: Input
            }], toggledItem: [{
                type: Output
            }], content: [{
                type: Input
            }], badgeHandler: [{
                type: Input
            }] } });

class TuiFilterModule {
}
TuiFilterModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiFilterModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterModule, declarations: [TuiFilterComponent], imports: [CommonModule,
        FormsModule,
        PolymorpheusModule,
        TuiCheckboxBlockModule,
        TuiBadgeModule,
        TuiModeModule], exports: [TuiFilterComponent] });
TuiFilterModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterModule, imports: [[
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiCheckboxBlockModule,
            TuiBadgeModule,
            TuiModeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusModule,
                        TuiCheckboxBlockModule,
                        TuiBadgeModule,
                        TuiModeModule,
                    ],
                    declarations: [TuiFilterComponent],
                    exports: [TuiFilterComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiFilterComponent, TuiFilterModule };
//# sourceMappingURL=taiga-ui-kit-components-filter.js.map
