import * as i0 from '@angular/core';
import { ChangeDetectorRef, Injectable, Inject, Self, ElementRef, Directive, Input, HostBinding, HostListener, NgModule } from '@angular/core';
import { IntersectionObserverService } from '@ng-web-apis/intersection-observer';
import { tuiWatch, TuiDestroyService } from '@taiga-ui/cdk';
import * as i1 from 'rxjs';
import { Observable, of, Subject } from 'rxjs';
import { switchMap, filter, map, catchError, take, takeUntil } from 'rxjs/operators';

class TuiLazyLoadingService extends Observable {
    constructor(cdr, destroy$, intersections$) {
        super(subscriber => this.src$
            .pipe(switchMap(src => intersections$.pipe(filter(([{ isIntersecting }]) => isIntersecting), map(() => src), catchError(() => of(src)), tuiWatch(cdr), take(1))), takeUntil(destroy$))
            .subscribe(subscriber));
        this.src$ = new Subject();
    }
    next(src) {
        this.src$.next(src);
    }
}
TuiLazyLoadingService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingService, deps: [{ token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }, { token: IntersectionObserverService }], target: i0.ɵɵFactoryTarget.Injectable });
TuiLazyLoadingService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [IntersectionObserverService]
                }] }]; } });

class TuiLazyLoadingDirective {
    constructor(src$, el) {
        this.src$ = src$;
        this.el = el;
        this.animation = 'tuiSkeletonVibe ease-in-out 1s infinite alternate';
        this.background = 'var(--tui-clear-hover)';
        this.src = null;
        if (!this.supported) {
            this.src$.subscribe(src => {
                this.src = src;
            });
        }
    }
    set srcSetter(src) {
        this.src = this.supported ? src : null;
        this.src$.next(src);
    }
    get supported() {
        return 'loading' in this.el.nativeElement;
    }
    onLoad() {
        this.background = '';
        this.animation = '';
    }
}
TuiLazyLoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingDirective, deps: [{ token: TuiLazyLoadingService }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiLazyLoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLazyLoadingDirective, selector: "img[loading=\"lazy\"]", inputs: { srcSetter: ["src", "srcSetter"] }, host: { listeners: { "load": "onLoad()" }, properties: { "style.animation": "this.animation", "style.background": "this.background", "attr.src": "this.src" } }, providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[loading="lazy"]',
                    providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: TuiLazyLoadingService, decorators: [{
                    type: Inject,
                    args: [TuiLazyLoadingService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { srcSetter: [{
                type: Input,
                args: ['src']
            }], animation: [{
                type: HostBinding,
                args: ['style.animation']
            }], background: [{
                type: HostBinding,
                args: ['style.background']
            }], src: [{
                type: HostBinding,
                args: ['attr.src']
            }], onLoad: [{
                type: HostListener,
                args: ['load']
            }] } });

class TuiLazyLoadingModule {
}
TuiLazyLoadingModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiLazyLoadingModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingModule, declarations: [TuiLazyLoadingDirective], exports: [TuiLazyLoadingDirective] });
TuiLazyLoadingModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiLazyLoadingDirective],
                    exports: [TuiLazyLoadingDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLazyLoadingDirective, TuiLazyLoadingModule, TuiLazyLoadingService };
//# sourceMappingURL=taiga-ui-kit-directives-lazy-loading.js.map
