import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, EventEmitter, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, Output, HostListener, NgModule } from '@angular/core';
import * as i5 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import * as i4 from '@taiga-ui/cdk';
import { tuiGetClipboardDataText, AbstractTuiControl, CHAR_PLUS, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, tuiPure, TuiLetModule, TuiMapperPipeModule, TuiActiveZoneModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_NON_DIGITS_REGEXP, TUI_MASK_SYMBOLS_REGEXP, TuiFlagPipe, TuiPrimitiveTextfieldComponent, TuiSvgModule, TuiGroupModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiHintModule, TuiHostedDropdownModule, TuiDataListModule, TuiWrapperModule, TuiFlagPipeModule } from '@taiga-ui/core';
import { TuiCountryIsoCode } from '@taiga-ui/i18n';
import { TUI_ARROW, TuiArrowModule } from '@taiga-ui/kit/components/arrow';
import * as i2 from '@taiga-ui/kit/components/input-phone';
import { TuiInputPhoneComponent, TuiInputPhoneModule } from '@taiga-ui/kit/components/input-phone';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_COUNTRIES } from '@taiga-ui/kit/tokens';
import * as i3 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';
import * as i7 from 'rxjs';

const MASK_AFTER_CODE_REGEXP = /\([#]+\)|[#\- ]/g;

const TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS = {
    countries: [],
    countryIsoCode: TuiCountryIsoCode.RU,
};
/**
 * Default parameters for input phone international component
 */
const TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS = new InjectionToken(`[TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS]`, {
    factory: () => TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS,
});
const tuiInputPhoneInternationalOptionsProvider = (options) => ({
    provide: TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS), options),
});

const TUI_COUNTRIES_MASKS = new InjectionToken(`[TUI_COUNTRIES_MASKS]`, {
    factory: () => ({
        [TuiCountryIsoCode.AD]: `+376###-###`,
        [TuiCountryIsoCode.AE]: `+971-##-###-####`,
        [TuiCountryIsoCode.AF]: `+93##-###-####`,
        [TuiCountryIsoCode.AG]: `+1(268) ###-####`,
        [TuiCountryIsoCode.AI]: `+1(264) ###-####`,
        [TuiCountryIsoCode.AL]: `+355(###) ###-###`,
        [TuiCountryIsoCode.AM]: `+374##-###-###`,
        [TuiCountryIsoCode.AO]: `+244(###) ###-###`,
        [TuiCountryIsoCode.AR]: `+54(###) ###-####`,
        [TuiCountryIsoCode.AT]: `+43(###) ###-####`,
        [TuiCountryIsoCode.AU]: `+61#-####-####`,
        [TuiCountryIsoCode.AW]: `+297###-####`,
        [TuiCountryIsoCode.AZ]: `+994##-###-##-##`,
        [TuiCountryIsoCode.BA]: `+387 ###-####-##`,
        [TuiCountryIsoCode.BB]: `+1(246) ###-####`,
        [TuiCountryIsoCode.BD]: `+880##-###-###`,
        [TuiCountryIsoCode.BE]: `+32(###) ###-###`,
        [TuiCountryIsoCode.BF]: `+226##-##-####`,
        [TuiCountryIsoCode.BG]: `+359(###) ###-###`,
        [TuiCountryIsoCode.BH]: `+973####-####`,
        [TuiCountryIsoCode.BI]: `+257##-##-####`,
        [TuiCountryIsoCode.BJ]: `+229##-##-####`,
        [TuiCountryIsoCode.BL]: `+590 ## ## ## ## ##`,
        [TuiCountryIsoCode.BM]: `+1(441) ###-####`,
        [TuiCountryIsoCode.BN]: `+673###-####`,
        [TuiCountryIsoCode.BO]: `+591#-###-####`,
        [TuiCountryIsoCode.BQ]: `+599-###-####`,
        [TuiCountryIsoCode.BR]: `+55(##) ####-####`,
        [TuiCountryIsoCode.BS]: `+1(242) ###-####`,
        [TuiCountryIsoCode.BT]: `+975#-###-###`,
        [TuiCountryIsoCode.BW]: `+267##-###-###`,
        [TuiCountryIsoCode.BY]: `+375(##) ###-##-##`,
        [TuiCountryIsoCode.BZ]: `+501###-####`,
        [TuiCountryIsoCode.CA]: `+1(###) ###-####`,
        [TuiCountryIsoCode.CD]: `+243(###) ###-###`,
        [TuiCountryIsoCode.CF]: `+236-##-##-####`,
        [TuiCountryIsoCode.CG]: `+242##-###-####`,
        [TuiCountryIsoCode.CH]: `+41##-###-####`,
        [TuiCountryIsoCode.CI]: `+225##-##-###-###`,
        [TuiCountryIsoCode.CL]: `+56#-####-####`,
        [TuiCountryIsoCode.CM]: `+237#####-####`,
        [TuiCountryIsoCode.CN]: `+86(###) ####-####`,
        [TuiCountryIsoCode.CO]: `+57(###) ###-####`,
        [TuiCountryIsoCode.CR]: `+506####-####`,
        [TuiCountryIsoCode.CU]: `+53#-###-####`,
        [TuiCountryIsoCode.CV]: `+238(###) ##-##`,
        [TuiCountryIsoCode.CW]: `+5999-###-####`,
        [TuiCountryIsoCode.CY]: `+357##-###-###`,
        [TuiCountryIsoCode.CZ]: `+420(###) ###-###`,
        [TuiCountryIsoCode.DE]: `+49(###) ###-###-##`,
        [TuiCountryIsoCode.DJ]: `+253##-##-##-##`,
        [TuiCountryIsoCode.DK]: `+45##-##-##-##`,
        [TuiCountryIsoCode.DM]: `+1(767) ###-####`,
        [TuiCountryIsoCode.DO]: `+1(###) ###-####`,
        [TuiCountryIsoCode.DZ]: `+213##-###-####`,
        [TuiCountryIsoCode.EC]: `+593##-###-####`,
        [TuiCountryIsoCode.EE]: `+372####-####`,
        [TuiCountryIsoCode.EG]: `+20(###) ###-####`,
        [TuiCountryIsoCode.ER]: `+291#-###-###`,
        [TuiCountryIsoCode.ES]: `+34(###) ###-###`,
        [TuiCountryIsoCode.ET]: `+251##-###-####`,
        [TuiCountryIsoCode.FI]: `+358(###) ###-##-##`,
        [TuiCountryIsoCode.FJ]: `+679##-#####`,
        [TuiCountryIsoCode.FK]: `+500#####`,
        [TuiCountryIsoCode.FM]: `+691###-####`,
        [TuiCountryIsoCode.FR]: `+33 ## ## ## ## ##`,
        [TuiCountryIsoCode.GA]: `+241##-##-##-##`,
        [TuiCountryIsoCode.GB]: `+44##-####-####`,
        [TuiCountryIsoCode.GD]: `+1(473) ###-####`,
        [TuiCountryIsoCode.GE]: `+995(###) ###-###`,
        [TuiCountryIsoCode.GF]: `+594 ## ## ## ## ##`,
        [TuiCountryIsoCode.GH]: `+233(###) ###-###`,
        [TuiCountryIsoCode.GI]: `+350###-#####`,
        [TuiCountryIsoCode.GL]: `+299##-##-##`,
        [TuiCountryIsoCode.GM]: `+220(###) ##-##`,
        [TuiCountryIsoCode.GN]: `+224##-###-###`,
        [TuiCountryIsoCode.GP]: `+590 ## ## ## ## ##`,
        [TuiCountryIsoCode.GQ]: `+240##-###-####`,
        [TuiCountryIsoCode.GR]: `+30(###) ###-####`,
        [TuiCountryIsoCode.GT]: `+502#-###-####`,
        [TuiCountryIsoCode.GW]: `+245#-######`,
        [TuiCountryIsoCode.GY]: `+592###-####`,
        [TuiCountryIsoCode.HK]: `+852####-####`,
        [TuiCountryIsoCode.HN]: `+504####-####`,
        [TuiCountryIsoCode.HR]: `+385##-###-####`,
        [TuiCountryIsoCode.HT]: `+509##-##-####`,
        [TuiCountryIsoCode.HU]: `+36(###) ###-###`,
        [TuiCountryIsoCode.ID]: `+62(###) ###-##-###`,
        [TuiCountryIsoCode.IE]: `+353(###) ###-###`,
        [TuiCountryIsoCode.IL]: `+972##-###-####`,
        [TuiCountryIsoCode.IN]: `+91(####) ###-###`,
        [TuiCountryIsoCode.IQ]: `+964(###) ###-####`,
        [TuiCountryIsoCode.IR]: `+98(###) ###-####`,
        [TuiCountryIsoCode.IS]: `+354###-####`,
        [TuiCountryIsoCode.IT]: `+39(###) ####-###`,
        [TuiCountryIsoCode.JM]: `+1(876) ###-####`,
        [TuiCountryIsoCode.JO]: `+962#-####-####`,
        [TuiCountryIsoCode.JP]: `+81-##-####-####`,
        [TuiCountryIsoCode.KE]: `+254###-######`,
        [TuiCountryIsoCode.KG]: `+996(###) ###-###`,
        [TuiCountryIsoCode.KH]: `+855##-###-###`,
        [TuiCountryIsoCode.KM]: `+269##-#####`,
        [TuiCountryIsoCode.KN]: `+1(869) ###-####`,
        [TuiCountryIsoCode.KP]: `+850####-#############`,
        [TuiCountryIsoCode.KR]: `+82##-###-####`,
        [TuiCountryIsoCode.KW]: `+965####-####`,
        [TuiCountryIsoCode.KY]: `+1(345) ###-####`,
        [TuiCountryIsoCode.KZ]: `+7(###) ###-##-##`,
        [TuiCountryIsoCode.LA]: `+856##-##-###-###`,
        [TuiCountryIsoCode.LB]: `+961##-###-###`,
        [TuiCountryIsoCode.LC]: `+1(758) ###-####`,
        [TuiCountryIsoCode.LI]: `+423(###) ###-####`,
        [TuiCountryIsoCode.LK]: `+94##-###-####`,
        [TuiCountryIsoCode.LR]: `+231##-###-###`,
        [TuiCountryIsoCode.LS]: `+266#-###-####`,
        [TuiCountryIsoCode.LT]: `+370(###) ##-###`,
        [TuiCountryIsoCode.LU]: `+352(###) ###-###`,
        [TuiCountryIsoCode.LV]: `+371##-###-###`,
        [TuiCountryIsoCode.LY]: `+218##-###-####`,
        [TuiCountryIsoCode.MA]: `+212##-####-###`,
        [TuiCountryIsoCode.MC]: `+377###-###-###`,
        [TuiCountryIsoCode.MD]: `+373####-####`,
        [TuiCountryIsoCode.ME]: `+382##-###-###`,
        [TuiCountryIsoCode.MF]: `+590 ## ## ## ## ##`,
        [TuiCountryIsoCode.MG]: `+261##-##-#####`,
        [TuiCountryIsoCode.MK]: `+389##-###-###`,
        [TuiCountryIsoCode.ML]: `+223##-##-####`,
        [TuiCountryIsoCode.MM]: `+95##-###-###`,
        [TuiCountryIsoCode.MN]: `+976##-##-####`,
        [TuiCountryIsoCode.MO]: `+853####-####`,
        [TuiCountryIsoCode.MQ]: `+596 ## ## ## ## ##`,
        [TuiCountryIsoCode.MR]: `+222##-##-####`,
        [TuiCountryIsoCode.MS]: `+1(664) ###-####`,
        [TuiCountryIsoCode.MT]: `+356####-####`,
        [TuiCountryIsoCode.MU]: `+230####-####`,
        [TuiCountryIsoCode.MV]: `+960###-####`,
        [TuiCountryIsoCode.MW]: `+265#-####-####`,
        [TuiCountryIsoCode.MX]: `+52(###) ###-####`,
        [TuiCountryIsoCode.MY]: `+60(###) ###-###`,
        [TuiCountryIsoCode.MZ]: `+258##-###-###`,
        [TuiCountryIsoCode.NA]: `+264##-###-####`,
        [TuiCountryIsoCode.NC]: `+687 ### ###`,
        [TuiCountryIsoCode.NE]: `+227##-##-####`,
        [TuiCountryIsoCode.NG]: `+234(###) ###-####`,
        [TuiCountryIsoCode.NI]: `+505####-####`,
        [TuiCountryIsoCode.NL]: `+31##-###-####`,
        [TuiCountryIsoCode.NO]: `+47(###) ##-###`,
        [TuiCountryIsoCode.NP]: `+977##-###-###`,
        [TuiCountryIsoCode.NZ]: `+64(###) ###-####`,
        [TuiCountryIsoCode.OM]: `+968##-###-###`,
        [TuiCountryIsoCode.PA]: `+507###-####`,
        [TuiCountryIsoCode.PE]: `+51(###) ###-###`,
        [TuiCountryIsoCode.PF]: `+689 ## ## ## ##`,
        [TuiCountryIsoCode.PG]: `+675(###) ##-###`,
        [TuiCountryIsoCode.PH]: `+63(###) ###-####`,
        [TuiCountryIsoCode.PK]: `+92(###) ###-####`,
        [TuiCountryIsoCode.PL]: `+48(###) ###-###`,
        [TuiCountryIsoCode.PT]: `+351##-###-####`,
        [TuiCountryIsoCode.PW]: `+680###-####`,
        [TuiCountryIsoCode.PY]: `+595(###) ###-###`,
        [TuiCountryIsoCode.QA]: `+974####-####`,
        [TuiCountryIsoCode.RE]: `+262 ## ## ## ## ##`,
        [TuiCountryIsoCode.RO]: `+40##-###-####`,
        [TuiCountryIsoCode.RS]: `+381##-###-####`,
        [TuiCountryIsoCode.RU]: `+7### ###-##-##`,
        [TuiCountryIsoCode.RW]: `+250(###) ###-###`,
        [TuiCountryIsoCode.SA]: `+966#-####-####`,
        [TuiCountryIsoCode.SB]: `+677###-####`,
        [TuiCountryIsoCode.SC]: `+248#-###-###`,
        [TuiCountryIsoCode.SD]: `+249##-###-####`,
        [TuiCountryIsoCode.SE]: `+46##-###-####`,
        [TuiCountryIsoCode.SG]: `+65####-####`,
        [TuiCountryIsoCode.SH]: `+290####`,
        [TuiCountryIsoCode.SI]: `+386##-###-###`,
        [TuiCountryIsoCode.SK]: `+421(###) ###-###`,
        [TuiCountryIsoCode.SL]: `+232##-######`,
        [TuiCountryIsoCode.SM]: `+378####-######`,
        [TuiCountryIsoCode.SN]: `+221##-###-####`,
        [TuiCountryIsoCode.SO]: `+252##-###-###`,
        [TuiCountryIsoCode.SR]: `+597###-####`,
        [TuiCountryIsoCode.ST]: `+239##-#####`,
        [TuiCountryIsoCode.SV]: `+503##-##-####`,
        [TuiCountryIsoCode.SX]: `+1(721) ###-####`,
        [TuiCountryIsoCode.SY]: `+963##-####-###`,
        [TuiCountryIsoCode.SZ]: `+268##-##-####`,
        [TuiCountryIsoCode.TC]: `+1(649) ###-####`,
        [TuiCountryIsoCode.TD]: `+235##-##-##-##`,
        [TuiCountryIsoCode.TG]: `+228##-###-###`,
        [TuiCountryIsoCode.TH]: `+66##-###-####`,
        [TuiCountryIsoCode.TJ]: `+992##-###-####`,
        [TuiCountryIsoCode.TL]: `+670###-#####`,
        [TuiCountryIsoCode.TM]: `+993#-###-####`,
        [TuiCountryIsoCode.TN]: `+216##-###-###`,
        [TuiCountryIsoCode.TO]: `+676#####`,
        [TuiCountryIsoCode.TR]: `+90(###) ###-####`,
        [TuiCountryIsoCode.TT]: `+1(868) ###-####`,
        [TuiCountryIsoCode.TW]: `+886#-####-####`,
        [TuiCountryIsoCode.TZ]: `+255##-###-####`,
        [TuiCountryIsoCode.UA]: `+380(##) ###-##-##`,
        [TuiCountryIsoCode.UG]: `+256(###) ###-###`,
        [TuiCountryIsoCode.US]: `+1(###) ###-####`,
        [TuiCountryIsoCode.UY]: `+598#-###-##-##`,
        [TuiCountryIsoCode.UZ]: `+998##-###-####`,
        [TuiCountryIsoCode.VC]: `+1(784) ###-####`,
        [TuiCountryIsoCode.VE]: `+58(###) ###-####`,
        [TuiCountryIsoCode.VG]: `+1(284)###-####`,
        [TuiCountryIsoCode.VN]: `+84(###) ####-###`,
        [TuiCountryIsoCode.VU]: `+678##-#####`,
        [TuiCountryIsoCode.WS]: `+685##-####`,
        [TuiCountryIsoCode.XK]: `+383##-###-###`,
        [TuiCountryIsoCode.YE]: `+967###-###-###`,
        [TuiCountryIsoCode.YT]: `+262 ## ## ## ## ##`,
        [TuiCountryIsoCode.ZA]: `+27##-###-####`,
        [TuiCountryIsoCode.ZM]: `+260##-###-####`,
        [TuiCountryIsoCode.ZW]: `+263#-######`,
    }),
});

function tuiExtractValueFromEvent(event) {
    var _a;
    return `dataTransfer` in event
        ? ((_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.getData(`text/plain`)) || ``
        : tuiGetClipboardDataText(event);
}

function tuiNotKzRegion(value) {
    const region = Number(value.slice(1, 4));
    return region < 600 || region > 799;
}

class TuiInputPhoneInternationalComponent extends AbstractTuiControl {
    constructor(control, cdr, countriesNames$, countriesMasks, options, flagPipe) {
        super(control, cdr);
        this.countriesNames$ = countriesNames$;
        this.countriesMasks = countriesMasks;
        this.options = options;
        this.flagPipe = flagPipe;
        this.countries = this.options.countries;
        this.countryIsoCodeChange = new EventEmitter();
        this.countryIsoCode = this.options.countryIsoCode;
        this.open = false;
        this.arrow = TUI_ARROW;
        this.isoToCountryCodeMapper = item => this.isoToCountryCode(item);
    }
    set isoCode(code) {
        var _a;
        if (this.countryIsoCode === code) {
            return;
        }
        (_a = this.inputPhoneComponent) === null || _a === void 0 ? void 0 : _a.writeValue(this.value);
        this.countryIsoCode = code;
    }
    get nativeFocusableElement() {
        return this.inputPhoneComponent && !this.computedDisabled
            ? this.inputPhoneComponent.nativeFocusableElement
            : null;
    }
    get focused() {
        return ((!!this.primitiveTextfield && this.primitiveTextfield.focused) ||
            (!!this.inputPhoneComponent && this.inputPhoneComponent.focused));
    }
    get inputPhoneCountryCode() {
        return this.isoToCountryCode(this.countryIsoCode);
    }
    get phoneMaskAfterCountryCode() {
        const countryCode = this.isoToCountryCode(this.countryIsoCode);
        return this.calculateMaskAfterCountryCode(this.countriesMasks[this.countryIsoCode], countryCode);
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    get countryFlagPath() {
        return this.getFlagPath(this.countryIsoCode);
    }
    onPaste(event) {
        let value = tuiExtractValueFromEvent(event).replace(TUI_NON_DIGITS_REGEXP, '');
        const countryIsoCode = this.extractCountryCode(value);
        if (!countryIsoCode) {
            this.value = `${this.inputPhoneCountryCode}${value}`
                .replace(TUI_MASK_SYMBOLS_REGEXP, '')
                .slice(0, this.getMaxAllowedLength(this.countryIsoCode));
            return;
        }
        if (countryIsoCode === TuiCountryIsoCode.RU) {
            value = value.replace(/^8/, '7');
        }
        this.updateCountryIsoCode(countryIsoCode);
        this.value = `${CHAR_PLUS}${value}`;
    }
    /**
     * @deprecated use `<img [src]="countryIsoCode | tuiFlagPipe" />`
     * TODO drop in v4.0
     */
    getFlagPath(code) {
        return this.flagPipe.transform(code);
    }
    onItemClick(isoCode) {
        this.open = false;
        this.updateCountryIsoCode(isoCode);
        // recalculates mask inside inputPhone to prevent isoCode conflict
        this.cdr.detectChanges();
        const maxLength = this.getMaxAllowedLength(isoCode);
        if (this.value.length > maxLength) {
            this.value = this.value.slice(0, maxLength);
        }
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus();
        }
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    isoToCountryCode(isoCode) {
        return this.countriesMasks[isoCode].replace(MASK_AFTER_CODE_REGEXP, '');
    }
    /** @deprecated use 'value' setter */
    onModelChange(value) {
        this.value = value;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    getFallbackValue() {
        return '';
    }
    calculateMaskAfterCountryCode(mask, countryCode) {
        return mask.replace(countryCode, '').trim();
    }
    close() {
        this.open = false;
    }
    getMaxAllowedLength(isoCode) {
        return this.countriesMasks[isoCode].replace(/[()\- ]/g, '').length;
    }
    updateCountryIsoCode(code) {
        this.countryIsoCode = code;
        this.countryIsoCodeChange.emit(code);
    }
    extractCountryCode(value) {
        return this.countries.find(countryIsoCode => {
            const ruCodeTest = countryIsoCode === TuiCountryIsoCode.RU &&
                /^[7 | 8]/.test(value) &&
                /^(?!880[1-9 ])/.test(value) &&
                value.length + 1 === this.getMaxAllowedLength(TuiCountryIsoCode.RU);
            const matched = ruCodeTest ||
                (value.startsWith(this.isoToCountryCode(countryIsoCode).replace(CHAR_PLUS, '')) &&
                    value.length + 1 === this.getMaxAllowedLength(countryIsoCode));
            return matched && countryIsoCode === TuiCountryIsoCode.RU
                ? tuiNotKzRegion(value)
                : matched;
        });
    }
}
TuiInputPhoneInternationalComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_COUNTRIES }, { token: TUI_COUNTRIES_MASKS }, { token: TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS }, { token: TuiFlagPipe }], target: i0.ɵɵFactoryTarget.Component });
TuiInputPhoneInternationalComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPhoneInternationalComponent, selector: "tui-input-phone-international", inputs: { isoCode: ["countryIsoCode", "isoCode"], countries: "countries" }, outputs: { countryIsoCodeChange: "countryIsoCodeChange" }, host: { listeners: { "paste.capture.prevent.stop": "onPaste($event)", "drop.capture.prevent.stop": "onPaste($event)" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
        tuiAsControl(TuiInputPhoneInternationalComponent),
        // TODO: for backward compatibility only. Drop in v4.0
        TuiFlagPipe,
    ], viewQueries: [{ propertyName: "inputPhoneComponent", first: true, predicate: TuiInputPhoneComponent, descendants: true }, { propertyName: "primitiveTextfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    *ngIf=\"countriesNames$ | async as countriesNames\"\n    class=\"t-hosted-dropdown\"\n    [content]=\"dropdown\"\n    [canOpen]=\"!readOnly\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <div tuiGroup>\n        <tui-primitive-textfield\n            tuiHintContent=\"\"\n            tuiTextfieldPrefix=\"\"\n            tuiTextfieldPostfix=\"\"\n            class=\"t-country-select tui-group__auto-width-item\"\n            [tuiTextfieldCustomContent]=\"countryValueContent\"\n            [tuiTextfieldLabelOutside]=\"true\"\n            [tuiTextfieldIcon]=\"icon\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [editable]=\"false\"\n            [pseudoFocus]=\"open || null\"\n            [readOnly]=\"readOnly\"\n        ></tui-primitive-textfield>\n        <tui-input-phone\n            class=\"t-input-phone tui-group__auto-width-item\"\n            [disabled]=\"disabled\"\n            [focusable]=\"focusable\"\n            [countryCode]=\"inputPhoneCountryCode\"\n            [phoneMaskAfterCountryCode]=\"phoneMaskAfterCountryCode\"\n            [readOnly]=\"readOnly\"\n            [pseudoInvalid]=\"computedInvalid\"\n            [pseudoFocus]=\"pseudoFocus\"\n            [pseudoHover]=\"pseudoHover\"\n            [(ngModel)]=\"value\"\n        >\n            <ng-content></ng-content>\n            <input\n                tuiTextfield\n                autocomplete=\"new-password\"\n            />\n        </tui-input-phone>\n    </div>\n\n    <ng-template #dropdown>\n        <tui-data-list>\n            <button\n                *ngFor=\"let item of countries\"\n                tuiOption\n                (click)=\"onItemClick(item)\"\n            >\n                <img\n                    alt=\"\"\n                    class=\"t-country-item-flag\"\n                    [src]=\"item | tuiFlag\"\n                />\n                <span class=\"t-country-item-name\">\n                    {{ countriesNames[item] }}\n                </span>\n                <span class=\"t-country-item-code\">\n                    {{ item | tuiMapper : isoToCountryCodeMapper }}\n                </span>\n            </button>\n        </tui-data-list>\n    </ng-template>\n\n    <ng-template #countryValueContent>\n        <!-- eslint-disable @html-eslint/require-img-alt -->\n        <img\n            class=\"t-flag\"\n            [alt]=\"countriesNames[countryIsoCode]\"\n            [src]=\"countryIsoCode | tuiFlag\"\n        />\n    </ng-template>\n\n    <ng-template #icon>\n        <div\n            tuiWrapper\n            appearance=\"icon\"\n        >\n            <ng-container *polymorpheusOutlet=\"arrow\"></ng-container>\n        </div>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block}:host._disabled{pointer-events:none}.t-hosted-dropdown{display:block}.t-country-select{width:5.625rem}.t-country-select:not(._readonly) ::ng-deep input:not(:disabled){cursor:pointer}.t-country-select._readonly ::ng-deep input{cursor:default}.t-country-select[data-size=m]{width:5.5rem}.t-country-select[data-size=s]{width:2rem}.t-country-select[data-size=s] .t-flag{margin-left:-1rem}.t-arrow-icon{position:relative;display:flex;width:1.5rem;height:1.5rem;margin:0 0 0 .25rem;-webkit-margin-start:.25rem;margin-inline-start:.25rem;-webkit-margin-end:0;margin-inline-end:0;align-items:center;justify-content:center;box-sizing:border-box;cursor:pointer}:host._readonly .t-arrow-icon,:host._disabled .t-arrow-icon{pointer-events:none}.t-arrow-icon_open{transform:rotate(180deg)}.t-input-phone{flex:1}.t-flag{width:1.75rem;height:1.25rem;margin-left:-.5rem}.t-country-item-flag{width:1.75rem;height:1.25rem}.t-country-item-name{margin-left:.75rem;margin-right:auto}.t-country-item-code{color:var(--tui-text-02);margin-right:.25rem}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiInputPhoneComponent, selector: "tui-input-phone", inputs: ["countryCode", "phoneMaskAfterCountryCode", "allowText", "search"], outputs: ["searchChange"] }, { type: i1.TuiTextfieldComponent, selector: "input[tuiTextfield], textarea[tuiTextfield]" }, { type: i1.TuiDataListComponent, selector: "tui-data-list", inputs: ["role", "emptyContent", "size"] }, { type: i1.TuiOptionComponent, selector: "button[tuiOption], a[tuiOption]", inputs: ["size", "role", "disabled", "value"] }], directives: [{ type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i4.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiHintOptionsDirective, selector: "[tuiHintContent]", inputs: ["tuiHintContent", "tuiHintDirection", "tuiHintAppearance", "tuiHintShowDelay", "tuiHintHideDelay"] }, { type: i1.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { type: i1.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { type: i1.TuiTextfieldCustomContentDirective, selector: "[tuiTextfieldCustomContent]", inputs: ["tuiTextfieldCustomContent"] }, { type: i1.TuiTextfieldLabelOutsideDirective, selector: "[tuiTextfieldLabelOutside]", inputs: ["tuiTextfieldLabelOutside"] }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i2.TuiInputPhoneDirective, selector: "tui-input-phone" }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i3.AsyncPipe, "tuiFlag": i1.TuiFlagPipe, "tuiMapper": i4.TuiMapperPipe }, viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputPhoneInternationalComponent.prototype, "isoCode", null);
__decorate([
    tuiPure
], TuiInputPhoneInternationalComponent.prototype, "calculateMaskAfterCountryCode", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-phone-international',
                    templateUrl: './input-phone-international.template.html',
                    styleUrls: ['./input-phone-international.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputPhoneInternationalComponent),
                        tuiAsControl(TuiInputPhoneInternationalComponent),
                        // TODO: for backward compatibility only. Drop in v4.0
                        TuiFlagPipe,
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i7.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_COUNTRIES]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_COUNTRIES_MASKS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS]
                }] }, { type: i1.TuiFlagPipe, decorators: [{
                    type: Inject,
                    args: [TuiFlagPipe]
                }] }]; }, propDecorators: { inputPhoneComponent: [{
                type: ViewChild,
                args: [TuiInputPhoneComponent]
            }], primitiveTextfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], isoCode: [{
                type: Input,
                args: ['countryIsoCode']
            }], countries: [{
                type: Input
            }], countryIsoCodeChange: [{
                type: Output
            }], onPaste: [{
                type: HostListener,
                args: ['paste.capture.prevent.stop', ['$event']]
            }, {
                type: HostListener,
                args: ['drop.capture.prevent.stop', ['$event']]
            }], calculateMaskAfterCountryCode: [] } });

class TuiInputPhoneInternationalModule {
}
TuiInputPhoneInternationalModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputPhoneInternationalModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalModule, declarations: [TuiInputPhoneInternationalComponent], imports: [CommonModule,
        FormsModule,
        PolymorpheusModule,
        TuiSvgModule,
        TuiInputPhoneModule,
        TuiGroupModule,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule,
        TuiHintModule,
        TuiHostedDropdownModule,
        TuiDataListModule,
        TuiArrowModule,
        TuiWrapperModule,
        TuiLetModule,
        TuiMapperPipeModule,
        TuiActiveZoneModule,
        TuiFlagPipeModule], exports: [TuiInputPhoneInternationalComponent] });
TuiInputPhoneInternationalModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalModule, imports: [[
            CommonModule,
            FormsModule,
            PolymorpheusModule,
            TuiSvgModule,
            TuiInputPhoneModule,
            TuiGroupModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiHintModule,
            TuiHostedDropdownModule,
            TuiDataListModule,
            TuiArrowModule,
            TuiWrapperModule,
            TuiLetModule,
            TuiMapperPipeModule,
            TuiActiveZoneModule,
            TuiFlagPipeModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputPhoneInternationalModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        FormsModule,
                        PolymorpheusModule,
                        TuiSvgModule,
                        TuiInputPhoneModule,
                        TuiGroupModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiHintModule,
                        TuiHostedDropdownModule,
                        TuiDataListModule,
                        TuiArrowModule,
                        TuiWrapperModule,
                        TuiLetModule,
                        TuiMapperPipeModule,
                        TuiActiveZoneModule,
                        TuiFlagPipeModule,
                    ],
                    declarations: [TuiInputPhoneInternationalComponent],
                    exports: [TuiInputPhoneInternationalComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { MASK_AFTER_CODE_REGEXP, TUI_COUNTRIES_MASKS, TUI_INPUT_PHONE_INTERNATIONAL_DEFAULT_OPTIONS, TUI_INPUT_PHONE_INTERNATIONAL_OPTIONS, TuiInputPhoneInternationalComponent, TuiInputPhoneInternationalModule, tuiExtractValueFromEvent, tuiInputPhoneInternationalOptionsProvider, tuiNotKzRegion };
//# sourceMappingURL=taiga-ui-kit-components-input-phone-international.js.map
