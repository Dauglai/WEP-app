import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, HostBinding, Directive, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NgControl, FormsModule } from '@angular/forms';
import { AbstractTuiNullableControl, tuiIsNativeFocused, tuiIsPresent, tuiClamp, TUI_IS_MOBILE, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, tuiPure } from '@taiga-ui/cdk';
import * as i2 from '@taiga-ui/core';
import { tuiCreateNumberMask, tuiEnableAutoCorrectDecimalSymbol, tuiMaskedNumberStringToNumber, tuiFormatNumber, TUI_TEXTFIELD_WATCHED_CONTROLLER, TUI_NUMBER_FORMAT, TEXTFIELD_CONTROLLER_PROVIDER, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiButtonModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';
import * as i1 from '@taiga-ui/kit/components/input-number';
import { TuiInputNumberComponent, TuiInputNumberModule } from '@taiga-ui/kit/components/input-number';
import { TUI_PLUS_MINUS_TEXTS } from '@taiga-ui/kit/tokens';
import * as i3 from '@taiga-ui/kit/directives';
import { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';
import * as i5 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i6 from 'rxjs';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

/** Default values for the input count options. */
const TUI_INPUT_COUNT_DEFAULT_OPTIONS = {
    icons: {
        up: `tuiIconPlus`,
        down: `tuiIconMinus`,
    },
    appearance: `textfield`,
    hideButtons: false,
    min: 0,
    max: Number.MAX_SAFE_INTEGER,
    step: 1,
    postfix: ``,
};
/**
 * Default parameters for input count component
 */
const TUI_INPUT_COUNT_OPTIONS = new InjectionToken(`[TUI_INPUT_COUNT_OPTIONS]`, {
    factory: () => TUI_INPUT_COUNT_DEFAULT_OPTIONS,
});
const tuiInputCountOptionsProvider = (options) => ({
    provide: TUI_INPUT_COUNT_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_INPUT_COUNT_DEFAULT_OPTIONS), options),
});

class TuiInputCountComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, textfieldController, minusTexts$, isMobile, options, numberFormat) {
        super(control, cdr);
        this.textfieldController = textfieldController;
        this.minusTexts$ = minusTexts$;
        this.isMobile = isMobile;
        this.options = options;
        this.numberFormat = numberFormat;
        this.step = this.options.step;
        this.min = this.options.min;
        this.max = this.options.max;
        this.hideButtons = this.options.hideButtons;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.prefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.postfix = this.options.postfix;
    }
    getMask(allowNegative) {
        return {
            mask: tuiCreateNumberMask({
                allowNegative,
                decimalSymbol: this.numberFormat.decimalSeparator,
                thousandSymbol: this.numberFormat.thousandSeparator,
                autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(this.numberFormat),
            }),
            guide: false,
        };
    }
    get buttonsHidden() {
        return this.hideButtons || this.textfieldController.appearance === 'table';
    }
    get iconUp() {
        return this.options.icons.up;
    }
    get iconDown() {
        return this.options.icons.down;
    }
    get nativeFocusableElement() {
        return !this.inputNumber || this.computedDisabled
            ? null
            : this.inputNumber.nativeFocusableElement;
    }
    get size() {
        return this.textfieldController.size;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get minusButtonDisabled() {
        return !this.interactive || (tuiIsPresent(this.value) && this.value <= this.min);
    }
    get plusButtonDisabled() {
        return !this.interactive || (tuiIsPresent(this.value) && this.value >= this.max);
    }
    onButtonMouseDown(event, disabled = false) {
        if (disabled || !this.nativeFocusableElement || this.isMobile) {
            return;
        }
        event.preventDefault();
        this.nativeFocusableElement.focus();
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    /**
     * @deprecated
     * TODO: drop in v4.0 as unused method
     */
    onInputNumberChange(value) {
        this.value = value;
    }
    /** @deprecated */
    onValueChange(value) {
        this.value = tuiMaskedNumberStringToNumber(value, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);
    }
    decreaseValue() {
        if (this.readOnly) {
            return;
        }
        const newValue = (this.value || 0) - this.step;
        this.safeUpdateValue(newValue);
    }
    increaseValue() {
        if (this.readOnly) {
            return;
        }
        const newValue = (this.value || 0) + this.step;
        this.safeUpdateValue(newValue);
    }
    onKeydown(event) {
        switch (event.key) {
            case 'ArrowUp':
            case 'Up':
                this.increaseValue();
                event.preventDefault();
                break;
            case 'ArrowDown':
            case 'Down':
                this.decreaseValue();
                event.preventDefault();
                break;
            default:
                break;
        }
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    safeUpdateValue(newValue) {
        const value = tuiClamp(newValue, this.min, this.max);
        this.value = value;
        this.nativeValue = this.formatNumber(value);
    }
    formatNumber(value) {
        return this.isNotNumber(value) ? '' : tuiFormatNumber(value, this.numberFormat);
    }
    isNotNumber(value) {
        return Number.isNaN(value) || !tuiIsPresent(value);
    }
}
TuiInputCountComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }, { token: TUI_PLUS_MINUS_TEXTS }, { token: TUI_IS_MOBILE }, { token: TUI_INPUT_COUNT_OPTIONS }, { token: TUI_NUMBER_FORMAT }], target: i0.ɵɵFactoryTarget.Component });
TuiInputCountComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCountComponent, selector: "tui-input-count", inputs: { step: "step", min: "min", max: "max", hideButtons: "hideButtons", prefix: "prefix", postfix: "postfix" }, host: { properties: { "class._hide-buttons": "this.buttonsHidden", "attr.data-size": "this.size" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputCountComponent),
        tuiAsControl(TuiInputCountComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], viewQueries: [{ propertyName: "inputNumber", first: true, predicate: TuiInputNumberComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-input-number\n    class=\"t-textfield\"\n    [pseudoFocus]=\"pseudoFocus\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [pseudoActive]=\"pseudoActive\"\n    [focusable]=\"focusable\"\n    [min]=\"min\"\n    [max]=\"max\"\n    [prefix]=\"prefix\"\n    [postfix]=\"postfix\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [textMask]=\"getMask(min < 0)\"\n    [nativeId]=\"nativeId\"\n    [(ngModel)]=\"value\"\n    (keydown)=\"onKeydown($event)\"\n    (focusedChange)=\"onFocused($event)\"\n>\n    <ng-content></ng-content>\n    <ng-content\n        select=\"input\"\n        ngProjectAs=\"input\"\n    ></ng-content>\n</tui-input-number>\n<ng-container *ngIf=\"!buttonsHidden\">\n    <ng-container *ngIf=\"minusTexts$ | async as texts\">\n        <section class=\"t-buttons\">\n            <button\n                tuiIconButton\n                type=\"button\"\n                automation-id=\"tui-input-count__plus-button\"\n                size=\"s\"\n                class=\"t-button t-button_plus\"\n                [icon]=\"iconUp\"\n                [appearance]=\"options.appearance\"\n                [title]=\"texts[0]\"\n                [disabled]=\"plusButtonDisabled\"\n                [focusable]=\"false\"\n                (mousedown)=\"onButtonMouseDown($event, plusButtonDisabled)\"\n                (click)=\"increaseValue()\"\n            ></button>\n            <button\n                tuiIconButton\n                type=\"button\"\n                automation-id=\"tui-input-count__minus-button\"\n                size=\"s\"\n                class=\"t-button t-button_minus\"\n                [icon]=\"iconDown\"\n                [appearance]=\"options.appearance\"\n                [disabled]=\"minusButtonDisabled\"\n                [focusable]=\"false\"\n                [title]=\"texts[1]\"\n                (mousedown)=\"onButtonMouseDown($event, minusButtonDisabled)\"\n                (click)=\"decreaseValue()\"\n            ></button>\n        </section>\n    </ng-container>\n</ng-container>\n", styles: [":host{display:flex;font:var(--tui-font-text-s);border-radius:var(--tui-radius-m);height:var(--tui-height-m);color:var(--tui-text-01);text-align:left}:host._disabled{pointer-events:none}:host[data-size=l]{font:var(--tui-font-text-m);height:var(--tui-height-l)}.t-textfield{position:relative;border-radius:inherit;text-align:inherit;flex-grow:1;min-width:0}:host:not(._hide-buttons) .t-textfield{border-top-right-radius:0;border-bottom-right-radius:0}.t-buttons{display:flex;flex-direction:column;margin-left:.125rem;height:100%}.t-buttons .t-button{display:flex;width:calc(var(--tui-height-m) * .75);height:calc(50% - .0625rem)}.t-buttons .t-button_plus{margin-bottom:.125rem;border-radius:0 var(--tui-radius-m) 0 0}.t-buttons .t-button_minus{border-radius:0 0 var(--tui-radius-m)}:host[data-size=l] .t-buttons .t-button{width:calc(var(--tui-height-l) * .75)}\n"], components: [{ type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "prefix", "postfix"] }, { type: i2.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i1.TuiInputNumberDirective, selector: "tui-input-number" }, { type: i3.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "step", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "hideButtons", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "prefix", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputCountComponent.prototype, "postfix", void 0);
__decorate([
    tuiPure
], TuiInputCountComponent.prototype, "getMask", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-count',
                    templateUrl: './input-count.template.html',
                    styleUrls: ['./input-count.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputCountComponent),
                        tuiAsControl(TuiInputCountComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i2.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }, { type: i6.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_PLUS_MINUS_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_COUNT_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_NUMBER_FORMAT]
                }] }]; }, propDecorators: { inputNumber: [{
                type: ViewChild,
                args: [TuiInputNumberComponent]
            }], step: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], hideButtons: [{
                type: Input
            }], prefix: [{
                type: Input
            }], postfix: [{
                type: Input
            }], getMask: [], buttonsHidden: [{
                type: HostBinding,
                args: ['class._hide-buttons']
            }], size: [{
                type: HostBinding,
                args: ['attr.data-size']
            }] } });

class TuiInputCountDirective extends AbstractTuiTextfieldHost {
    onValueChange(value) {
        this.host.onValueChange(value);
    }
    ngAfterViewInit() {
        if (this.host.nativeFocusableElement) {
            const { nativeFocusableElement } = this.host;
            nativeFocusableElement.autocomplete = 'off';
            nativeFocusableElement.inputMode = 'numeric';
            nativeFocusableElement.maxLength =
                nativeFocusableElement.maxLength > -1
                    ? nativeFocusableElement.maxLength
                    : 18;
        }
    }
}
TuiInputCountDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiInputCountDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputCountDirective, selector: "tui-input-count", providers: [tuiAsTextfieldHost(TuiInputCountDirective)], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-count',
                    providers: [tuiAsTextfieldHost(TuiInputCountDirective)],
                }]
        }] });

class TuiInputCountModule {
}
TuiInputCountModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiInputCountModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountModule, declarations: [TuiInputCountComponent, TuiInputCountDirective], imports: [CommonModule,
        TextMaskModule,
        FormsModule,
        TuiButtonModule,
        TuiPrimitiveTextfieldModule,
        TuiTextfieldControllerModule,
        TuiValueAccessorModule,
        PolymorpheusModule,
        TuiInputNumberModule], exports: [TuiInputCountComponent, TuiInputCountDirective, TuiTextfieldComponent] });
TuiInputCountModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountModule, imports: [[
            CommonModule,
            TextMaskModule,
            FormsModule,
            TuiButtonModule,
            TuiPrimitiveTextfieldModule,
            TuiTextfieldControllerModule,
            TuiValueAccessorModule,
            PolymorpheusModule,
            TuiInputNumberModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputCountModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TextMaskModule,
                        FormsModule,
                        TuiButtonModule,
                        TuiPrimitiveTextfieldModule,
                        TuiTextfieldControllerModule,
                        TuiValueAccessorModule,
                        PolymorpheusModule,
                        TuiInputNumberModule,
                    ],
                    declarations: [TuiInputCountComponent, TuiInputCountDirective],
                    exports: [TuiInputCountComponent, TuiInputCountDirective, TuiTextfieldComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_INPUT_COUNT_DEFAULT_OPTIONS, TUI_INPUT_COUNT_OPTIONS, TuiInputCountComponent, TuiInputCountDirective, TuiInputCountModule, tuiInputCountOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-input-count.js.map
