import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, HostBinding, NgModule } from '@angular/core';
import * as i4 from '@angular/forms';
import { NgControl } from '@angular/forms';
import * as i3 from '@taiga-ui/cdk';
import { AbstractTuiNullableControl, TUI_DEFAULT_IDENTITY_MATCHER, tuiIsNativeFocused, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, TuiCheckedModule, TuiFocusableModule, TuiFocusedModule, TuiFocusVisibleModule } from '@taiga-ui/cdk';
import * as i1 from '@taiga-ui/core';
import { TUI_ANIMATION_OPTIONS, tuiScaleIn, TuiWrapperModule } from '@taiga-ui/core';
import * as i5 from '@taiga-ui/kit/components/radio-group';
import { TuiRadioGroupComponent } from '@taiga-ui/kit/components/radio-group';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';

/** Default values for the checkbox options. */
const TUI_RADIO_DEFAULT_OPTIONS = {
    size: `m`,
    appearances: {
        unchecked: "outline" /* Outline */,
        checked: "primary" /* Primary */,
    },
};
/**
 * Default parameters for Radio component
 */
const TUI_RADIO_OPTIONS = new InjectionToken(`[TUI_RADIO_OPTIONS]`, {
    factory: () => TUI_RADIO_DEFAULT_OPTIONS,
});
const tuiRadioOptionsProvider = (options) => ({
    provide: TUI_RADIO_OPTIONS,
    useValue: Object.assign(Object.assign({}, TUI_RADIO_DEFAULT_OPTIONS), options),
});

class TuiRadioComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, animationOptions, options, radioGroup) {
        super(control, cdr);
        this.animationOptions = animationOptions;
        this.options = options;
        this.radioGroup = radioGroup;
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.name = null;
        this.size = this.options.size;
        this.pseudoDisabled = false;
        this.animation = Object.assign({ value: '' }, this.animationOptions);
    }
    get appearance() {
        return this.checked
            ? this.options.appearances.checked
            : this.options.appearances.unchecked;
    }
    get computedDisabled() {
        return this.disabled || this.pseudoDisabled;
    }
    get nativeFocusableElement() {
        return !this.focusableElement || this.computedDisabled
            ? null
            : this.focusableElement.nativeElement;
    }
    get focused() {
        return tuiIsNativeFocused(this.nativeFocusableElement);
    }
    get checked() {
        return this.value === null
            ? this.item === null
            : this.item !== undefined &&
                this.item !== null &&
                this.identityMatcher(this.value, this.item);
    }
    get computedName() {
        return this.name || this.radioGroupName || this.controlName || '';
    }
    get isFocusable() {
        return !this.readOnly && this.computedFocusable;
    }
    onChecked(checked) {
        if (checked) {
            this.value = this.item !== undefined ? this.item : this.fallbackValue;
        }
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onFocusVisible(focusVisible) {
        this.updateFocusVisible(focusVisible);
    }
    get radioGroupName() {
        return this.radioGroup === null ? null : this.radioGroup.name;
    }
}
TuiRadioComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_ANIMATION_OPTIONS }, { token: TUI_RADIO_OPTIONS }, { token: TuiRadioGroupComponent, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiRadioComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiRadioComponent, selector: "tui-radio", inputs: { item: "item", identityMatcher: "identityMatcher", name: "name", size: "size", pseudoDisabled: "pseudoDisabled" }, host: { properties: { "attr.data-size": "this.size", "class._disabled": "this.computedDisabled" } }, providers: [
        tuiAsFocusableItemAccessor(TuiRadioComponent),
        tuiAsControl(TuiRadioComponent),
    ], viewQueries: [{ propertyName: "focusableElement", first: true, predicate: ["focusableElement"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiWrapper\n    [appearance]=\"appearance\"\n    [disabled]=\"computedDisabled\"\n    [focus]=\"computedFocusVisible\"\n    [hover]=\"pseudoHover\"\n    [active]=\"pseudoActive\"\n    [invalid]=\"computedInvalid\"\n>\n    <div\n        *ngIf=\"checked\"\n        class=\"t-mark\"\n        [@tuiScaleIn]=\"animation\"\n    ></div>\n    <input\n        #focusableElement\n        type=\"radio\"\n        class=\"t-native\"\n        [id]=\"id\"\n        [attr.name]=\"computedName\"\n        [disabled]=\"computedDisabled\"\n        [tuiChecked]=\"checked\"\n        [tuiFocusable]=\"isFocusable\"\n        (tuiFocusedChange)=\"onFocused($event)\"\n        (tuiCheckedChange)=\"onChecked($event)\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    />\n</div>\n", styles: [":host{font:var(--tui-font-text-s);color:var(--tui-text-01);position:relative;display:block;flex-shrink:0;border-radius:100%}:host[data-size=m]{width:1rem;height:1rem}:host[data-size=l]{width:1.5rem;height:1.5rem}:host._readonly{pointer-events:none}.t-mark{position:absolute;background-color:currentColor;border-radius:100%}:host[data-size=m] .t-mark{margin:.25rem;width:.5rem;height:.5rem}:host[data-size=l] .t-mark{margin:.4375rem;width:.625rem;height:.625rem}.t-native{padding:0;margin:0;border:0;border-radius:inherit;background:none;font-size:inherit;line-height:inherit;font-weight:inherit;color:inherit;caret-color:currentColor;outline:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;word-break:keep-all;-webkit-text-fill-color:currentColor;position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;cursor:pointer}.t-native:-webkit-autofill,.t-native:-webkit-autofill:hover,.t-native:-webkit-autofill:focus{caret-color:var(--tui-base-09);border-radius:inherit;color:inherit!important;background-color:transparent!important;-webkit-text-fill-color:var(--tui-text-01)!important;border-color:var(--tui-autofill);-webkit-box-shadow:0 0 0 100rem var(--tui-autofill) inset!important}:host._disabled .t-native{cursor:default}\n"], directives: [{ type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiCheckedDirective, selector: "input[tuiChecked], input[tuiCheckedChange]", inputs: ["tuiChecked"], outputs: ["tuiCheckedChange"] }, { type: i3.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i3.TuiFocusedDirective, selector: "[tuiFocusedChange]", outputs: ["tuiFocusedChange"] }, { type: i3.TuiFocusVisibleDirective, selector: "[tuiFocusVisibleChange]", outputs: ["tuiFocusVisibleChange"] }], animations: [tuiScaleIn], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiRadioComponent.prototype, "identityMatcher", void 0);
__decorate([
    tuiDefaultProp()
], TuiRadioComponent.prototype, "name", void 0);
__decorate([
    tuiDefaultProp()
], TuiRadioComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiRadioComponent.prototype, "pseudoDisabled", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-radio',
                    templateUrl: './radio.template.html',
                    styleUrls: ['./radio.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiRadioComponent),
                        tuiAsControl(TuiRadioComponent),
                    ],
                    animations: [tuiScaleIn],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATION_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_RADIO_OPTIONS]
                }] }, { type: i5.TuiRadioGroupComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiRadioGroupComponent]
                }] }]; }, propDecorators: { focusableElement: [{
                type: ViewChild,
                args: ['focusableElement']
            }], item: [{
                type: Input
            }], identityMatcher: [{
                type: Input
            }], name: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], pseudoDisabled: [{
                type: Input
            }], computedDisabled: [{
                type: HostBinding,
                args: ['class._disabled']
            }] } });

class TuiRadioModule {
}
TuiRadioModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiRadioModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioModule, declarations: [TuiRadioComponent], imports: [CommonModule,
        TuiCheckedModule,
        TuiFocusableModule,
        TuiFocusedModule,
        TuiFocusVisibleModule,
        TuiWrapperModule], exports: [TuiRadioComponent] });
TuiRadioModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioModule, imports: [[
            CommonModule,
            TuiCheckedModule,
            TuiFocusableModule,
            TuiFocusedModule,
            TuiFocusVisibleModule,
            TuiWrapperModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRadioModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [
                        CommonModule,
                        TuiCheckedModule,
                        TuiFocusableModule,
                        TuiFocusedModule,
                        TuiFocusVisibleModule,
                        TuiWrapperModule,
                    ],
                    declarations: [TuiRadioComponent],
                    exports: [TuiRadioComponent],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_RADIO_DEFAULT_OPTIONS, TUI_RADIO_OPTIONS, TuiRadioComponent, TuiRadioModule, tuiRadioOptionsProvider };
//# sourceMappingURL=taiga-ui-kit-components-radio.js.map
