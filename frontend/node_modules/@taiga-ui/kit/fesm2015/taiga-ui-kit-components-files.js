import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { InjectionToken, EventEmitter, Component, ChangeDetectionStrategy, Inject, Input, Output, HostBinding, TemplateRef, ViewEncapsulation, ContentChildren, NgModule } from '@angular/core';
import * as i5 from '@angular/platform-browser';
import { DomSanitizer } from '@angular/platform-browser';
import * as i3 from '@taiga-ui/cdk';
import { tuiIsObserved, tuiDefaultProp, tuiPure, EMPTY_QUERY, TuiItemDirective, TuiFocusVisibleModule, TuiItemModule, TuiPreventDefaultModule } from '@taiga-ui/cdk';
import { TUI_FILE_TEXTS, TUI_DIGITAL_INFORMATION_UNITS, TUI_HIDE_TEXT, TUI_SHOW_ALL_TEXT } from '@taiga-ui/kit/tokens';
import * as i3$1 from 'rxjs';
import { of } from 'rxjs';
import { map } from 'rxjs/operators';
import { tuiFormatSize } from '@taiga-ui/kit/utils';
import * as i1 from '@taiga-ui/core';
import { TuiGroupModule, TuiLoaderModule, TuiSvgModule, TuiButtonModule, TuiExpandModule } from '@taiga-ui/core';
import * as i2 from '@angular/common';
import { CommonModule } from '@angular/common';
import * as i4 from '@tinkoff/ng-polymorpheus';
import { PolymorpheusModule } from '@tinkoff/ng-polymorpheus';

const TUI_FILE_DEFAULT_OPTIONS = {
    formatSize: tuiFormatSize,
};
/**
 * Default parameters for file component
 */
const TUI_FILE_OPTIONS = new InjectionToken(`[TUI_FILE_OPTIONS]`, {
    factory: () => TUI_FILE_DEFAULT_OPTIONS,
});

class TuiFileComponent {
    constructor(sanitizer, fileTexts$, options, units$) {
        this.sanitizer = sanitizer;
        this.fileTexts$ = fileTexts$;
        this.options = options;
        this.units$ = units$;
        this.file = { name: '' };
        this.state = 'normal';
        this.size = 'm';
        this.showDelete = true;
        this.showSize = true;
        this.removed = new EventEmitter();
        this.focused = false;
    }
    get preview() {
        return this.isBig ? this.createPreview(this.file, this.sanitizer) : '';
    }
    get isBig() {
        return this.size === 'l';
    }
    get isLoading() {
        return this.state === 'loading';
    }
    get isError() {
        return this.state === 'error';
    }
    get isDeleted() {
        return this.state === 'deleted';
    }
    get allowDelete() {
        return this.showDelete && tuiIsObserved(this.removed);
    }
    get icon() {
        if (this.state === 'normal' && this.isBig) {
            return 'tuiIconFileLarge';
        }
        switch (this.state) {
            case 'deleted':
                return 'tuiIconTrashLarge';
            case 'error':
                return 'tuiIconAlertCircleLarge';
            default:
                return 'tuiIconCheckCircleLarge';
        }
    }
    get src() {
        return this.file.src || '';
    }
    get name() {
        return this.getName(this.file);
    }
    get type() {
        return this.getType(this.file);
    }
    get content$() {
        return this.calculateContent$(this.state, this.file, this.fileTexts$);
    }
    get fileSize$() {
        return this.calculateFileSize$(this.file, this.units$);
    }
    onRemoveClick() {
        this.removed.emit();
    }
    onFocusVisible(focusVisible) {
        this.focused = focusVisible;
    }
    calculateContent$(state, file, fileTexts$) {
        return state === 'error' && !file.content
            ? fileTexts$.pipe(map(texts => texts.loadingError))
            : of(this.file.content || '');
    }
    calculateFileSize$(file, units$) {
        return units$.pipe(map(units => this.options.formatSize(units, file.size)));
    }
    createPreview(file, sanitizer) {
        if (file.src) {
            return file.src;
        }
        // TODO: iframe warning
        if (file instanceof File && file.type && file.type.startsWith('image/')) {
            return sanitizer.bypassSecurityTrustUrl(URL.createObjectURL(file));
        }
        return '';
    }
    getName(file) {
        return file.name.split('.').slice(0, -1).join('.');
    }
    getType(file) {
        return `.${file.name.split('.').pop()}` || '';
    }
}
TuiFileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFileComponent, deps: [{ token: DomSanitizer }, { token: TUI_FILE_TEXTS }, { token: TUI_FILE_OPTIONS }, { token: TUI_DIGITAL_INFORMATION_UNITS }], target: i0.ɵɵFactoryTarget.Component });
TuiFileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiFileComponent, selector: "tui-file", inputs: { file: "file", state: "state", size: "size", showDelete: "showDelete", showSize: "showSize", leftContent: "leftContent" }, outputs: { removed: "removed" }, host: { properties: { "class._focused": "this.focused", "class._link": "this.src" } }, ngImport: i0, template: "<ng-container\n    *ngIf=\"!src; else withLink\"\n    [ngTemplateOutlet]=\"fileInfoTemplate\"\n></ng-container>\n\n<ng-template #withLink>\n    <a\n        rel=\"noreferrer noopener\"\n        target=\"_blank\"\n        class=\"t-link\"\n        [href]=\"src\"\n        (tuiFocusVisibleChange)=\"onFocusVisible($event)\"\n    >\n        <ng-container [ngTemplateOutlet]=\"fileInfoTemplate\"></ng-container>\n    </a>\n</ng-template>\n\n<ng-template #fileInfoTemplate>\n    <div\n        class=\"t-preview\"\n        [class.t-preview_big]=\"isBig\"\n    >\n        <ng-container *polymorpheusOutlet=\"leftContent || defaultLeftContent as text\">\n            {{ text }}\n        </ng-container>\n    </div>\n    <div class=\"t-wrapper\">\n        <div class=\"t-text\">\n            <div\n                automation-id=\"tui-file__name\"\n                class=\"t-name\"\n            >\n                {{ name }}\n            </div>\n            <div\n                automation-id=\"tui-file__type\"\n                class=\"t-type\"\n            >\n                {{ type }}\n            </div>\n            <div\n                *ngIf=\"showSize && (fileSize$ | async) as fileSize\"\n                automation-id=\"tui-file__size\"\n                class=\"t-size\"\n            >\n                {{ fileSize }}\n            </div>\n        </div>\n        <div\n            *ngIf=\"content$ | async as content\"\n            automation-id=\"tui-file__content\"\n            class=\"t-content\"\n        >\n            <ng-container *polymorpheusOutlet=\"content as text\">\n                {{ text }}\n            </ng-container>\n        </div>\n        <ng-content></ng-content>\n    </div>\n    <ng-container *ngIf=\"allowDelete\">\n        <button\n            *ngIf=\"fileTexts$ | async as texts\"\n            automation-id=\"tui-file__remove\"\n            tuiIconButton\n            type=\"button\"\n            size=\"xs\"\n            icon=\"tuiIconCloseLarge\"\n            appearance=\"icon\"\n            tuiPreventDefault=\"mousedown\"\n            class=\"t-remove\"\n            [title]=\"texts.remove\"\n            (click.prevent)=\"onRemoveClick()\"\n        ></button>\n    </ng-container>\n</ng-template>\n\n<ng-template #defaultLeftContent>\n    <img\n        *ngIf=\"preview; else loader\"\n        automation-id=\"tui-file__preview\"\n        alt=\"file preview\"\n        class=\"t-image\"\n        [src]=\"preview\"\n    />\n    <ng-template #loader>\n        <tui-loader\n            *ngIf=\"isLoading; else svg\"\n            automation-id=\"tui-file__loader\"\n            class=\"t-loader\"\n            [inheritColor]=\"isBig\"\n        ></tui-loader>\n    </ng-template>\n    <ng-template #svg>\n        <tui-svg\n            automation-id=\"tui-file__icon\"\n            class=\"t-icon\"\n            [class.t-icon_blank]=\"isBig || isDeleted\"\n            [class.t-icon_error]=\"isError\"\n            [src]=\"icon\"\n        ></tui-svg>\n    </ng-template>\n</ng-template>\n", styles: [":host{position:relative;display:flex;align-items:center;font:var(--tui-font-text-m);background:var(--tui-base-01);border:1px solid var(--tui-base-03);border-radius:var(--tui-radius-m)}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host:not(._link){padding:.5625rem 2.1875rem .5625rem .5625rem}:host:hover .t-remove{opacity:1}:host._focused{border-color:var(--tui-focus);box-shadow:0 0 0 1px inset var(--tui-focus)}.t-link{display:flex;flex:1;padding:.5625rem 2.1875rem .5625rem .5625rem;text-decoration:none;outline:none;cursor:pointer;color:var(--tui-text-01);max-width:calc(100% - 2.75rem)}.t-link:hover{background-color:var(--tui-base-02)}.t-preview{position:relative;display:flex;align-items:center;justify-content:center;flex-shrink:0;width:1.5rem;height:1.5rem;margin-right:.75rem;border-radius:var(--tui-radius-m);overflow:hidden;color:var(--tui-base-06)}.t-preview_big{width:4rem;height:4rem;margin-right:1rem}.t-preview_big:before{position:absolute;top:0;left:0;width:100%;height:100%;content:\"\";background:var(--tui-base-08);opacity:.08}.t-image{max-width:100%;max-height:100%}.t-loader{position:absolute;top:0;left:0;width:100%;height:100%}.t-icon{position:absolute;top:0;left:0;width:100%;height:100%;color:var(--tui-success-fill)}.t-icon_blank{color:var(--tui-base-06)}.t-icon_error{color:var(--tui-error-fill)}.t-remove{transition-property:opacity;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;top:.625rem;right:.625rem}.t-remove:focus{opacity:1}.t-remove:focus-visible{box-shadow:inset 0 0 0 2px var(--tui-focus)}@media (hover: hover) and (pointer: fine){.t-remove{opacity:0}}.t-wrapper{display:flex;flex-direction:column;justify-content:center;overflow:hidden}.t-text{display:flex}.t-size{flex-shrink:0;opacity:var(--tui-disabled-opacity);margin-left:.5rem}.t-type{flex-shrink:0}.t-name{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.t-content{font:var(--tui-font-text-s);color:var(--tui-error-fill)}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }, { type: i1.TuiLoaderComponent, selector: "tui-loader", inputs: ["size", "inheritColor", "overlay", "textContent", "showLoader"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i3.TuiFocusVisibleDirective, selector: "[tuiFocusVisibleChange]", outputs: ["tuiFocusVisibleChange"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiFileComponent.prototype, "file", void 0);
__decorate([
    tuiDefaultProp()
], TuiFileComponent.prototype, "state", void 0);
__decorate([
    tuiDefaultProp()
], TuiFileComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiFileComponent.prototype, "showDelete", void 0);
__decorate([
    tuiDefaultProp()
], TuiFileComponent.prototype, "showSize", void 0);
__decorate([
    tuiPure
], TuiFileComponent.prototype, "calculateContent$", null);
__decorate([
    tuiPure
], TuiFileComponent.prototype, "calculateFileSize$", null);
__decorate([
    tuiPure
], TuiFileComponent.prototype, "createPreview", null);
__decorate([
    tuiPure
], TuiFileComponent.prototype, "getName", null);
__decorate([
    tuiPure
], TuiFileComponent.prototype, "getType", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFileComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-file',
                    templateUrl: './file.template.html',
                    styleUrls: ['./file.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i5.DomSanitizer, decorators: [{
                    type: Inject,
                    args: [DomSanitizer]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FILE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FILE_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DIGITAL_INFORMATION_UNITS]
                }] }]; }, propDecorators: { file: [{
                type: Input
            }], state: [{
                type: Input
            }], size: [{
                type: Input
            }], showDelete: [{
                type: Input
            }], showSize: [{
                type: Input
            }], leftContent: [{
                type: Input
            }], removed: [{
                type: Output
            }], focused: [{
                type: HostBinding,
                args: ['class._focused']
            }], src: [{
                type: HostBinding,
                args: ['class._link']
            }], calculateContent$: [], calculateFileSize$: [], createPreview: [], getName: [], getType: [] } });

class TuiFilesComponent {
    constructor(hideText$, showAllText$) {
        this.hideText$ = hideText$;
        this.showAllText$ = showAllText$;
        this.items = EMPTY_QUERY;
        this.max = 0;
        this.hidden = true;
    }
    get hasExtraItems() {
        return !!this.max && this.items.length > this.max;
    }
    toggle() {
        this.hidden = !this.hidden;
    }
}
TuiFilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilesComponent, deps: [{ token: TUI_HIDE_TEXT }, { token: TUI_SHOW_ALL_TEXT }], target: i0.ɵɵFactoryTarget.Component });
TuiFilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiFilesComponent, selector: "tui-files", inputs: { max: "max" }, queries: [{ propertyName: "items", predicate: TuiItemDirective, read: TemplateRef }], ngImport: i0, template: "<ng-container *ngIf=\"items?.changes | async\"></ng-container>\n\n<section\n    tuiGroup\n    orientation=\"vertical\"\n    class=\"t-files\"\n    [collapsed]=\"true\"\n>\n    <ng-content></ng-content>\n    <ng-container *ngFor=\"let item of items; let index = index\">\n        <ng-container\n            *ngIf=\"!max || index < max\"\n            [ngTemplateOutlet]=\"item\"\n        ></ng-container>\n    </ng-container>\n    <tui-expand\n        *ngIf=\"hasExtraItems\"\n        [expanded]=\"!hidden\"\n    >\n        <div class=\"t-extra-items\">\n            <ng-container *ngFor=\"let item of items; let index = index\">\n                <ng-container\n                    *ngIf=\"max && index >= max\"\n                    [ngTemplateOutlet]=\"item\"\n                ></ng-container>\n            </ng-container>\n        </div>\n    </tui-expand>\n    <button\n        *ngIf=\"hasExtraItems\"\n        tuiButton\n        appearance=\"outline\"\n        size=\"m\"\n        type=\"button\"\n        class=\"t-button\"\n        [class.t-button_collapsed]=\"hidden\"\n        (click)=\"toggle()\"\n    >\n        {{ (hidden ? showAllText$ : hideText$) | async }}\n    </button>\n</section>\n", styles: ["tui-files{display:block}tui-files .t-files{position:relative;display:block;width:100%;height:100%;border-radius:var(--tui-radius-m);overflow:hidden}tui-files .t-button{z-index:3;width:100%;background:var(--tui-base-01)}tui-files .t-button_collapsed{box-shadow:0 1.125rem 1.875rem #0000007a;margin-top:-1.5rem}tui-files .t-extra-items tui-file{border-radius:0;margin-top:0;margin-bottom:-.0625rem}\n"], components: [{ type: i1.TuiExpandComponent, selector: "tui-expand", inputs: ["async", "expanded"] }, { type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.TuiGroupDirective, selector: "[tuiGroup]:not(ng-container)", inputs: ["orientation", "adaptive", "collapsed", "rounded", "size"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    tuiDefaultProp()
], TuiFilesComponent.prototype, "max", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-files',
                    templateUrl: './files.component.html',
                    styleUrls: ['./files.component.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    encapsulation: ViewEncapsulation.None,
                }]
        }], ctorParameters: function () { return [{ type: i3$1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_HIDE_TEXT]
                }] }, { type: i3$1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_SHOW_ALL_TEXT]
                }] }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef }]
            }], max: [{
                type: Input
            }] } });

class TuiFilesModule {
}
TuiFilesModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilesModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiFilesModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilesModule, declarations: [TuiFilesComponent, TuiFileComponent], imports: [CommonModule,
        TuiGroupModule,
        TuiLoaderModule,
        PolymorpheusModule,
        TuiSvgModule,
        TuiFocusVisibleModule,
        TuiButtonModule,
        TuiItemModule,
        TuiExpandModule,
        TuiPreventDefaultModule], exports: [TuiFilesComponent, TuiFileComponent, TuiItemDirective] });
TuiFilesModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilesModule, imports: [[
            CommonModule,
            TuiGroupModule,
            TuiLoaderModule,
            PolymorpheusModule,
            TuiSvgModule,
            TuiFocusVisibleModule,
            TuiButtonModule,
            TuiItemModule,
            TuiExpandModule,
            TuiPreventDefaultModule,
        ]] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilesModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiFilesComponent, TuiFileComponent],
                    imports: [
                        CommonModule,
                        TuiGroupModule,
                        TuiLoaderModule,
                        PolymorpheusModule,
                        TuiSvgModule,
                        TuiFocusVisibleModule,
                        TuiButtonModule,
                        TuiItemModule,
                        TuiExpandModule,
                        TuiPreventDefaultModule,
                    ],
                    exports: [TuiFilesComponent, TuiFileComponent, TuiItemDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TUI_FILE_DEFAULT_OPTIONS, TUI_FILE_OPTIONS, TuiFileComponent, TuiFilesComponent, TuiFilesModule };
//# sourceMappingURL=taiga-ui-kit-components-files.js.map
