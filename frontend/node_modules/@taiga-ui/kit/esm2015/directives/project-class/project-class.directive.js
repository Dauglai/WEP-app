import { __decorate } from "tslib";
import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
/**
 * A directive for projecting classes from nested children to host
 */
export class TuiProjectClassDirective {
    constructor(el) {
        this.el = el;
        this.classNames = [];
    }
    ngAfterViewChecked() {
        this.classNames.forEach(className => {
            const hostElement = this.el.nativeElement;
            hostElement.classList.toggle(className, !!hostElement.querySelector(`.${className}`));
        });
    }
}
TuiProjectClassDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProjectClassDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiProjectClassDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiProjectClassDirective, selector: "[tuiProjectClass]", inputs: { classNames: ["tuiProjectClass", "classNames"] }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiProjectClassDirective.prototype, "classNames", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProjectClassDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiProjectClass]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { classNames: [{
                type: Input,
                args: ['tuiProjectClass']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvamVjdC1jbGFzcy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvZGlyZWN0aXZlcy9wcm9qZWN0LWNsYXNzL3Byb2plY3QtY2xhc3MuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQW1CLFNBQVMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRixPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDOztBQUU3Qzs7R0FFRztBQUlILE1BQU0sT0FBTyx3QkFBd0I7SUFLakMsWUFBaUQsRUFBMkI7UUFBM0IsT0FBRSxHQUFGLEVBQUUsQ0FBeUI7UUFGNUUsZUFBVSxHQUFzQixFQUFFLENBQUM7SUFFNEMsQ0FBQztJQUVoRixrQkFBa0I7UUFDZCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUNoQyxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQztZQUUxQyxXQUFXLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FDeEIsU0FBUyxFQUNULENBQUMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLElBQUksU0FBUyxFQUFFLENBQUMsQ0FDL0MsQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQzs7c0hBaEJRLHdCQUF3QixrQkFLYixVQUFVOzBHQUxyQix3QkFBd0I7QUFHakM7SUFEQyxjQUFjLEVBQUU7NERBQ2tCOzRGQUgxQix3QkFBd0I7a0JBSHBDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG1CQUFtQjtpQkFDaEM7OzBCQU1nQixNQUFNOzJCQUFDLFVBQVU7NENBRjlCLFVBQVU7c0JBRlQsS0FBSzt1QkFBQyxpQkFBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0NoZWNrZWQsIERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuLyoqXG4gKiBBIGRpcmVjdGl2ZSBmb3IgcHJvamVjdGluZyBjbGFzc2VzIGZyb20gbmVzdGVkIGNoaWxkcmVuIHRvIGhvc3RcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUHJvamVjdENsYXNzXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aVByb2plY3RDbGFzc0RpcmVjdGl2ZSBpbXBsZW1lbnRzIEFmdGVyVmlld0NoZWNrZWQge1xuICAgIEBJbnB1dCgndHVpUHJvamVjdENsYXNzJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGNsYXNzTmFtZXM6IHJlYWRvbmx5IHN0cmluZ1tdID0gW107XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+KSB7fVxuXG4gICAgbmdBZnRlclZpZXdDaGVja2VkKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNsYXNzTmFtZXMuZm9yRWFjaChjbGFzc05hbWUgPT4ge1xuICAgICAgICAgICAgY29uc3QgaG9zdEVsZW1lbnQgPSB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICAgICAgICAgIGhvc3RFbGVtZW50LmNsYXNzTGlzdC50b2dnbGUoXG4gICAgICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgICAgICEhaG9zdEVsZW1lbnQucXVlcnlTZWxlY3RvcihgLiR7Y2xhc3NOYW1lfWApLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl19