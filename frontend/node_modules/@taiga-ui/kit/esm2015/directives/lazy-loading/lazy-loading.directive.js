import { Directive, ElementRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { IntersectionObserverService } from '@ng-web-apis/intersection-observer';
import { TuiDestroyService } from '@taiga-ui/cdk';
import { TuiLazyLoadingService } from './lazy-loading.service';
import * as i0 from "@angular/core";
import * as i1 from "./lazy-loading.service";
export class TuiLazyLoadingDirective {
    constructor(src$, el) {
        this.src$ = src$;
        this.el = el;
        this.animation = 'tuiSkeletonVibe ease-in-out 1s infinite alternate';
        this.background = 'var(--tui-clear-hover)';
        this.src = null;
        if (!this.supported) {
            this.src$.subscribe(src => {
                this.src = src;
            });
        }
    }
    set srcSetter(src) {
        this.src = this.supported ? src : null;
        this.src$.next(src);
    }
    get supported() {
        return 'loading' in this.el.nativeElement;
    }
    onLoad() {
        this.background = '';
        this.animation = '';
    }
}
TuiLazyLoadingDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingDirective, deps: [{ token: TuiLazyLoadingService }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiLazyLoadingDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLazyLoadingDirective, selector: "img[loading=\"lazy\"]", inputs: { srcSetter: ["src", "srcSetter"] }, host: { listeners: { "load": "onLoad()" }, properties: { "style.animation": "this.animation", "style.background": "this.background", "attr.src": "this.src" } }, providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLazyLoadingDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'img[loading="lazy"]',
                    providers: [TuiLazyLoadingService, IntersectionObserverService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiLazyLoadingService, decorators: [{
                    type: Inject,
                    args: [TuiLazyLoadingService]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { srcSetter: [{
                type: Input,
                args: ['src']
            }], animation: [{
                type: HostBinding,
                args: ['style.animation']
            }], background: [{
                type: HostBinding,
                args: ['style.background']
            }], src: [{
                type: HostBinding,
                args: ['attr.src']
            }], onLoad: [{
                type: HostListener,
                args: ['load']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkaW5nLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9kaXJlY3RpdmVzL2xhenktbG9hZGluZy9sYXp5LWxvYWRpbmcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssR0FDUixNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUMvRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFaEQsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7OztBQU03RCxNQUFNLE9BQU8sdUJBQXVCO0lBZ0JoQyxZQUVxQixJQUEyQixFQUUzQixFQUFnQztRQUZoQyxTQUFJLEdBQUosSUFBSSxDQUF1QjtRQUUzQixPQUFFLEdBQUYsRUFBRSxDQUE4QjtRQVpyRCxjQUFTLEdBQUcsbURBQW1ELENBQUM7UUFHaEUsZUFBVSxHQUFHLHdCQUF3QixDQUFDO1FBR3RDLFFBQUcsR0FBb0MsSUFBSSxDQUFDO1FBUXhDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUN0QixJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQztJQTFCRCxJQUNJLFNBQVMsQ0FBQyxHQUE2QjtRQUN2QyxJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO1FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ3hCLENBQUM7SUF3QkQsSUFBWSxTQUFTO1FBQ2pCLE9BQU8sU0FBUyxJQUFJLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO0lBQzlDLENBQUM7SUFHRCxNQUFNO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUM7SUFDeEIsQ0FBQzs7cUhBckNRLHVCQUF1QixrQkFpQnBCLHFCQUFxQixhQUVyQixVQUFVO3lHQW5CYix1QkFBdUIsOFBBRnJCLENBQUMscUJBQXFCLEVBQUUsMkJBQTJCLEVBQUUsaUJBQWlCLENBQUM7NEZBRXpFLHVCQUF1QjtrQkFKbkMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsRUFBRSwyQkFBMkIsRUFBRSxpQkFBaUIsQ0FBQztpQkFDckY7OzBCQWtCUSxNQUFNOzJCQUFDLHFCQUFxQjs7MEJBRTVCLE1BQU07MkJBQUMsVUFBVTs0Q0FqQmxCLFNBQVM7c0JBRFosS0FBSzt1QkFBQyxLQUFLO2dCQU9aLFNBQVM7c0JBRFIsV0FBVzt1QkFBQyxpQkFBaUI7Z0JBSTlCLFVBQVU7c0JBRFQsV0FBVzt1QkFBQyxrQkFBa0I7Z0JBSS9CLEdBQUc7c0JBREYsV0FBVzt1QkFBQyxVQUFVO2dCQXFCdkIsTUFBTTtzQkFETCxZQUFZO3VCQUFDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTYWZlUmVzb3VyY2VVcmx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtJbnRlcnNlY3Rpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtUdWlEZXN0cm95U2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbmltcG9ydCB7VHVpTGF6eUxvYWRpbmdTZXJ2aWNlfSBmcm9tICcuL2xhenktbG9hZGluZy5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpbWdbbG9hZGluZz1cImxhenlcIl0nLFxuICAgIHByb3ZpZGVyczogW1R1aUxhenlMb2FkaW5nU2VydmljZSwgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJTZXJ2aWNlLCBUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUxhenlMb2FkaW5nRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoJ3NyYycpXG4gICAgc2V0IHNyY1NldHRlcihzcmM6IFNhZmVSZXNvdXJjZVVybCB8IHN0cmluZykge1xuICAgICAgICB0aGlzLnNyYyA9IHRoaXMuc3VwcG9ydGVkID8gc3JjIDogbnVsbDtcbiAgICAgICAgdGhpcy5zcmMkLm5leHQoc3JjKTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmFuaW1hdGlvbicpXG4gICAgYW5pbWF0aW9uID0gJ3R1aVNrZWxldG9uVmliZSBlYXNlLWluLW91dCAxcyBpbmZpbml0ZSBhbHRlcm5hdGUnO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5iYWNrZ3JvdW5kJylcbiAgICBiYWNrZ3JvdW5kID0gJ3ZhcigtLXR1aS1jbGVhci1ob3ZlciknO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdhdHRyLnNyYycpXG4gICAgc3JjOiBTYWZlUmVzb3VyY2VVcmwgfCBzdHJpbmcgfCBudWxsID0gbnVsbDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aUxhenlMb2FkaW5nU2VydmljZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBzcmMkOiBUdWlMYXp5TG9hZGluZ1NlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MSW1hZ2VFbGVtZW50PixcbiAgICApIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1cHBvcnRlZCkge1xuICAgICAgICAgICAgdGhpcy5zcmMkLnN1YnNjcmliZShzcmMgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3JjID0gc3JjO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBzdXBwb3J0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiAnbG9hZGluZycgaW4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2xvYWQnKVxuICAgIG9uTG9hZCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kID0gJyc7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uID0gJyc7XG4gICAgfVxufVxuIl19