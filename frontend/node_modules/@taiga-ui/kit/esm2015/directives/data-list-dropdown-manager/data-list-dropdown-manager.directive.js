import { __decorate } from "tslib";
import { ContentChildren, Directive, ElementRef, Inject, Self, } from '@angular/core';
import { EMPTY_QUERY, TuiDestroyService, tuiGetClosestFocusable, tuiPreventDefault, tuiPure, tuiQueryListChanges, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { TuiDropdownDirective } from '@taiga-ui/core';
import { EMPTY, merge } from 'rxjs';
import { debounceTime, filter, map, shareReplay, switchMap, take, takeUntil, tap, } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
export class TuiDataListDropdownManagerDirective {
    constructor(destroy$) {
        this.destroy$ = destroy$;
        this.dropdowns = EMPTY_QUERY;
        this.els = EMPTY_QUERY;
    }
    ngAfterViewInit() {
        this.right$.pipe(takeUntil(this.destroy$)).subscribe(index => {
            this.tryToFocus(index);
        });
        merge(this.immediate$, this.debounce$)
            .pipe(switchMap(active => {
            this.dropdowns.forEach((dropdown, index) => {
                dropdown.toggle(index === active);
            });
            const element = this.els.get(active);
            const dropdown = this.dropdowns.get(active);
            if (!element || !(dropdown === null || dropdown === void 0 ? void 0 : dropdown.dropdownBoxRef)) {
                return EMPTY;
            }
            const { nativeElement } = dropdown.dropdownBoxRef.location;
            const mouseEnter$ = tuiTypedFromEvent(nativeElement, 'mouseenter').pipe(take(1));
            const esc$ = merge(tuiTypedFromEvent(element.nativeElement, 'keydown'), tuiTypedFromEvent(nativeElement, 'keydown')).pipe(filter(({ key }) => key === 'Escape'));
            return merge(mouseEnter$, esc$).pipe(tap(event => {
                if (dropdown.dropdownBoxRef) {
                    event.stopPropagation();
                }
                element.nativeElement.focus();
                dropdown.toggle('offsetX' in event);
            }));
        }), takeUntil(this.destroy$))
            .subscribe();
    }
    get elements$() {
        return tuiQueryListChanges(this.els).pipe(map(array => array.map(({ nativeElement }) => nativeElement)), shareReplay({ bufferSize: 1, refCount: true }));
    }
    get right$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => tuiTypedFromEvent(element, 'keydown').pipe(filter(({ key }) => key === 'ArrowRight'), tuiPreventDefault(), map(() => index))))));
    }
    get immediate$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => tuiTypedFromEvent(element, 'click').pipe(map(() => index))))));
    }
    get debounce$() {
        return this.elements$.pipe(switchMap(elements => merge(...elements.map((element, index) => merge(tuiTypedFromEvent(element, 'focus'), tuiTypedFromEvent(element, 'blur')).pipe(filter(({ relatedTarget }) => this.notInDropdown(relatedTarget, index)), map(({ type }) => (type === 'focus' ? index : NaN)))))), debounceTime(300));
    }
    notInDropdown(element, index) {
        var _a, _b;
        return !((_b = (_a = this.dropdowns
            .get(index)) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement.contains(element));
    }
    tryToFocus(index) {
        var _a, _b;
        const content = (_b = (_a = this.dropdowns.get(index)) === null || _a === void 0 ? void 0 : _a.dropdownBoxRef) === null || _b === void 0 ? void 0 : _b.location.nativeElement;
        if (!content) {
            return;
        }
        // First item is focus trap
        const focusTrap = tuiGetClosestFocusable({ initial: content, root: content });
        const item = tuiGetClosestFocusable({
            initial: focusTrap || content,
            root: content,
        });
        if (item) {
            item.focus();
        }
    }
}
TuiDataListDropdownManagerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListDropdownManagerDirective, deps: [{ token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDataListDropdownManagerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDataListDropdownManagerDirective, selector: "tui-data-list[tuiDataListDropdownManager]", providers: [TuiDestroyService], queries: [{ propertyName: "dropdowns", predicate: TuiDropdownDirective, descendants: true }, { propertyName: "els", predicate: TuiDropdownDirective, descendants: true, read: ElementRef }], ngImport: i0 });
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "elements$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "right$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "immediate$", null);
__decorate([
    tuiPure
], TuiDataListDropdownManagerDirective.prototype, "debounce$", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDataListDropdownManagerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-data-list[tuiDataListDropdownManager]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiDestroyService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { dropdowns: [{
                type: ContentChildren,
                args: [TuiDropdownDirective, { descendants: true }]
            }], els: [{
                type: ContentChildren,
                args: [TuiDropdownDirective, { read: ElementRef, descendants: true }]
            }], elements$: [], right$: [], immediate$: [], debounce$: [] } });
//# sourceMappingURL=data:application/json;base64,