import { Directive, ElementRef, HostListener, Inject, Output, } from '@angular/core';
import { USER_AGENT } from '@ng-web-apis/common';
import { tuiIsFirefox } from '@taiga-ui/cdk';
import { BehaviorSubject } from 'rxjs';
import { distinctUntilChanged, skip } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiPresentDirective {
    constructor({ nativeElement }, userAgent) {
        this.visibility$ = new BehaviorSubject(false);
        this.tuiPresentChange = this.visibility$.pipe(distinctUntilChanged(), skip(1));
        if (tuiIsFirefox(userAgent)) {
            return;
        }
        const observer = new MutationObserver(() => {
            if (!nativeElement.offsetParent &&
                nativeElement.offsetWidth === 0 &&
                nativeElement.offsetHeight === 0) {
                this.visibility$.next(false);
            }
        });
        observer.observe(nativeElement, {
            attributes: true,
            attributeFilter: ['style', 'class'],
        });
    }
    /**
     * Someday animationcancel would work and mutation observer would not be needed:
     * https://drafts.csswg.org/css-animations/#eventdef-animationevent-animationcancel
     * It would also trigger on CSS like display: none on parent nodes which is awesome
     * but currently only works in Firefox
     * ___
     * TODO: remove MutationObserver when we bump versions of supported browsers:
     *** Safari 12+
     *** Chrome 83+
     * See: {@link https://caniuse.com/mdn-api_window_animationcancel_event}
     */
    onAnimation(visibility) {
        this.visibility$.next(visibility);
    }
    ngOnDestroy() {
        this.visibility$.next(false);
    }
}
TuiPresentDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPresentDirective, deps: [{ token: ElementRef }, { token: USER_AGENT }], target: i0.ɵɵFactoryTarget.Directive });
TuiPresentDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPresentDirective, selector: "[tuiPresentChange]", outputs: { tuiPresentChange: "tuiPresentChange" }, host: { listeners: { "animationcancel.self": "onAnimation(false)", "animationstart.self": "onAnimation(true)" }, properties: { "style.animation": "\"tuiPresent 1s infinite\"" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPresentDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiPresentChange]',
                    host: {
                        '[style.animation]': '"tuiPresent 1s infinite"',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [USER_AGENT]
                }] }]; }, propDecorators: { tuiPresentChange: [{
                type: Output
            }], onAnimation: [{
                type: HostListener,
                args: ['animationcancel.self', ['false']]
            }, {
                type: HostListener,
                args: ['animationstart.self', ['true']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc2VudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvZGlyZWN0aXZlcy9wcmVzZW50L3ByZXNlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixNQUFNLEVBRU4sTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMvQyxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDckMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLElBQUksRUFBQyxNQUFNLGdCQUFnQixDQUFDOztBQVExRCxNQUFNLE9BQU8sbUJBQW1CO0lBTTVCLFlBQ3dCLEVBQUMsYUFBYSxFQUEwQixFQUN4QyxTQUFpQjtRQVB4QixnQkFBVyxHQUFHLElBQUksZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBR2pELHFCQUFnQixHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFNL0UsSUFBSSxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDekIsT0FBTztTQUNWO1FBRUQsTUFBTSxRQUFRLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxHQUFHLEVBQUU7WUFDdkMsSUFDSSxDQUFDLGFBQWEsQ0FBQyxZQUFZO2dCQUMzQixhQUFhLENBQUMsV0FBVyxLQUFLLENBQUM7Z0JBQy9CLGFBQWEsQ0FBQyxZQUFZLEtBQUssQ0FBQyxFQUNsQztnQkFDRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoQztRQUNMLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUU7WUFDNUIsVUFBVSxFQUFFLElBQUk7WUFDaEIsZUFBZSxFQUFFLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQztTQUN0QyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQ7Ozs7Ozs7Ozs7T0FVRztJQUdILFdBQVcsQ0FBQyxVQUFtQjtRQUMzQixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pDLENBQUM7O2lIQWpEUSxtQkFBbUIsa0JBT2hCLFVBQVUsYUFDVixVQUFVO3FHQVJiLG1CQUFtQjs0RkFBbkIsbUJBQW1CO2tCQU4vQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLElBQUksRUFBRTt3QkFDRixtQkFBbUIsRUFBRSwwQkFBMEI7cUJBQ2xEO2lCQUNKOzswQkFRUSxNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLFVBQVU7NENBSmIsZ0JBQWdCO3NCQUR4QixNQUFNO2dCQXdDUCxXQUFXO3NCQUZWLFlBQVk7dUJBQUMsc0JBQXNCLEVBQUUsQ0FBQyxPQUFPLENBQUM7O3NCQUM5QyxZQUFZO3VCQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIE9uRGVzdHJveSxcbiAgICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtVU0VSX0FHRU5UfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHVpSXNGaXJlZm94fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIHNraXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUHJlc2VudENoYW5nZV0nLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1tzdHlsZS5hbmltYXRpb25dJzogJ1widHVpUHJlc2VudCAxcyBpbmZpbml0ZVwiJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmVzZW50RGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZpc2liaWxpdHkkID0gbmV3IEJlaGF2aW9yU3ViamVjdChmYWxzZSk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlQcmVzZW50Q2hhbmdlID0gdGhpcy52aXNpYmlsaXR5JC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHNraXAoMSkpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICAgICAgQEluamVjdChVU0VSX0FHRU5UKSB1c2VyQWdlbnQ6IHN0cmluZyxcbiAgICApIHtcbiAgICAgICAgaWYgKHR1aUlzRmlyZWZveCh1c2VyQWdlbnQpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhbmF0aXZlRWxlbWVudC5vZmZzZXRQYXJlbnQgJiZcbiAgICAgICAgICAgICAgICBuYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoID09PSAwICYmXG4gICAgICAgICAgICAgICAgbmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQgPT09IDBcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaWJpbGl0eSQubmV4dChmYWxzZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gICAgICAgIG9ic2VydmVyLm9ic2VydmUobmF0aXZlRWxlbWVudCwge1xuICAgICAgICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgICAgICAgIGF0dHJpYnV0ZUZpbHRlcjogWydzdHlsZScsICdjbGFzcyddLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTb21lZGF5IGFuaW1hdGlvbmNhbmNlbCB3b3VsZCB3b3JrIGFuZCBtdXRhdGlvbiBvYnNlcnZlciB3b3VsZCBub3QgYmUgbmVlZGVkOlxuICAgICAqIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtYW5pbWF0aW9ucy8jZXZlbnRkZWYtYW5pbWF0aW9uZXZlbnQtYW5pbWF0aW9uY2FuY2VsXG4gICAgICogSXQgd291bGQgYWxzbyB0cmlnZ2VyIG9uIENTUyBsaWtlIGRpc3BsYXk6IG5vbmUgb24gcGFyZW50IG5vZGVzIHdoaWNoIGlzIGF3ZXNvbWVcbiAgICAgKiBidXQgY3VycmVudGx5IG9ubHkgd29ya3MgaW4gRmlyZWZveFxuICAgICAqIF9fX1xuICAgICAqIFRPRE86IHJlbW92ZSBNdXRhdGlvbk9ic2VydmVyIHdoZW4gd2UgYnVtcCB2ZXJzaW9ucyBvZiBzdXBwb3J0ZWQgYnJvd3NlcnM6XG4gICAgICoqKiBTYWZhcmkgMTIrXG4gICAgICoqKiBDaHJvbWUgODMrXG4gICAgICogU2VlOiB7QGxpbmsgaHR0cHM6Ly9jYW5pdXNlLmNvbS9tZG4tYXBpX3dpbmRvd19hbmltYXRpb25jYW5jZWxfZXZlbnR9XG4gICAgICovXG4gICAgQEhvc3RMaXN0ZW5lcignYW5pbWF0aW9uY2FuY2VsLnNlbGYnLCBbJ2ZhbHNlJ10pXG4gICAgQEhvc3RMaXN0ZW5lcignYW5pbWF0aW9uc3RhcnQuc2VsZicsIFsndHJ1ZSddKVxuICAgIG9uQW5pbWF0aW9uKHZpc2liaWxpdHk6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy52aXNpYmlsaXR5JC5uZXh0KHZpc2liaWxpdHkpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpc2liaWxpdHkkLm5leHQoZmFsc2UpO1xuICAgIH1cbn1cbiJdfQ==