import { __decorate } from "tslib";
import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, Inject, Input, Renderer2 } from '@angular/core';
import { svgNodeFilter, tuiDefaultProp, TuiDestroyService, tuiPx, TuiResizeService, } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiHighlightDirective {
    constructor(doc, el, renderer, resize$) {
        this.doc = doc;
        this.el = el;
        this.renderer = renderer;
        this.highlight = this.setUpHighlight();
        this.treeWalker = this.doc.createTreeWalker(this.el.nativeElement, NodeFilter.SHOW_TEXT, svgNodeFilter);
        this.tuiHighlight = '';
        this.tuiHighlightColor = 'var(--tui-selection)';
        resize$.subscribe(() => {
            this.updateStyles();
        });
    }
    get match() {
        return this.indexOf(this.el.nativeElement.textContent) !== -1;
    }
    ngOnChanges() {
        this.updateStyles();
    }
    updateStyles() {
        this.highlight.style.display = 'none';
        if (!this.match) {
            return;
        }
        this.treeWalker.currentNode = this.el.nativeElement;
        do {
            const index = this.indexOf(this.treeWalker.currentNode.nodeValue);
            if (index === -1) {
                continue;
            }
            const range = this.doc.createRange();
            range.setStart(this.treeWalker.currentNode, index);
            range.setEnd(this.treeWalker.currentNode, index + this.tuiHighlight.length);
            const hostRect = this.el.nativeElement.getBoundingClientRect();
            const { left, top, width, height } = range.getBoundingClientRect();
            const { style } = this.highlight;
            style.background = this.tuiHighlightColor;
            style.left = tuiPx(left - hostRect.left);
            style.top = tuiPx(top - hostRect.top);
            style.width = tuiPx(width);
            style.height = tuiPx(height);
            style.display = 'block';
            return;
        } while (this.treeWalker.nextNode());
    }
    indexOf(source) {
        return !source || !this.tuiHighlight
            ? -1
            : source.toLowerCase().indexOf(this.tuiHighlight.toLowerCase());
    }
    setUpHighlight() {
        const highlight = this.renderer.createElement('div');
        const { style } = highlight;
        style.background = this.tuiHighlightColor;
        style.zIndex = '-1';
        style.position = 'absolute';
        this.renderer.appendChild(this.el.nativeElement, highlight);
        return highlight;
    }
}
TuiHighlightDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHighlightDirective, deps: [{ token: DOCUMENT }, { token: ElementRef }, { token: Renderer2 }, { token: TuiResizeService }], target: i0.ɵɵFactoryTarget.Directive });
TuiHighlightDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHighlightDirective, selector: "[tuiHighlight]", inputs: { tuiHighlight: "tuiHighlight", tuiHighlightColor: "tuiHighlightColor" }, host: { properties: { "style.position": "\"relative\"", "style.zIndex": "0" } }, providers: [TuiDestroyService, TuiResizeService], usesOnChanges: true, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiHighlightDirective.prototype, "tuiHighlight", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHighlightDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHighlight]',
                    host: {
                        '[style.position]': '"relative"',
                        '[style.zIndex]': '0',
                    },
                    providers: [TuiDestroyService, TuiResizeService],
                }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }]; }, propDecorators: { tuiHighlight: [{
                type: Input
            }], tuiHighlightColor: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,