import { DATE_FILLER_LENGTH, TuiDay } from '@taiga-ui/cdk';
export function tuiNormalizeDateValue(dateValue, { value, min, max, dateFormat, dateSeparator }) {
    return value && value.toString(dateFormat, dateSeparator) === dateValue
        ? dateValue
        : TuiDay.normalizeParse(dateValue, dateFormat)
            .dayLimit(min, max)
            .toString(dateFormat, dateSeparator);
}
export function tuiCreateAutoCorrectedDatePipe(config) {
    return value => {
        if (value.length !== DATE_FILLER_LENGTH) {
            return { value };
        }
        return {
            value: tuiNormalizeDateValue(value, config),
        };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC91dGlscy9tYXNrL2NyZWF0ZS1hdXRvLWNvcnJlY3RlZC1kYXRlLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGtCQUFrQixFQUFlLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQVN0RSxNQUFNLFVBQVUscUJBQXFCLENBQ2pDLFNBQWlCLEVBQ2pCLEVBQUMsS0FBSyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBa0M7SUFFN0UsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLEtBQUssU0FBUztRQUNuRSxDQUFDLENBQUMsU0FBUztRQUNYLENBQUMsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxVQUFVLENBQUM7YUFDdkMsUUFBUSxDQUFDLEdBQUcsRUFBRSxHQUFHLENBQUM7YUFDbEIsUUFBUSxDQUFDLFVBQVUsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNuRCxDQUFDO0FBRUQsTUFBTSxVQUFVLDhCQUE4QixDQUMxQyxNQUF1QztJQUV2QyxPQUFPLEtBQUssQ0FBQyxFQUFFO1FBQ1gsSUFBSSxLQUFLLENBQUMsTUFBTSxLQUFLLGtCQUFrQixFQUFFO1lBQ3JDLE9BQU8sRUFBQyxLQUFLLEVBQUMsQ0FBQztTQUNsQjtRQUVELE9BQU87WUFDSCxLQUFLLEVBQUUscUJBQXFCLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQztTQUM5QyxDQUFDO0lBQ04sQ0FBQyxDQUFDO0FBQ04sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7REFURV9GSUxMRVJfTEVOR1RILCBUdWlEYXRlTW9kZSwgVHVpRGF5fSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpVGV4dE1hc2tQaXBlSGFuZGxlciwgVHVpV2l0aE9wdGlvbmFsTWluTWF4V2l0aFZhbHVlfSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHVpQXV0b0NvcnJlY3RlZERhdGVQaXBlQ29uZmlnc1xuICAgIGV4dGVuZHMgVHVpV2l0aE9wdGlvbmFsTWluTWF4V2l0aFZhbHVlPFR1aURheSB8IG51bGwsIFR1aURheT4ge1xuICAgIGRhdGVGb3JtYXQ6IFR1aURhdGVNb2RlO1xuICAgIGRhdGVTZXBhcmF0b3I6IHN0cmluZztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aU5vcm1hbGl6ZURhdGVWYWx1ZShcbiAgICBkYXRlVmFsdWU6IHN0cmluZyxcbiAgICB7dmFsdWUsIG1pbiwgbWF4LCBkYXRlRm9ybWF0LCBkYXRlU2VwYXJhdG9yfTogVHVpQXV0b0NvcnJlY3RlZERhdGVQaXBlQ29uZmlncyxcbik6IHN0cmluZyB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLnRvU3RyaW5nKGRhdGVGb3JtYXQsIGRhdGVTZXBhcmF0b3IpID09PSBkYXRlVmFsdWVcbiAgICAgICAgPyBkYXRlVmFsdWVcbiAgICAgICAgOiBUdWlEYXkubm9ybWFsaXplUGFyc2UoZGF0ZVZhbHVlLCBkYXRlRm9ybWF0KVxuICAgICAgICAgICAgICAuZGF5TGltaXQobWluLCBtYXgpXG4gICAgICAgICAgICAgIC50b1N0cmluZyhkYXRlRm9ybWF0LCBkYXRlU2VwYXJhdG9yKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHR1aUNyZWF0ZUF1dG9Db3JyZWN0ZWREYXRlUGlwZShcbiAgICBjb25maWc6IFR1aUF1dG9Db3JyZWN0ZWREYXRlUGlwZUNvbmZpZ3MsXG4pOiBUdWlUZXh0TWFza1BpcGVIYW5kbGVyIHtcbiAgICByZXR1cm4gdmFsdWUgPT4ge1xuICAgICAgICBpZiAodmFsdWUubGVuZ3RoICE9PSBEQVRFX0ZJTExFUl9MRU5HVEgpIHtcbiAgICAgICAgICAgIHJldHVybiB7dmFsdWV9O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiB0dWlOb3JtYWxpemVEYXRlVmFsdWUodmFsdWUsIGNvbmZpZyksXG4gICAgICAgIH07XG4gICAgfTtcbn1cbiJdfQ==