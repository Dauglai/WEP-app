import { DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, RANGE_SEPARATOR_CHAR, TuiDay, TuiDayRange, } from '@taiga-ui/cdk';
function parseWithLimit(value, config) {
    return TuiDay.normalizeParse(value.slice(0, DATE_FILLER_LENGTH), config.dateFormat).dayLimit(config.min, config.max);
}
function processRawValue(value, config) {
    const { dateFormat, dateSeparator } = config;
    switch (value.length) {
        case DATE_FILLER_LENGTH:
            return parseWithLimit(value, config).toString(dateFormat, dateSeparator);
        case DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length:
            return (parseWithLimit(value, config).toString(dateFormat, dateSeparator) +
                RANGE_SEPARATOR_CHAR);
        case DATE_RANGE_FILLER_LENGTH:
            return config.value &&
                config.value.toString(dateFormat, dateSeparator) === value
                ? value
                : TuiDayRange.sort(parseWithLimit(value.slice(0, DATE_FILLER_LENGTH), config), parseWithLimit(value.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), config)).toString(dateFormat, dateSeparator);
        default:
            return value;
    }
}
/**
 * Normalizes date in formatted string
 *
 * Normalizes when:
 *
 * 1. It is a single date
 * 2. It is a single date and a separator
 * 3. It is two dates and a separator between them
 *
 * In **other** cases, the value does not change.
 *
 * @param config with min and max date
 * @return mask pipe handler that handles `min` and `max`
 */
export function tuiCreateAutoCorrectedDateRangePipe(config) {
    return value => ({ value: processRawValue(value, config) });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLWRhdGUtcmFuZ2UtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC91dGlscy9tYXNrL2NyZWF0ZS1hdXRvLWNvcnJlY3RlZC1kYXRlLXJhbmdlLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUNILGtCQUFrQixFQUNsQix3QkFBd0IsRUFDeEIsb0JBQW9CLEVBRXBCLE1BQU0sRUFDTixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFTdkIsU0FBUyxjQUFjLENBQUMsS0FBYSxFQUFFLE1BQXVDO0lBQzFFLE9BQU8sTUFBTSxDQUFDLGNBQWMsQ0FDeEIsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsa0JBQWtCLENBQUMsRUFDbEMsTUFBTSxDQUFDLFVBQVUsQ0FDcEIsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEtBQWEsRUFBRSxNQUF1QztJQUMzRSxNQUFNLEVBQUMsVUFBVSxFQUFFLGFBQWEsRUFBQyxHQUFHLE1BQU0sQ0FBQztJQUUzQyxRQUFRLEtBQUssQ0FBQyxNQUFNLEVBQUU7UUFDbEIsS0FBSyxrQkFBa0I7WUFDbkIsT0FBTyxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDLENBQUM7UUFDN0UsS0FBSyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNO1lBQ2pELE9BQU8sQ0FDSCxjQUFjLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLEVBQUUsYUFBYSxDQUFDO2dCQUNqRSxvQkFBb0IsQ0FDdkIsQ0FBQztRQUNOLEtBQUssd0JBQXdCO1lBQ3pCLE9BQU8sTUFBTSxDQUFDLEtBQUs7Z0JBQ2YsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxLQUFLLEtBQUs7Z0JBQzFELENBQUMsQ0FBQyxLQUFLO2dCQUNQLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUNaLGNBQWMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxrQkFBa0IsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxFQUMxRCxjQUFjLENBQ1YsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsR0FBRyxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsRUFDN0QsTUFBTSxDQUNULENBQ0osQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1FBQ2hEO1lBQ0ksT0FBTyxLQUFLLENBQUM7S0FDcEI7QUFDTCxDQUFDO0FBRUQ7Ozs7Ozs7Ozs7Ozs7R0FhRztBQUNILE1BQU0sVUFBVSxtQ0FBbUMsQ0FDL0MsTUFBdUM7SUFFdkMsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUUsZUFBZSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsRUFBQyxDQUFDLENBQUM7QUFDOUQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgREFURV9GSUxMRVJfTEVOR1RILFxuICAgIERBVEVfUkFOR0VfRklMTEVSX0xFTkdUSCxcbiAgICBSQU5HRV9TRVBBUkFUT1JfQ0hBUixcbiAgICBUdWlEYXRlTW9kZSxcbiAgICBUdWlEYXksXG4gICAgVHVpRGF5UmFuZ2UsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlUZXh0TWFza1BpcGVIYW5kbGVyLCBUdWlXaXRoT3B0aW9uYWxNaW5NYXhXaXRoVmFsdWV9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcblxuaW50ZXJmYWNlIFR1aUF1dG9Db3JyZWN0ZWREYXRlUGlwZUNvbmZpZ3NcbiAgICBleHRlbmRzIFR1aVdpdGhPcHRpb25hbE1pbk1heFdpdGhWYWx1ZTxUdWlEYXlSYW5nZSB8IG51bGwsIFR1aURheT4ge1xuICAgIGRhdGVGb3JtYXQ6IFR1aURhdGVNb2RlO1xuICAgIGRhdGVTZXBhcmF0b3I6IHN0cmluZztcbn1cblxuZnVuY3Rpb24gcGFyc2VXaXRoTGltaXQodmFsdWU6IHN0cmluZywgY29uZmlnOiBUdWlBdXRvQ29ycmVjdGVkRGF0ZVBpcGVDb25maWdzKTogVHVpRGF5IHtcbiAgICByZXR1cm4gVHVpRGF5Lm5vcm1hbGl6ZVBhcnNlKFxuICAgICAgICB2YWx1ZS5zbGljZSgwLCBEQVRFX0ZJTExFUl9MRU5HVEgpLFxuICAgICAgICBjb25maWcuZGF0ZUZvcm1hdCxcbiAgICApLmRheUxpbWl0KGNvbmZpZy5taW4sIGNvbmZpZy5tYXgpO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmF3VmFsdWUodmFsdWU6IHN0cmluZywgY29uZmlnOiBUdWlBdXRvQ29ycmVjdGVkRGF0ZVBpcGVDb25maWdzKTogc3RyaW5nIHtcbiAgICBjb25zdCB7ZGF0ZUZvcm1hdCwgZGF0ZVNlcGFyYXRvcn0gPSBjb25maWc7XG5cbiAgICBzd2l0Y2ggKHZhbHVlLmxlbmd0aCkge1xuICAgICAgICBjYXNlIERBVEVfRklMTEVSX0xFTkdUSDpcbiAgICAgICAgICAgIHJldHVybiBwYXJzZVdpdGhMaW1pdCh2YWx1ZSwgY29uZmlnKS50b1N0cmluZyhkYXRlRm9ybWF0LCBkYXRlU2VwYXJhdG9yKTtcbiAgICAgICAgY2FzZSBEQVRFX0ZJTExFUl9MRU5HVEggKyBSQU5HRV9TRVBBUkFUT1JfQ0hBUi5sZW5ndGg6XG4gICAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgICAgIHBhcnNlV2l0aExpbWl0KHZhbHVlLCBjb25maWcpLnRvU3RyaW5nKGRhdGVGb3JtYXQsIGRhdGVTZXBhcmF0b3IpICtcbiAgICAgICAgICAgICAgICBSQU5HRV9TRVBBUkFUT1JfQ0hBUlxuICAgICAgICAgICAgKTtcbiAgICAgICAgY2FzZSBEQVRFX1JBTkdFX0ZJTExFUl9MRU5HVEg6XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnLnZhbHVlICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLnZhbHVlLnRvU3RyaW5nKGRhdGVGb3JtYXQsIGRhdGVTZXBhcmF0b3IpID09PSB2YWx1ZVxuICAgICAgICAgICAgICAgID8gdmFsdWVcbiAgICAgICAgICAgICAgICA6IFR1aURheVJhbmdlLnNvcnQoXG4gICAgICAgICAgICAgICAgICAgICAgcGFyc2VXaXRoTGltaXQodmFsdWUuc2xpY2UoMCwgREFURV9GSUxMRVJfTEVOR1RIKSwgY29uZmlnKSxcbiAgICAgICAgICAgICAgICAgICAgICBwYXJzZVdpdGhMaW1pdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUuc2xpY2UoREFURV9GSUxMRVJfTEVOR1RIICsgUkFOR0VfU0VQQVJBVE9SX0NIQVIubGVuZ3RoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICApLnRvU3RyaW5nKGRhdGVGb3JtYXQsIGRhdGVTZXBhcmF0b3IpO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemVzIGRhdGUgaW4gZm9ybWF0dGVkIHN0cmluZ1xuICpcbiAqIE5vcm1hbGl6ZXMgd2hlbjpcbiAqXG4gKiAxLiBJdCBpcyBhIHNpbmdsZSBkYXRlXG4gKiAyLiBJdCBpcyBhIHNpbmdsZSBkYXRlIGFuZCBhIHNlcGFyYXRvclxuICogMy4gSXQgaXMgdHdvIGRhdGVzIGFuZCBhIHNlcGFyYXRvciBiZXR3ZWVuIHRoZW1cbiAqXG4gKiBJbiAqKm90aGVyKiogY2FzZXMsIHRoZSB2YWx1ZSBkb2VzIG5vdCBjaGFuZ2UuXG4gKlxuICogQHBhcmFtIGNvbmZpZyB3aXRoIG1pbiBhbmQgbWF4IGRhdGVcbiAqIEByZXR1cm4gbWFzayBwaXBlIGhhbmRsZXIgdGhhdCBoYW5kbGVzIGBtaW5gIGFuZCBgbWF4YFxuICovXG5leHBvcnQgZnVuY3Rpb24gdHVpQ3JlYXRlQXV0b0NvcnJlY3RlZERhdGVSYW5nZVBpcGUoXG4gICAgY29uZmlnOiBUdWlBdXRvQ29ycmVjdGVkRGF0ZVBpcGVDb25maWdzLFxuKTogVHVpVGV4dE1hc2tQaXBlSGFuZGxlciB7XG4gICAgcmV0dXJuIHZhbHVlID0+ICh7dmFsdWU6IHByb2Nlc3NSYXdWYWx1ZSh2YWx1ZSwgY29uZmlnKX0pO1xufVxuIl19