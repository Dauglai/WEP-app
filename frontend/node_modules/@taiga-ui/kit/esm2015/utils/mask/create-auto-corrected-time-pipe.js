import { MAX_TIME_VALUES } from '@taiga-ui/kit/constants';
/**
 * Adjusts the entered time by omitting only suitable values for hours and minutes
 * @returns time as a string
 */
export function tuiCreateAutoCorrectedTimePipe(timeMode = `HH:MM`, maxValues = {}) {
    const timeFormatArray = [`HH`, `MM`, `SS`, `MS`];
    const safeValues = Object.assign(Object.assign({}, MAX_TIME_VALUES), maxValues);
    return conformedValue => {
        const indexesOfPipedChars = [];
        const conformedValueArr = conformedValue.split(``);
        timeFormatArray.forEach(format => {
            const position = timeMode.indexOf(format);
            const maxFirstDigit = parseInt(String(safeValues[format]).slice(0, 1), 10);
            if (parseInt(conformedValueArr[position], 10) > maxFirstDigit) {
                conformedValueArr[position + 1] = conformedValueArr[position];
                conformedValueArr[position] = `0`;
                indexesOfPipedChars.push(position);
            }
        });
        const isInvalid = timeFormatArray.some(format => parseInt(conformedValue.slice(timeMode.indexOf(format), 2), 10) >
            safeValues[format]);
        return isInvalid
            ? false
            : {
                value: conformedValueArr.join(``),
                indexesOfPipedChars,
            };
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3JlYXRlLWF1dG8tY29ycmVjdGVkLXRpbWUtcGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC91dGlscy9tYXNrL2NyZWF0ZS1hdXRvLWNvcnJlY3RlZC10aW1lLXBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBR3hEOzs7R0FHRztBQUNILE1BQU0sVUFBVSw4QkFBOEIsQ0FDMUMsV0FBd0IsT0FBTyxFQUMvQixZQUF5RCxFQUFFO0lBRTNELE1BQU0sZUFBZSxHQUFHLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFVLENBQUM7SUFDMUQsTUFBTSxVQUFVLG1DQUNULGVBQWUsR0FDZixTQUFTLENBQ2YsQ0FBQztJQUVGLE9BQU8sY0FBYyxDQUFDLEVBQUU7UUFDcEIsTUFBTSxtQkFBbUIsR0FBYSxFQUFFLENBQUM7UUFDekMsTUFBTSxpQkFBaUIsR0FBRyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBRW5ELGVBQWUsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsTUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUMxQyxNQUFNLGFBQWEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFFM0UsSUFBSSxRQUFRLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsYUFBYSxFQUFFO2dCQUMzRCxpQkFBaUIsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLEdBQUcsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7Z0JBQzlELGlCQUFpQixDQUFDLFFBQVEsQ0FBQyxHQUFHLEdBQUcsQ0FBQztnQkFDbEMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFNBQVMsR0FBRyxlQUFlLENBQUMsSUFBSSxDQUNsQyxNQUFNLENBQUMsRUFBRSxDQUNMLFFBQVEsQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDO1lBQy9ELFVBQVUsQ0FBQyxNQUFNLENBQUMsQ0FDekIsQ0FBQztRQUVGLE9BQU8sU0FBUztZQUNaLENBQUMsQ0FBQyxLQUFLO1lBQ1AsQ0FBQyxDQUFDO2dCQUNJLEtBQUssRUFBRSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO2dCQUNqQyxtQkFBbUI7YUFDdEIsQ0FBQztJQUNaLENBQUMsQ0FBQztBQUNOLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1R1aVRpbWVNb2RlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7VHVpVGV4dE1hc2tQaXBlSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtNQVhfVElNRV9WQUxVRVN9IGZyb20gJ0B0YWlnYS11aS9raXQvY29uc3RhbnRzJztcbmltcG9ydCB7VHVpVGltZUZvcm1hdFBhcnRzfSBmcm9tICdAdGFpZ2EtdWkva2l0L3R5cGVzJztcblxuLyoqXG4gKiBBZGp1c3RzIHRoZSBlbnRlcmVkIHRpbWUgYnkgb21pdHRpbmcgb25seSBzdWl0YWJsZSB2YWx1ZXMgZm9yIGhvdXJzIGFuZCBtaW51dGVzXG4gKiBAcmV0dXJucyB0aW1lIGFzIGEgc3RyaW5nXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0dWlDcmVhdGVBdXRvQ29ycmVjdGVkVGltZVBpcGUoXG4gICAgdGltZU1vZGU6IFR1aVRpbWVNb2RlID0gYEhIOk1NYCxcbiAgICBtYXhWYWx1ZXM6IFBhcnRpYWw8UmVjb3JkPFR1aVRpbWVGb3JtYXRQYXJ0cywgbnVtYmVyPj4gPSB7fSxcbik6IFR1aVRleHRNYXNrUGlwZUhhbmRsZXIge1xuICAgIGNvbnN0IHRpbWVGb3JtYXRBcnJheSA9IFtgSEhgLCBgTU1gLCBgU1NgLCBgTVNgXSBhcyBjb25zdDtcbiAgICBjb25zdCBzYWZlVmFsdWVzID0ge1xuICAgICAgICAuLi5NQVhfVElNRV9WQUxVRVMsXG4gICAgICAgIC4uLm1heFZhbHVlcyxcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNvbmZvcm1lZFZhbHVlID0+IHtcbiAgICAgICAgY29uc3QgaW5kZXhlc09mUGlwZWRDaGFyczogbnVtYmVyW10gPSBbXTtcbiAgICAgICAgY29uc3QgY29uZm9ybWVkVmFsdWVBcnIgPSBjb25mb3JtZWRWYWx1ZS5zcGxpdChgYCk7XG5cbiAgICAgICAgdGltZUZvcm1hdEFycmF5LmZvckVhY2goZm9ybWF0ID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHBvc2l0aW9uID0gdGltZU1vZGUuaW5kZXhPZihmb3JtYXQpO1xuICAgICAgICAgICAgY29uc3QgbWF4Rmlyc3REaWdpdCA9IHBhcnNlSW50KFN0cmluZyhzYWZlVmFsdWVzW2Zvcm1hdF0pLnNsaWNlKDAsIDEpLCAxMCk7XG5cbiAgICAgICAgICAgIGlmIChwYXJzZUludChjb25mb3JtZWRWYWx1ZUFycltwb3NpdGlvbl0sIDEwKSA+IG1heEZpcnN0RGlnaXQpIHtcbiAgICAgICAgICAgICAgICBjb25mb3JtZWRWYWx1ZUFycltwb3NpdGlvbiArIDFdID0gY29uZm9ybWVkVmFsdWVBcnJbcG9zaXRpb25dO1xuICAgICAgICAgICAgICAgIGNvbmZvcm1lZFZhbHVlQXJyW3Bvc2l0aW9uXSA9IGAwYDtcbiAgICAgICAgICAgICAgICBpbmRleGVzT2ZQaXBlZENoYXJzLnB1c2gocG9zaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBpc0ludmFsaWQgPSB0aW1lRm9ybWF0QXJyYXkuc29tZShcbiAgICAgICAgICAgIGZvcm1hdCA9PlxuICAgICAgICAgICAgICAgIHBhcnNlSW50KGNvbmZvcm1lZFZhbHVlLnNsaWNlKHRpbWVNb2RlLmluZGV4T2YoZm9ybWF0KSwgMiksIDEwKSA+XG4gICAgICAgICAgICAgICAgc2FmZVZhbHVlc1tmb3JtYXRdLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBpc0ludmFsaWRcbiAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgIDoge1xuICAgICAgICAgICAgICAgICAgdmFsdWU6IGNvbmZvcm1lZFZhbHVlQXJyLmpvaW4oYGApLFxuICAgICAgICAgICAgICAgICAgaW5kZXhlc09mUGlwZWRDaGFycyxcbiAgICAgICAgICAgICAgfTtcbiAgICB9O1xufVxuIl19