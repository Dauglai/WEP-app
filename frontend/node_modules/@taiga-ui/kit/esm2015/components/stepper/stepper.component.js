import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, forwardRef, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
import { EMPTY_QUERY, tuiDefaultProp, TuiDestroyService, tuiGetOriginalArrayFromQueryList, tuiIsElement, tuiMoveFocus, tuiPure, tuiQueryListChanges, TuiResizeService, TuiScrollService, } from '@taiga-ui/cdk';
import { TUI_ANIMATIONS_DURATION } from '@taiga-ui/core';
import { delay } from 'rxjs/operators';
// TODO: find the best way for prevent cycle
// eslint-disable-next-line import/no-cycle
import { TuiStepComponent } from './step/step.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "rxjs";
export class TuiStepperComponent {
    constructor(cdr, el, scrollService, resize$, duration) {
        this.cdr = cdr;
        this.el = el;
        this.scrollService = scrollService;
        this.duration = duration;
        this.steps = EMPTY_QUERY;
        this.orientation = 'horizontal';
        this.activeItemIndexChange = new EventEmitter();
        this.activeItemIndex = 0;
        resize$.subscribe(() => this.scrollIntoView(this.activeItemIndex));
    }
    set activeIndex(index) {
        this.activeItemIndex = index;
        this.scrollIntoView(index);
    }
    get changes$() {
        // Delay is required to trigger change detection after steps are rendered,
        // so they can update their "active" status
        return tuiQueryListChanges(this.steps).pipe(delay(0));
    }
    onHorizontal(event, step) {
        if (this.orientation !== 'horizontal' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    onVertical(event, step) {
        if (this.orientation !== 'vertical' || !event.target) {
            return;
        }
        event.preventDefault();
        this.moveFocus(event.target, step);
    }
    indexOf(step) {
        return tuiGetOriginalArrayFromQueryList(this.steps).findIndex(({ nativeElement }) => nativeElement === step);
    }
    isActive(index) {
        return index === this.activeItemIndex;
    }
    activate(index) {
        if (this.activeItemIndex === index) {
            return;
        }
        this.activeItemIndex = index;
        this.activeItemIndexChange.emit(index);
        this.cdr.markForCheck();
        this.scrollIntoView(index);
    }
    getNativeElements(queryList) {
        return queryList.map(({ nativeElement }) => nativeElement);
    }
    moveFocus(current, step) {
        if (!tuiIsElement(current)) {
            return;
        }
        const stepElements = this.getNativeElements(this.steps);
        const index = stepElements.findIndex(item => item === current);
        tuiMoveFocus(index, stepElements, step);
    }
    scrollIntoView(index) {
        const step = this.getNativeElements(this.steps)[index];
        if (!step) {
            return;
        }
        const { nativeElement } = this.el;
        const { clientHeight, clientWidth, offsetTop, offsetLeft } = nativeElement;
        const { offsetHeight, offsetWidth, offsetTop: stepOffsetTop, offsetLeft: stepOffsetLeft, } = step;
        const top = stepOffsetTop - offsetTop - clientHeight / 2 + offsetHeight / 2;
        const left = stepOffsetLeft - offsetLeft - clientWidth / 2 + offsetWidth / 2;
        this.scrollService
            .scroll$(nativeElement, Math.max(0, top), Math.max(0, left), this.duration / 3)
            .subscribe();
    }
}
TuiStepperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperComponent, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: TuiScrollService }, { token: TuiResizeService }, { token: TUI_ANIMATIONS_DURATION }], target: i0.ɵɵFactoryTarget.Component });
TuiStepperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiStepperComponent, selector: "tui-stepper, nav[tuiStepper]", inputs: { orientation: "orientation", activeIndex: ["activeItemIndex", "activeIndex"] }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { listeners: { "keydown.arrowRight": "onHorizontal($event,1)", "keydown.arrowLeft": "onHorizontal($event,-1)", "keydown.arrowDown": "onVertical($event,1)", "keydown.arrowUp": "onVertical($event,-1)" }, properties: { "attr.data-orientation": "this.orientation" } }, providers: [TuiResizeService, TuiDestroyService], queries: [{ propertyName: "steps", predicate: i0.forwardRef(function () { return TuiStepComponent; }), read: ElementRef }], ngImport: i0, template: "<ng-container *ngIf=\"changes$ | async\"></ng-container>\n<ng-content></ng-content>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;scroll-behavior:smooth;display:flex;overflow:auto;counter-reset:steps}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}@media screen and (prefers-reduced-motion: reduce){:host{scroll-behavior:auto}}:host[data-orientation=vertical]{flex-direction:column}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiStepperComponent.prototype, "orientation", void 0);
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "changes$", null);
__decorate([
    tuiPure
], TuiStepperComponent.prototype, "getNativeElements", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStepperComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-stepper, nav[tuiStepper]',
                    templateUrl: './stepper.template.html',
                    styleUrls: ['./stepper.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [TuiResizeService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.TuiScrollService, decorators: [{
                    type: Inject,
                    args: [TuiScrollService]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ANIMATIONS_DURATION]
                }] }]; }, propDecorators: { steps: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiStepComponent), { read: ElementRef }]
            }], orientation: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-orientation']
            }], activeIndex: [{
                type: Input,
                args: ['activeItemIndex']
            }], activeItemIndexChange: [{
                type: Output
            }], changes$: [], onHorizontal: [{
                type: HostListener,
                args: ['keydown.arrowRight', ['$event', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowLeft', ['$event', '-1']]
            }], onVertical: [{
                type: HostListener,
                args: ['keydown.arrowDown', ['$event', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowUp', ['$event', '-1']]
            }], getNativeElements: [] } });
//# sourceMappingURL=data:application/json;base64,