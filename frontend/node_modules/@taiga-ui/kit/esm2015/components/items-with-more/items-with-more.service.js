import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { tuiClamp, TuiResizeService, tuiZoneOptimized } from '@taiga-ui/cdk';
import { merge, Observable } from 'rxjs';
import { distinctUntilChanged, map, share, throttleTime } from 'rxjs/operators';
import { TuiItemsWithMoreDirective } from './items-with-more.directive';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "./items-with-more.directive";
export class TuiItemsWithMoreService extends Observable {
    constructor(ngZone, el, mutation$, resize$, directive) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.ngZone = ngZone;
        this.el = el;
        this.mutation$ = mutation$;
        this.resize$ = resize$;
        this.directive = directive;
        this.stream$ = merge(this.directive.change$, this.mutation$, this.resize$).pipe(throttleTime(0), map(() => this.getOverflowIndex()), distinctUntilChanged(), tuiZoneOptimized(this.ngZone), share());
    }
    getOverflowIndex() {
        var _a;
        const { clientWidth, children } = this.el.nativeElement;
        const items = Array.from(children, ({ clientWidth }) => clientWidth);
        const first = this.directive.required === -1 ? 0 : this.directive.required;
        const last = items.length - 1;
        const more = ((_a = children[last]) === null || _a === void 0 ? void 0 : _a.tagName) === `SPAN` ? items[last] : 0;
        items.unshift(...items.splice(first, 1));
        let total = items.reduce((sum, width) => sum + width, 0) - more;
        if (total <= clientWidth && this.directive.itemsLimit >= items.length) {
            return this.maxItems;
        }
        for (let i = last - 1; i > 0; i--) {
            total -= items[i];
            if (total + more <= clientWidth) {
                return tuiClamp(i > this.directive.required ? i - 1 : i - 2, -1, this.maxItems);
            }
        }
        return -1;
    }
    get maxItems() {
        return this.directive.itemsLimit > this.directive.required
            ? this.directive.itemsLimit - 1
            : this.directive.itemsLimit - 2;
    }
}
TuiItemsWithMoreService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreService, deps: [{ token: NgZone }, { token: ElementRef }, { token: MutationObserverService }, { token: TuiResizeService }, { token: TuiItemsWithMoreDirective }], target: i0.ɵɵFactoryTarget.Injectable });
TuiItemsWithMoreService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [MutationObserverService]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: i2.TuiItemsWithMoreDirective, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreDirective]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMtd2l0aC1tb3JlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9pdGVtcy13aXRoLW1vcmUvaXRlbXMtd2l0aC1tb3JlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN2RSxPQUFPLEVBQUMsUUFBUSxFQUFFLGdCQUFnQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNFLE9BQU8sRUFBQyxLQUFLLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLFlBQVksRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTlFLE9BQU8sRUFBQyx5QkFBeUIsRUFBQyxNQUFNLDZCQUE2QixDQUFDOzs7O0FBR3RFLE1BQU0sT0FBTyx1QkFBd0IsU0FBUSxVQUFrQjtJQVMzRCxZQUNxQyxNQUFjLEVBQ1YsRUFBMkIsRUFDZCxTQUE4QixFQUNyQyxPQUE0QixFQUV0RCxTQUFvQztRQUVyRCxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBUHZCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDVixPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQUNkLGNBQVMsR0FBVCxTQUFTLENBQXFCO1FBQ3JDLFlBQU8sR0FBUCxPQUFPLENBQXFCO1FBRXRELGNBQVMsR0FBVCxTQUFTLENBQTJCO1FBZGhELFlBQU8sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxP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QUF1Qjs7MEJBQzlCLE1BQU07MkJBQUMsZ0JBQWdCOzswQkFDdkIsTUFBTTsyQkFBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0VsZW1lbnRSZWYsIEluamVjdCwgSW5qZWN0YWJsZSwgTmdab25lfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TXV0YXRpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge3R1aUNsYW1wLCBUdWlSZXNpemVTZXJ2aWNlLCB0dWlab25lT3B0aW1pemVkfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgbWFwLCBzaGFyZSwgdGhyb3R0bGVUaW1lfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpSXRlbXNXaXRoTW9yZURpcmVjdGl2ZX0gZnJvbSAnLi9pdGVtcy13aXRoLW1vcmUuZGlyZWN0aXZlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aUl0ZW1zV2l0aE1vcmVTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxudW1iZXI+IHtcbiAgICByZWFkb25seSBzdHJlYW0kID0gbWVyZ2UodGhpcy5kaXJlY3RpdmUuY2hhbmdlJCwgdGhpcy5tdXRhdGlvbiQsIHRoaXMucmVzaXplJCkucGlwZShcbiAgICAgICAgdGhyb3R0bGVUaW1lKDApLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5nZXRPdmVyZmxvd0luZGV4KCkpLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICAgICB0dWlab25lT3B0aW1pemVkKHRoaXMubmdab25lKSxcbiAgICAgICAgc2hhcmUoKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICBASW5qZWN0KE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IG11dGF0aW9uJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChUdWlSZXNpemVTZXJ2aWNlKSBwcml2YXRlIHJlYWRvbmx5IHJlc2l6ZSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoVHVpSXRlbXNXaXRoTW9yZURpcmVjdGl2ZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkaXJlY3RpdmU6IFR1aUl0ZW1zV2l0aE1vcmVEaXJlY3RpdmUsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKHN1YnNjcmliZXIgPT4gdGhpcy5zdHJlYW0kLnN1YnNjcmliZShzdWJzY3JpYmVyKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRPdmVyZmxvd0luZGV4KCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHtjbGllbnRXaWR0aCwgY2hpbGRyZW59ID0gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBpdGVtcyA9IEFycmF5LmZyb20oY2hpbGRyZW4sICh7Y2xpZW50V2lkdGh9KSA9PiBjbGllbnRXaWR0aCk7XG4gICAgICAgIGNvbnN0IGZpcnN0ID0gdGhpcy5kaXJlY3RpdmUucmVxdWlyZWQgPT09IC0xID8gMCA6IHRoaXMuZGlyZWN0aXZlLnJlcXVpcmVkO1xuICAgICAgICBjb25zdCBsYXN0ID0gaXRlbXMubGVuZ3RoIC0gMTtcbiAgICAgICAgY29uc3QgbW9yZSA9IGNoaWxkcmVuW2xhc3RdPy50YWdOYW1lID09PSBgU1BBTmAgPyBpdGVtc1tsYXN0XSA6IDA7XG5cbiAgICAgICAgaXRlbXMudW5zaGlmdCguLi5pdGVtcy5zcGxpY2UoZmlyc3QsIDEpKTtcblxuICAgICAgICBsZXQgdG90YWwgPSBpdGVtcy5yZWR1Y2UoKHN1bSwgd2lkdGgpID0+IHN1bSArIHdpZHRoLCAwKSAtIG1vcmU7XG5cbiAgICAgICAgaWYgKHRvdGFsIDw9IGNsaWVudFdpZHRoICYmIHRoaXMuZGlyZWN0aXZlLml0ZW1zTGltaXQgPj0gaXRlbXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tYXhJdGVtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSBsYXN0IC0gMTsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgdG90YWwgLT0gaXRlbXNbaV07XG5cbiAgICAgICAgICAgIGlmICh0b3RhbCArIG1vcmUgPD0gY2xpZW50V2lkdGgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHVpQ2xhbXAoXG4gICAgICAgICAgICAgICAgICAgIGkgPiB0aGlzLmRpcmVjdGl2ZS5yZXF1aXJlZCA/IGkgLSAxIDogaSAtIDIsXG4gICAgICAgICAgICAgICAgICAgIC0xLFxuICAgICAgICAgICAgICAgICAgICB0aGlzLm1heEl0ZW1zLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgbWF4SXRlbXMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlLml0ZW1zTGltaXQgPiB0aGlzLmRpcmVjdGl2ZS5yZXF1aXJlZFxuICAgICAgICAgICAgPyB0aGlzLmRpcmVjdGl2ZS5pdGVtc0xpbWl0IC0gMVxuICAgICAgICAgICAgOiB0aGlzLmRpcmVjdGl2ZS5pdGVtc0xpbWl0IC0gMjtcbiAgICB9XG59XG4iXX0=