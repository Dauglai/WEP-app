import { ChangeDetectionStrategy, Component, ContentChild, ContentChildren, Inject, TemplateRef, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { EMPTY_QUERY, TuiDestroyService, TuiItemDirective, TuiResizeService, } from '@taiga-ui/cdk';
import { TuiItemsWithMoreDirective } from './items-with-more.directive';
import { TuiItemsWithMoreService } from './items-with-more.service';
import { TuiMoreDirective } from './more.directive';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@taiga-ui/kit/directives";
import * as i4 from "./items-with-more.directive";
import * as i5 from "rxjs";
export class TuiItemsWithMoreComponent {
    constructor(directive, lastVisibleIndex$) {
        this.directive = directive;
        this.lastVisibleIndex$ = lastVisibleIndex$;
        this.items = EMPTY_QUERY;
    }
}
TuiItemsWithMoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreComponent, deps: [{ token: TuiItemsWithMoreDirective }, { token: TuiItemsWithMoreService }], target: i0.ɵɵFactoryTarget.Component });
TuiItemsWithMoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiItemsWithMoreComponent, selector: "tui-items-with-more", providers: [
        MutationObserverService,
        TuiResizeService,
        TuiDestroyService,
        TuiItemsWithMoreService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: {
                childList: true,
                characterData: true,
                subtree: true,
            },
        },
    ], queries: [{ propertyName: "more", first: true, predicate: TuiMoreDirective, descendants: true, read: TemplateRef }, { propertyName: "items", predicate: TuiItemDirective, descendants: true, read: TemplateRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<ng-container *tuiLet=\"(lastVisibleIndex$ | async) || 0 as lastIndex\">\n    <div\n        *ngFor=\"let item of items; let index = index\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"index > lastIndex && index !== directive.required\"\n        [tuiProjectClass]=\"['_active']\"\n    >\n        <ng-container *ngTemplateOutlet=\"item\"></ng-container>\n    </div>\n    <span\n        *ngIf=\"more && lastIndex < items.length - 1\"\n        class=\"t-item\"\n        [class.t-item_hidden]=\"lastIndex >= items.length - 1\"\n        [tuiProjectClass]=\"['_active']\"\n    >\n        <ng-container\n            [ngTemplateOutlet]=\"more\"\n            [ngTemplateOutletContext]=\"{$implicit: lastIndex}\"\n        ></ng-container>\n    </span>\n</ng-container>\n", styles: [":host{position:relative;display:flex;align-items:center;white-space:nowrap}.t-item{flex:0 0 auto}.t-item_hidden{position:absolute;visibility:hidden}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.TuiProjectClassDirective, selector: "[tuiProjectClass]", inputs: ["tuiProjectClass"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiItemsWithMoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-items-with-more',
                    templateUrl: './items-with-more.template.html',
                    styleUrls: ['./items-with-more.style.less'],
                    providers: [
                        MutationObserverService,
                        TuiResizeService,
                        TuiDestroyService,
                        TuiItemsWithMoreService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                                characterData: true,
                                subtree: true,
                            },
                        },
                    ],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i4.TuiItemsWithMoreDirective, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreDirective]
                }] }, { type: i5.Observable, decorators: [{
                    type: Inject,
                    args: [TuiItemsWithMoreService]
                }] }]; }, propDecorators: { items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef, descendants: true }]
            }], more: [{
                type: ContentChild,
                args: [TuiMoreDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaXRlbXMtd2l0aC1tb3JlLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2l0ZW1zLXdpdGgtbW9yZS9pdGVtcy13aXRoLW1vcmUuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaXRlbXMtd2l0aC1tb3JlL2l0ZW1zLXdpdGgtbW9yZS50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFlBQVksRUFDWixlQUFlLEVBQ2YsTUFBTSxFQUVOLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsc0JBQXNCLEVBQ3RCLHVCQUF1QixHQUMxQixNQUFNLGdDQUFnQyxDQUFDO0FBQ3hDLE9BQU8sRUFDSCxXQUFXLEVBRVgsaUJBQWlCLEVBQ2pCLGdCQUFnQixFQUNoQixnQkFBZ0IsR0FDbkIsTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDdEUsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDbEUsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sa0JBQWtCLENBQUM7Ozs7Ozs7QUFzQmxELE1BQU0sT0FBTyx5QkFBeUI7SUFPbEMsWUFDZ0QsU0FBb0MsRUFDdEMsaUJBQXFDO1FBRG5DLGNBQVMsR0FBVCxTQUFTLENBQTJCO1FBQ3RDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBb0I7UUFQMUUsVUFBSyxHQUFvQyxXQUFXLENBQUM7SUFRM0QsQ0FBQzs7dUhBVksseUJBQXlCLGtCQVF0Qix5QkFBeUIsYUFDekIsdUJBQXVCOzJHQVQxQix5QkFBeUIsOENBaEJ2QjtRQUNQLHVCQUF1QjtRQUN2QixnQkFBZ0I7UUFDaEIsaUJBQWlCO1FBQ2pCLHVCQUF1QjtRQUN2QjtZQUNJLE9BQU8sRUFBRSxzQkFBc0I7WUFDL0IsUUFBUSxFQUFFO2dCQUNOLFNBQVMsRUFBRSxJQUFJO2dCQUNmLGFBQWEsRUFBRSxJQUFJO2dCQUNuQixPQUFPLEVBQUUsSUFBSTthQUNoQjtTQUNKO0tBQ0osNERBT2EsZ0JBQWdCLDJCQUFTLFdBQVcsd0NBSGpDLGdCQUFnQiwyQkFBUyxXQUFXLDZCQy9DekQsdTBCQXNCQTs0RkR3QmEseUJBQXlCO2tCQXBCckMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixXQUFXLEVBQUUsaUNBQWlDO29CQUM5QyxTQUFTLEVBQUUsQ0FBQyw4QkFBOEIsQ0FBQztvQkFDM0MsU0FBUyxFQUFFO3dCQUNQLHVCQUF1Qjt3QkFDdkIsZ0JBQWdCO3dCQUNoQixpQkFBaUI7d0JBQ2pCLHVCQUF1Qjt3QkFDdkI7NEJBQ0ksT0FBTyxFQUFFLHNCQUFzQjs0QkFDL0IsUUFBUSxFQUFFO2dDQUNOLFNBQVMsRUFBRSxJQUFJO2dDQUNmLGFBQWEsRUFBRSxJQUFJO2dDQUNuQixPQUFPLEVBQUUsSUFBSTs2QkFDaEI7eUJBQ0o7cUJBQ0o7b0JBQ0QsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOzswQkFTUSxNQUFNOzJCQUFDLHlCQUF5Qjs7MEJBQ2hDLE1BQU07MkJBQUMsdUJBQXVCOzRDQVAxQixLQUFLO3NCQURiLGVBQWU7dUJBQUMsZ0JBQWdCLEVBQUUsRUFBQyxJQUFJLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxJQUFJLEVBQUM7Z0JBSWhFLElBQUk7c0JBRFosWUFBWTt1QkFBQyxnQkFBZ0IsRUFBRSxFQUFDLElBQUksRUFBRSxXQUFXLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGQsXG4gICAgQ29udGVudENoaWxkcmVuLFxuICAgIEluamVjdCxcbiAgICBRdWVyeUxpc3QsXG4gICAgVGVtcGxhdGVSZWYsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgICBNVVRBVElPTl9PQlNFUlZFUl9JTklULFxuICAgIE11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLFxufSBmcm9tICdAbmctd2ViLWFwaXMvbXV0YXRpb24tb2JzZXJ2ZXInO1xuaW1wb3J0IHtcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBUdWlDb250ZXh0V2l0aEltcGxpY2l0LFxuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUl0ZW1EaXJlY3RpdmUsXG4gICAgVHVpUmVzaXplU2VydmljZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge1R1aUl0ZW1zV2l0aE1vcmVEaXJlY3RpdmV9IGZyb20gJy4vaXRlbXMtd2l0aC1tb3JlLmRpcmVjdGl2ZSc7XG5pbXBvcnQge1R1aUl0ZW1zV2l0aE1vcmVTZXJ2aWNlfSBmcm9tICcuL2l0ZW1zLXdpdGgtbW9yZS5zZXJ2aWNlJztcbmltcG9ydCB7VHVpTW9yZURpcmVjdGl2ZX0gZnJvbSAnLi9tb3JlLmRpcmVjdGl2ZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWl0ZW1zLXdpdGgtbW9yZScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2l0ZW1zLXdpdGgtbW9yZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9pdGVtcy13aXRoLW1vcmUuc3R5bGUubGVzcyddLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbiAgICAgICAgVHVpUmVzaXplU2VydmljZSxcbiAgICAgICAgVHVpRGVzdHJveVNlcnZpY2UsXG4gICAgICAgIFR1aUl0ZW1zV2l0aE1vcmVTZXJ2aWNlLFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBNVVRBVElPTl9PQlNFUlZFUl9JTklULFxuICAgICAgICAgICAgdXNlVmFsdWU6IHtcbiAgICAgICAgICAgICAgICBjaGlsZExpc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzdWJ0cmVlOiB0cnVlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICBdLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJdGVtc1dpdGhNb3JlQ29tcG9uZW50IHtcbiAgICBAQ29udGVudENoaWxkcmVuKFR1aUl0ZW1EaXJlY3RpdmUsIHtyZWFkOiBUZW1wbGF0ZVJlZiwgZGVzY2VuZGFudHM6IHRydWV9KVxuICAgIHJlYWRvbmx5IGl0ZW1zOiBRdWVyeUxpc3Q8VGVtcGxhdGVSZWY8dW5rbm93bj4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBAQ29udGVudENoaWxkKFR1aU1vcmVEaXJlY3RpdmUsIHtyZWFkOiBUZW1wbGF0ZVJlZn0pXG4gICAgcmVhZG9ubHkgbW9yZT86IFRlbXBsYXRlUmVmPFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8bnVtYmVyPj47XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUdWlJdGVtc1dpdGhNb3JlRGlyZWN0aXZlKSByZWFkb25seSBkaXJlY3RpdmU6IFR1aUl0ZW1zV2l0aE1vcmVEaXJlY3RpdmUsXG4gICAgICAgIEBJbmplY3QoVHVpSXRlbXNXaXRoTW9yZVNlcnZpY2UpIHJlYWRvbmx5IGxhc3RWaXNpYmxlSW5kZXgkOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgKSB7fVxufVxuIiwiPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW1zLmNoYW5nZXMgfCBhc3luY1wiPjwvbmctY29udGFpbmVyPlxuPG5nLWNvbnRhaW5lciAqdHVpTGV0PVwiKGxhc3RWaXNpYmxlSW5kZXgkIHwgYXN5bmMpIHx8IDAgYXMgbGFzdEluZGV4XCI+XG4gICAgPGRpdlxuICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBpdGVtczsgbGV0IGluZGV4ID0gaW5kZXhcIlxuICAgICAgICBjbGFzcz1cInQtaXRlbVwiXG4gICAgICAgIFtjbGFzcy50LWl0ZW1faGlkZGVuXT1cImluZGV4ID4gbGFzdEluZGV4ICYmIGluZGV4ICE9PSBkaXJlY3RpdmUucmVxdWlyZWRcIlxuICAgICAgICBbdHVpUHJvamVjdENsYXNzXT1cIlsnX2FjdGl2ZSddXCJcbiAgICA+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nVGVtcGxhdGVPdXRsZXQ9XCJpdGVtXCI+PC9uZy1jb250YWluZXI+XG4gICAgPC9kaXY+XG4gICAgPHNwYW5cbiAgICAgICAgKm5nSWY9XCJtb3JlICYmIGxhc3RJbmRleCA8IGl0ZW1zLmxlbmd0aCAtIDFcIlxuICAgICAgICBjbGFzcz1cInQtaXRlbVwiXG4gICAgICAgIFtjbGFzcy50LWl0ZW1faGlkZGVuXT1cImxhc3RJbmRleCA+PSBpdGVtcy5sZW5ndGggLSAxXCJcbiAgICAgICAgW3R1aVByb2plY3RDbGFzc109XCJbJ19hY3RpdmUnXVwiXG4gICAgPlxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICBbbmdUZW1wbGF0ZU91dGxldF09XCJtb3JlXCJcbiAgICAgICAgICAgIFtuZ1RlbXBsYXRlT3V0bGV0Q29udGV4dF09XCJ7JGltcGxpY2l0OiBsYXN0SW5kZXh9XCJcbiAgICAgICAgPjwvbmctY29udGFpbmVyPlxuICAgIDwvc3Bhbj5cbjwvbmctY29udGFpbmVyPlxuIl19