import { Inject, Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import { map, startWith, switchMap, tap } from 'rxjs/operators';
import { TUI_TREE_LOADER, TUI_TREE_LOADING, TUI_TREE_START } from './tree.tokens';
import * as i0 from "@angular/core";
export class TuiTreeService {
    constructor(loading, start, loader) {
        this.loading = loading;
        this.start = start;
        this.loader = loader;
        this.map = new Map([[this.loading, []]]);
        this.load$ = new Subject();
        this.data$ = this.load$.pipe(switchMap(item => this.loader.loadChildren(item).pipe(tap(children => this.map.set(item, children)), map(children => children.filter(item => !this.loader.hasChildren(item))), tap(children => children.forEach(child => this.map.set(child, []))))), startWith(null), map(() => this.start));
    }
    getChildren(item) {
        return this.map.get(item) || [this.loading];
    }
    loadChildren(item) {
        if (this.map.get(item)) {
            return;
        }
        this.map.set(item, [this.loading]);
        this.load$.next(item);
    }
}
TuiTreeService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeService, deps: [{ token: TUI_TREE_LOADING }, { token: TUI_TREE_START }, { token: TUI_TREE_LOADER }], target: i0.ɵɵFactoryTarget.Injectable });
TuiTreeService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TREE_LOADING]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TREE_START]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TREE_LOADER]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdHJlZS9taXNjL3RyZWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQzdCLE9BQU8sRUFBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUc5RCxPQUFPLEVBQUMsZUFBZSxFQUFFLGdCQUFnQixFQUFFLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7QUFHaEYsTUFBTSxPQUFPLGNBQWM7SUFpQnZCLFlBQytDLE9BQVUsRUFDWixLQUFRLEVBQ1AsTUFBd0I7UUFGdkIsWUFBTyxHQUFQLE9BQU8sQ0FBRztRQUNaLFVBQUssR0FBTCxLQUFLLENBQUc7UUFDUCxXQUFNLEdBQU4sTUFBTSxDQUFrQjtRQW5CckQsUUFBRyxHQUFHLElBQUksR0FBRyxDQUFrQixDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFckQsVUFBSyxHQUFHLElBQUksT0FBTyxFQUFLLENBQUM7UUFFakMsVUFBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUM1QixTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FDYixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQy9CLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQyxFQUM3QyxHQUFHLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3hFLEdBQUcsQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUN0RSxDQUNKLEVBQ0QsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQ3hCLENBQUM7SUFNQyxDQUFDO0lBRUosV0FBVyxDQUFDLElBQU87UUFDZixPQUFPLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUM7SUFFRCxZQUFZLENBQUMsSUFBTztRQUNoQixJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3BCLE9BQU87U0FDVjtRQUVELElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO1FBQ25DLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzFCLENBQUM7OzRHQWxDUSxjQUFjLGtCQWtCWCxnQkFBZ0IsYUFDaEIsY0FBYyxhQUNkLGVBQWU7Z0hBcEJsQixjQUFjOzRGQUFkLGNBQWM7a0JBRDFCLFVBQVU7OzBCQW1CRixNQUFNOzJCQUFDLGdCQUFnQjs7MEJBQ3ZCLE1BQU07MkJBQUMsY0FBYzs7MEJBQ3JCLE1BQU07MkJBQUMsZUFBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgc3RhcnRXaXRoLCBzd2l0Y2hNYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVRyZWVMb2FkZXJ9IGZyb20gJy4vdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfTE9BREVSLCBUVUlfVFJFRV9MT0FESU5HLCBUVUlfVFJFRV9TVEFSVH0gZnJvbSAnLi90cmVlLnRva2Vucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUdWlUcmVlU2VydmljZTxUPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBtYXAgPSBuZXcgTWFwPFQsIHJlYWRvbmx5IFRbXT4oW1t0aGlzLmxvYWRpbmcsIFtdXV0pO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSBsb2FkJCA9IG5ldyBTdWJqZWN0PFQ+KCk7XG5cbiAgICByZWFkb25seSBkYXRhJCA9IHRoaXMubG9hZCQucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKGl0ZW0gPT5cbiAgICAgICAgICAgIHRoaXMubG9hZGVyLmxvYWRDaGlsZHJlbihpdGVtKS5waXBlKFxuICAgICAgICAgICAgICAgIHRhcChjaGlsZHJlbiA9PiB0aGlzLm1hcC5zZXQoaXRlbSwgY2hpbGRyZW4pKSxcbiAgICAgICAgICAgICAgICBtYXAoY2hpbGRyZW4gPT4gY2hpbGRyZW4uZmlsdGVyKGl0ZW0gPT4gIXRoaXMubG9hZGVyLmhhc0NoaWxkcmVuKGl0ZW0pKSksXG4gICAgICAgICAgICAgICAgdGFwKGNoaWxkcmVuID0+IGNoaWxkcmVuLmZvckVhY2goY2hpbGQgPT4gdGhpcy5tYXAuc2V0KGNoaWxkLCBbXSkpKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICksXG4gICAgICAgIHN0YXJ0V2l0aChudWxsKSxcbiAgICAgICAgbWFwKCgpID0+IHRoaXMuc3RhcnQpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfVFJFRV9MT0FESU5HKSBwcml2YXRlIHJlYWRvbmx5IGxvYWRpbmc6IFQsXG4gICAgICAgIEBJbmplY3QoVFVJX1RSRUVfU1RBUlQpIHByaXZhdGUgcmVhZG9ubHkgc3RhcnQ6IFQsXG4gICAgICAgIEBJbmplY3QoVFVJX1RSRUVfTE9BREVSKSBwcml2YXRlIHJlYWRvbmx5IGxvYWRlcjogVHVpVHJlZUxvYWRlcjxUPixcbiAgICApIHt9XG5cbiAgICBnZXRDaGlsZHJlbihpdGVtOiBUKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChpdGVtKSB8fCBbdGhpcy5sb2FkaW5nXTtcbiAgICB9XG5cbiAgICBsb2FkQ2hpbGRyZW4oaXRlbTogVCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5tYXAuZ2V0KGl0ZW0pKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm1hcC5zZXQoaXRlbSwgW3RoaXMubG9hZGluZ10pO1xuICAgICAgICB0aGlzLmxvYWQkLm5leHQoaXRlbSk7XG4gICAgfVxufVxuIl19