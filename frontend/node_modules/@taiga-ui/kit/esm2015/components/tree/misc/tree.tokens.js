import { InjectionToken } from '@angular/core';
// TODO: find the best way for prevent cycle
// eslint-disable-next-line import/no-cycle
import { TUI_DEFAULT_TREE_CONTROLLER, TUI_TREE_ITEM_CONTENT } from './tree.constants';
/**
 * Controller for tracking value - TuiTreeItemComponent pairs
 */
export const TUI_TREE_ACCESSOR = new InjectionToken(`[TUI_TREE_ACCESSOR]`);
/**
 * Controller for expanding the tree
 */
export const TUI_TREE_CONTROLLER = new InjectionToken(`[TUI_TREE_CONTROLLER]`, {
    factory: () => TUI_DEFAULT_TREE_CONTROLLER,
});
/**
 * A node of a tree view
 */
export const TUI_TREE_NODE = new InjectionToken(`[TUI_TREE_NODE]`);
/**
 * A tree node placeholder for loading
 */
export const TUI_TREE_LOADING = new InjectionToken(`[TUI_TREE_LOADING]`, {
    factory: () => ({}),
});
/**
 * A tree node starting point
 */
export const TUI_TREE_START = new InjectionToken(`[TUI_TREE_START]`);
/**
 * A service to load tree progressively
 */
export const TUI_TREE_LOADER = new InjectionToken(`[TUI_TREE_LOADER]`);
/**
 * Content for a tree item
 */
export const TUI_TREE_CONTENT = new InjectionToken(`[TUI_TREE_CONTENT]`, {
    factory: () => TUI_TREE_ITEM_CONTENT,
});
/**
 * Nesting level of current TreeView node
 */
export const TUI_TREE_LEVEL = new InjectionToken(`[TUI_TREE_LEVEL]`, {
    factory: () => -1,
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS50b2tlbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90cmVlL21pc2MvdHJlZS50b2tlbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUc3Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sRUFBQywyQkFBMkIsRUFBRSxxQkFBcUIsRUFBQyxNQUFNLGtCQUFrQixDQUFDO0FBUXBGOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxjQUFjLENBQy9DLHFCQUFxQixDQUN4QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxJQUFJLGNBQWMsQ0FDakQsdUJBQXVCLEVBQ3ZCO0lBQ0ksT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLDJCQUEyQjtDQUM3QyxDQUNKLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0FBRW5FOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsSUFBSSxjQUFjLENBQUMsb0JBQW9CLEVBQUU7SUFDckUsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0NBQ3RCLENBQUMsQ0FBQztBQUVIOztHQUVHO0FBQ0gsTUFBTSxDQUFDLE1BQU0sY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLGtCQUFrQixDQUFDLENBQUM7QUFFckU7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQzdDLG1CQUFtQixDQUN0QixDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBRyxJQUFJLGNBQWMsQ0FFaEQsb0JBQW9CLEVBQUU7SUFDcEIsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLHFCQUFxQjtDQUN2QyxDQUFDLENBQUM7QUFFSDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxJQUFJLGNBQWMsQ0FBUyxrQkFBa0IsRUFBRTtJQUN6RSxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDO0NBQ3BCLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0aW9uVG9rZW59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG4vLyBUT0RPOiBmaW5kIHRoZSBiZXN0IHdheSBmb3IgcHJldmVudCBjeWNsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuaW1wb3J0IHtUVUlfREVGQVVMVF9UUkVFX0NPTlRST0xMRVIsIFRVSV9UUkVFX0lURU1fQ09OVEVOVH0gZnJvbSAnLi90cmVlLmNvbnN0YW50cyc7XG5pbXBvcnQgdHlwZSB7XG4gICAgVHVpVHJlZUFjY2Vzc29yLFxuICAgIFR1aVRyZWVDb250cm9sbGVyLFxuICAgIFR1aVRyZWVJdGVtQ29udGV4dCxcbiAgICBUdWlUcmVlTG9hZGVyLFxufSBmcm9tICcuL3RyZWUuaW50ZXJmYWNlcyc7XG5cbi8qKlxuICogQ29udHJvbGxlciBmb3IgdHJhY2tpbmcgdmFsdWUgLSBUdWlUcmVlSXRlbUNvbXBvbmVudCBwYWlyc1xuICovXG5leHBvcnQgY29uc3QgVFVJX1RSRUVfQUNDRVNTT1IgPSBuZXcgSW5qZWN0aW9uVG9rZW48VHVpVHJlZUFjY2Vzc29yPHVua25vd24+PihcbiAgICBgW1RVSV9UUkVFX0FDQ0VTU09SXWAsXG4pO1xuXG4vKipcbiAqIENvbnRyb2xsZXIgZm9yIGV4cGFuZGluZyB0aGUgdHJlZVxuICovXG5leHBvcnQgY29uc3QgVFVJX1RSRUVfQ09OVFJPTExFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlUcmVlQ29udHJvbGxlcj4oXG4gICAgYFtUVUlfVFJFRV9DT05UUk9MTEVSXWAsXG4gICAge1xuICAgICAgICBmYWN0b3J5OiAoKSA9PiBUVUlfREVGQVVMVF9UUkVFX0NPTlRST0xMRVIsXG4gICAgfSxcbik7XG5cbi8qKlxuICogQSBub2RlIG9mIGEgdHJlZSB2aWV3XG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfVFJFRV9OT0RFID0gbmV3IEluamVjdGlvblRva2VuKGBbVFVJX1RSRUVfTk9ERV1gKTtcblxuLyoqXG4gKiBBIHRyZWUgbm9kZSBwbGFjZWhvbGRlciBmb3IgbG9hZGluZ1xuICovXG5leHBvcnQgY29uc3QgVFVJX1RSRUVfTE9BRElORyA9IG5ldyBJbmplY3Rpb25Ub2tlbihgW1RVSV9UUkVFX0xPQURJTkddYCwge1xuICAgIGZhY3Rvcnk6ICgpID0+ICh7fSksXG59KTtcblxuLyoqXG4gKiBBIHRyZWUgbm9kZSBzdGFydGluZyBwb2ludFxuICovXG5leHBvcnQgY29uc3QgVFVJX1RSRUVfU1RBUlQgPSBuZXcgSW5qZWN0aW9uVG9rZW4oYFtUVUlfVFJFRV9TVEFSVF1gKTtcblxuLyoqXG4gKiBBIHNlcnZpY2UgdG8gbG9hZCB0cmVlIHByb2dyZXNzaXZlbHlcbiAqL1xuZXhwb3J0IGNvbnN0IFRVSV9UUkVFX0xPQURFUiA9IG5ldyBJbmplY3Rpb25Ub2tlbjxUdWlUcmVlTG9hZGVyPHVua25vd24+PihcbiAgICBgW1RVSV9UUkVFX0xPQURFUl1gLFxuKTtcblxuLyoqXG4gKiBDb250ZW50IGZvciBhIHRyZWUgaXRlbVxuICovXG5leHBvcnQgY29uc3QgVFVJX1RSRUVfQ09OVEVOVCA9IG5ldyBJbmplY3Rpb25Ub2tlbjxcbiAgICBQb2x5bW9ycGhldXNDb250ZW50PFR1aVRyZWVJdGVtQ29udGV4dD5cbj4oYFtUVUlfVFJFRV9DT05URU5UXWAsIHtcbiAgICBmYWN0b3J5OiAoKSA9PiBUVUlfVFJFRV9JVEVNX0NPTlRFTlQsXG59KTtcblxuLyoqXG4gKiBOZXN0aW5nIGxldmVsIG9mIGN1cnJlbnQgVHJlZVZpZXcgbm9kZVxuICovXG5leHBvcnQgY29uc3QgVFVJX1RSRUVfTEVWRUwgPSBuZXcgSW5qZWN0aW9uVG9rZW48bnVtYmVyPihgW1RVSV9UUkVFX0xFVkVMXWAsIHtcbiAgICBmYWN0b3J5OiAoKSA9PiAtMSxcbn0pO1xuIl19