import { ChangeDetectionStrategy, Component, Inject, Input, Optional, ViewChild, } from '@angular/core';
import { Subject } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TuiTreeChildrenDirective } from '../../directives/tree-children.directive';
import { TUI_TREE_NODE } from '../../misc/tree.tokens';
import { TuiTreeItemComponent } from '../tree-item/tree-item.component';
import * as i0 from "@angular/core";
import * as i1 from "../tree-item/tree-item.component";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "../../directives/tree-node.directive";
import * as i4 from "@angular/common";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "../../directives/tree-children.directive";
export class TuiTreeComponent {
    constructor(directive) {
        this.directive = directive;
        this.check$ = new Subject();
        this.children$ = this.check$.pipe(startWith(null), map(() => this.handler(this.value)), distinctUntilChanged());
        this.content = ({ $implicit }) => String($implicit);
    }
    ngDoCheck() {
        this.checkChanges();
    }
    checkChanges() {
        var _a, _b;
        this.check$.next();
        (_a = this.item) === null || _a === void 0 ? void 0 : _a.checkChanges();
        (_b = this.child) === null || _b === void 0 ? void 0 : _b.checkChanges();
    }
    get handler() {
        var _a;
        return ((_a = this.directive) === null || _a === void 0 ? void 0 : _a.childrenHandler) || TuiTreeChildrenDirective.defaultHandler;
    }
}
TuiTreeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeComponent, deps: [{ token: TuiTreeChildrenDirective, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeComponent, selector: "tui-tree[value]", inputs: { value: "value", content: "content" }, host: { attributes: { "role": "tree" } }, providers: [
        {
            provide: TUI_TREE_NODE,
            useExisting: TuiTreeComponent,
        },
    ], viewQueries: [{ propertyName: "item", first: true, predicate: TuiTreeItemComponent, descendants: true }, { propertyName: "child", first: true, predicate: TuiTreeComponent, descendants: true }], ngImport: i0, template: "<tui-tree-item\n    *tuiLet=\"children$ | async as children\"\n    #view\n    [tuiTreeNode]=\"value\"\n>\n    <ng-container *ngIf=\"$any(value) !== children\">\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: value, node: view}\">\n            {{ text }}\n        </ng-container>\n    </ng-container>\n    <tui-tree\n        *ngFor=\"let child of children\"\n        [value]=\"child\"\n        [content]=\"content\"\n    ></tui-tree>\n</tui-tree-item>\n", styles: [":host{position:relative;display:block}\n"], components: [{ type: i1.TuiTreeItemComponent, selector: "tui-tree-item" }, { type: TuiTreeComponent, selector: "tui-tree[value]", inputs: ["value", "content"] }], directives: [{ type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i3.TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: ["tuiTreeNode"] }, { type: i4.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i4.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], pipes: { "async": i4.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree[value]',
                    templateUrl: './tree.template.html',
                    styleUrls: ['./tree.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        {
                            provide: TUI_TREE_NODE,
                            useExisting: TuiTreeComponent,
                        },
                    ],
                    host: {
                        role: 'tree',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i6.TuiTreeChildrenDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiTreeChildrenDirective]
                }] }]; }, propDecorators: { value: [{
                type: Input
            }], item: [{
                type: ViewChild,
                args: [TuiTreeItemComponent]
            }], child: [{
                type: ViewChild,
                args: [TuiTreeComponent]
            }], content: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90cmVlL2NvbXBvbmVudHMvdHJlZS90cmVlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlL3RyZWUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFFVCxNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFDUixTQUFTLEdBQ1osTUFBTSxlQUFlLENBQUM7QUFHdkIsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QixPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLDBDQUEwQyxDQUFDO0FBRWxGLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUNyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQzs7Ozs7Ozs7QUFpQnRFLE1BQU0sT0FBTyxnQkFBZ0I7SUFrQnpCLFlBR2EsU0FBNkM7UUFBN0MsY0FBUyxHQUFULFNBQVMsQ0FBb0M7UUFwQnpDLFdBQU0sR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO1FBV3JDLGNBQVMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FDakMsU0FBUyxDQUFDLElBQUksQ0FBQyxFQUNmLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUNuQyxvQkFBb0IsRUFBRSxDQUN6QixDQUFDO1FBU0YsWUFBTyxHQUEyQyxDQUFDLEVBQUMsU0FBUyxFQUFDLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUhsRixDQUFDO0lBS0osU0FBUztRQUNMLElBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUN4QixDQUFDO0lBRUQsWUFBWTs7UUFDUixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO1FBQ25CLE1BQUEsSUFBSSxDQUFDLElBQUksMENBQUUsWUFBWSxFQUFFLENBQUM7UUFDMUIsTUFBQSxJQUFJLENBQUMsS0FBSywwQ0FBRSxZQUFZLEVBQUUsQ0FBQztJQUMvQixDQUFDO0lBRUQsSUFBWSxPQUFPOztRQUNmLE9BQU8sQ0FBQSxNQUFBLElBQUksQ0FBQyxTQUFTLDBDQUFFLGVBQWUsS0FBSSx3QkFBd0IsQ0FBQyxjQUFjLENBQUM7SUFDdEYsQ0FBQzs7OEdBdkNRLGdCQUFnQixrQkFvQmIsd0JBQXdCO2tHQXBCM0IsZ0JBQWdCLG9JQVZkO1FBQ1A7WUFDSSxPQUFPLEVBQUUsYUFBYTtZQUN0QixXQUFXLEVBQUUsZ0JBQWdCO1NBQ2hDO0tBQ0osZ0VBV1Usb0JBQW9CLHdFQUdwQixnQkFBZ0IsZ0RDM0MvQix5ZUFnQkEsMklEa0JhLGdCQUFnQjs0RkFBaEIsZ0JBQWdCO2tCQWY1QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFdBQVcsRUFBRSxzQkFBc0I7b0JBQ25DLFNBQVMsRUFBRSxDQUFDLG1CQUFtQixDQUFDO29CQUNoQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxhQUFhOzRCQUN0QixXQUFXLGtCQUFrQjt5QkFDaEM7cUJBQ0o7b0JBQ0QsSUFBSSxFQUFFO3dCQUNGLElBQUksRUFBRSxNQUFNO3FCQUNmO2lCQUNKOzswQkFvQlEsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyx3QkFBd0I7NENBaEJwQyxLQUFLO3NCQURKLEtBQUs7Z0JBSUcsSUFBSTtzQkFEWixTQUFTO3VCQUFDLG9CQUFvQjtnQkFJdEIsS0FBSztzQkFEYixTQUFTO3VCQUFDLGdCQUFnQjtnQkFnQjNCLE9BQU87c0JBRE4sS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIERvQ2hlY2ssXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9wdGlvbmFsLFxuICAgIFZpZXdDaGlsZCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aUhhbmRsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc3RhcnRXaXRofSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7VHVpVHJlZUNoaWxkcmVuRGlyZWN0aXZlfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL3RyZWUtY2hpbGRyZW4uZGlyZWN0aXZlJztcbmltcG9ydCB7VHVpVHJlZUNvbnRleHR9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfTk9ERX0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLnRva2Vucyc7XG5pbXBvcnQge1R1aVRyZWVJdGVtQ29tcG9uZW50fSBmcm9tICcuLi90cmVlLWl0ZW0vdHJlZS1pdGVtLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRyZWVbdmFsdWVdJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZS50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90cmVlLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RSRUVfTk9ERSxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBUdWlUcmVlQ29tcG9uZW50LFxuICAgICAgICB9LFxuICAgIF0sXG4gICAgaG9zdDoge1xuICAgICAgICByb2xlOiAndHJlZScsXG4gICAgfSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZUNvbXBvbmVudDxUPiBpbXBsZW1lbnRzIERvQ2hlY2sge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY2hlY2skID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICAgIEBJbnB1dCgpXG4gICAgdmFsdWUhOiBUO1xuXG4gICAgQFZpZXdDaGlsZChUdWlUcmVlSXRlbUNvbXBvbmVudClcbiAgICByZWFkb25seSBpdGVtPzogVHVpVHJlZUl0ZW1Db21wb25lbnQ7XG5cbiAgICBAVmlld0NoaWxkKFR1aVRyZWVDb21wb25lbnQpXG4gICAgcmVhZG9ubHkgY2hpbGQ/OiBUdWlUcmVlQ29tcG9uZW50PFQ+O1xuXG4gICAgcmVhZG9ubHkgY2hpbGRyZW4kID0gdGhpcy5jaGVjayQucGlwZShcbiAgICAgICAgc3RhcnRXaXRoKG51bGwpLFxuICAgICAgICBtYXAoKCkgPT4gdGhpcy5oYW5kbGVyKHRoaXMudmFsdWUpKSxcbiAgICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpVHJlZUNoaWxkcmVuRGlyZWN0aXZlKVxuICAgICAgICByZWFkb25seSBkaXJlY3RpdmU6IFR1aVRyZWVDaGlsZHJlbkRpcmVjdGl2ZTxUPiB8IG51bGwsXG4gICAgKSB7fVxuXG4gICAgQElucHV0KClcbiAgICBjb250ZW50OiBQb2x5bW9ycGhldXNDb250ZW50PFR1aVRyZWVDb250ZXh0PFQ+PiA9ICh7JGltcGxpY2l0fSkgPT4gU3RyaW5nKCRpbXBsaWNpdCk7XG5cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hlY2tDaGFuZ2VzKCk7XG4gICAgfVxuXG4gICAgY2hlY2tDaGFuZ2VzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoZWNrJC5uZXh0KCk7XG4gICAgICAgIHRoaXMuaXRlbT8uY2hlY2tDaGFuZ2VzKCk7XG4gICAgICAgIHRoaXMuY2hpbGQ/LmNoZWNrQ2hhbmdlcygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IGhhbmRsZXIoKTogVHVpSGFuZGxlcjxULCByZWFkb25seSBUW10+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlyZWN0aXZlPy5jaGlsZHJlbkhhbmRsZXIgfHwgVHVpVHJlZUNoaWxkcmVuRGlyZWN0aXZlLmRlZmF1bHRIYW5kbGVyO1xuICAgIH1cbn1cbiIsIjx0dWktdHJlZS1pdGVtXG4gICAgKnR1aUxldD1cImNoaWxkcmVuJCB8IGFzeW5jIGFzIGNoaWxkcmVuXCJcbiAgICAjdmlld1xuICAgIFt0dWlUcmVlTm9kZV09XCJ2YWx1ZVwiXG4+XG4gICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiRhbnkodmFsdWUpICE9PSBjaGlsZHJlblwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJjb250ZW50IGFzIHRleHQ7IGNvbnRleHQ6IHskaW1wbGljaXQ6IHZhbHVlLCBub2RlOiB2aWV3fVwiPlxuICAgICAgICAgICAge3sgdGV4dCB9fVxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8dHVpLXRyZWVcbiAgICAgICAgKm5nRm9yPVwibGV0IGNoaWxkIG9mIGNoaWxkcmVuXCJcbiAgICAgICAgW3ZhbHVlXT1cImNoaWxkXCJcbiAgICAgICAgW2NvbnRlbnRdPVwiY29udGVudFwiXG4gICAgPjwvdHVpLXRyZWU+XG48L3R1aS10cmVlLWl0ZW0+XG4iXX0=