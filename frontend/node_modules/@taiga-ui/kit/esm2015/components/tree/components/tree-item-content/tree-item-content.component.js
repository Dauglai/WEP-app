import { ChangeDetectionStrategy, Component, forwardRef, HostBinding, Inject, } from '@angular/core';
import { POLYMORPHEUS_CONTEXT } from '@tinkoff/ng-polymorpheus';
// TODO: find the best way for prevent cycle
// eslint-disable-next-line import/no-cycle
import { TUI_DEFAULT_TREE_CONTROLLER } from '../../misc/tree.constants';
// eslint-disable-next-line import/no-cycle
import { TUI_TREE_CONTROLLER } from '../../misc/tree.tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
export class TuiTreeItemContentComponent {
    constructor(context, controller) {
        this.context = context;
        this.controller = controller;
    }
    get isExpanded() {
        return this.context.$implicit.isExpanded;
    }
    get isExpandable() {
        return (this.context.$implicit.isExpandable &&
            this.controller !== TUI_DEFAULT_TREE_CONTROLLER);
    }
    onClick() {
        this.controller.toggle(this.context.$implicit);
    }
}
TuiTreeItemContentComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemContentComponent, deps: [{ token: POLYMORPHEUS_CONTEXT }, { token: forwardRef(() => TUI_TREE_CONTROLLER) }], target: i0.ɵɵFactoryTarget.Component });
TuiTreeItemContentComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemContentComponent, selector: "tui-tree-item-content", host: { properties: { "class._expandable": "this.isExpandable" } }, ngImport: i0, template: "<button\n    *ngIf=\"isExpandable\"\n    tuiIconButton\n    size=\"xs\"\n    appearance=\"flat\"\n    icon=\"tuiIconChevronRight\"\n    shape=\"rounded\"\n    type=\"button\"\n    class=\"t-button\"\n    [class.t-button_expanded]=\"isExpanded\"\n    (click)=\"onClick()\"\n></button>\n<ng-container [ngTemplateOutlet]=\"context.template\"></ng-container>\n", styles: [":host{display:flex;align-items:center}:host :host-context(tui-tree-item._expandable):not(._expandable){padding-left:2rem}.t-button{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:.5rem}.t-button_expanded{transform:rotate(90deg)}\n"], components: [{ type: i1.TuiButtonComponent, selector: "button[tuiButton], button[tuiIconButton], a[tuiButton], a[tuiIconButton]", inputs: ["appearance", "disabled", "icon", "iconRight", "shape", "showLoader", "size"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemContentComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tree-item-content',
                    templateUrl: './tree-item-content.template.html',
                    styleUrls: ['./tree-item-content.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TUI_TREE_CONTROLLER)]
                }] }]; }, propDecorators: { isExpandable: [{
                type: HostBinding,
                args: ['class._expandable']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLWNvbnRlbnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdHJlZS9jb21wb25lbnRzL3RyZWUtaXRlbS1jb250ZW50L3RyZWUtaXRlbS1jb250ZW50LmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvY29tcG9uZW50cy90cmVlLWl0ZW0tY29udGVudC90cmVlLWl0ZW0tY29udGVudC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixXQUFXLEVBQ1gsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRTlELDRDQUE0QztBQUM1QywyQ0FBMkM7QUFDM0MsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFFdEUsMkNBQTJDO0FBQzNDLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7O0FBUTNELE1BQU0sT0FBTywyQkFBMkI7SUFDcEMsWUFDMkMsT0FBMkIsRUFFakQsVUFBNkI7UUFGUCxZQUFPLEdBQVAsT0FBTyxDQUFvQjtRQUVqRCxlQUFVLEdBQVYsVUFBVSxDQUFtQjtJQUMvQyxDQUFDO0lBRUosSUFBSSxVQUFVO1FBQ1YsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUM7SUFDN0MsQ0FBQztJQUVELElBQ0ksWUFBWTtRQUNaLE9BQU8sQ0FDSCxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxZQUFZO1lBQ25DLElBQUksQ0FBQyxVQUFVLEtBQUssMkJBQTJCLENBQ2xELENBQUM7SUFDTixDQUFDO0lBRUQsT0FBTztRQUNILElBQUksQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7eUhBckJRLDJCQUEyQixrQkFFeEIsb0JBQW9CLGFBQ3BCLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQzs2R0FIeEMsMkJBQTJCLGlJQ3RCeEMsc1dBYUE7NEZEU2EsMkJBQTJCO2tCQU52QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFdBQVcsRUFBRSxtQ0FBbUM7b0JBQ2hELFNBQVMsRUFBRSxDQUFDLGdDQUFnQyxDQUFDO29CQUM3QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OzBCQUdRLE1BQU07MkJBQUMsb0JBQW9COzswQkFDM0IsTUFBTTsyQkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsbUJBQW1CLENBQUM7NENBUzdDLFlBQVk7c0JBRGYsV0FBVzt1QkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBmb3J3YXJkUmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEluamVjdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1BPTFlNT1JQSEVVU19DT05URVhUfSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG4vLyBUT0RPOiBmaW5kIHRoZSBiZXN0IHdheSBmb3IgcHJldmVudCBjeWNsZVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuaW1wb3J0IHtUVUlfREVGQVVMVF9UUkVFX0NPTlRST0xMRVJ9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5jb25zdGFudHMnO1xuaW1wb3J0IHR5cGUge1R1aVRyZWVDb250cm9sbGVyLCBUdWlUcmVlSXRlbUNvbnRleHR9IGZyb20gJy4uLy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCB7VFVJX1RSRUVfQ09OVFJPTExFUn0gZnJvbSAnLi4vLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRyZWUtaXRlbS1jb250ZW50JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdHJlZS1pdGVtLWNvbnRlbnQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdHJlZS1pdGVtLWNvbnRlbnQuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUcmVlSXRlbUNvbnRlbnRDb21wb25lbnQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFBPTFlNT1JQSEVVU19DT05URVhUKSByZWFkb25seSBjb250ZXh0OiBUdWlUcmVlSXRlbUNvbnRleHQsXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUVUlfVFJFRV9DT05UUk9MTEVSKSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb250cm9sbGVyOiBUdWlUcmVlQ29udHJvbGxlcixcbiAgICApIHt9XG5cbiAgICBnZXQgaXNFeHBhbmRlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dC4kaW1wbGljaXQuaXNFeHBhbmRlZDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9leHBhbmRhYmxlJylcbiAgICBnZXQgaXNFeHBhbmRhYmxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LiRpbXBsaWNpdC5pc0V4cGFuZGFibGUgJiZcbiAgICAgICAgICAgIHRoaXMuY29udHJvbGxlciAhPT0gVFVJX0RFRkFVTFRfVFJFRV9DT05UUk9MTEVSXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgb25DbGljaygpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jb250cm9sbGVyLnRvZ2dsZSh0aGlzLmNvbnRleHQuJGltcGxpY2l0KTtcbiAgICB9XG59XG4iLCI8YnV0dG9uXG4gICAgKm5nSWY9XCJpc0V4cGFuZGFibGVcIlxuICAgIHR1aUljb25CdXR0b25cbiAgICBzaXplPVwieHNcIlxuICAgIGFwcGVhcmFuY2U9XCJmbGF0XCJcbiAgICBpY29uPVwidHVpSWNvbkNoZXZyb25SaWdodFwiXG4gICAgc2hhcGU9XCJyb3VuZGVkXCJcbiAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICBjbGFzcz1cInQtYnV0dG9uXCJcbiAgICBbY2xhc3MudC1idXR0b25fZXhwYW5kZWRdPVwiaXNFeHBhbmRlZFwiXG4gICAgKGNsaWNrKT1cIm9uQ2xpY2soKVwiXG4+PC9idXR0b24+XG48bmctY29udGFpbmVyIFtuZ1RlbXBsYXRlT3V0bGV0XT1cImNvbnRleHQudGVtcGxhdGVcIj48L25nLWNvbnRhaW5lcj5cbiJdfQ==