import { __decorate } from "tslib";
import { Directive, Input } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk';
import { TUI_TREE_CONTROLLER } from '../misc/tree.tokens';
import * as i0 from "@angular/core";
export class TuiTreeItemControllerDirective {
    constructor() {
        this.map = new WeakMap();
        this.fallback = true;
    }
    isExpanded(item) {
        var _a;
        return (_a = this.map.get(item)) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        this.map.set(item, !this.isExpanded(item));
    }
}
TuiTreeItemControllerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemControllerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeItemControllerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeItemControllerDirective, selector: "[tuiTreeController]:not([map])", inputs: { fallback: ["tuiTreeController", "fallback"] }, providers: [
        {
            provide: TUI_TREE_CONTROLLER,
            useExisting: TuiTreeItemControllerDirective,
        },
    ], exportAs: ["tuiTreeController"], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiTreeItemControllerDirective.prototype, "fallback", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeItemControllerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTreeController]:not([map])',
                    exportAs: 'tuiTreeController',
                    providers: [
                        {
                            provide: TUI_TREE_CONTROLLER,
                            useExisting: TuiTreeItemControllerDirective,
                        },
                    ],
                }]
        }], propDecorators: { fallback: [{
                type: Input,
                args: ['tuiTreeController']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1pdGVtLWNvbnRyb2xsZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdHJlZS9kaXJlY3RpdmVzL3RyZWUtaXRlbS1jb250cm9sbGVyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0MsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUk3QyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQzs7QUFZeEQsTUFBTSxPQUFPLDhCQUE4QjtJQVYzQztRQVdxQixRQUFHLEdBQUcsSUFBSSxPQUFPLEVBQWlDLENBQUM7UUFJcEUsYUFBUSxHQUFHLElBQUksQ0FBQztLQVNuQjtJQVBHLFVBQVUsQ0FBQyxJQUEwQjs7UUFDakMsT0FBTyxNQUFBLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxtQ0FBSSxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQy9DLENBQUM7SUFFRCxNQUFNLENBQUMsSUFBMEI7UUFDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7OzRIQWJRLDhCQUE4QjtnSEFBOUIsOEJBQThCLGtIQVA1QjtRQUNQO1lBQ0ksT0FBTyxFQUFFLG1CQUFtQjtZQUM1QixXQUFXLEVBQUUsOEJBQThCO1NBQzlDO0tBQ0o7QUFPRDtJQURDLGNBQWMsRUFBRTtnRUFDRDs0RkFMUCw4QkFBOEI7a0JBVjFDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGdDQUFnQztvQkFDMUMsUUFBUSxFQUFFLG1CQUFtQjtvQkFDN0IsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxtQkFBbUI7NEJBQzVCLFdBQVcsZ0NBQWdDO3lCQUM5QztxQkFDSjtpQkFDSjs4QkFNRyxRQUFRO3NCQUZQLEtBQUs7dUJBQUMsbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIElucHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3B9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5pbXBvcnQge1R1aVRyZWVJdGVtQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL3RyZWUtaXRlbS90cmVlLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7VHVpVHJlZUNvbnRyb2xsZXJ9IGZyb20gJy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfQ09OVFJPTExFUn0gZnJvbSAnLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRyZWVDb250cm9sbGVyXTpub3QoW21hcF0pJyxcbiAgICBleHBvcnRBczogJ3R1aVRyZWVDb250cm9sbGVyJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RSRUVfQ09OVFJPTExFUixcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBUdWlUcmVlSXRlbUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZUl0ZW1Db250cm9sbGVyRGlyZWN0aXZlIGltcGxlbWVudHMgVHVpVHJlZUNvbnRyb2xsZXIge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgbWFwID0gbmV3IFdlYWtNYXA8VHVpVHJlZUl0ZW1Db21wb25lbnQsIGJvb2xlYW4+KCk7XG5cbiAgICBASW5wdXQoJ3R1aVRyZWVDb250cm9sbGVyJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGZhbGxiYWNrID0gdHJ1ZTtcblxuICAgIGlzRXhwYW5kZWQoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubWFwLmdldChpdGVtKSA/PyB0aGlzLmZhbGxiYWNrO1xuICAgIH1cblxuICAgIHRvZ2dsZShpdGVtOiBUdWlUcmVlSXRlbUNvbXBvbmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLm1hcC5zZXQoaXRlbSwgIXRoaXMuaXNFeHBhbmRlZChpdGVtKSk7XG4gICAgfVxufVxuIl19