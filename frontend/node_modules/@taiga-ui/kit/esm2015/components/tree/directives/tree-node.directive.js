import { Directive, Inject, Input, Optional } from '@angular/core';
import { TuiTreeItemComponent } from '../components/tree-item/tree-item.component';
import { TUI_TREE_ACCESSOR } from '../misc/tree.tokens';
import * as i0 from "@angular/core";
import * as i1 from "../components/tree-item/tree-item.component";
export class TuiTreeNodeDirective {
    constructor(directive, component) {
        this.directive = directive;
        this.component = component;
    }
    set value(value) {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.register(this.component, value);
    }
    ngOnDestroy() {
        var _a;
        (_a = this.directive) === null || _a === void 0 ? void 0 : _a.unregister(this.component);
    }
}
TuiTreeNodeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeNodeDirective, deps: [{ token: TUI_TREE_ACCESSOR, optional: true }, { token: TuiTreeItemComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeNodeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeNodeDirective, selector: "tui-tree-item[tuiTreeNode]", inputs: { value: ["tuiTreeNode", "value"] }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeNodeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-tree-item[tuiTreeNode]',
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_TREE_ACCESSOR]
                }] }, { type: i1.TuiTreeItemComponent, decorators: [{
                    type: Inject,
                    args: [TuiTreeItemComponent]
                }] }]; }, propDecorators: { value: [{
                type: Input,
                args: ['tuiTreeNode']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ub2RlLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvZGlyZWN0aXZlcy90cmVlLW5vZGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBYSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFNUUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sNkNBQTZDLENBQUM7QUFFakYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0scUJBQXFCLENBQUM7OztBQUt0RCxNQUFNLE9BQU8sb0JBQW9CO0lBTTdCLFlBR3FCLFNBQTZCLEVBRTdCLFNBQStCO1FBRi9CLGNBQVMsR0FBVCxTQUFTLENBQW9CO1FBRTdCLGNBQVMsR0FBVCxTQUFTLENBQXNCO0lBQ2pELENBQUM7SUFYSixJQUNJLEtBQUssQ0FBQyxLQUFROztRQUNkLE1BQUEsSUFBSSxDQUFDLFNBQVMsMENBQUUsUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDcEQsQ0FBQztJQVVELFdBQVc7O1FBQ1AsTUFBQSxJQUFJLENBQUMsU0FBUywwQ0FBRSxVQUFVLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7O2tIQWhCUSxvQkFBb0Isa0JBUWpCLGlCQUFpQiw2QkFFakIsb0JBQW9CO3NHQVZ2QixvQkFBb0I7NEZBQXBCLG9CQUFvQjtrQkFIaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsNEJBQTRCO2lCQUN6Qzs7MEJBUVEsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxpQkFBaUI7OzBCQUV4QixNQUFNOzJCQUFDLG9CQUFvQjs0Q0FSNUIsS0FBSztzQkFEUixLQUFLO3VCQUFDLGFBQWEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgT25EZXN0cm95LCBPcHRpb25hbH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7VHVpVHJlZUl0ZW1Db21wb25lbnR9IGZyb20gJy4uL2NvbXBvbmVudHMvdHJlZS1pdGVtL3RyZWUtaXRlbS5jb21wb25lbnQnO1xuaW1wb3J0IHtUdWlUcmVlQWNjZXNzb3J9IGZyb20gJy4uL21pc2MvdHJlZS5pbnRlcmZhY2VzJztcbmltcG9ydCB7VFVJX1RSRUVfQUNDRVNTT1J9IGZyb20gJy4uL21pc2MvdHJlZS50b2tlbnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ3R1aS10cmVlLWl0ZW1bdHVpVHJlZU5vZGVdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZU5vZGVEaXJlY3RpdmU8VD4gaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xuICAgIEBJbnB1dCgndHVpVHJlZU5vZGUnKVxuICAgIHNldCB2YWx1ZSh2YWx1ZTogVCkge1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZT8ucmVnaXN0ZXIodGhpcy5jb21wb25lbnQsIHZhbHVlKTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChUVUlfVFJFRV9BQ0NFU1NPUilcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkaXJlY3RpdmU6IFR1aVRyZWVBY2Nlc3NvcjxUPixcbiAgICAgICAgQEluamVjdChUdWlUcmVlSXRlbUNvbXBvbmVudClcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBjb21wb25lbnQ6IFR1aVRyZWVJdGVtQ29tcG9uZW50LFxuICAgICkge31cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRpcmVjdGl2ZT8udW5yZWdpc3Rlcih0aGlzLmNvbXBvbmVudCk7XG4gICAgfVxufVxuIl19