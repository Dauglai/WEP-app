import { __decorate } from "tslib";
import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { tuiDefaultProp, tuiIsPresent } from '@taiga-ui/cdk';
import { TUI_TREE_ACCESSOR, TUI_TREE_CONTROLLER } from '../misc/tree.tokens';
import * as i0 from "@angular/core";
export class TuiTreeControllerDirective {
    constructor() {
        this.fallback = true;
        this.map = new Map();
        this.toggled = new EventEmitter();
        this.items = new Map();
    }
    register(item, value) {
        this.items.set(item, value);
    }
    unregister(item) {
        this.items.delete(item);
    }
    isExpanded(item) {
        var _a;
        const value = this.items.get(item);
        return (_a = (value && this.map.get(value))) !== null && _a !== void 0 ? _a : this.fallback;
    }
    toggle(item) {
        const value = this.items.get(item);
        const expanded = this.isExpanded(item);
        if (!tuiIsPresent(value)) {
            return;
        }
        this.toggled.emit(value);
        this.map.set(value, !expanded);
    }
}
TuiTreeControllerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeControllerDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiTreeControllerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTreeControllerDirective, selector: "[tuiTreeController][map]", inputs: { fallback: ["tuiTreeController", "fallback"], map: "map" }, outputs: { toggled: "toggled" }, providers: [
        {
            provide: TUI_TREE_ACCESSOR,
            useExisting: TuiTreeControllerDirective,
        },
        {
            provide: TUI_TREE_CONTROLLER,
            useExisting: TuiTreeControllerDirective,
        },
    ], exportAs: ["tuiTreeController"], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "fallback", void 0);
__decorate([
    tuiDefaultProp()
], TuiTreeControllerDirective.prototype, "map", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTreeControllerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTreeController][map]',
                    exportAs: 'tuiTreeController',
                    providers: [
                        {
                            provide: TUI_TREE_ACCESSOR,
                            useExisting: TuiTreeControllerDirective,
                        },
                        {
                            provide: TUI_TREE_CONTROLLER,
                            useExisting: TuiTreeControllerDirective,
                        },
                    ],
                }]
        }], propDecorators: { fallback: [{
                type: Input,
                args: ['tuiTreeController']
            }], map: [{
                type: Input
            }], toggled: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1jb250cm9sbGVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RyZWUvZGlyZWN0aXZlcy90cmVlLWNvbnRyb2xsZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxjQUFjLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBSTNELE9BQU8sRUFBQyxpQkFBaUIsRUFBRSxtQkFBbUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDOztBQWdCM0UsTUFBTSxPQUFPLDBCQUEwQjtJQWR2QztRQW1CSSxhQUFRLEdBQUcsSUFBSSxDQUFDO1FBSWhCLFFBQUcsR0FBRyxJQUFJLEdBQUcsRUFBYyxDQUFDO1FBR25CLFlBQU8sR0FBRyxJQUFJLFlBQVksRUFBSyxDQUFDO1FBRWhDLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBMkIsQ0FBQztLQTJCdkQ7SUF6QkcsUUFBUSxDQUFDLElBQTBCLEVBQUUsS0FBUTtRQUN6QyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELFVBQVUsQ0FBQyxJQUEwQjtRQUNqQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QixDQUFDO0lBRUQsVUFBVSxDQUFDLElBQTBCOztRQUNqQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVuQyxPQUFPLE1BQUEsQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsbUNBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQztJQUMzRCxDQUFDO0lBRUQsTUFBTSxDQUFDLElBQTBCO1FBQzdCLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ25DLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUN0QixPQUFPO1NBQ1Y7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNuQyxDQUFDOzt3SEF4Q1EsMEJBQTBCOzRHQUExQiwwQkFBMEIseUpBWHhCO1FBQ1A7WUFDSSxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLFdBQVcsRUFBRSwwQkFBMEI7U0FDMUM7UUFDRDtZQUNJLE9BQU8sRUFBRSxtQkFBbUI7WUFDNUIsV0FBVyxFQUFFLDBCQUEwQjtTQUMxQztLQUNKO0FBT0Q7SUFEQyxjQUFjLEVBQUU7NERBQ0Q7QUFJaEI7SUFEQyxjQUFjLEVBQUU7dURBQ1c7NEZBVG5CLDBCQUEwQjtrQkFkdEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsMEJBQTBCO29CQUNwQyxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixTQUFTLEVBQUU7d0JBQ1A7NEJBQ0ksT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsV0FBVyw0QkFBNEI7eUJBQzFDO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSxtQkFBbUI7NEJBQzVCLFdBQVcsNEJBQTRCO3lCQUMxQztxQkFDSjtpQkFDSjs4QkFNRyxRQUFRO3NCQUZQLEtBQUs7dUJBQUMsbUJBQW1CO2dCQU0xQixHQUFHO3NCQUZGLEtBQUs7Z0JBS0csT0FBTztzQkFEZixNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aURlZmF1bHRQcm9wLCB0dWlJc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuXG5pbXBvcnQge1R1aVRyZWVJdGVtQ29tcG9uZW50fSBmcm9tICcuLi9jb21wb25lbnRzL3RyZWUtaXRlbS90cmVlLWl0ZW0uY29tcG9uZW50JztcbmltcG9ydCB7VHVpVHJlZUFjY2Vzc29yLCBUdWlUcmVlQ29udHJvbGxlcn0gZnJvbSAnLi4vbWlzYy90cmVlLmludGVyZmFjZXMnO1xuaW1wb3J0IHtUVUlfVFJFRV9BQ0NFU1NPUiwgVFVJX1RSRUVfQ09OVFJPTExFUn0gZnJvbSAnLi4vbWlzYy90cmVlLnRva2Vucyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRyZWVDb250cm9sbGVyXVttYXBdJyxcbiAgICBleHBvcnRBczogJ3R1aVRyZWVDb250cm9sbGVyJyxcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVFVJX1RSRUVfQUNDRVNTT1IsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9UUkVFX0NPTlRST0xMRVIsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpVHJlZUNvbnRyb2xsZXJEaXJlY3RpdmU8VD5cbiAgICBpbXBsZW1lbnRzIFR1aVRyZWVDb250cm9sbGVyLCBUdWlUcmVlQWNjZXNzb3I8VD5cbntcbiAgICBASW5wdXQoJ3R1aVRyZWVDb250cm9sbGVyJylcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGZhbGxiYWNrID0gdHJ1ZTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtYXAgPSBuZXcgTWFwPFQsIGJvb2xlYW4+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0b2dnbGVkID0gbmV3IEV2ZW50RW1pdHRlcjxUPigpO1xuXG4gICAgcmVhZG9ubHkgaXRlbXMgPSBuZXcgTWFwPFR1aVRyZWVJdGVtQ29tcG9uZW50LCBUPigpO1xuXG4gICAgcmVnaXN0ZXIoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQsIHZhbHVlOiBUKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXRlbXMuc2V0KGl0ZW0sIHZhbHVlKTtcbiAgICB9XG5cbiAgICB1bnJlZ2lzdGVyKGl0ZW06IFR1aVRyZWVJdGVtQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuaXRlbXMuZGVsZXRlKGl0ZW0pO1xuICAgIH1cblxuICAgIGlzRXhwYW5kZWQoaXRlbTogVHVpVHJlZUl0ZW1Db21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLml0ZW1zLmdldChpdGVtKTtcblxuICAgICAgICByZXR1cm4gKHZhbHVlICYmIHRoaXMubWFwLmdldCh2YWx1ZSkpID8/IHRoaXMuZmFsbGJhY2s7XG4gICAgfVxuXG4gICAgdG9nZ2xlKGl0ZW06IFR1aVRyZWVJdGVtQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pdGVtcy5nZXQoaXRlbSk7XG4gICAgICAgIGNvbnN0IGV4cGFuZGVkID0gdGhpcy5pc0V4cGFuZGVkKGl0ZW0pO1xuXG4gICAgICAgIGlmICghdHVpSXNQcmVzZW50KHZhbHVlKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50b2dnbGVkLmVtaXQodmFsdWUpO1xuICAgICAgICB0aGlzLm1hcC5zZXQodmFsdWUsICFleHBhbmRlZCk7XG4gICAgfVxufVxuIl19