import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, HostListener, Inject, Injector, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, changeDateSeparator, DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, RANGE_SEPARATOR_CHAR, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_IS_MOBILE, tuiAsControl, tuiAsFocusableItemAccessor, TuiDayRange, tuiDefaultProp, TuiMonth, tuiNullableSame, } from '@taiga-ui/cdk';
import { TUI_DEFAULT_MARKER_HANDLER, TUI_TEXTFIELD_SIZE, TuiDialogService, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { EMPTY_MASK, MAX_DAY_RANGE_LENGTH_MAPPER } from '@taiga-ui/kit/constants';
import { TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_DATE_TEXTS, TUI_INPUT_DATE_OPTIONS, TUI_MOBILE_CALENDAR, tuiDateStreamWithTransformer, } from '@taiga-ui/kit/tokens';
import { tuiCreateAutoCorrectedDateRangePipe, tuiCreateDateRangeMask, } from '@taiga-ui/kit/utils/mask';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { map, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/components/calendar-range";
import * as i3 from "@taiga-ui/cdk";
import * as i4 from "@taiga-ui/kit/directives";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "@angular/common";
import * as i7 from "@angular/forms";
import * as i8 from "rxjs";
export class TuiInputDateRangeComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, injector, isMobile, dialogs, mobileCalendar, textfieldSize, dateFormat, dateSeparator, dateTexts$, valueTransformer, options) {
        super(control, cdr, valueTransformer);
        this.injector = injector;
        this.isMobile = isMobile;
        this.dialogs = dialogs;
        this.mobileCalendar = mobileCalendar;
        this.textfieldSize = textfieldSize;
        this.dateFormat = dateFormat;
        this.dateSeparator = dateSeparator;
        this.dateTexts$ = dateTexts$;
        this.valueTransformer = valueTransformer;
        this.options = options;
        this.textMaskOptions = {
            mask: tuiCreateDateRangeMask(this.dateFormat, this.dateSeparator),
            pipe: tuiCreateAutoCorrectedDateRangePipe(this),
            guide: false,
        };
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.markerHandler = TUI_DEFAULT_MARKER_HANDLER;
        this.defaultViewedMonth = TuiMonth.currentLocal();
        this.items = [];
        this.min = this.options.min;
        this.max = this.options.max;
        this.minLength = null;
        this.maxLength = null;
        this.open = false;
        this.maxLengthMapper = MAX_DAY_RANGE_LENGTH_MAPPER;
        this.dateFiller$ = this.dateTexts$.pipe(map(dateTexts => changeDateSeparator(dateTexts[this.dateFormat], this.dateSeparator)));
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get computedMobile() {
        return this.isMobile && !!this.mobileCalendar;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    get canOpen() {
        return this.interactive && !this.computedMobile;
    }
    get computedExampleText() {
        var _a, _b;
        return this.items.length
            ? ((_b = (_a = this.textfield) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) === null || _b === void 0 ? void 0 : _b.placeholder) || ''
            : '';
    }
    get computedMask() {
        return this.activePeriod ? EMPTY_MASK : this.textMaskOptions;
    }
    get activePeriod() {
        return (this.items.find(item => tuiNullableSame(this.value, item.range, (a, b) => a.from.daySame(b.from.dayLimit(this.min, this.max)) &&
            a.to.daySame(b.to.dayLimit(this.min, this.max)))) || null);
    }
    get computedValue() {
        const { value, nativeValue, activePeriod } = this;
        if (activePeriod) {
            return String(activePeriod);
        }
        return value
            ? value.getFormattedDayRange(this.dateFormat, this.dateSeparator)
            : nativeValue;
    }
    get innerPseudoFocused() {
        if (this.pseudoFocus === false) {
            return false;
        }
        if (this.open || this.computedFocused) {
            return true;
        }
        return null;
    }
    get nativeValue() {
        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';
    }
    set nativeValue(value) {
        if (!this.nativeFocusableElement) {
            return;
        }
        this.nativeFocusableElement.value = value;
    }
    get size() {
        return this.textfieldSize.size;
    }
    onClick() {
        if (!this.isMobile) {
            this.toggle();
        }
    }
    getComputedRangeFiller(dateFiller) {
        return this.activePeriod ? '' : this.getDateRangeFiller(dateFiller);
    }
    onIconClick() {
        if (!this.computedMobile || !this.mobileCalendar) {
            return;
        }
        this.dialogs
            .open(new PolymorpheusComponent(this.mobileCalendar, this.injector), {
            size: 'fullscreen',
            closeable: false,
            data: {
                single: false,
                min: this.maxLengthMapper(this.min, this.value, this.maxLength, true),
                max: this.maxLengthMapper(this.max, this.value, this.maxLength, false),
                disabledItemHandler: this.disabledItemHandler,
            },
        })
            .pipe(takeUntil(this.destroy$))
            .subscribe(value => {
            this.value = value;
        });
    }
    onOpenChange(open) {
        this.open = open;
    }
    onValueChange(value) {
        if (this.control) {
            this.control.updateValueAndValidity({ emitEvent: false });
        }
        if (!value) {
            this.onOpenChange(true);
        }
        if (value.length !== DATE_RANGE_FILLER_LENGTH) {
            this.value = null;
            return;
        }
        const parsedValue = TuiDayRange.normalizeParse(value, this.dateFormat);
        this.value =
            !this.minLength && !this.maxLength
                ? parsedValue
                : this.clampValue(parsedValue);
    }
    onRangeChange(range) {
        this.toggle();
        this.focusInput();
        if (!range) {
            this.nativeValue = '';
        }
        this.value = range;
    }
    onItemSelect(item) {
        this.toggle();
        this.focusInput();
        if (typeof item !== 'string') {
            this.value = item.range.dayLimit(this.min, this.max);
            return;
        }
        if (this.activePeriod === null) {
            return;
        }
        this.value = null;
        this.nativeValue = '';
    }
    onActiveZone(focused) {
        this.updateFocused(focused);
        if (!focused &&
            !this.itemSelected &&
            (this.nativeValue.length === DATE_FILLER_LENGTH ||
                this.nativeValue.length ===
                    DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length)) {
            this.value = TuiDayRange.normalizeParse(this.nativeValue, this.dateFormat);
        }
    }
    writeValue(value) {
        super.writeValue(value);
        this.nativeValue = value ? this.computedValue : '';
    }
    valueIdenticalComparator(oldValue, newValue) {
        return tuiNullableSame(oldValue, newValue, (a, b) => a.daySame(b));
    }
    get itemSelected() {
        return this.items.findIndex(item => String(item) === this.nativeValue) !== -1;
    }
    toggle() {
        this.open = !this.open;
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    clampValue(value) {
        const clampedBottom = this.minLength && value.from.append(this.minLength).dayAfter(value.to)
            ? new TuiDayRange(value.from, value.from.append(this.minLength).append({ day: -1 }))
            : value;
        const availableMax = this.maxLength
            ? clampedBottom.from.append(this.maxLength).append({ day: -1 })
            : this.max;
        return clampedBottom.to.dayAfter(availableMax)
            ? new TuiDayRange(clampedBottom.from, availableMax)
            : clampedBottom;
    }
    getDateRangeFiller(dateFiller) {
        return `${dateFiller}${RANGE_SEPARATOR_CHAR}${dateFiller}`;
    }
}
TuiInputDateRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateRangeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: Injector }, { token: TUI_IS_MOBILE }, { token: TuiDialogService }, { token: TUI_MOBILE_CALENDAR, optional: true }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_DATE_FORMAT }, { token: TUI_DATE_SEPARATOR }, { token: TUI_DATE_TEXTS }, { token: TUI_DATE_RANGE_VALUE_TRANSFORMER, optional: true }, { token: TUI_INPUT_DATE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputDateRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputDateRangeComponent, selector: "tui-input-date-range", inputs: { disabledItemHandler: "disabledItemHandler", markerHandler: "markerHandler", defaultViewedMonth: "defaultViewedMonth", items: "items", min: "min", max: "max", minLength: "minLength", maxLength: "maxLength" }, host: { listeners: { "click": "onClick()" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputDateRangeComponent),
        tuiAsControl(TuiInputDateRangeComponent),
        tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER),
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"dropdown\"\n    [open]=\"open && canOpen\"\n    (openChange)=\"onOpenChange($event)\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        *tuiLet=\"dateFiller$ | async as dateFiller\"\n        automation-id=\"tui-input-date-range__textfield\"\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [tuiTextfieldIcon]=\"calendarIcon && iconContent\"\n        [tuiTextfieldFiller]=\"getComputedRangeFiller(dateFiller || '')\"\n        [pseudoFocus]=\"innerPseudoFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoActive]=\"pseudoActive\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [disabled]=\"computedDisabled\"\n        [textMask]=\"computedMask\"\n        [value]=\"computedValue\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #iconContent>\n        <tui-svg\n            *polymorpheusOutlet=\"calendarIcon as src; context: {$implicit: size}\"\n            tuiWrapper\n            appearance=\"icon\"\n            automation-id=\"tui-input-date-range__icon\"\n            [class.t-icon]=\"!computedDisabled\"\n            [src]=\"src\"\n            (click)=\"onIconClick()\"\n        ></tui-svg>\n    </ng-template>\n\n    <ng-template #dropdown>\n        <tui-calendar-range\n            [defaultViewedMonth]=\"defaultViewedMonth\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [items]=\"items\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [markerHandler]=\"markerHandler\"\n            [minLength]=\"minLength\"\n            [maxLength]=\"maxLength\"\n            [value]=\"value\"\n            (valueChange)=\"onRangeChange($event)\"\n        ></tui-calendar-range>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}.t-icon{pointer-events:auto}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i2.TuiCalendarRangeComponent, selector: "tui-calendar-range", inputs: ["defaultViewedMonth", "disabledItemHandler", "markerHandler", "items", "min", "max", "minLength", "maxLength", "value"], outputs: ["valueChange"] }], directives: [{ type: i3.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i3.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i4.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i1.TuiTextfieldFillerDirective, selector: "[tuiTextfieldFiller]", inputs: ["tuiTextfieldFiller"] }, { type: i4.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i1.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }], pipes: { "async": i6.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "markerHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "defaultViewedMonth", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "items", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "minLength", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputDateRangeComponent.prototype, "maxLength", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputDateRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-date-range',
                    templateUrl: './input-date-range.template.html',
                    styleUrls: ['./input-date-range.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputDateRangeComponent),
                        tuiAsControl(TuiInputDateRangeComponent),
                        tuiDateStreamWithTransformer(TUI_DATE_RANGE_VALUE_TRANSFORMER),
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i7.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [Injector]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i1.TuiDialogService, decorators: [{
                    type: Inject,
                    args: [TuiDialogService]
                }] }, { type: i0.Type, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_MOBILE_CALENDAR]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_FORMAT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_SEPARATOR]
                }] }, { type: i8.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DATE_TEXTS]
                }] }, { type: i3.AbstractTuiValueTransformer, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_DATE_RANGE_VALUE_TRANSFORMER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], disabledItemHandler: [{
                type: Input
            }], markerHandler: [{
                type: Input
            }], defaultViewedMonth: [{
                type: Input
            }], items: [{
                type: Input
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], minLength: [{
                type: Input
            }], maxLength: [{
                type: Input
            }], onClick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,