import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChild, Inject, Optional, Self, TemplateRef, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, tuiAsControl, tuiAsFocusableItemAccessor, tuiIsNativeFocused, } from '@taiga-ui/cdk';
import { tuiAsDataListHost, TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { FIXED_DROPDOWN_CONTROLLER_PROVIDER, TUI_VALUE_ACCESSOR_PROVIDER, } from '@taiga-ui/kit/providers';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@angular/forms";
export class TuiInputComponent extends AbstractTuiControl {
    constructor(control, cdr) {
        super(control, cdr);
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.computedDisabled || !this.textfield
            ? null
            : this.textfield.nativeFocusableElement;
    }
    get focused() {
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            (!!this.hostedDropdown && this.hostedDropdown.focused));
    }
    get canOpen() {
        return this.interactive && !!this.datalist;
    }
    onValueChange(value) {
        this.value = value;
        this.open = true;
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    handleOption(item) {
        this.setNativeValue(String(item));
        this.focusInput();
        this.value = String(item);
        this.open = false;
    }
    getFallbackValue() {
        return '';
    }
    focusInput(preventScroll = false) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.focus({ preventScroll });
        }
    }
    setNativeValue(value) {
        if (this.nativeFocusableElement) {
            this.nativeFocusableElement.value = value;
        }
    }
}
TuiInputComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });
TuiInputComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputComponent, selector: "tui-input", providers: [
        TUI_VALUE_ACCESSOR_PROVIDER,
        tuiAsFocusableItemAccessor(TuiInputComponent),
        tuiAsDataListHost(TuiInputComponent),
        tuiAsControl(TuiInputComponent),
    ], queries: [{ propertyName: "datalist", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: "hostedDropdown", first: true, predicate: TuiHostedDropdownComponent, descendants: true }, { propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        automation-id=\"tui-input__textfield\"\n        class=\"t-textfield\"\n        [pseudoFocus]=\"computedFocused\"\n        [pseudoHover]=\"pseudoHover\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"computedFocusable\"\n        [value]=\"value\"\n        (valueChange)=\"onValueChange($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input',
                    templateUrl: './input.template.html',
                    styleUrls: ['./input.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TUI_VALUE_ACCESSOR_PROVIDER,
                        tuiAsFocusableItemAccessor(TuiInputComponent),
                        tuiAsDataListHost(TuiInputComponent),
                        tuiAsControl(TuiInputComponent),
                    ],
                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                }]
        }], ctorParameters: function () { return [{ type: i3.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }]; }, propDecorators: { hostedDropdown: [{
                type: ViewChild,
                args: [TuiHostedDropdownComponent]
            }], textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], datalist: [{
                type: ContentChild,
                args: [TuiDataListDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,