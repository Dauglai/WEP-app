import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, Output, ViewEncapsulation, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { tuiDefaultProp, TuiDestroyService, TuiResizeService } from '@taiga-ui/cdk';
import { BehaviorSubject, Subject, timer } from 'rxjs';
import { debounce, filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiTilesComponent {
    constructor(el) {
        this.el = el;
        this.el$ = new Subject();
        this.debounce = 0;
        this.orderChange = this.el$.pipe(debounce(() => timer(this.debounce)), filter(this.filter.bind(this)), map(element => this.reorder(element)));
        this.element = null;
        this.order$ = new BehaviorSubject(new Map());
    }
    set order(map) {
        this.order$.next(map);
    }
    get order() {
        return this.order$.value;
    }
    rearrange(element) {
        this.el$.next(element);
    }
    filter(element) {
        return !!this.element && !!element && this.element !== element;
    }
    reorder(element) {
        var _a, _b;
        const elements = Array.from(this.el.nativeElement.children);
        const currentIndex = elements.indexOf(this.element || element);
        const newIndex = elements.indexOf(element);
        const order = this.order.size
            ? new Map(this.order)
            : new Map(elements.map((_, index) => [index, index]));
        const dragged = (_a = order.get(currentIndex)) !== null && _a !== void 0 ? _a : currentIndex;
        const placement = (_b = order.get(newIndex)) !== null && _b !== void 0 ? _b : newIndex;
        order.set(currentIndex, placement);
        order.set(newIndex, dragged);
        this.order$.next(order);
        return order;
    }
}
TuiTilesComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTilesComponent, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiTilesComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTilesComponent, selector: "tui-tiles", inputs: { debounce: "debounce", order: "order" }, outputs: { orderChange: "orderChange" }, host: { listeners: { "pointerleave.silent": "rearrange()" }, properties: { "class._dragged": "this.element" } }, providers: [
        TuiDestroyService,
        TuiResizeService,
        MutationObserverService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: { childList: true },
        },
    ], ngImport: i0, template: `
        <ng-content></ng-content>
    `, isInline: true, styles: ["tui-tiles{position:relative;z-index:0;display:grid;grid-auto-flow:dense;justify-items:stretch}tui-tiles._dragged tui-tile>.t-wrapper{pointer-events:none}tui-tiles._dragged tui-tile:not(._dragged)>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}tui-tiles:not(._dragged) tui-tile._dragged>.t-wrapper{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}tui-tile>.t-wrapper{position:absolute;z-index:0;border-radius:inherit}tui-tile._dragged>.t-wrapper{z-index:1;transition:none}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });
__decorate([
    tuiDefaultProp()
], TuiTilesComponent.prototype, "debounce", void 0);
__decorate([
    tuiDefaultProp()
], TuiTilesComponent.prototype, "order", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTilesComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tiles',
                    template: `
        <ng-content></ng-content>
    `,
                    styleUrls: ['./tiles.style.less'],
                    encapsulation: ViewEncapsulation.None,
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiResizeService,
                        MutationObserverService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: { childList: true },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { debounce: [{
                type: Input
            }], order: [{
                type: Input
            }], orderChange: [{
                type: Output
            }], element: [{
                type: HostBinding,
                args: ['class._dragged']
            }], rearrange: [{
                type: HostListener,
                args: ['pointerleave.silent']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZXMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdGlsZXMvdGlsZXMuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLFNBQVMsRUFDVCxVQUFVLEVBQ1YsV0FBVyxFQUNYLFlBQVksRUFDWixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFDTixpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILHNCQUFzQixFQUN0Qix1QkFBdUIsR0FDMUIsTUFBTSxnQ0FBZ0MsQ0FBQztBQUN4QyxPQUFPLEVBQUMsY0FBYyxFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2xGLE9BQU8sRUFBQyxlQUFlLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNyRCxPQUFPLEVBQUMsUUFBUSxFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFvQnJELE1BQU0sT0FBTyxpQkFBaUI7SUE2QjFCLFlBQWlELEVBQXVCO1FBQXZCLE9BQUUsR0FBRixFQUFFLENBQXFCO1FBNUJ2RCxRQUFHLEdBQUcsSUFBSSxPQUFPLEVBQXVCLENBQUM7UUFJMUQsYUFBUSxHQUFHLENBQUMsQ0FBQztRQWFKLGdCQUFXLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ2hDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLEVBQ3BDLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxFQUM5QixHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FB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RUFBQzt5QkFDOUI7cUJBQ0o7aUJBQ0o7OzBCQThCZ0IsTUFBTTsyQkFBQyxVQUFVOzRDQXhCOUIsUUFBUTtzQkFGUCxLQUFLO2dCQU1GLEtBQUs7c0JBRlIsS0FBSztnQkFXRyxXQUFXO3NCQURuQixNQUFNO2dCQVFQLE9BQU87c0JBRE4sV0FBVzt1QkFBQyxnQkFBZ0I7Z0JBUTdCLFNBQVM7c0JBRFIsWUFBWTt1QkFBQyxxQkFBcUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RCaW5kaW5nLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgT3V0cHV0LFxuICAgIFZpZXdFbmNhcHN1bGF0aW9uLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbn0gZnJvbSAnQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIFR1aURlc3Ryb3lTZXJ2aWNlLCBUdWlSZXNpemVTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBTdWJqZWN0LCB0aW1lcn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2RlYm91bmNlLCBmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS10aWxlcycsXG4gICAgdGVtcGxhdGU6IGBcbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgIGAsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGlsZXMuc3R5bGUubGVzcyddLFxuICAgIGVuY2Fwc3VsYXRpb246IFZpZXdFbmNhcHN1bGF0aW9uLk5vbmUsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgICAgICBUdWlSZXNpemVTZXJ2aWNlLFxuICAgICAgICBNdXRhdGlvbk9ic2VydmVyU2VydmljZSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogTVVUQVRJT05fT0JTRVJWRVJfSU5JVCxcbiAgICAgICAgICAgIHVzZVZhbHVlOiB7Y2hpbGRMaXN0OiB0cnVlfSxcbiAgICAgICAgfSxcbiAgICBdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUaWxlc0NvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCQgPSBuZXcgU3ViamVjdDxFbGVtZW50IHwgdW5kZWZpbmVkPigpO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGRlYm91bmNlID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZXQgb3JkZXIobWFwOiBNYXA8bnVtYmVyLCBudW1iZXI+KSB7XG4gICAgICAgIHRoaXMub3JkZXIkLm5leHQobWFwKTtcbiAgICB9XG5cbiAgICBnZXQgb3JkZXIoKTogTWFwPG51bWJlciwgbnVtYmVyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLm9yZGVyJC52YWx1ZTtcbiAgICB9XG5cbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSBvcmRlckNoYW5nZSA9IHRoaXMuZWwkLnBpcGUoXG4gICAgICAgIGRlYm91bmNlKCgpID0+IHRpbWVyKHRoaXMuZGVib3VuY2UpKSxcbiAgICAgICAgZmlsdGVyKHRoaXMuZmlsdGVyLmJpbmQodGhpcykpLFxuICAgICAgICBtYXAoZWxlbWVudCA9PiB0aGlzLnJlb3JkZXIoZWxlbWVudCkpLFxuICAgICk7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9kcmFnZ2VkJylcbiAgICBlbGVtZW50OiBFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgICByZWFkb25seSBvcmRlciQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KG5ldyBNYXA8bnVtYmVyLCBudW1iZXI+KCkpO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEVsZW1lbnQ+KSB7fVxuXG4gICAgQEhvc3RMaXN0ZW5lcigncG9pbnRlcmxlYXZlLnNpbGVudCcpXG4gICAgcmVhcnJhbmdlKGVsZW1lbnQ/OiBFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuZWwkLm5leHQoZWxlbWVudCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWx0ZXIoZWxlbWVudD86IEVsZW1lbnQpOiBlbGVtZW50IGlzIEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gISF0aGlzLmVsZW1lbnQgJiYgISFlbGVtZW50ICYmIHRoaXMuZWxlbWVudCAhPT0gZWxlbWVudDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlb3JkZXIoZWxlbWVudDogRWxlbWVudCk6IE1hcDxudW1iZXIsIG51bWJlcj4ge1xuICAgICAgICBjb25zdCBlbGVtZW50cyA9IEFycmF5LmZyb20odGhpcy5lbC5uYXRpdmVFbGVtZW50LmNoaWxkcmVuKTtcbiAgICAgICAgY29uc3QgY3VycmVudEluZGV4ID0gZWxlbWVudHMuaW5kZXhPZih0aGlzLmVsZW1lbnQgfHwgZWxlbWVudCk7XG4gICAgICAgIGNvbnN0IG5ld0luZGV4ID0gZWxlbWVudHMuaW5kZXhPZihlbGVtZW50KTtcbiAgICAgICAgY29uc3Qgb3JkZXIgPSB0aGlzLm9yZGVyLnNpemVcbiAgICAgICAgICAgID8gbmV3IE1hcCh0aGlzLm9yZGVyKVxuICAgICAgICAgICAgOiBuZXcgTWFwKGVsZW1lbnRzLm1hcCgoXywgaW5kZXgpID0+IFtpbmRleCwgaW5kZXhdKSk7XG4gICAgICAgIGNvbnN0IGRyYWdnZWQgPSBvcmRlci5nZXQoY3VycmVudEluZGV4KSA/PyBjdXJyZW50SW5kZXg7XG4gICAgICAgIGNvbnN0IHBsYWNlbWVudCA9IG9yZGVyLmdldChuZXdJbmRleCkgPz8gbmV3SW5kZXg7XG5cbiAgICAgICAgb3JkZXIuc2V0KGN1cnJlbnRJbmRleCwgcGxhY2VtZW50KTtcbiAgICAgICAgb3JkZXIuc2V0KG5ld0luZGV4LCBkcmFnZ2VkKTtcblxuICAgICAgICB0aGlzLm9yZGVyJC5uZXh0KG9yZGVyKTtcblxuICAgICAgICByZXR1cm4gb3JkZXI7XG4gICAgfVxufVxuIl19