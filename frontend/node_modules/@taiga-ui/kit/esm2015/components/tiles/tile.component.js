import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostBinding, HostListener, Inject, Input, NgZone, } from '@angular/core';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { tuiArrayShallowEquals, tuiDefaultProp, TuiResizeService, tuiZonefull, } from '@taiga-ui/cdk';
import { BehaviorSubject, combineLatest } from 'rxjs';
import { debounceTime, distinctUntilChanged, map, startWith } from 'rxjs/operators';
import { TuiTilesComponent } from './tiles.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./tiles.component";
import * as i3 from "rxjs";
export class TuiTileComponent {
    constructor(ngZone, el, tiles, resize$, mutation$) {
        this.ngZone = ngZone;
        this.el = el;
        this.tiles = tiles;
        this.resize$ = resize$;
        this.mutation$ = mutation$;
        this.width = 1;
        this.height = 1;
        this.dragged = false;
        this.offset$ = new BehaviorSubject([0, 0]);
        this.position$ = combineLatest([
            this.offset$.pipe(distinctUntilChanged(tuiArrayShallowEquals)),
            this.resize$.pipe(startWith(null)),
            this.mutation$.pipe(startWith(null)),
            this.tiles.order$.pipe(debounceTime(0)),
        ]).pipe(map(([[left, top]]) => ({
            top: top || this.element.offsetTop,
            left: left || this.element.offsetLeft,
            width: this.element.clientWidth,
            height: this.element.clientHeight,
        })), tuiZonefull(this.ngZone));
    }
    get column() {
        return `span var(--tui-width, ${this.width})`;
    }
    get row() {
        return `span var(--tui-height, ${this.height})`;
    }
    get element() {
        return this.el.nativeElement;
    }
    onEnter() {
        this.tiles.rearrange(this.element);
    }
    onDrag(dragged) {
        this.dragged = this.dragged || dragged;
        this.tiles.element = dragged ? this.element : null;
    }
    onTransitionEnd() {
        this.dragged = false;
    }
}
TuiTileComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileComponent, deps: [{ token: NgZone }, { token: ElementRef }, { token: TuiTilesComponent }, { token: TuiResizeService }, { token: MutationObserverService }], target: i0.ɵɵFactoryTarget.Component });
TuiTileComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTileComponent, selector: "tui-tile", inputs: { width: "width", height: "height" }, host: { listeners: { "pointerenter": "onEnter()" }, properties: { "class._dragged": "this.dragged", "style.gridColumn": "this.column", "style.gridRow": "this.row" } }, ngImport: i0, template: "<div\n    *ngIf=\"position$ | async as position\"\n    class=\"t-wrapper\"\n    [style.top.px]=\"position.top\"\n    [style.left.px]=\"position.left\"\n    [style.width.px]=\"position.width\"\n    [style.height.px]=\"position.height\"\n    (transitionend.self)=\"onTransitionEnd()\"\n>\n    <ng-content></ng-content>\n</div>\n", directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTileComponent.prototype, "width", void 0);
__decorate([
    tuiDefaultProp()
], TuiTileComponent.prototype, "height", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tile',
                    templateUrl: './tile.template.html',
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.TuiTilesComponent, decorators: [{
                    type: Inject,
                    args: [TuiTilesComponent]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }, { type: i3.Observable, decorators: [{
                    type: Inject,
                    args: [MutationObserverService]
                }] }]; }, propDecorators: { width: [{
                type: Input
            }], height: [{
                type: Input
            }], dragged: [{
                type: HostBinding,
                args: ['class._dragged']
            }], column: [{
                type: HostBinding,
                args: ['style.gridColumn']
            }], row: [{
                type: HostBinding,
                args: ['style.gridRow']
            }], onEnter: [{
                type: HostListener,
                args: ['pointerenter']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy90aWxlcy90aWxlLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RpbGVzL3RpbGUudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixTQUFTLEVBQ1QsVUFBVSxFQUNWLFdBQVcsRUFDWCxZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDdkUsT0FBTyxFQUNILHFCQUFxQixFQUNyQixjQUFjLEVBQ2QsZ0JBQWdCLEVBQ2hCLFdBQVcsR0FDZCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsZUFBZSxFQUFFLGFBQWEsRUFBYSxNQUFNLE1BQU0sQ0FBQztBQUNoRSxPQUFPLEVBQUMsWUFBWSxFQUFFLG9CQUFvQixFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVsRixPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7Ozs7QUFPcEQsTUFBTSxPQUFPLGdCQUFnQjtJQTZCekIsWUFDcUMsTUFBYyxFQUNWLEVBQTJCLEVBQ3BCLEtBQXdCLEVBQ3pCLE9BQTRCLEVBQ3JCLFNBQThCO1FBSi9DLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDVixPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFtQjtRQUN6QixZQUFPLEdBQVAsT0FBTyxDQUFxQjtRQUNyQixjQUFTLEdBQVQsU0FBUyxDQUFxQjtRQS9CcEYsVUFBSyxHQUFHLENBQUMsQ0FBQztRQUlWLFdBQU0sR0FBRyxDQUFD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QyxlQUFlO2dCQVU1QixPQUFPO3NCQUROLFlBQVk7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksXG4gICAgQ29tcG9uZW50LFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBOZ1pvbmUsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtNdXRhdGlvbk9ic2VydmVyU2VydmljZX0gZnJvbSAnQG5nLXdlYi1hcGlzL211dGF0aW9uLW9ic2VydmVyJztcbmltcG9ydCB7XG4gICAgdHVpQXJyYXlTaGFsbG93RXF1YWxzLFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aVJlc2l6ZVNlcnZpY2UsXG4gICAgdHVpWm9uZWZ1bGwsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIGNvbWJpbmVMYXRlc3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkZWJvdW5jZVRpbWUsIGRpc3RpbmN0VW50aWxDaGFuZ2VkLCBtYXAsIHN0YXJ0V2l0aH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aVRpbGVzQ29tcG9uZW50fSBmcm9tICcuL3RpbGVzLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLXRpbGUnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90aWxlLnRlbXBsYXRlLmh0bWwnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUaWxlQ29tcG9uZW50IHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgd2lkdGggPSAxO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGhlaWdodCA9IDE7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLl9kcmFnZ2VkJylcbiAgICBkcmFnZ2VkID0gZmFsc2U7XG5cbiAgICByZWFkb25seSBvZmZzZXQkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxbbnVtYmVyLCBudW1iZXJdPihbMCwgMF0pO1xuXG4gICAgcmVhZG9ubHkgcG9zaXRpb24kID0gY29tYmluZUxhdGVzdChbXG4gICAgICAgIHRoaXMub2Zmc2V0JC5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKHR1aUFycmF5U2hhbGxvd0VxdWFscykpLFxuICAgICAgICB0aGlzLnJlc2l6ZSQucGlwZShzdGFydFdpdGgobnVsbCkpLFxuICAgICAgICB0aGlzLm11dGF0aW9uJC5waXBlKHN0YXJ0V2l0aChudWxsKSksXG4gICAgICAgIHRoaXMudGlsZXMub3JkZXIkLnBpcGUoZGVib3VuY2VUaW1lKDApKSxcbiAgICBdKS5waXBlKFxuICAgICAgICBtYXAoKFtbbGVmdCwgdG9wXV0pID0+ICh7XG4gICAgICAgICAgICB0b3A6IHRvcCB8fCB0aGlzLmVsZW1lbnQub2Zmc2V0VG9wLFxuICAgICAgICAgICAgbGVmdDogbGVmdCB8fCB0aGlzLmVsZW1lbnQub2Zmc2V0TGVmdCxcbiAgICAgICAgICAgIHdpZHRoOiB0aGlzLmVsZW1lbnQuY2xpZW50V2lkdGgsXG4gICAgICAgICAgICBoZWlnaHQ6IHRoaXMuZWxlbWVudC5jbGllbnRIZWlnaHQsXG4gICAgICAgIH0pKSxcbiAgICAgICAgdHVpWm9uZWZ1bGwodGhpcy5uZ1pvbmUpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIHByaXZhdGUgcmVhZG9ubHkgbmdab25lOiBOZ1pvbmUsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVHVpVGlsZXNDb21wb25lbnQpIHByaXZhdGUgcmVhZG9ubHkgdGlsZXM6IFR1aVRpbGVzQ29tcG9uZW50LFxuICAgICAgICBASW5qZWN0KFR1aVJlc2l6ZVNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgcmVzaXplJDogT2JzZXJ2YWJsZTx1bmtub3duPixcbiAgICAgICAgQEluamVjdChNdXRhdGlvbk9ic2VydmVyU2VydmljZSkgcHJpdmF0ZSByZWFkb25seSBtdXRhdGlvbiQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5ncmlkQ29sdW1uJylcbiAgICBnZXQgY29sdW1uKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgc3BhbiB2YXIoLS10dWktd2lkdGgsICR7dGhpcy53aWR0aH0pYDtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ3N0eWxlLmdyaWRSb3cnKVxuICAgIGdldCByb3coKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIGBzcGFuIHZhcigtLXR1aS1oZWlnaHQsICR7dGhpcy5oZWlnaHR9KWA7XG4gICAgfVxuXG4gICAgZ2V0IGVsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ3BvaW50ZXJlbnRlcicpXG4gICAgb25FbnRlcigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy50aWxlcy5yZWFycmFuZ2UodGhpcy5lbGVtZW50KTtcbiAgICB9XG5cbiAgICBvbkRyYWcoZHJhZ2dlZDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLmRyYWdnZWQgPSB0aGlzLmRyYWdnZWQgfHwgZHJhZ2dlZDtcbiAgICAgICAgdGhpcy50aWxlcy5lbGVtZW50ID0gZHJhZ2dlZCA/IHRoaXMuZWxlbWVudCA6IG51bGw7XG4gICAgfVxuXG4gICAgb25UcmFuc2l0aW9uRW5kKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRyYWdnZWQgPSBmYWxzZTtcbiAgICB9XG59XG4iLCI8ZGl2XG4gICAgKm5nSWY9XCJwb3NpdGlvbiQgfCBhc3luYyBhcyBwb3NpdGlvblwiXG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgIFtzdHlsZS50b3AucHhdPVwicG9zaXRpb24udG9wXCJcbiAgICBbc3R5bGUubGVmdC5weF09XCJwb3NpdGlvbi5sZWZ0XCJcbiAgICBbc3R5bGUud2lkdGgucHhdPVwicG9zaXRpb24ud2lkdGhcIlxuICAgIFtzdHlsZS5oZWlnaHQucHhdPVwicG9zaXRpb24uaGVpZ2h0XCJcbiAgICAodHJhbnNpdGlvbmVuZC5zZWxmKT1cIm9uVHJhbnNpdGlvbkVuZCgpXCJcbj5cbiAgICA8bmctY29udGVudD48L25nLWNvbnRlbnQ+XG48L2Rpdj5cbiJdfQ==