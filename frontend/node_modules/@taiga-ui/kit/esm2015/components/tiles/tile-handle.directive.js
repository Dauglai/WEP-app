import { Directive, HostListener, Inject } from '@angular/core';
import { tuiGetActualTarget, tuiIsElement } from '@taiga-ui/cdk';
import { TuiTileComponent } from './tile.component';
import * as i0 from "@angular/core";
import * as i1 from "./tile.component";
export class TuiTileHandleDirective {
    constructor(tile) {
        this.tile = tile;
        this.x = NaN;
        this.y = NaN;
    }
    onStart(event) {
        const target = tuiGetActualTarget(event);
        const { x, y, pointerId } = event;
        if (tuiIsElement(target)) {
            target.releasePointerCapture(pointerId);
        }
        this.onPointer(x, y);
    }
    onPointer(x = NaN, y = NaN) {
        this.x = x - this.tile.element.offsetLeft;
        this.y = y - this.tile.element.offsetTop;
        this.tile.onDrag(!Number.isNaN(x));
        this.tile.offset$.next([0, 0]);
    }
    onMove(x, y) {
        if (!Number.isNaN(this.x)) {
            this.tile.offset$.next([x - this.x, y - this.y]);
        }
    }
}
TuiTileHandleDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileHandleDirective, deps: [{ token: TuiTileComponent }], target: i0.ɵɵFactoryTarget.Directive });
TuiTileHandleDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiTileHandleDirective, selector: "[tuiTileHandle]", host: { listeners: { "pointerdown.silent.prevent": "onStart($event)", "document:pointerup.silent": "onPointer()", "document:pointermove.silent": "onMove($event.x,$event.y)" }, properties: { "style.touchAction": "\"none\"" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTileHandleDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiTileHandle]',
                    host: {
                        '[style.touchAction]': '"none"',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiTileComponent, decorators: [{
                    type: Inject,
                    args: [TuiTileComponent]
                }] }]; }, propDecorators: { onStart: [{
                type: HostListener,
                args: ['pointerdown.silent.prevent', ['$event']]
            }], onPointer: [{
                type: HostListener,
                args: ['document:pointerup.silent']
            }], onMove: [{
                type: HostListener,
                args: ['document:pointermove.silent', ['$event.x', '$event.y']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlsZS1oYW5kbGUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvdGlsZXMvdGlsZS1oYW5kbGUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM5RCxPQUFPLEVBQUMsa0JBQWtCLEVBQUUsWUFBWSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRS9ELE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGtCQUFrQixDQUFDOzs7QUFRbEQsTUFBTSxPQUFPLHNCQUFzQjtJQUkvQixZQUF1RCxJQUFzQjtRQUF0QixTQUFJLEdBQUosSUFBSSxDQUFrQjtRQUhyRSxNQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ1IsTUFBQyxHQUFHLEdBQUcsQ0FBQztJQUVnRSxDQUFDO0lBR2pGLE9BQU8sQ0FBQyxLQUFtQjtRQUN2QixNQUFNLE1BQU0sR0FBRyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN6QyxNQUFNLEVBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLEVBQUMsR0FBRyxLQUFLLENBQUM7UUFFaEMsSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdEIsTUFBTSxDQUFDLHFCQUFxQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDekIsQ0FBQztJQUdELFNBQVMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxFQUFFLENBQUMsR0FBRyxHQUFHO1FBQ3RCLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQztRQUMxQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUM7UUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUdELE1BQU0sQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDdkIsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO0lBQ0wsQ0FBQzs7b0hBL0JRLHNCQUFzQixrQkFJWCxnQkFBZ0I7d0dBSjNCLHNCQUFzQjs0RkFBdEIsc0JBQXNCO2tCQU5sQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLElBQUksRUFBRTt3QkFDRixxQkFBcUIsRUFBRSxRQUFRO3FCQUNsQztpQkFDSjs7MEJBS2dCLE1BQU07MkJBQUMsZ0JBQWdCOzRDQUdwQyxPQUFPO3NCQUROLFlBQVk7dUJBQUMsNEJBQTRCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBYXRELFNBQVM7c0JBRFIsWUFBWTt1QkFBQywyQkFBMkI7Z0JBU3pDLE1BQU07c0JBREwsWUFBWTt1QkFBQyw2QkFBNkIsRUFBRSxDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlHZXRBY3R1YWxUYXJnZXQsIHR1aUlzRWxlbWVudH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5cbmltcG9ydCB7VHVpVGlsZUNvbXBvbmVudH0gZnJvbSAnLi90aWxlLmNvbXBvbmVudCc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aVRpbGVIYW5kbGVdJyxcbiAgICBob3N0OiB7XG4gICAgICAgICdbc3R5bGUudG91Y2hBY3Rpb25dJzogJ1wibm9uZVwiJyxcbiAgICB9LFxufSlcbmV4cG9ydCBjbGFzcyBUdWlUaWxlSGFuZGxlRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIHggPSBOYU47XG4gICAgcHJpdmF0ZSB5ID0gTmFOO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChUdWlUaWxlQ29tcG9uZW50KSBwcml2YXRlIHJlYWRvbmx5IHRpbGU6IFR1aVRpbGVDb21wb25lbnQpIHt9XG5cbiAgICBASG9zdExpc3RlbmVyKCdwb2ludGVyZG93bi5zaWxlbnQucHJldmVudCcsIFsnJGV2ZW50J10pXG4gICAgb25TdGFydChldmVudDogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHR1aUdldEFjdHVhbFRhcmdldChldmVudCk7XG4gICAgICAgIGNvbnN0IHt4LCB5LCBwb2ludGVySWR9ID0gZXZlbnQ7XG5cbiAgICAgICAgaWYgKHR1aUlzRWxlbWVudCh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucmVsZWFzZVBvaW50ZXJDYXB0dXJlKHBvaW50ZXJJZCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLm9uUG9pbnRlcih4LCB5KTtcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCdkb2N1bWVudDpwb2ludGVydXAuc2lsZW50JylcbiAgICBvblBvaW50ZXIoeCA9IE5hTiwgeSA9IE5hTik6IHZvaWQge1xuICAgICAgICB0aGlzLnggPSB4IC0gdGhpcy50aWxlLmVsZW1lbnQub2Zmc2V0TGVmdDtcbiAgICAgICAgdGhpcy55ID0geSAtIHRoaXMudGlsZS5lbGVtZW50Lm9mZnNldFRvcDtcbiAgICAgICAgdGhpcy50aWxlLm9uRHJhZyghTnVtYmVyLmlzTmFOKHgpKTtcbiAgICAgICAgdGhpcy50aWxlLm9mZnNldCQubmV4dChbMCwgMF0pO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OnBvaW50ZXJtb3ZlLnNpbGVudCcsIFsnJGV2ZW50LngnLCAnJGV2ZW50LnknXSlcbiAgICBvbk1vdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgaWYgKCFOdW1iZXIuaXNOYU4odGhpcy54KSkge1xuICAgICAgICAgICAgdGhpcy50aWxlLm9mZnNldCQubmV4dChbeCAtIHRoaXMueCwgeSAtIHRoaXMueV0pO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19