import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Input, Optional, Self, ViewChild, ViewChildren, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, EMPTY_QUERY, TUI_IS_MOBILE, tuiAsControl, tuiAsFocusableItemAccessor, tuiClamp, tuiDefaultProp, tuiIsNativeFocused, tuiIsNativeFocusedIn, tuiPure, tuiRound, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, tuiGetFractionPartPadded, } from '@taiga-ui/core';
import { TuiInputNumberComponent } from '@taiga-ui/kit/components/input-number';
import { TuiRangeComponent } from '@taiga-ui/kit/components/range';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/input-number";
import * as i2 from "@taiga-ui/kit/components/range";
import * as i3 from "@taiga-ui/core";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "@angular/forms";
import * as i6 from "@angular/common";
import * as i7 from "@tinkoff/ng-polymorpheus";
export class TuiInputRangeComponent extends AbstractTuiControl {
    constructor(control, cdr, isMobile, el, controller) {
        super(control, cdr);
        this.isMobile = isMobile;
        this.el = el;
        this.controller = controller;
        this.inputNumberRefs = EMPTY_QUERY;
        this.rangeRef = null;
        this.min = 0;
        this.max = 100;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 1;
        this.keySteps = null;
        this.pluralize = null;
        this.lastActiveSide = 'left';
    }
    get leftFocusableElement() {
        var _a;
        return ((_a = this.inputNumberRefs.first) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get rightFocusableElement() {
        var _a;
        return ((_a = this.inputNumberRefs.last) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || null;
    }
    get nativeFocusableElement() {
        return this.disabled
            ? null
            : this.leftFocusableElement || this.rightFocusableElement;
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    get appearance() {
        return this.controller.appearance;
    }
    get showLeftValueContent() {
        var _a;
        return Boolean(this.leftValueContent &&
            !tuiIsNativeFocused(this.leftFocusableElement) &&
            !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'left'));
    }
    get showRightValueContent() {
        var _a;
        return Boolean(this.rightValueContent &&
            !tuiIsNativeFocused(this.rightFocusableElement) &&
            !(((_a = this.rangeRef) === null || _a === void 0 ? void 0 : _a.focused) && this.lastActiveSide === 'right'));
    }
    get precision() {
        return tuiGetFractionPartPadded(this.quantum).length;
    }
    get decimal() {
        return this.precision ? 'not-zero' : 'never';
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get step() {
        return (this.max - this.min) / this.computedSteps;
    }
    computeKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    onActiveZone(active) {
        this.updateFocused(active);
    }
    onTextInputFocused(focused, right) {
        if (focused) {
            return;
        }
        const [leftTextInputRef, rightTextInputRef] = this.inputNumberRefs;
        const inputRef = right ? rightTextInputRef : leftTextInputRef;
        const valueIndex = right ? 1 : 0;
        if (!inputRef.nativeValue || inputRef.value !== this.value[valueIndex]) {
            this.updateTextInputValue(this.safeCurrentValue[valueIndex], right);
        }
    }
    changeByStep(event, [leftCoefficient, rightCoefficient]) {
        if (this.readOnly) {
            return;
        }
        event.preventDefault();
        const newValue = this.valueGuard([
            this.value[0] + leftCoefficient * this.step,
            this.value[1] + rightCoefficient * this.step,
        ]);
        const leftValueChanged = newValue[0] !== this.value[0];
        const rightValueChanged = newValue[1] !== this.value[1];
        if (leftValueChanged || rightValueChanged) {
            this.safelyUpdateValue(newValue);
            this.updateTextInputValue(newValue[rightValueChanged ? 1 : 0], rightValueChanged);
        }
    }
    onInputLeft(value) {
        this.safelyUpdateValue([value !== null && value !== void 0 ? value : this.safeCurrentValue[0], this.value[1]]);
    }
    onInputRight(value) {
        this.safelyUpdateValue([this.value[0], value !== null && value !== void 0 ? value : this.safeCurrentValue[1]]);
    }
    onRangeValue(value) {
        this.safelyUpdateValue(value);
        const rightValueChanged = this.lastActiveSide === 'right';
        this.updateTextInputValue(this.value[rightValueChanged ? 1 : 0], rightValueChanged);
    }
    focusToTextInput() {
        const element = this.lastActiveSide === 'left'
            ? this.leftFocusableElement
            : this.rightFocusableElement;
        if (!this.isMobile && element) {
            element.focus();
        }
    }
    onActiveThumbChange(activeThumb) {
        this.lastActiveSide = activeThumb;
    }
    getFallbackValue() {
        return [0, 0];
    }
    safelyUpdateValue(value) {
        this.value = this.valueGuard(value);
    }
    valueGuard([leftValue, rightValue]) {
        const leftCalibratedValue = this.calibrate(leftValue);
        const rightCalibratedValue = this.calibrate(rightValue);
        return [
            Math.min(leftCalibratedValue, this.value[1]),
            Math.max(rightCalibratedValue, this.value[0]),
        ];
    }
    calibrate(value) {
        const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return tuiClamp(roundedValue, this.min, this.max);
    }
    updateTextInputValue(value, right) {
        const [leftInputRef, rightInputRef] = this.inputNumberRefs;
        const textInputRef = right ? rightInputRef : leftInputRef;
        if (textInputRef) {
            textInputRef.nativeValue = textInputRef.getFormattedValue(value);
        }
    }
}
TuiInputRangeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_IS_MOBILE }, { token: ElementRef }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
TuiInputRangeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputRangeComponent, selector: "tui-input-range", inputs: { min: "min", max: "max", quantum: "quantum", steps: "steps", segments: "segments", keySteps: "keySteps", leftValueContent: "leftValueContent", rightValueContent: "rightValueContent", pluralize: "pluralize" }, host: { properties: { "attr.data-size": "controller.size", "class._label-outside": "controller.labelOutside" } }, providers: [
        tuiAsFocusableItemAccessor(TuiInputRangeComponent),
        tuiAsControl(TuiInputRangeComponent),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], viewQueries: [{ propertyName: "rangeRef", first: true, predicate: TuiRangeComponent, descendants: true }, { propertyName: "inputNumberRefs", predicate: TuiInputNumberComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<div\n    tuiWrapper\n    class=\"t-wrapper\"\n    [appearance]=\"appearance\"\n    [readOnly]=\"readOnly\"\n    [disabled]=\"disabled\"\n    [focus]=\"computedFocused\"\n    [hover]=\"pseudoHover\"\n    [invalid]=\"computedInvalid\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-input-number\n        tuiTextfieldAppearance=\"none\"\n        automation-id=\"tui-input-range__left-input\"\n        class=\"t-left t-text-input\"\n        [min]=\"min\"\n        [max]=\"value[1]\"\n        [precision]=\"precision\"\n        [decimal]=\"decimal\"\n        [postfix]=\"pluralize && !showLeftValueContent ? (value[0] | i18nPlural : pluralize) : ''\"\n        [disabled]=\"computedDisabled\"\n        [readOnly]=\"readOnly\"\n        [ngModel]=\"value[0]\"\n        (ngModelChange)=\"onInputLeft($event)\"\n        (focusedChange)=\"onTextInputFocused($event, false)\"\n        (keydown.arrowUp)=\"changeByStep($event, [1, 0])\"\n        (keydown.arrowDown)=\"changeByStep($event, [-1, 0])\"\n    >\n        <ng-content></ng-content>\n        <div\n            *ngIf=\"showLeftValueContent\"\n            ngProjectAs=\"tuiContent\"\n        >\n            <ng-container *polymorpheusOutlet=\"leftValueContent as text; context: {$implicit: value[0]}\">\n                {{ text }}\n            </ng-container>\n        </div>\n    </tui-input-number>\n\n    <div class=\"t-right\">\n        <tui-input-number\n            tuiTextfieldAppearance=\"none\"\n            automation-id=\"tui-input-range__right-input\"\n            class=\"t-text-input\"\n            [min]=\"value[0]\"\n            [max]=\"max\"\n            [precision]=\"precision\"\n            [decimal]=\"decimal\"\n            [disabled]=\"computedDisabled\"\n            [readOnly]=\"readOnly\"\n            [ngModel]=\"value[1]\"\n            (ngModelChange)=\"onInputRight($event)\"\n            (focusedChange)=\"onTextInputFocused($event, true)\"\n            (keydown.arrowUp)=\"changeByStep($event, [0, 1])\"\n            (keydown.arrowDown)=\"changeByStep($event, [0, -1])\"\n        >\n            <div\n                *ngIf=\"showRightValueContent\"\n                ngProjectAs=\"tuiContent\"\n            >\n                <ng-container *polymorpheusOutlet=\"rightValueContent as text; context: {$implicit: value[1]}\">\n                    {{ text }}\n                </ng-container>\n            </div>\n        </tui-input-number>\n\n        <!-- TODO replace by postfix of the right InputNumber (after fix https://github.com/Tinkoff/taiga-ui/issues/1193) -->\n        <span\n            *ngIf=\"!showRightValueContent && pluralize\"\n            automation-id=\"tui-input-range__pluralize-right\"\n            class=\"t-pluralize-right\"\n        >\n            &nbsp;{{ value[1] | i18nPlural : pluralize }}\n        </span>\n    </div>\n\n    <tui-range\n        class=\"t-range\"\n        [min]=\"min\"\n        [max]=\"max\"\n        [step]=\"step\"\n        [segments]=\"segments\"\n        [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n        [focusable]=\"false\"\n        [disabled]=\"readOnly || disabled\"\n        [ngModel]=\"value\"\n        (ngModelChange)=\"onRangeValue($event)\"\n        (tuiPressedChange)=\"focusToTextInput()\"\n        (activeThumbChange)=\"onActiveThumbChange($event)\"\n    ></tui-range>\n</div>\n", styles: [".t-wrapper{position:relative}.t-left{width:100%}.t-right{position:absolute;right:0;top:0;display:flex;width:50%;height:100%;text-align:right}.t-right .t-text-input{flex:1}.t-text-input{text-align:inherit}.t-pluralize-right{display:flex;align-items:center;padding:1.125rem var(--tui-padding-m) 0 0;margin-left:-.75rem;font:var(--tui-font-text-s)}:host[data-size=l] .t-pluralize-right{font:var(--tui-font-text-m);padding-top:1.25rem;margin-left:-1rem;padding-right:var(--tui-padding-l)}:host._label-outside .t-pluralize-right{padding-top:0}:host._disabled .t-pluralize-right{color:var(--tui-text-03)}:host{display:block;border-radius:var(--tui-radius-m)}.t-range{position:absolute;top:100%;left:0;right:0;z-index:1;margin:-.125rem 0 0;background:transparent}\n"], components: [{ type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "prefix", "postfix"] }, { type: i2.TuiRangeComponent, selector: "tui-range", inputs: ["min", "max", "step", "size", "segments", "keySteps"] }], directives: [{ type: i3.TuiWrapperDirective, selector: "[tuiWrapper]", inputs: ["disabled", "readOnly", "hover", "active", "focus", "invalid", "appearance"] }, { type: i4.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1.TuiInputNumberDirective, selector: "tui-input-number" }, { type: i3.TuiTextfieldAppearanceDirective, selector: "[tuiTextfieldAppearance]", inputs: ["tuiTextfieldAppearance"] }, { type: i5.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i5.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i6.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i7.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.TuiRangeChangeDirective, selector: "tui-range", outputs: ["activeThumbChange"] }, { type: i4.TuiPressedDirective, selector: "[tuiPressedChange]", outputs: ["tuiPressedChange"] }], pipes: { "i18nPlural": i6.I18nPluralPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp(q => q > 0, '[quantum] must be positive')
], TuiInputRangeComponent.prototype, "quantum", void 0);
__decorate([
    tuiDefaultProp(s => s >= 0 && Number.isInteger(s), '[steps] must be non-negative integer')
], TuiInputRangeComponent.prototype, "steps", void 0);
__decorate([
    tuiDefaultProp(s => s > 0 && Number.isInteger(s), '[segments] must be positive integer')
], TuiInputRangeComponent.prototype, "segments", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "keySteps", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputRangeComponent.prototype, "pluralize", void 0);
__decorate([
    tuiPure
], TuiInputRangeComponent.prototype, "computeKeySteps", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputRangeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-range',
                    templateUrl: './input-range.template.html',
                    styleUrls: ['./input-range.style.less'],
                    host: {
                        '[attr.data-size]': 'controller.size',
                        '[class._label-outside]': 'controller.labelOutside',
                    },
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputRangeComponent),
                        tuiAsControl(TuiInputRangeComponent),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i3.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { inputNumberRefs: [{
                type: ViewChildren,
                args: [TuiInputNumberComponent]
            }], rangeRef: [{
                type: ViewChild,
                args: [TuiRangeComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], quantum: [{
                type: Input
            }], steps: [{
                type: Input
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], leftValueContent: [{
                type: Input
            }], rightValueContent: [{
                type: Input
            }], pluralize: [{
                type: Input
            }], computeKeySteps: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtcmFuZ2UuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtcmFuZ2UvaW5wdXQtcmFuZ2UuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtcmFuZ2UvaW5wdXQtcmFuZ2UudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUNILHVCQUF1QixFQUN2QixpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sS0FBSyxFQUNMLFFBQVEsRUFFUixJQUFJLEVBQ0osU0FBUyxFQUNULFlBQVksR0FDZixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNILGtCQUFrQixFQUNsQixXQUFXLEVBQ1gsYUFBYSxFQUNiLFlBQVksRUFDWiwwQkFBMEIsRUFDMUIsUUFBUSxFQUVSLGNBQWMsRUFFZCxrQkFBa0IsRUFDbEIsb0JBQW9CLEVBRXBCLE9BQU8sRUFDUCxRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUNILDZCQUE2QixFQUM3QixnQ0FBZ0MsRUFFaEMsd0JBQXdCLEdBRzNCLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEIsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFDOUUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDakUsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0seUJBQXlCLENBQUM7Ozs7Ozs7OztBQW1CL0QsTUFBTSxPQUFPLHNCQUNULFNBQVEsa0JBQW9DO0lBbUQ1QyxZQUlJLE9BQXlCLEVBQ0UsR0FBc0IsRUFFaEMsUUFBaUIsRUFDRyxFQUFjLEVBRTFDLFVBQWtD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LGdCQUFnQjtzQkFEZixLQUFLO2dCQUlOLGlCQUFpQjtzQkFEaEIsS0FBSztnQkFLTixTQUFTO3NCQUZSLEtBQUs7Z0JBNEVOLGVBQWUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPcHRpb25hbCxcbiAgICBRdWVyeUxpc3QsXG4gICAgU2VsZixcbiAgICBWaWV3Q2hpbGQsXG4gICAgVmlld0NoaWxkcmVuLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0VHVpQ29udHJvbCxcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBUVUlfSVNfTU9CSUxFLFxuICAgIHR1aUFzQ29udHJvbCxcbiAgICB0dWlBc0ZvY3VzYWJsZUl0ZW1BY2Nlc3NvcixcbiAgICB0dWlDbGFtcCxcbiAgICBUdWlDb250ZXh0V2l0aEltcGxpY2l0LFxuICAgIHR1aURlZmF1bHRQcm9wLFxuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICB0dWlJc05hdGl2ZUZvY3VzZWQsXG4gICAgdHVpSXNOYXRpdmVGb2N1c2VkSW4sXG4gICAgVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCxcbiAgICB0dWlQdXJlLFxuICAgIHR1aVJvdW5kLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7XG4gICAgVEVYVEZJRUxEX0NPTlRST0xMRVJfUFJPVklERVIsXG4gICAgVFVJX1RFWFRGSUVMRF9XQVRDSEVEX0NPTlRST0xMRVIsXG4gICAgVHVpRGVjaW1hbCxcbiAgICB0dWlHZXRGcmFjdGlvblBhcnRQYWRkZWQsXG4gICAgVHVpVGV4dGZpZWxkQ29udHJvbGxlcixcbiAgICBUdWlXaXRoT3B0aW9uYWxNaW5NYXgsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VHVpSW5wdXROdW1iZXJDb21wb25lbnR9IGZyb20gJ0B0YWlnYS11aS9raXQvY29tcG9uZW50cy9pbnB1dC1udW1iZXInO1xuaW1wb3J0IHtUdWlSYW5nZUNvbXBvbmVudH0gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb21wb25lbnRzL3JhbmdlJztcbmltcG9ydCB7VFVJX0ZMT0FUSU5HX1BSRUNJU0lPTn0gZnJvbSAnQHRhaWdhLXVpL2tpdC9jb25zdGFudHMnO1xuaW1wb3J0IHtUdWlLZXlTdGVwc30gZnJvbSAnQHRhaWdhLXVpL2tpdC90eXBlcyc7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWlucHV0LXJhbmdlJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vaW5wdXQtcmFuZ2UudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vaW5wdXQtcmFuZ2Uuc3R5bGUubGVzcyddLFxuICAgIGhvc3Q6IHtcbiAgICAgICAgJ1thdHRyLmRhdGEtc2l6ZV0nOiAnY29udHJvbGxlci5zaXplJyxcbiAgICAgICAgJ1tjbGFzcy5fbGFiZWwtb3V0c2lkZV0nOiAnY29udHJvbGxlci5sYWJlbE91dHNpZGUnLFxuICAgIH0sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzRm9jdXNhYmxlSXRlbUFjY2Vzc29yKFR1aUlucHV0UmFuZ2VDb21wb25lbnQpLFxuICAgICAgICB0dWlBc0NvbnRyb2woVHVpSW5wdXRSYW5nZUNvbXBvbmVudCksXG4gICAgICAgIFRFWFRGSUVMRF9DT05UUk9MTEVSX1BST1ZJREVSLFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0UmFuZ2VDb21wb25lbnRcbiAgICBleHRlbmRzIEFic3RyYWN0VHVpQ29udHJvbDxbbnVtYmVyLCBudW1iZXJdPlxuICAgIGltcGxlbWVudHMgVHVpV2l0aE9wdGlvbmFsTWluTWF4PG51bWJlcj4sIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3Nvclxue1xuICAgIEBWaWV3Q2hpbGRyZW4oVHVpSW5wdXROdW1iZXJDb21wb25lbnQpXG4gICAgcHJpdmF0ZSByZWFkb25seSBpbnB1dE51bWJlclJlZnM6IFF1ZXJ5TGlzdDxUdWlJbnB1dE51bWJlckNvbXBvbmVudD4gPSBFTVBUWV9RVUVSWTtcblxuICAgIEBWaWV3Q2hpbGQoVHVpUmFuZ2VDb21wb25lbnQpXG4gICAgcHJpdmF0ZSByZWFkb25seSByYW5nZVJlZjogVHVpUmFuZ2VDb21wb25lbnQgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBtaW4gPSAwO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIG1heCA9IDEwMDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKHEgPT4gcSA+IDAsICdbcXVhbnR1bV0gbXVzdCBiZSBwb3NpdGl2ZScpXG4gICAgcXVhbnR1bSA9IDE7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcChcbiAgICAgICAgcyA9PiBzID49IDAgJiYgTnVtYmVyLmlzSW50ZWdlcihzKSxcbiAgICAgICAgJ1tzdGVwc10gbXVzdCBiZSBub24tbmVnYXRpdmUgaW50ZWdlcicsXG4gICAgKVxuICAgIHN0ZXBzID0gMDtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKFxuICAgICAgICBzID0+IHMgPiAwICYmIE51bWJlci5pc0ludGVnZXIocyksXG4gICAgICAgICdbc2VnbWVudHNdIG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlcicsXG4gICAgKVxuICAgIHNlZ21lbnRzID0gMTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBrZXlTdGVwczogVHVpS2V5U3RlcHMgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgpXG4gICAgbGVmdFZhbHVlQ29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlDb250ZXh0V2l0aEltcGxpY2l0PG51bWJlcj4+O1xuXG4gICAgQElucHV0KClcbiAgICByaWdodFZhbHVlQ29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUdWlDb250ZXh0V2l0aEltcGxpY2l0PG51bWJlcj4+O1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHBsdXJhbGl6ZTogUmVjb3JkPHN0cmluZywgc3RyaW5nPiB8IG51bGwgPSBudWxsO1xuXG4gICAgbGFzdEFjdGl2ZVNpZGU6ICdsZWZ0JyB8ICdyaWdodCcgPSAnbGVmdCc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQFNlbGYoKVxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbClcbiAgICAgICAgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChUVUlfSVNfTU9CSUxFKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGlzTW9iaWxlOiBib29sZWFuLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWYsXG4gICAgICAgIEBJbmplY3QoVFVJX1RFWFRGSUVMRF9XQVRDSEVEX0NPTlRST0xMRVIpXG4gICAgICAgIHJlYWRvbmx5IGNvbnRyb2xsZXI6IFR1aVRleHRmaWVsZENvbnRyb2xsZXIsXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKGNvbnRyb2wsIGNkcik7XG4gICAgfVxuXG4gICAgZ2V0IGxlZnRGb2N1c2FibGVFbGVtZW50KCk6IEhUTUxJbnB1dEVsZW1lbnQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXROdW1iZXJSZWZzLmZpcnN0Py5uYXRpdmVGb2N1c2FibGVFbGVtZW50IHx8IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IHJpZ2h0Rm9jdXNhYmxlRWxlbWVudCgpOiBIVE1MSW5wdXRFbGVtZW50IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0TnVtYmVyUmVmcy5sYXN0Py5uYXRpdmVGb2N1c2FibGVFbGVtZW50IHx8IG51bGw7XG4gICAgfVxuXG4gICAgZ2V0IG5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQoKTogVHVpTmF0aXZlRm9jdXNhYmxlRWxlbWVudCB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZFxuICAgICAgICAgICAgPyBudWxsXG4gICAgICAgICAgICA6IHRoaXMubGVmdEZvY3VzYWJsZUVsZW1lbnQgfHwgdGhpcy5yaWdodEZvY3VzYWJsZUVsZW1lbnQ7XG4gICAgfVxuXG4gICAgZ2V0IGZvY3VzZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0dWlJc05hdGl2ZUZvY3VzZWRJbih0aGlzLmVsLm5hdGl2ZUVsZW1lbnQpO1xuICAgIH1cblxuICAgIGdldCBhcHBlYXJhbmNlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRyb2xsZXIuYXBwZWFyYW5jZTtcbiAgICB9XG5cbiAgICBnZXQgc2hvd0xlZnRWYWx1ZUNvbnRlbnQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKFxuICAgICAgICAgICAgdGhpcy5sZWZ0VmFsdWVDb250ZW50ICYmXG4gICAgICAgICAgICAgICAgIXR1aUlzTmF0aXZlRm9jdXNlZCh0aGlzLmxlZnRGb2N1c2FibGVFbGVtZW50KSAmJlxuICAgICAgICAgICAgICAgICEodGhpcy5yYW5nZVJlZj8uZm9jdXNlZCAmJiB0aGlzLmxhc3RBY3RpdmVTaWRlID09PSAnbGVmdCcpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldCBzaG93UmlnaHRWYWx1ZUNvbnRlbnQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKFxuICAgICAgICAgICAgdGhpcy5yaWdodFZhbHVlQ29udGVudCAmJlxuICAgICAgICAgICAgICAgICF0dWlJc05hdGl2ZUZvY3VzZWQodGhpcy5yaWdodEZvY3VzYWJsZUVsZW1lbnQpICYmXG4gICAgICAgICAgICAgICAgISh0aGlzLnJhbmdlUmVmPy5mb2N1c2VkICYmIHRoaXMubGFzdEFjdGl2ZVNpZGUgPT09ICdyaWdodCcpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGdldCBwcmVjaXNpb24oKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHR1aUdldEZyYWN0aW9uUGFydFBhZGRlZCh0aGlzLnF1YW50dW0pLmxlbmd0aDtcbiAgICB9XG5cbiAgICBnZXQgZGVjaW1hbCgpOiBUdWlEZWNpbWFsIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHJlY2lzaW9uID8gJ25vdC16ZXJvJyA6ICduZXZlcic7XG4gICAgfVxuXG4gICAgZ2V0IGNvbXB1dGVkU3RlcHMoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHMgfHwgKHRoaXMubWF4IC0gdGhpcy5taW4pIC8gdGhpcy5xdWFudHVtO1xuICAgIH1cblxuICAgIGdldCBzdGVwKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy5tYXggLSB0aGlzLm1pbikgLyB0aGlzLmNvbXB1dGVkU3RlcHM7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBjb21wdXRlS2V5U3RlcHMoa2V5U3RlcHM6IFR1aUtleVN0ZXBzIHwgbnVsbCwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKTogVHVpS2V5U3RlcHMge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAga2V5U3RlcHMgfHwgW1xuICAgICAgICAgICAgICAgIFswLCBtaW5dLFxuICAgICAgICAgICAgICAgIFsxMDAsIG1heF0sXG4gICAgICAgICAgICBdXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgb25BY3RpdmVab25lKGFjdGl2ZTogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICB0aGlzLnVwZGF0ZUZvY3VzZWQoYWN0aXZlKTtcbiAgICB9XG5cbiAgICBvblRleHRJbnB1dEZvY3VzZWQoZm9jdXNlZDogYm9vbGVhbiwgcmlnaHQ6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGZvY3VzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IFtsZWZ0VGV4dElucHV0UmVmLCByaWdodFRleHRJbnB1dFJlZl0gPSB0aGlzLmlucHV0TnVtYmVyUmVmcztcbiAgICAgICAgY29uc3QgaW5wdXRSZWYgPSByaWdodCA/IHJpZ2h0VGV4dElucHV0UmVmIDogbGVmdFRleHRJbnB1dFJlZjtcbiAgICAgICAgY29uc3QgdmFsdWVJbmRleCA9IHJpZ2h0ID8gMSA6IDA7XG5cbiAgICAgICAgaWYgKCFpbnB1dFJlZi5uYXRpdmVWYWx1ZSB8fCBpbnB1dFJlZi52YWx1ZSAhPT0gdGhpcy52YWx1ZVt2YWx1ZUluZGV4XSkge1xuICAgICAgICAgICAgdGhpcy51cGRhdGVUZXh0SW5wdXRWYWx1ZSh0aGlzLnNhZmVDdXJyZW50VmFsdWVbdmFsdWVJbmRleF0sIHJpZ2h0KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNoYW5nZUJ5U3RlcChcbiAgICAgICAgZXZlbnQ6IEV2ZW50IHwgS2V5Ym9hcmRFdmVudCxcbiAgICAgICAgW2xlZnRDb2VmZmljaWVudCwgcmlnaHRDb2VmZmljaWVudF06IFtudW1iZXIsIG51bWJlcl0sXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnJlYWRPbmx5KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIGNvbnN0IG5ld1ZhbHVlID0gdGhpcy52YWx1ZUd1YXJkKFtcbiAgICAgICAgICAgIHRoaXMudmFsdWVbMF0gKyBsZWZ0Q29lZmZpY2llbnQgKiB0aGlzLnN0ZXAsXG4gICAgICAgICAgICB0aGlzLnZhbHVlWzFdICsgcmlnaHRDb2VmZmljaWVudCAqIHRoaXMuc3RlcCxcbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IGxlZnRWYWx1ZUNoYW5nZWQgPSBuZXdWYWx1ZVswXSAhPT0gdGhpcy52YWx1ZVswXTtcbiAgICAgICAgY29uc3QgcmlnaHRWYWx1ZUNoYW5nZWQgPSBuZXdWYWx1ZVsxXSAhPT0gdGhpcy52YWx1ZVsxXTtcblxuICAgICAgICBpZiAobGVmdFZhbHVlQ2hhbmdlZCB8fCByaWdodFZhbHVlQ2hhbmdlZCkge1xuICAgICAgICAgICAgdGhpcy5zYWZlbHlVcGRhdGVWYWx1ZShuZXdWYWx1ZSk7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZVRleHRJbnB1dFZhbHVlKFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlW3JpZ2h0VmFsdWVDaGFuZ2VkID8gMSA6IDBdLFxuICAgICAgICAgICAgICAgIHJpZ2h0VmFsdWVDaGFuZ2VkLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG9uSW5wdXRMZWZ0KHZhbHVlOiBudW1iZXIgfCBudWxsKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc2FmZWx5VXBkYXRlVmFsdWUoW3ZhbHVlID8/IHRoaXMuc2FmZUN1cnJlbnRWYWx1ZVswXSwgdGhpcy52YWx1ZVsxXV0pO1xuICAgIH1cblxuICAgIG9uSW5wdXRSaWdodCh2YWx1ZTogbnVtYmVyIHwgbnVsbCk6IHZvaWQge1xuICAgICAgICB0aGlzLnNhZmVseVVwZGF0ZVZhbHVlKFt0aGlzLnZhbHVlWzBdLCB2YWx1ZSA/PyB0aGlzLnNhZmVDdXJyZW50VmFsdWVbMV1dKTtcbiAgICB9XG5cbiAgICBvblJhbmdlVmFsdWUodmFsdWU6IFtudW1iZXIsIG51bWJlcl0pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zYWZlbHlVcGRhdGVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgY29uc3QgcmlnaHRWYWx1ZUNoYW5nZWQgPSB0aGlzLmxhc3RBY3RpdmVTaWRlID09PSAncmlnaHQnO1xuXG4gICAgICAgIHRoaXMudXBkYXRlVGV4dElucHV0VmFsdWUoXG4gICAgICAgICAgICB0aGlzLnZhbHVlW3JpZ2h0VmFsdWVDaGFuZ2VkID8gMSA6IDBdLFxuICAgICAgICAgICAgcmlnaHRWYWx1ZUNoYW5nZWQsXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgZm9jdXNUb1RleHRJbnB1dCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgZWxlbWVudCA9XG4gICAgICAgICAgICB0aGlzLmxhc3RBY3RpdmVTaWRlID09PSAnbGVmdCdcbiAgICAgICAgICAgICAgICA/IHRoaXMubGVmdEZvY3VzYWJsZUVsZW1lbnRcbiAgICAgICAgICAgICAgICA6IHRoaXMucmlnaHRGb2N1c2FibGVFbGVtZW50O1xuXG4gICAgICAgIGlmICghdGhpcy5pc01vYmlsZSAmJiBlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBvbkFjdGl2ZVRodW1iQ2hhbmdlKGFjdGl2ZVRodW1iOiAnbGVmdCcgfCAncmlnaHQnKTogdm9pZCB7XG4gICAgICAgIHRoaXMubGFzdEFjdGl2ZVNpZGUgPSBhY3RpdmVUaHVtYjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0RmFsbGJhY2tWYWx1ZSgpOiBbbnVtYmVyLCBudW1iZXJdIHtcbiAgICAgICAgcmV0dXJuIFswLCAwXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNhZmVseVVwZGF0ZVZhbHVlKHZhbHVlOiBbbnVtYmVyLCBudW1iZXJdKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlR3VhcmQodmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdmFsdWVHdWFyZChbbGVmdFZhbHVlLCByaWdodFZhbHVlXTogW251bWJlciwgbnVtYmVyXSk6IFtudW1iZXIsIG51bWJlcl0ge1xuICAgICAgICBjb25zdCBsZWZ0Q2FsaWJyYXRlZFZhbHVlID0gdGhpcy5jYWxpYnJhdGUobGVmdFZhbHVlKTtcbiAgICAgICAgY29uc3QgcmlnaHRDYWxpYnJhdGVkVmFsdWUgPSB0aGlzLmNhbGlicmF0ZShyaWdodFZhbHVlKTtcblxuICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgTWF0aC5taW4obGVmdENhbGlicmF0ZWRWYWx1ZSwgdGhpcy52YWx1ZVsxXSksXG4gICAgICAgICAgICBNYXRoLm1heChyaWdodENhbGlicmF0ZWRWYWx1ZSwgdGhpcy52YWx1ZVswXSksXG4gICAgICAgIF07XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBjYWxpYnJhdGUodmFsdWU6IG51bWJlcik6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHJvdW5kZWRWYWx1ZSA9IHR1aVJvdW5kKFxuICAgICAgICAgICAgTWF0aC5yb3VuZCh2YWx1ZSAvIHRoaXMucXVhbnR1bSkgKiB0aGlzLnF1YW50dW0sXG4gICAgICAgICAgICBUVUlfRkxPQVRJTkdfUFJFQ0lTSU9OLFxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiB0dWlDbGFtcChyb3VuZGVkVmFsdWUsIHRoaXMubWluLCB0aGlzLm1heCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVUZXh0SW5wdXRWYWx1ZSh2YWx1ZTogbnVtYmVyLCByaWdodDogYm9vbGVhbik6IHZvaWQge1xuICAgICAgICBjb25zdCBbbGVmdElucHV0UmVmLCByaWdodElucHV0UmVmXSA9IHRoaXMuaW5wdXROdW1iZXJSZWZzO1xuICAgICAgICBjb25zdCB0ZXh0SW5wdXRSZWYgPSByaWdodCA/IHJpZ2h0SW5wdXRSZWYgOiBsZWZ0SW5wdXRSZWY7XG5cbiAgICAgICAgaWYgKHRleHRJbnB1dFJlZikge1xuICAgICAgICAgICAgdGV4dElucHV0UmVmLm5hdGl2ZVZhbHVlID0gdGV4dElucHV0UmVmLmdldEZvcm1hdHRlZFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIjxkaXZcbiAgICB0dWlXcmFwcGVyXG4gICAgY2xhc3M9XCJ0LXdyYXBwZXJcIlxuICAgIFthcHBlYXJhbmNlXT1cImFwcGVhcmFuY2VcIlxuICAgIFtyZWFkT25seV09XCJyZWFkT25seVwiXG4gICAgW2Rpc2FibGVkXT1cImRpc2FibGVkXCJcbiAgICBbZm9jdXNdPVwiY29tcHV0ZWRGb2N1c2VkXCJcbiAgICBbaG92ZXJdPVwicHNldWRvSG92ZXJcIlxuICAgIFtpbnZhbGlkXT1cImNvbXB1dGVkSW52YWxpZFwiXG4gICAgKHR1aUFjdGl2ZVpvbmVDaGFuZ2UpPVwib25BY3RpdmVab25lKCRldmVudClcIlxuPlxuICAgIDx0dWktaW5wdXQtbnVtYmVyXG4gICAgICAgIHR1aVRleHRmaWVsZEFwcGVhcmFuY2U9XCJub25lXCJcbiAgICAgICAgYXV0b21hdGlvbi1pZD1cInR1aS1pbnB1dC1yYW5nZV9fbGVmdC1pbnB1dFwiXG4gICAgICAgIGNsYXNzPVwidC1sZWZ0IHQtdGV4dC1pbnB1dFwiXG4gICAgICAgIFttaW5dPVwibWluXCJcbiAgICAgICAgW21heF09XCJ2YWx1ZVsxXVwiXG4gICAgICAgIFtwcmVjaXNpb25dPVwicHJlY2lzaW9uXCJcbiAgICAgICAgW2RlY2ltYWxdPVwiZGVjaW1hbFwiXG4gICAgICAgIFtwb3N0Zml4XT1cInBsdXJhbGl6ZSAmJiAhc2hvd0xlZnRWYWx1ZUNvbnRlbnQgPyAodmFsdWVbMF0gfCBpMThuUGx1cmFsIDogcGx1cmFsaXplKSA6ICcnXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cImNvbXB1dGVkRGlzYWJsZWRcIlxuICAgICAgICBbcmVhZE9ubHldPVwicmVhZE9ubHlcIlxuICAgICAgICBbbmdNb2RlbF09XCJ2YWx1ZVswXVwiXG4gICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cIm9uSW5wdXRMZWZ0KCRldmVudClcIlxuICAgICAgICAoZm9jdXNlZENoYW5nZSk9XCJvblRleHRJbnB1dEZvY3VzZWQoJGV2ZW50LCBmYWxzZSlcIlxuICAgICAgICAoa2V5ZG93bi5hcnJvd1VwKT1cImNoYW5nZUJ5U3RlcCgkZXZlbnQsIFsxLCAwXSlcIlxuICAgICAgICAoa2V5ZG93bi5hcnJvd0Rvd24pPVwiY2hhbmdlQnlTdGVwKCRldmVudCwgWy0xLCAwXSlcIlxuICAgID5cbiAgICAgICAgPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuICAgICAgICA8ZGl2XG4gICAgICAgICAgICAqbmdJZj1cInNob3dMZWZ0VmFsdWVDb250ZW50XCJcbiAgICAgICAgICAgIG5nUHJvamVjdEFzPVwidHVpQ29udGVudFwiXG4gICAgICAgID5cbiAgICAgICAgICAgIDxuZy1jb250YWluZXIgKnBvbHltb3JwaGV1c091dGxldD1cImxlZnRWYWx1ZUNvbnRlbnQgYXMgdGV4dDsgY29udGV4dDogeyRpbXBsaWNpdDogdmFsdWVbMF19XCI+XG4gICAgICAgICAgICAgICAge3sgdGV4dCB9fVxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvdHVpLWlucHV0LW51bWJlcj5cblxuICAgIDxkaXYgY2xhc3M9XCJ0LXJpZ2h0XCI+XG4gICAgICAgIDx0dWktaW5wdXQtbnVtYmVyXG4gICAgICAgICAgICB0dWlUZXh0ZmllbGRBcHBlYXJhbmNlPVwibm9uZVwiXG4gICAgICAgICAgICBhdXRvbWF0aW9uLWlkPVwidHVpLWlucHV0LXJhbmdlX19yaWdodC1pbnB1dFwiXG4gICAgICAgICAgICBjbGFzcz1cInQtdGV4dC1pbnB1dFwiXG4gICAgICAgICAgICBbbWluXT1cInZhbHVlWzBdXCJcbiAgICAgICAgICAgIFttYXhdPVwibWF4XCJcbiAgICAgICAgICAgIFtwcmVjaXNpb25dPVwicHJlY2lzaW9uXCJcbiAgICAgICAgICAgIFtkZWNpbWFsXT1cImRlY2ltYWxcIlxuICAgICAgICAgICAgW2Rpc2FibGVkXT1cImNvbXB1dGVkRGlzYWJsZWRcIlxuICAgICAgICAgICAgW3JlYWRPbmx5XT1cInJlYWRPbmx5XCJcbiAgICAgICAgICAgIFtuZ01vZGVsXT1cInZhbHVlWzFdXCJcbiAgICAgICAgICAgIChuZ01vZGVsQ2hhbmdlKT1cIm9uSW5wdXRSaWdodCgkZXZlbnQpXCJcbiAgICAgICAgICAgIChmb2N1c2VkQ2hhbmdlKT1cIm9uVGV4dElucHV0Rm9jdXNlZCgkZXZlbnQsIHRydWUpXCJcbiAgICAgICAgICAgIChrZXlkb3duLmFycm93VXApPVwiY2hhbmdlQnlTdGVwKCRldmVudCwgWzAsIDFdKVwiXG4gICAgICAgICAgICAoa2V5ZG93bi5hcnJvd0Rvd24pPVwiY2hhbmdlQnlTdGVwKCRldmVudCwgWzAsIC0xXSlcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgKm5nSWY9XCJzaG93UmlnaHRWYWx1ZUNvbnRlbnRcIlxuICAgICAgICAgICAgICAgIG5nUHJvamVjdEFzPVwidHVpQ29udGVudFwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqcG9seW1vcnBoZXVzT3V0bGV0PVwicmlnaHRWYWx1ZUNvbnRlbnQgYXMgdGV4dDsgY29udGV4dDogeyRpbXBsaWNpdDogdmFsdWVbMV19XCI+XG4gICAgICAgICAgICAgICAgICAgIHt7IHRleHQgfX1cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L3R1aS1pbnB1dC1udW1iZXI+XG5cbiAgICAgICAgPCEtLSBUT0RPIHJlcGxhY2UgYnkgcG9zdGZpeCBvZiB0aGUgcmlnaHQgSW5wdXROdW1iZXIgKGFmdGVyIGZpeCBodHRwczovL2dpdGh1Yi5jb20vVGlua29mZi90YWlnYS11aS9pc3N1ZXMvMTE5MykgLS0+XG4gICAgICAgIDxzcGFuXG4gICAgICAgICAgICAqbmdJZj1cIiFzaG93UmlnaHRWYWx1ZUNvbnRlbnQgJiYgcGx1cmFsaXplXCJcbiAgICAgICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktaW5wdXQtcmFuZ2VfX3BsdXJhbGl6ZS1yaWdodFwiXG4gICAgICAgICAgICBjbGFzcz1cInQtcGx1cmFsaXplLXJpZ2h0XCJcbiAgICAgICAgPlxuICAgICAgICAgICAgJm5ic3A7e3sgdmFsdWVbMV0gfCBpMThuUGx1cmFsIDogcGx1cmFsaXplIH19XG4gICAgICAgIDwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDx0dWktcmFuZ2VcbiAgICAgICAgY2xhc3M9XCJ0LXJhbmdlXCJcbiAgICAgICAgW21pbl09XCJtaW5cIlxuICAgICAgICBbbWF4XT1cIm1heFwiXG4gICAgICAgIFtzdGVwXT1cInN0ZXBcIlxuICAgICAgICBbc2VnbWVudHNdPVwic2VnbWVudHNcIlxuICAgICAgICBba2V5U3RlcHNdPVwiY29tcHV0ZUtleVN0ZXBzKGtleVN0ZXBzLCBtaW4sIG1heClcIlxuICAgICAgICBbZm9jdXNhYmxlXT1cImZhbHNlXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cInJlYWRPbmx5IHx8IGRpc2FibGVkXCJcbiAgICAgICAgW25nTW9kZWxdPVwidmFsdWVcIlxuICAgICAgICAobmdNb2RlbENoYW5nZSk9XCJvblJhbmdlVmFsdWUoJGV2ZW50KVwiXG4gICAgICAgICh0dWlQcmVzc2VkQ2hhbmdlKT1cImZvY3VzVG9UZXh0SW5wdXQoKVwiXG4gICAgICAgIChhY3RpdmVUaHVtYkNoYW5nZSk9XCJvbkFjdGl2ZVRodW1iQ2hhbmdlKCRldmVudClcIlxuICAgID48L3R1aS1yYW5nZT5cbjwvZGl2PlxuIl19