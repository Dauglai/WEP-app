import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, HostBinding, Input } from '@angular/core';
import { tuiDefaultProp, tuiIsString } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk";
export class TuiProgressSegmentedComponent {
    constructor() {
        this.value = 0;
        this.max = 1;
        this.size = 'm';
        this.colors = 'var(--tui-primary)';
    }
    getActiveColor(index = 0) {
        return tuiIsString(this.colors)
            ? this.colors
            : this.colors[index] || this.colors[this.colors.length - 1];
    }
}
TuiProgressSegmentedComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressSegmentedComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });
TuiProgressSegmentedComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiProgressSegmentedComponent, selector: "tui-progress-segmented", inputs: { value: "value", max: "max", size: "size", colors: "colors" }, host: { properties: { "attr.data-size": "this.size" } }, ngImport: i0, template: "<progress\n    class=\"t-hidden-progress\"\n    [value]=\"value\"\n    [max]=\"max\"\n></progress>\n\n<span\n    *tuiRepeatTimes=\"let index of max\"\n    aria-hidden=\"true\"\n    class=\"t-segment\"\n    [style.background]=\"index < value ? getActiveColor(index) : null\"\n></span>\n", styles: [":host{display:flex}.t-segment{transition-property:background-color;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;flex:1 1 100%;border-radius:var(--tui-radius-xs);background-color:var(--tui-base-03)}.t-segment:not(:last-child){margin-right:.25rem}:host[data-size=s] .t-segment{height:.25rem}:host[data-size=m] .t-segment{height:.5rem}.t-hidden-progress{position:absolute;clip:rect(1px,1px,1px,1px);-webkit-clip-path:inset(50%);clip-path:inset(50%);height:1px;width:1px;margin:-1px;overflow:hidden;padding:0}\n"], directives: [{ type: i1.TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: ["tuiRepeatTimesOf"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp((value) => Number.isInteger(value) && value >= 0, 'Must be non-negative integer between 0 and max')
], TuiProgressSegmentedComponent.prototype, "value", void 0);
__decorate([
    tuiDefaultProp((value) => Number.isInteger(value) && value > 0, 'Must be positive integer')
], TuiProgressSegmentedComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiProgressSegmentedComponent.prototype, "colors", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiProgressSegmentedComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-progress-segmented',
                    templateUrl: './progress-segmented.template.html',
                    styleUrls: ['./progress-segmented.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { value: [{
                type: Input
            }], max: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], colors: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3Mtc2VnbWVudGVkLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3Byb2dyZXNzL3Byb2dyZXNzLXNlZ21lbnRlZC9wcm9ncmVzcy1zZWdtZW50ZWQuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvcHJvZ3Jlc3MvcHJvZ3Jlc3Mtc2VnbWVudGVkL3Byb2dyZXNzLXNlZ21lbnRlZC50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLGNBQWMsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7OztBQVMxRCxNQUFNLE9BQU8sNkJBQTZCO0lBTjFDO1FBWUksVUFBSyxHQUFHLENBQUMsQ0FBQztRQU9WLFFBQUcsR0FBRyxDQUFDLENBQUM7UUFJUixTQUFJLEdBQWEsR0FBRyxDQUFDO1FBSXJCLFdBQU0sR0FBK0Isb0JBQW9CLENBQUM7S0FPN0Q7SUFMRyxjQUFjLENBQUMsUUFBZ0IsQ0FBQztRQUM1QixPQUFPLFdBQVcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQzNCLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTTtZQUNiLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7MkhBM0JRLDZCQUE2QjsrR0FBN0IsNkJBQTZCLCtMQ1YxQywrUkFZQTtBRElJO0lBSkMsY0FBYyxDQUNYLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssSUFBSSxDQUFDLEVBQ3hELGdEQUFnRCxDQUNuRDs0REFDUztBQU9WO0lBSkMsY0FBYyxDQUNYLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxJQUFJLEtBQUssR0FBRyxDQUFDLEVBQ3ZELDBCQUEwQixDQUM3QjswREFDTztBQVFSO0lBREMsY0FBYyxFQUFFOzZEQUN5Qzs0RkFyQmpELDZCQUE2QjtrQkFOekMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsd0JBQXdCO29CQUNsQyxXQUFXLEVBQUUsb0NBQW9DO29CQUNqRCxTQUFTLEVBQUUsQ0FBQyxpQ0FBaUMsQ0FBQztvQkFDOUMsZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07aUJBQ2xEOzhCQU9HLEtBQUs7c0JBTEosS0FBSztnQkFZTixHQUFHO3NCQUxGLEtBQUs7Z0JBU04sSUFBSTtzQkFGSCxLQUFLOztzQkFDTCxXQUFXO3VCQUFDLGdCQUFnQjtnQkFLN0IsTUFBTTtzQkFGTCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlEZWZhdWx0UHJvcCwgdHVpSXNTdHJpbmd9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplU30gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ3R1aS1wcm9ncmVzcy1zZWdtZW50ZWQnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9wcm9ncmVzcy1zZWdtZW50ZWQudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vcHJvZ3Jlc3Mtc2VnbWVudGVkLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHJvZ3Jlc3NTZWdtZW50ZWRDb21wb25lbnQge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKFxuICAgICAgICAodmFsdWU6IG51bWJlcikgPT4gTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPj0gMCxcbiAgICAgICAgJ011c3QgYmUgbm9uLW5lZ2F0aXZlIGludGVnZXIgYmV0d2VlbiAwIGFuZCBtYXgnLFxuICAgIClcbiAgICB2YWx1ZSA9IDA7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcChcbiAgICAgICAgKHZhbHVlOiBudW1iZXIpID0+IE51bWJlci5pc0ludGVnZXIodmFsdWUpICYmIHZhbHVlID4gMCxcbiAgICAgICAgJ011c3QgYmUgcG9zaXRpdmUgaW50ZWdlcicsXG4gICAgKVxuICAgIG1heCA9IDE7XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIHNpemU6IFR1aVNpemVTID0gJ20nO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGNvbG9yczogc3RyaW5nIHwgcmVhZG9ubHkgc3RyaW5nW10gPSAndmFyKC0tdHVpLXByaW1hcnkpJztcblxuICAgIGdldEFjdGl2ZUNvbG9yKGluZGV4OiBudW1iZXIgPSAwKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0dWlJc1N0cmluZyh0aGlzLmNvbG9ycylcbiAgICAgICAgICAgID8gdGhpcy5jb2xvcnNcbiAgICAgICAgICAgIDogdGhpcy5jb2xvcnNbaW5kZXhdIHx8IHRoaXMuY29sb3JzW3RoaXMuY29sb3JzLmxlbmd0aCAtIDFdO1xuICAgIH1cbn1cbiIsIjxwcm9ncmVzc1xuICAgIGNsYXNzPVwidC1oaWRkZW4tcHJvZ3Jlc3NcIlxuICAgIFt2YWx1ZV09XCJ2YWx1ZVwiXG4gICAgW21heF09XCJtYXhcIlxuPjwvcHJvZ3Jlc3M+XG5cbjxzcGFuXG4gICAgKnR1aVJlcGVhdFRpbWVzPVwibGV0IGluZGV4IG9mIG1heFwiXG4gICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICBjbGFzcz1cInQtc2VnbWVudFwiXG4gICAgW3N0eWxlLmJhY2tncm91bmRdPVwiaW5kZXggPCB2YWx1ZSA/IGdldEFjdGl2ZUNvbG9yKGluZGV4KSA6IG51bGxcIlxuPjwvc3Bhbj5cbiJdfQ==