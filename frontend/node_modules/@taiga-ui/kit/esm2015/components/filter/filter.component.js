import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, EventEmitter, HostBinding, Inject, Input, Optional, Output, Self, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiMultipleControl, ALWAYS_FALSE_HANDLER, TUI_DEFAULT_IDENTITY_MATCHER, TUI_DEFAULT_STRINGIFY, tuiDefaultProp, tuiIsNativeFocusedIn, } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/checkbox-block";
import * as i2 from "@taiga-ui/kit/components/badge";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
import * as i5 from "@tinkoff/ng-polymorpheus";
import * as i6 from "@taiga-ui/core";
// @bad TODO: Add active zone to track focus
export class TuiFilterComponent extends AbstractTuiMultipleControl {
    constructor(control, cdr, el) {
        super(control, cdr);
        this.el = el;
        this.identityMatcher = TUI_DEFAULT_IDENTITY_MATCHER;
        this.items = [];
        this.size = 'm';
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.toggledItem = new EventEmitter();
        this.content = ({ $implicit }) => TUI_DEFAULT_STRINGIFY($implicit);
        this.badgeHandler = item => Number(item);
    }
    get focused() {
        return tuiIsNativeFocusedIn(this.el.nativeElement);
    }
    onCheckbox(value, item) {
        this.toggledItem.emit(item);
        this.value = value
            ? [...this.value, item]
            : this.value.filter(arrItem => !this.identityMatcher(arrItem, item));
    }
    isCheckboxEnabled(item) {
        return this.value.some(arrItem => this.identityMatcher(arrItem, item));
    }
}
TuiFilterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Component });
TuiFilterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiFilterComponent, selector: "tui-filter", inputs: { identityMatcher: "identityMatcher", items: "items", size: "size", disabledItemHandler: "disabledItemHandler", content: "content", badgeHandler: "badgeHandler" }, outputs: { toggledItem: "toggledItem" }, host: { properties: { "attr.data-size": "this.size" } }, usesInheritance: true, ngImport: i0, template: "<tui-checkbox-block\n    *ngFor=\"let item of items\"\n    automation-id=\"tui-filter__checkbox\"\n    class=\"t-item\"\n    [disabled]=\"disabledItemHandler(item)\"\n    [hideCheckbox]=\"true\"\n    [ngModel]=\"isCheckboxEnabled(item)\"\n    [size]=\"size\"\n    (ngModelChange)=\"onCheckbox($event, item)\"\n>\n    <div\n        automation-id=\"tui-filter__content\"\n        class=\"t-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"content as text; context: {$implicit: item}\">\n            {{ text }}\n        </ng-container>\n        <tui-badge\n            *ngIf=\"badgeHandler(item) as badgeValue\"\n            automation-id=\"tui-filter__badge\"\n            tuiMode=\"onLight\"\n            class=\"t-badge\"\n            [class.t-badge_disabled]=\"disabledItemHandler(item)\"\n            [size]=\"size\"\n            [value]=\"badgeValue\"\n        ></tui-badge>\n    </div>\n</tui-checkbox-block>\n", styles: [":host{display:block;margin-bottom:-.25rem}.t-content{display:flex;align-items:center}.t-item{margin-right:.25rem;margin-bottom:.25rem}.t-item:last-child,:host[data-size=l] .t-item:last-child{margin-right:0}:host[data-size=l] .t-item{margin-right:.5rem;margin-bottom:.5rem}.t-badge{margin-left:.25rem}.t-badge_disabled{opacity:var(--tui-disabled-opacity)}\n"], components: [{ type: i1.TuiCheckboxBlockComponent, selector: "tui-checkbox-block", inputs: ["contentAlign", "hideCheckbox", "size"] }, { type: i2.TuiBadgeComponent, selector: "tui-badge", inputs: ["value", "size", "status", "hoverable"] }], directives: [{ type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.TuiModeDirective, selector: "[tuiMode]", inputs: ["tuiMode"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "identityMatcher", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "items", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "size", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiFilterComponent.prototype, "badgeHandler", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-filter',
                    templateUrl: './filter.template.html',
                    styleUrls: ['./filter.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { identityMatcher: [{
                type: Input
            }], items: [{
                type: Input
            }], size: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['attr.data-size']
            }], disabledItemHandler: [{
                type: Input
            }], toggledItem: [{
                type: Output
            }], content: [{
                type: Input
            }], badgeHandler: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL2ZpbHRlci9maWx0ZXIuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvZmlsdGVyL2ZpbHRlci50ZW1wbGF0ZS5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsdUJBQXVCLEVBQ3ZCLGlCQUFpQixFQUNqQixTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixXQUFXLEVBQ1gsTUFBTSxFQUNOLEtBQUssRUFDTCxRQUFRLEVBQ1IsTUFBTSxFQUNOLElBQUksR0FDUCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekMsT0FBTyxFQUNILDBCQUEwQixFQUMxQixvQkFBb0IsRUFDcEIsNEJBQTRCLEVBQzVCLHFCQUFxQixFQUdyQixjQUFjLEVBR2Qsb0JBQW9CLEdBQ3ZCLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQUl2Qiw0Q0FBNEM7QUFPNUMsTUFBTSxPQUFPLGtCQUFzQixTQUFRLDBCQUE2QjtJQXFCcEUsWUFJSSxPQUF5QixFQUNFLEdBQXNCLEVBQ1osRUFBMkI7UUFFaEUsS0FBSyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztRQUZpQixPQUFFLEdBQUYsRUFBRSxDQUF5QjtRQXhCcEUsb0JBQWUsR0FBMEIsNEJBQTRCLENBQUM7UUFJdEUsVUFBSyxHQUFpQixFQUFFLENBQUM7UUFLekIsU0FBSSxHQUF3QixHQUFHLENBQUM7UUFJaEMsd0JBQW1CLEdBQXlCLG9CQUFvQixDQUFDO1FBR3hELGdCQUFXLEdBQUcsSUFBSSxZQUFZLEVBQUssQ0FBQztRQWM3QyxZQUFPLEdBQXdCLENBQUMsRUFBQyxTQUFTLEVBQWtDLEVBQUUsRUFBRSxDQUM1RSxxQkFBcUIsQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUlyQyxpQkFBWSxHQUEwQixJQUFJLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQVIzRCxDQUFDO0lBVUQsSUFBSSxPQUFPO1FBQ1AsT0FBTyxvQkFBb0IsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7SUFFRCxVQUFVLENBQUMsS0FBYyxFQUFFLElBQU87UUFDOUIsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDNUIsSUFBSSxDQUFDLEtBQUssR0FBRyxLQUFLO1lBQ2QsQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQztZQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUVELGlCQUFpQixDQUFDLElBQU87UUFDckIsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQzs7Z0hBckRRLGtCQUFrQixrQkF3QmYsU0FBUyx5Q0FFVCxpQkFBaUIsYUFDakIsVUFBVTtvR0EzQmIsa0JBQWtCLHVWQ3BDL0IsaTZCQTRCQTtBRFdJO0lBREMsY0FBYyxFQUFFOzJEQUNxRDtBQUl0RTtJQURDLGNBQWMsRUFBRTtpREFDUTtBQUt6QjtJQURDLGNBQWMsRUFBRTtnREFDZTtBQUloQztJQURDLGNBQWMsRUFBRTsrREFDZ0Q7QUFzQmpFO0lBREMsY0FBYyxFQUFFO3dEQUMwQzs0RkF0Q2xELGtCQUFrQjtrQkFOOUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsWUFBWTtvQkFDdEIsV0FBVyxFQUFFLHdCQUF3QjtvQkFDckMsU0FBUyxFQUFFLENBQUMscUJBQXFCLENBQUM7b0JBQ2xDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs7MEJBdUJRLFFBQVE7OzBCQUNSLElBQUk7OzBCQUNKLE1BQU07MkJBQUMsU0FBUzs7MEJBRWhCLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDeEIsTUFBTTsyQkFBQyxVQUFVOzRDQXhCdEIsZUFBZTtzQkFGZCxLQUFLO2dCQU1OLEtBQUs7c0JBRkosS0FBSztnQkFPTixJQUFJO3NCQUhILEtBQUs7O3NCQUNMLFdBQVc7dUJBQUMsZ0JBQWdCO2dCQU03QixtQkFBbUI7c0JBRmxCLEtBQUs7Z0JBS0csV0FBVztzQkFEbkIsTUFBTTtnQkFlUCxPQUFPO3NCQUROLEtBQUs7Z0JBTU4sWUFBWTtzQkFGWCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSxcbiAgICBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICBDb21wb25lbnQsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9wdGlvbmFsLFxuICAgIE91dHB1dCxcbiAgICBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TmdDb250cm9sfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQge1xuICAgIEFic3RyYWN0VHVpTXVsdGlwbGVDb250cm9sLFxuICAgIEFMV0FZU19GQUxTRV9IQU5ETEVSLFxuICAgIFRVSV9ERUZBVUxUX0lERU5USVRZX01BVENIRVIsXG4gICAgVFVJX0RFRkFVTFRfU1RSSU5HSUZZLFxuICAgIFR1aUJvb2xlYW5IYW5kbGVyLFxuICAgIFR1aUNvbnRleHRXaXRoSW1wbGljaXQsXG4gICAgdHVpRGVmYXVsdFByb3AsXG4gICAgVHVpSGFuZGxlcixcbiAgICBUdWlJZGVudGl0eU1hdGNoZXIsXG4gICAgdHVpSXNOYXRpdmVGb2N1c2VkSW4sXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUdWlTaXplTCwgVHVpU2l6ZVN9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29udGVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuLy8gQGJhZCBUT0RPOiBBZGQgYWN0aXZlIHpvbmUgdG8gdHJhY2sgZm9jdXNcbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWZpbHRlcicsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ZpbHRlci50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9maWx0ZXIuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGaWx0ZXJDb21wb25lbnQ8VD4gZXh0ZW5kcyBBYnN0cmFjdFR1aU11bHRpcGxlQ29udHJvbDxUPiB7XG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGlkZW50aXR5TWF0Y2hlcjogVHVpSWRlbnRpdHlNYXRjaGVyPFQ+ID0gVFVJX0RFRkFVTFRfSURFTlRJVFlfTUFUQ0hFUjtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBpdGVtczogcmVhZG9ubHkgVFtdID0gW107XG5cbiAgICBASW5wdXQoKVxuICAgIEBIb3N0QmluZGluZygnYXR0ci5kYXRhLXNpemUnKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgc2l6ZTogVHVpU2l6ZUwgfCBUdWlTaXplUyA9ICdtJztcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBkaXNhYmxlZEl0ZW1IYW5kbGVyOiBUdWlCb29sZWFuSGFuZGxlcjxUPiA9IEFMV0FZU19GQUxTRV9IQU5ETEVSO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdG9nZ2xlZEl0ZW0gPSBuZXcgRXZlbnRFbWl0dGVyPFQ+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQFNlbGYoKVxuICAgICAgICBASW5qZWN0KE5nQ29udHJvbClcbiAgICAgICAgY29udHJvbDogTmdDb250cm9sIHwgbnVsbCxcbiAgICAgICAgQEluamVjdChDaGFuZ2VEZXRlY3RvclJlZikgY2RyOiBDaGFuZ2VEZXRlY3RvclJlZixcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSBwcml2YXRlIHJlYWRvbmx5IGVsOiBFbGVtZW50UmVmPEhUTUxFbGVtZW50PixcbiAgICApIHtcbiAgICAgICAgc3VwZXIoY29udHJvbCwgY2RyKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIGNvbnRlbnQ6IFBvbHltb3JwaGV1c0NvbnRlbnQgPSAoeyRpbXBsaWNpdH06IFR1aUNvbnRleHRXaXRoSW1wbGljaXQ8dW5rbm93bj4pID0+XG4gICAgICAgIFRVSV9ERUZBVUxUX1NUUklOR0lGWSgkaW1wbGljaXQpO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIGJhZGdlSGFuZGxlcjogVHVpSGFuZGxlcjxULCBudW1iZXI+ID0gaXRlbSA9PiBOdW1iZXIoaXRlbSk7XG5cbiAgICBnZXQgZm9jdXNlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHR1aUlzTmF0aXZlRm9jdXNlZEluKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG4gICAgfVxuXG4gICAgb25DaGVja2JveCh2YWx1ZTogYm9vbGVhbiwgaXRlbTogVCk6IHZvaWQge1xuICAgICAgICB0aGlzLnRvZ2dsZWRJdGVtLmVtaXQoaXRlbSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZVxuICAgICAgICAgICAgPyBbLi4udGhpcy52YWx1ZSwgaXRlbV1cbiAgICAgICAgICAgIDogdGhpcy52YWx1ZS5maWx0ZXIoYXJySXRlbSA9PiAhdGhpcy5pZGVudGl0eU1hdGNoZXIoYXJySXRlbSwgaXRlbSkpO1xuICAgIH1cblxuICAgIGlzQ2hlY2tib3hFbmFibGVkKGl0ZW06IFQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWUuc29tZShhcnJJdGVtID0+IHRoaXMuaWRlbnRpdHlNYXRjaGVyKGFyckl0ZW0sIGl0ZW0pKTtcbiAgICB9XG59XG4iLCI8dHVpLWNoZWNrYm94LWJsb2NrXG4gICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIlxuICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktZmlsdGVyX19jaGVja2JveFwiXG4gICAgY2xhc3M9XCJ0LWl0ZW1cIlxuICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZEl0ZW1IYW5kbGVyKGl0ZW0pXCJcbiAgICBbaGlkZUNoZWNrYm94XT1cInRydWVcIlxuICAgIFtuZ01vZGVsXT1cImlzQ2hlY2tib3hFbmFibGVkKGl0ZW0pXCJcbiAgICBbc2l6ZV09XCJzaXplXCJcbiAgICAobmdNb2RlbENoYW5nZSk9XCJvbkNoZWNrYm94KCRldmVudCwgaXRlbSlcIlxuPlxuICAgIDxkaXZcbiAgICAgICAgYXV0b21hdGlvbi1pZD1cInR1aS1maWx0ZXJfX2NvbnRlbnRcIlxuICAgICAgICBjbGFzcz1cInQtY29udGVudFwiXG4gICAgPlxuICAgICAgICA8bmctY29udGFpbmVyICpwb2x5bW9ycGhldXNPdXRsZXQ9XCJjb250ZW50IGFzIHRleHQ7IGNvbnRleHQ6IHskaW1wbGljaXQ6IGl0ZW19XCI+XG4gICAgICAgICAgICB7eyB0ZXh0IH19XG4gICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8dHVpLWJhZGdlXG4gICAgICAgICAgICAqbmdJZj1cImJhZGdlSGFuZGxlcihpdGVtKSBhcyBiYWRnZVZhbHVlXCJcbiAgICAgICAgICAgIGF1dG9tYXRpb24taWQ9XCJ0dWktZmlsdGVyX19iYWRnZVwiXG4gICAgICAgICAgICB0dWlNb2RlPVwib25MaWdodFwiXG4gICAgICAgICAgICBjbGFzcz1cInQtYmFkZ2VcIlxuICAgICAgICAgICAgW2NsYXNzLnQtYmFkZ2VfZGlzYWJsZWRdPVwiZGlzYWJsZWRJdGVtSGFuZGxlcihpdGVtKVwiXG4gICAgICAgICAgICBbc2l6ZV09XCJzaXplXCJcbiAgICAgICAgICAgIFt2YWx1ZV09XCJiYWRnZVZhbHVlXCJcbiAgICAgICAgPjwvdHVpLWJhZGdlPlxuICAgIDwvZGl2PlxuPC90dWktY2hlY2tib3gtYmxvY2s+XG4iXX0=