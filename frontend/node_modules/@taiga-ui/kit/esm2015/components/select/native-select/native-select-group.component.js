import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiAsDataList } from '@taiga-ui/core';
import { AbstractTuiNativeSelect } from '@taiga-ui/kit/abstract';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i2 from "@taiga-ui/core";
import * as i3 from "@angular/common";
export class TuiNativeSelectGroupComponent extends AbstractTuiNativeSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
}
TuiNativeSelectGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TuiNativeSelectGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeSelectGroupComponent, selector: "select[tuiSelect][labels]:not([multiple])", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "host.onValueChange($event.target.value)" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1", "value": "host.value" } }, providers: [
        tuiAsDataList(TuiNativeSelectGroupComponent),
        {
            provide: TemplateRef,
            deps: [TuiNativeSelectGroupComponent],
            useFactory: ({ datalist }) => datalist,
        },
        {
            provide: AbstractTuiNativeSelect,
            useExisting: TuiNativeSelectGroupComponent,
        },
    ], usesInheritance: true, ngImport: i0, template: "<tui-data-list-wrapper\n    *tuiDataList\n    [items]=\"items\"\n    [labels]=\"labels\"\n    [disabledItemHandler]=\"disabledItemHandler || itemsHandlers.disabledItemHandler\"\n></tui-data-list-wrapper>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [value]=\"option\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : itemsHandlers.disabledItemHandler(option)\"\n    >\n        {{ option }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}\n"], components: [{ type: i1.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["items", "labels"] }], directives: [{ type: i2.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i3.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeSelectGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'select[tuiSelect][labels]:not([multiple])',
                    templateUrl: './native-select-group.template.html',
                    providers: [
                        tuiAsDataList(TuiNativeSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                        {
                            provide: AbstractTuiNativeSelect,
                            useExisting: TuiNativeSelectGroupComponent,
                        },
                    ],
                    host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '[value]': 'host.value',
                        '(change)': 'host.onValueChange($event.target.value)',
                    },
                    styleUrls: ['./native-select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXNlbGVjdC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9zZWxlY3QvbmF0aXZlLXNlbGVjdC9uYXRpdmUtc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3NlbGVjdC9uYXRpdmUtc2VsZWN0L25hdGl2ZS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLHdCQUF3QixDQUFDOzs7OztBQTJCL0QsTUFBTSxPQUFPLDZCQUE4QixTQUFRLHVCQUF1QjtJQXpCMUU7O1FBMkJJLFVBQUssR0FBK0IsRUFBRSxDQUFDO1FBR3ZDLFdBQU0sR0FBc0IsRUFBRSxDQUFDO0tBQ2xDOzsySEFOWSw2QkFBNkI7K0dBQTdCLDZCQUE2QixvV0F0QjNCO1FBQ1AsYUFBYSxDQUFDLDZCQUE2QixDQUFDO1FBQzVDO1lBQ0ksT0FBTyxFQUFFLFdBQVc7WUFDcEIsSUFBSSxFQUFFLENBQUMsNkJBQTZCLENBQUM7WUFDckMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQWdDLEVBQUUsRUFBRSxDQUFDLFFBQVE7U0FDdEU7UUFDRDtZQUNJLE9BQU8sRUFBRSx1QkFBdUI7WUFDaEMsV0FBVyxFQUFFLDZCQUE2QjtTQUM3QztLQUNKLGlEQ2xCTCxrakJBa0JBOzRGRFdhLDZCQUE2QjtrQkF6QnpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLDJDQUEyQztvQkFDckQsV0FBVyxFQUFFLHFDQUFxQztvQkFDbEQsU0FBUyxFQUFFO3dCQUNQLGFBQWEsK0JBQStCO3dCQUM1Qzs0QkFDSSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsSUFBSSxFQUFFLCtCQUErQjs0QkFDckMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQWdDLEVBQUUsRUFBRSxDQUFDLFFBQVE7eUJBQ3RFO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSx1QkFBdUI7NEJBQ2hDLFdBQVcsK0JBQStCO3lCQUM3QztxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YscUJBQXFCLEVBQUUsY0FBYzt3QkFDckMsWUFBWSxFQUFFLG1DQUFtQzt3QkFDakQsWUFBWSxFQUFFLHlCQUF5Qjt3QkFDdkMsU0FBUyxFQUFFLFlBQVk7d0JBQ3ZCLFVBQVUsRUFBRSx5Q0FBeUM7cUJBQ3hEO29CQUNELFNBQVMsRUFBRSxDQUFDLDRCQUE0QixDQUFDO29CQUN6QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OEJBR0csS0FBSztzQkFESixLQUFLO2dCQUlOLE1BQU07c0JBREwsS0FBSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3ksIENvbXBvbmVudCwgSW5wdXQsIFRlbXBsYXRlUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpQXNEYXRhTGlzdH0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aU5hdGl2ZVNlbGVjdH0gZnJvbSAnQHRhaWdhLXVpL2tpdC9hYnN0cmFjdCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnc2VsZWN0W3R1aVNlbGVjdF1bbGFiZWxzXTpub3QoW211bHRpcGxlXSknLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9uYXRpdmUtc2VsZWN0LWdyb3VwLnRlbXBsYXRlLmh0bWwnLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB0dWlBc0RhdGFMaXN0KFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50KSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogVGVtcGxhdGVSZWYsXG4gICAgICAgICAgICBkZXBzOiBbVHVpTmF0aXZlU2VsZWN0R3JvdXBDb21wb25lbnRdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKHtkYXRhbGlzdH06IFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50KSA9PiBkYXRhbGlzdCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgcHJvdmlkZTogQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3QsXG4gICAgICAgICAgICB1c2VFeGlzdGluZzogVHVpTmF0aXZlU2VsZWN0R3JvdXBDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbYXR0ci5hcmlhLWludmFsaWRdJzogJ2hvc3QuaW52YWxpZCcsXG4gICAgICAgICdbZGlzYWJsZWRdJzogJ2hvc3QuZGlzYWJsZWQgfHwgY29udHJvbC5yZWFkT25seScsXG4gICAgICAgICdbdGFiSW5kZXhdJzogJ2hvc3QuZm9jdXNhYmxlID8gMCA6IC0xJyxcbiAgICAgICAgJ1t2YWx1ZV0nOiAnaG9zdC52YWx1ZScsXG4gICAgICAgICcoY2hhbmdlKSc6ICdob3N0Lm9uVmFsdWVDaGFuZ2UoJGV2ZW50LnRhcmdldC52YWx1ZSknLFxuICAgIH0sXG4gICAgc3R5bGVVcmxzOiBbJy4vbmF0aXZlLXNlbGVjdC5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5hdGl2ZVNlbGVjdEdyb3VwQ29tcG9uZW50IGV4dGVuZHMgQWJzdHJhY3RUdWlOYXRpdmVTZWxlY3Qge1xuICAgIEBJbnB1dCgpXG4gICAgaXRlbXM6IHJlYWRvbmx5IHN0cmluZ1tdW10gfCBudWxsID0gW107XG5cbiAgICBASW5wdXQoKVxuICAgIGxhYmVsczogcmVhZG9ubHkgc3RyaW5nW10gPSBbXTtcbn1cbiIsIjx0dWktZGF0YS1saXN0LXdyYXBwZXJcbiAgICAqdHVpRGF0YUxpc3RcbiAgICBbaXRlbXNdPVwiaXRlbXNcIlxuICAgIFtsYWJlbHNdPVwibGFiZWxzXCJcbiAgICBbZGlzYWJsZWRJdGVtSGFuZGxlcl09XCJkaXNhYmxlZEl0ZW1IYW5kbGVyIHx8IGl0ZW1zSGFuZGxlcnMuZGlzYWJsZWRJdGVtSGFuZGxlclwiXG4+PC90dWktZGF0YS1saXN0LXdyYXBwZXI+XG48b3B0Z3JvdXBcbiAgICAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgaXRlbXM7IGxldCBpbmRleCA9IGluZGV4XCJcbiAgICBbbGFiZWxdPVwibGFiZWxzW2luZGV4XVwiXG4+XG4gICAgPG9wdGlvblxuICAgICAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGdyb3VwXCJcbiAgICAgICAgW3ZhbHVlXT1cIm9wdGlvblwiXG4gICAgICAgIFtkaXNhYmxlZF09XCJkaXNhYmxlZEl0ZW1IYW5kbGVyID8gZGlzYWJsZWRJdGVtSGFuZGxlcihvcHRpb24pIDogaXRlbXNIYW5kbGVycy5kaXNhYmxlZEl0ZW1IYW5kbGVyKG9wdGlvbilcIlxuICAgID5cbiAgICAgICAge3sgb3B0aW9uIH19XG4gICAgPC9vcHRpb24+XG48L29wdGdyb3VwPlxuIl19