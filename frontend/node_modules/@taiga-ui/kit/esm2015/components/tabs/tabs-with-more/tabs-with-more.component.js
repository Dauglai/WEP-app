import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, Inject, Input, Output, TemplateRef, ViewChild, } from '@angular/core';
import { EMPTY_QUERY, tuiClamp, tuiDefaultProp, tuiGetClosestFocusable, tuiIsElement, tuiIsNativeFocused, TuiItemDirective, tuiToInt, } from '@taiga-ui/cdk';
import { TUI_MORE_WORD, TUI_TAB_MARGIN } from '@taiga-ui/kit/tokens';
import { filter, map } from 'rxjs/operators';
import { TuiTabComponent } from '../tab/tab.component';
import { TUI_TABS_OPTIONS } from '../tabs-options';
import { TUI_TABS_PROVIDERS, TUI_TABS_REFRESH } from './tabs-with-more.providers';
import * as i0 from "@angular/core";
import * as i1 from "../tabs/tabs.component";
import * as i2 from "@taiga-ui/core";
import * as i3 from "../tab/tab.component";
import * as i4 from "../underline/underline.component";
import * as i5 from "@angular/common";
import * as i6 from "../tabs.directive";
import * as i7 from "@taiga-ui/cdk";
import * as i8 from "@tinkoff/ng-polymorpheus";
import * as i9 from "rxjs";
export class TuiTabsWithMoreComponent {
    constructor(options, margin, refresh$, el, cdr, moreWord$) {
        this.options = options;
        this.margin = margin;
        this.refresh$ = refresh$;
        this.el = el;
        this.cdr = cdr;
        this.moreWord$ = moreWord$;
        this.maxIndex = Infinity;
        this.underline = this.options.underline;
        this.activeItemIndex = 0;
        this.itemsLimit = this.options.itemsLimit;
        this.activeItemIndexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.open = false;
    }
    // TODO: Improve performance
    get tabs() {
        return Array.from(this.el.nativeElement.querySelectorAll('[tuiTab]'));
    }
    get activeElement() {
        var _a;
        const { tabs } = this;
        const safeActiveIndex = tuiClamp(this.activeItemIndex || 0, 0, tabs.length - 2);
        return this.options.exposeActive || this.lastVisibleIndex >= safeActiveIndex
            ? tabs[safeActiveIndex] || null
            : ((_a = this.moreButton) === null || _a === void 0 ? void 0 : _a.nativeElement) || null;
    }
    get isMoreAlone() {
        return this.lastVisibleIndex < 0 && !this.options.exposeActive;
    }
    get isMoreVisible() {
        return this.lastVisibleIndex < this.items.length - 1;
    }
    get isMoreFocusable() {
        return !!this.moreButton && tuiIsNativeFocused(this.moreButton.nativeElement);
    }
    get isMoreActive() {
        return (this.open ||
            (!this.options.exposeActive && this.lastVisibleIndex < this.activeItemIndex));
    }
    get lastVisibleIndex() {
        if (this.itemsLimit + 1 >= this.items.length) {
            return this.maxIndex;
        }
        const offset = this.itemsLimit - 1 > this.activeItemIndex || !this.options.exposeActive
            ? 1
            : 2;
        return Math.min(this.itemsLimit - offset, this.maxIndex);
    }
    ngAfterViewInit() {
        this.refresh$
            .pipe(map(() => this.getMaxIndex()), filter(maxIndex => this.maxIndex !== maxIndex))
            .subscribe(maxIndex => {
            this.maxIndex = maxIndex;
            this.cdr.detectChanges();
        });
    }
    onActiveItemIndexChange(activeItemIndex) {
        this.updateActiveItemIndex(activeItemIndex);
    }
    onClick(index) {
        this.open = false;
        this.focusMore();
        this.updateActiveItemIndex(index);
    }
    onArrowRight(event) {
        if (tuiIsElement(event.target) && tuiIsNativeFocused(event.target)) {
            this.focusMore();
        }
    }
    onArrowLeft() {
        const { tabs } = this;
        let index = tabs.length - 2;
        while (index >= 0) {
            tabs[index].focus();
            if (tuiIsNativeFocused(tabs[index])) {
                return;
            }
            index--;
        }
    }
    onWrapperArrow(event, wrapper, previous) {
        const button = event.target;
        const target = tuiGetClosestFocusable({ initial: button, root: wrapper, previous });
        if (target) {
            target.focus();
        }
    }
    isOverflown(index) {
        return index !== this.activeItemIndex || !this.options.exposeActive;
    }
    shouldShow(index) {
        return index > this.lastVisibleIndex && this.isOverflown(index);
    }
    focusMore() {
        if (this.moreButton) {
            this.moreButton.nativeElement.focus();
        }
    }
    getMaxIndex() {
        const { tabs, activeItemIndex, margin } = this;
        if (tabs.length < 2) {
            return 0;
        }
        const { exposeActive, minMoreWidth } = this.options;
        const { clientWidth } = this.el.nativeElement;
        const activeWidth = tabs[activeItemIndex] ? tabs[activeItemIndex].scrollWidth : 0;
        const moreWidth = Math.max(tabs[tabs.length - 1].scrollWidth, minMoreWidth);
        let maxIndex = tabs.length - 2;
        let total = tabs.reduce((acc, { scrollWidth }) => acc + scrollWidth, 0) +
            maxIndex * margin -
            tabs[tabs.length - 1].scrollWidth;
        if (total <= clientWidth) {
            return Infinity;
        }
        while (maxIndex) {
            total -= tabs[maxIndex].scrollWidth + margin;
            maxIndex--;
            const activeDisplaced = exposeActive && activeItemIndex > maxIndex;
            const activeOffset = activeDisplaced ? activeWidth + margin : 0;
            const currentWidth = total + activeOffset + moreWidth + margin;
            // Needed for different rounding of visible and hidden elements scrollWidth
            const safetyOffset = tuiToInt(this.maxIndex === maxIndex - 1);
            if (currentWidth + safetyOffset < clientWidth) {
                return maxIndex;
            }
        }
        return -1;
    }
    updateActiveItemIndex(activeItemIndex) {
        this.activeItemIndex = activeItemIndex;
        this.activeItemIndexChange.emit(activeItemIndex);
        this.maxIndex = this.getMaxIndex();
    }
}
TuiTabsWithMoreComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsWithMoreComponent, deps: [{ token: TUI_TABS_OPTIONS }, { token: TUI_TAB_MARGIN }, { token: TUI_TABS_REFRESH }, { token: ElementRef }, { token: ChangeDetectorRef }, { token: TUI_MORE_WORD }], target: i0.ɵɵFactoryTarget.Component });
TuiTabsWithMoreComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabsWithMoreComponent, selector: "tui-tabs-with-more, nav[tuiTabsWithMore]", inputs: { moreContent: "moreContent", dropdownContent: "dropdownContent", underline: "underline", activeItemIndex: "activeItemIndex", itemsLimit: "itemsLimit" }, outputs: { activeItemIndexChange: "activeItemIndexChange" }, host: { properties: { "class._underline": "this.underline" } }, providers: TUI_TABS_PROVIDERS, queries: [{ propertyName: "items", predicate: TuiItemDirective, read: TemplateRef }], viewQueries: [{ propertyName: "moreButton", first: true, predicate: TuiTabComponent, descendants: true, read: ElementRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div class=\"t-wrapper\">\n    <tui-tabs\n        class=\"t-tabs\"\n        [underline]=\"false\"\n        [activeItemIndex]=\"activeItemIndex\"\n        (activeItemIndexChange)=\"onActiveItemIndexChange($event)\"\n        (keydown.arrowRight)=\"onArrowRight($event)\"\n    >\n        <ng-container *ngFor=\"let item of items; let index = index\">\n            <ng-container\n                *ngIf=\"index <= lastVisibleIndex; else hidden\"\n                [ngTemplateOutlet]=\"item\"\n            ></ng-container>\n            <ng-template #hidden>\n                <div [class.t-overflown]=\"isOverflown(index)\">\n                    <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n                </div>\n            </ng-template>\n        </ng-container>\n    </tui-tabs>\n    <tui-hosted-dropdown\n        class=\"t-more_wrapper\"\n        [class.t-overflown]=\"!isMoreVisible\"\n        [content]=\"dropdownContent || dropdown\"\n        [(open)]=\"open\"\n    >\n        <button\n            tuiTab\n            [class._active]=\"isMoreActive\"\n            [class.t-no-margin]=\"isMoreAlone\"\n            [tuiFocusable]=\"isMoreFocusable\"\n            (keydown.arrowLeft.prevent)=\"onArrowLeft()\"\n        >\n            <ng-container *polymorpheusOutlet=\"moreContent || more as text\">\n                {{ text }}\n            </ng-container>\n        </button>\n        <ng-template #more>\n            {{ moreWord$ | async }}\n            <tui-svg\n                src=\"tuiIconChevronDown\"\n                class=\"t-icon\"\n                [class.t-icon_rotated]=\"open\"\n            ></tui-svg>\n        </ng-template>\n    </tui-hosted-dropdown>\n    <ng-template #dropdown>\n        <div\n            #element\n            class=\"t-dropdown\"\n            (keydown.arrowUp.prevent)=\"onWrapperArrow($event, element, true)\"\n            (keydown.arrowDown.prevent)=\"onWrapperArrow($event, element, false)\"\n        >\n            <div\n                *ngFor=\"let item of items; let index = index\"\n                (tui-tab-activate)=\"onClick(index)\"\n            >\n                <ng-container\n                    *ngIf=\"shouldShow(index)\"\n                    [ngTemplateOutlet]=\"item\"\n                ></ng-container>\n            </div>\n        </div>\n    </ng-template>\n    <tui-underline\n        *ngIf=\"underline\"\n        [element]=\"activeElement\"\n    ></tui-underline>\n</div>\n", styles: [":host{position:relative;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);box-sizing:border-box;color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:hidden}.t-wrapper{position:relative;display:flex}.t-tabs{height:inherit;font-size:inherit;font-weight:inherit;overflow:visible;box-shadow:none;color:inherit}.t-overflown{display:flex;margin:0;width:0;max-width:0;overflow:hidden;visibility:hidden}.t-more_wrapper{height:100%;pointer-events:none}.t-more_wrapper button{pointer-events:auto}.t-icon{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;margin-right:-.25rem;vertical-align:bottom}.t-icon_rotated{transform:rotate(180deg)}.t-dropdown{padding:.5rem 0}.t-dropdown ::ng-deep *[tuiTab]{width:100%;height:2.75rem;justify-content:flex-start;margin:0;padding:0 1rem;color:var(--tui-text-02)}.t-dropdown ::ng-deep *[tuiTab]:before{display:none}.t-dropdown ::ng-deep *[tuiTab]:hover,.t-dropdown ::ng-deep *[tuiTab]:focus,.t-dropdown ::ng-deep *[tuiTab]._active{box-shadow:none;color:var(--tui-base-08);background:var(--tui-base-02)}.t-no-margin{margin-left:0}\n"], components: [{ type: i1.TuiTabsComponent, selector: "tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])", inputs: ["underline"] }, { type: i2.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i3.TuiTabComponent, selector: "a[tuiTab]:not([routerLink]), a[tuiTab][routerLink][routerLinkActive], button[tuiTab]" }, { type: i2.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }, { type: i4.TuiUnderlineComponent, selector: "tui-underline", inputs: ["element"] }], directives: [{ type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.TuiTabsDirective, selector: "tui-tabs, nav[tuiTabs]", inputs: ["activeItemIndex"], outputs: ["activeItemIndexChange"] }, { type: i5.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i7.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }, { type: i8.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }], pipes: { "async": i5.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "underline", void 0);
__decorate([
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "activeItemIndex", void 0);
__decorate([
    tuiDefaultProp()
], TuiTabsWithMoreComponent.prototype, "itemsLimit", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsWithMoreComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tabs-with-more, nav[tuiTabsWithMore]',
                    templateUrl: './tabs-with-more.template.html',
                    styleUrls: ['./tabs-with-more.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: TUI_TABS_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABS_OPTIONS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TAB_MARGIN]
                }] }, { type: i9.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_TABS_REFRESH]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i9.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MORE_WORD]
                }] }]; }, propDecorators: { moreButton: [{
                type: ViewChild,
                args: [TuiTabComponent, { read: ElementRef }]
            }], moreContent: [{
                type: Input
            }], dropdownContent: [{
                type: Input
            }], underline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._underline']
            }], activeItemIndex: [{
                type: Input
            }], itemsLimit: [{
                type: Input
            }], activeItemIndexChange: [{
                type: Output
            }], items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef }]
            }] } });
//# sourceMappingURL=data:application/json;base64,