import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, forwardRef, HostBinding, HostListener, Inject, Input, } from '@angular/core';
import { MUTATION_OBSERVER_INIT, MutationObserverService, } from '@ng-web-apis/mutation-observer';
import { EMPTY_QUERY, tuiDefaultProp, TuiDestroyService, tuiPure, TuiResizeService, } from '@taiga-ui/cdk';
import { filter } from 'rxjs/operators';
import { TuiTabComponent } from '../tab/tab.component';
import { TuiTabsDirective } from '../tabs.directive';
import { TUI_TABS_OPTIONS } from '../tabs-options';
import * as i0 from "@angular/core";
import * as i1 from "../underline/underline.component";
import * as i2 from "@angular/common";
import * as i3 from "../tabs.directive";
import * as i4 from "rxjs";
export class TuiTabsComponent {
    constructor(options, el, tabs, cdr, resize$) {
        this.options = options;
        this.el = el;
        this.tabs = tabs;
        this.children = EMPTY_QUERY;
        this.underline = this.options.underline;
        resize$.pipe(filter(() => this.underline)).subscribe(() => {
            cdr.detectChanges();
        });
    }
    /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
    get activeItemIndex() {
        return this.tabs.activeItemIndex;
    }
    /** @deprecated use `activeItemIndex` from {@link TuiTabsDirective} instead */
    set activeItemIndex(index) {
        this.tabs.activeItemIndex = index;
    }
    get activeElement() {
        return this.tabs.activeElement;
    }
    onKeyDownArrow(current, step) {
        this.tabs.moveFocus(current, step);
    }
    ngAfterViewChecked() {
        this.scrollTo(this.tabs.activeItemIndex);
    }
    scrollTo(index) {
        const element = this.tabs.tabs[index];
        if (!element) {
            return;
        }
        const { offsetLeft, offsetWidth } = element;
        const { nativeElement } = this.el;
        if (offsetLeft < nativeElement.scrollLeft) {
            nativeElement.scrollLeft = offsetLeft;
        }
        if (offsetLeft + offsetWidth >
            nativeElement.scrollLeft + nativeElement.offsetWidth) {
            nativeElement.scrollLeft =
                offsetLeft + offsetWidth - nativeElement.offsetWidth;
        }
    }
}
TuiTabsComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsComponent, deps: [{ token: TUI_TABS_OPTIONS }, { token: ElementRef }, { token: TuiTabsDirective }, { token: ChangeDetectorRef }, { token: TuiResizeService }], target: i0.ɵɵFactoryTarget.Component });
TuiTabsComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiTabsComponent, selector: "tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])", inputs: { underline: "underline" }, host: { listeners: { "keydown.arrowRight.prevent": "onKeyDownArrow($event.target,1)", "keydown.arrowLeft.prevent": "onKeyDownArrow($event.target,-1)" }, properties: { "class._underline": "this.underline" } }, providers: [
        TuiDestroyService,
        TuiResizeService,
        MutationObserverService,
        {
            provide: MUTATION_OBSERVER_INIT,
            useValue: {
                childList: true,
            },
        },
    ], queries: [{ propertyName: "children", predicate: i0.forwardRef(function () { return TuiTabComponent; }) }], ngImport: i0, template: "<ng-container *ngIf=\"children.changes | async\"></ng-container>\n<ng-content></ng-content>\n<tui-underline\n    *ngIf=\"underline\"\n    class=\"t-underline\"\n    [element]=\"activeElement\"\n></tui-underline>\n", styles: [":host{scrollbar-width:none;-ms-overflow-style:none;position:relative;z-index:0;display:flex;font:var(--tui-font-text-m);height:var(--tui-height-l);color:var(--tui-text-02);box-shadow:inset 0 -1px var(--tui-base-03);overflow:auto}:host::-webkit-scrollbar,:host::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}.t-underline{z-index:-1}\n"], components: [{ type: i1.TuiUnderlineComponent, selector: "tui-underline", inputs: ["element"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiTabsComponent.prototype, "underline", void 0);
__decorate([
    tuiPure
], TuiTabsComponent.prototype, "scrollTo", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiTabsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-tabs:not([vertical]), nav[tuiTabs]:not([vertical])',
                    templateUrl: './tabs.template.html',
                    styleUrls: ['./tabs.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        TuiDestroyService,
                        TuiResizeService,
                        MutationObserverService,
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            useValue: {
                                childList: true,
                            },
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TABS_OPTIONS]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i3.TuiTabsDirective, decorators: [{
                    type: Inject,
                    args: [TuiTabsDirective]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i4.Observable, decorators: [{
                    type: Inject,
                    args: [TuiResizeService]
                }] }]; }, propDecorators: { children: [{
                type: ContentChildren,
                args: [forwardRef(() => TuiTabComponent)]
            }], underline: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._underline']
            }], onKeyDownArrow: [{
                type: HostListener,
                args: ['keydown.arrowRight.prevent', ['$event.target', '1']]
            }, {
                type: HostListener,
                args: ['keydown.arrowLeft.prevent', ['$event.target', '-1']]
            }], scrollTo: [] } });
//# sourceMappingURL=data:application/json;base64,