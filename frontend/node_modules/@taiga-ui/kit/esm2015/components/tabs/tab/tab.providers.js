import { ElementRef, InjectionToken, Optional } from '@angular/core';
import { RouterLinkActive } from '@angular/router';
import { MutationObserverService } from '@ng-web-apis/mutation-observer';
import { TuiDestroyService, TuiFocusVisibleService, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TuiRouterLinkActiveService } from '@taiga-ui/core';
import { EMPTY, identity, merge } from 'rxjs';
import { filter, map } from 'rxjs/operators';
/**
 * Stream of tab activation events
 */
export const TUI_TAB_EVENT = new InjectionToken(`[TUI_TAB_EVENT]`);
export const TUI_TAB_ACTIVATE = `tui-tab-activate`;
export const TUI_TAB_PROVIDERS = [
    TuiDestroyService,
    TuiFocusVisibleService,
    TuiRouterLinkActiveService,
    {
        provide: TUI_TAB_EVENT,
        deps: [
            ElementRef,
            TuiRouterLinkActiveService,
            [new Optional(), MutationObserverService],
            [new Optional(), RouterLinkActive],
        ],
        useFactory: ({ nativeElement }, routerLinkActiveService, mutationObserverService, routerLinkActive) => {
            const mutationObserver = routerLinkActive && mutationObserverService
                ? mutationObserverService.pipe(filter(() => routerLinkActive.isActive))
                : EMPTY;
            return merge(mutationObserver, routerLinkActiveService.pipe(filter(identity)), nativeElement.matches(`button`)
                ? tuiTypedFromEvent(nativeElement, `click`)
                : EMPTY).pipe(map(() => nativeElement.dispatchEvent(new CustomEvent(TUI_TAB_ACTIVATE, { bubbles: true }))));
        },
    },
    MODE_PROVIDER,
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGFiLnByb3ZpZGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RhYnMvdGFiL3RhYi5wcm92aWRlcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxjQUFjLEVBQUUsUUFBUSxFQUFXLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pELE9BQU8sRUFBQyx1QkFBdUIsRUFBQyxNQUFNLGdDQUFnQyxDQUFDO0FBQ3ZFLE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsc0JBQXNCLEVBQ3RCLGlCQUFpQixHQUNwQixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsYUFBYSxFQUFFLDBCQUEwQixFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDekUsT0FBTyxFQUFDLEtBQUssRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3hELE9BQU8sRUFBQyxNQUFNLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFM0M7O0dBRUc7QUFDSCxNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsSUFBSSxjQUFjLENBQW9CLGlCQUFpQixDQUFDLENBQUM7QUFDdEYsTUFBTSxDQUFDLE1BQU0sZ0JBQWdCLEdBQUcsa0JBQWtCLENBQUM7QUFDbkQsTUFBTSxDQUFDLE1BQU0saUJBQWlCLEdBQWU7SUFDekMsaUJBQWlCO0lBQ2pCLHNCQUFzQjtJQUN0QiwwQkFBMEI7SUFDMUI7UUFDSSxPQUFPLEVBQUUsYUFBYTtRQUN0QixJQUFJLEVBQUU7WUFDRixVQUFVO1lBQ1YsMEJBQTBCO1lBQzFCLENBQUMsSUFBSSxRQUFRLEVBQUUsRUFBRSx1QkFBdUIsQ0FBQztZQUN6QyxDQUFDLElBQUksUUFBUSxFQUFFLEVBQUUsZ0JBQWdCLENBQUM7U0FDckM7UUFDRCxVQUFVLEVBQUUsQ0FDUixFQUFDLGFBQWEsRUFBMEIsRUFDeEMsdUJBQTRDLEVBQzVDLHVCQUF1RCxFQUN2RCxnQkFBeUMsRUFDdEIsRUFBRTtZQUNyQixNQUFNLGdCQUFnQixHQUNsQixnQkFBZ0IsSUFBSSx1QkFBdUI7Z0JBQ3ZDLENBQUMsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQ3hCLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUMsQ0FDMUM7Z0JBQ0gsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUVoQixPQUFPLEtBQUssQ0FDUixnQkFBZ0IsRUFDaEIsdUJBQXVCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUM5QyxhQUFhLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQztnQkFDM0IsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxPQUFPLENBQUM7Z0JBQzNDLENBQUMsQ0FBQyxLQUFLLENBQ2QsQ0FBQyxJQUFJLENBQ0YsR0FBRyxDQUFDLEdBQUcsRUFBRSxDQUNMLGFBQWEsQ0FBQyxhQUFhLENBQ3ZCLElBQUksV0FBVyxDQUFDLGdCQUFnQixFQUFFLEVBQUMsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDLENBQ3JELENBQ0osQ0FDSixDQUFDO1FBQ04sQ0FBQztLQUNKO0lBQ0QsYUFBYTtDQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3Rpb25Ub2tlbiwgT3B0aW9uYWwsIFByb3ZpZGVyfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um91dGVyTGlua0FjdGl2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7TXV0YXRpb25PYnNlcnZlclNlcnZpY2V9IGZyb20gJ0BuZy13ZWItYXBpcy9tdXRhdGlvbi1vYnNlcnZlcic7XG5pbXBvcnQge1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aUZvY3VzVmlzaWJsZVNlcnZpY2UsXG4gICAgdHVpVHlwZWRGcm9tRXZlbnQsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtNT0RFX1BST1ZJREVSLCBUdWlSb3V0ZXJMaW5rQWN0aXZlU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtFTVBUWSwgaWRlbnRpdHksIG1lcmdlLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBTdHJlYW0gb2YgdGFiIGFjdGl2YXRpb24gZXZlbnRzXG4gKi9cbmV4cG9ydCBjb25zdCBUVUlfVEFCX0VWRU5UID0gbmV3IEluamVjdGlvblRva2VuPE9ic2VydmFibGU8RXZlbnQ+PihgW1RVSV9UQUJfRVZFTlRdYCk7XG5leHBvcnQgY29uc3QgVFVJX1RBQl9BQ1RJVkFURSA9IGB0dWktdGFiLWFjdGl2YXRlYDtcbmV4cG9ydCBjb25zdCBUVUlfVEFCX1BST1ZJREVSUzogUHJvdmlkZXJbXSA9IFtcbiAgICBUdWlEZXN0cm95U2VydmljZSxcbiAgICBUdWlGb2N1c1Zpc2libGVTZXJ2aWNlLFxuICAgIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLFxuICAgIHtcbiAgICAgICAgcHJvdmlkZTogVFVJX1RBQl9FVkVOVCxcbiAgICAgICAgZGVwczogW1xuICAgICAgICAgICAgRWxlbWVudFJlZixcbiAgICAgICAgICAgIFR1aVJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLFxuICAgICAgICAgICAgW25ldyBPcHRpb25hbCgpLCBNdXRhdGlvbk9ic2VydmVyU2VydmljZV0sXG4gICAgICAgICAgICBbbmV3IE9wdGlvbmFsKCksIFJvdXRlckxpbmtBY3RpdmVdLFxuICAgICAgICBdLFxuICAgICAgICB1c2VGYWN0b3J5OiAoXG4gICAgICAgICAgICB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LFxuICAgICAgICAgICAgcm91dGVyTGlua0FjdGl2ZVNlcnZpY2U6IE9ic2VydmFibGU8Ym9vbGVhbj4sXG4gICAgICAgICAgICBtdXRhdGlvbk9ic2VydmVyU2VydmljZTogTXV0YXRpb25PYnNlcnZlclNlcnZpY2UgfCBudWxsLFxuICAgICAgICAgICAgcm91dGVyTGlua0FjdGl2ZTogUm91dGVyTGlua0FjdGl2ZSB8IG51bGwsXG4gICAgICAgICk6IE9ic2VydmFibGU8dW5rbm93bj4gPT4ge1xuICAgICAgICAgICAgY29uc3QgbXV0YXRpb25PYnNlcnZlciA9XG4gICAgICAgICAgICAgICAgcm91dGVyTGlua0FjdGl2ZSAmJiBtdXRhdGlvbk9ic2VydmVyU2VydmljZVxuICAgICAgICAgICAgICAgICAgICA/IG11dGF0aW9uT2JzZXJ2ZXJTZXJ2aWNlLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiByb3V0ZXJMaW5rQWN0aXZlLmlzQWN0aXZlKSxcbiAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIDogRU1QVFk7XG5cbiAgICAgICAgICAgIHJldHVybiBtZXJnZShcbiAgICAgICAgICAgICAgICBtdXRhdGlvbk9ic2VydmVyLFxuICAgICAgICAgICAgICAgIHJvdXRlckxpbmtBY3RpdmVTZXJ2aWNlLnBpcGUoZmlsdGVyKGlkZW50aXR5KSksXG4gICAgICAgICAgICAgICAgbmF0aXZlRWxlbWVudC5tYXRjaGVzKGBidXR0b25gKVxuICAgICAgICAgICAgICAgICAgICA/IHR1aVR5cGVkRnJvbUV2ZW50KG5hdGl2ZUVsZW1lbnQsIGBjbGlja2ApXG4gICAgICAgICAgICAgICAgICAgIDogRU1QVFksXG4gICAgICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKCgpID0+XG4gICAgICAgICAgICAgICAgICAgIG5hdGl2ZUVsZW1lbnQuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDdXN0b21FdmVudChUVUlfVEFCX0FDVElWQVRFLCB7YnViYmxlczogdHJ1ZX0pLFxuICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICApO1xuICAgICAgICB9LFxuICAgIH0sXG4gICAgTU9ERV9QUk9WSURFUixcbl07XG4iXX0=