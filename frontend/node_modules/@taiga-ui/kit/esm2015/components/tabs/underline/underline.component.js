import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ElementRef, HostListener, Inject, Input, NgZone, } from '@angular/core';
import { ANIMATION_FRAME } from '@ng-web-apis/common';
import { tuiDefaultProp, tuiZonefree } from '@taiga-ui/cdk';
import { MODE_PROVIDER, TUI_MODE } from '@taiga-ui/core';
import { asCallable } from '@tinkoff/ng-event-plugins';
import { of, ReplaySubject } from 'rxjs';
import { debounceTime, map, share, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiUnderlineComponent {
    constructor({ nativeElement }, ngZone, animationFrame$, mode$) {
        this.ngZone = ngZone;
        this.animationFrame$ = animationFrame$;
        this.mode$ = mode$;
        this.el$ = new ReplaySubject(1);
        this.refresh$ = this.el$.pipe(switchMap(element => element
            ? this.animationFrame$.pipe(map(() => element), tuiZonefree(this.ngZone))
            : of(null)), share());
        this.transition$ = asCallable(this.el$.pipe(map(element => element && 'all'), debounceTime(50)));
        this.transform$ = asCallable(this.refresh$.pipe(map(element => element ? `translate3d(${element.offsetLeft}px, 0, 0)` : null)));
        this.width$ = asCallable(this.refresh$.pipe(map(element => (element === null || element === void 0 ? void 0 : element.clientWidth) || 0)));
        nativeElement['$.style.transitionProperty'] = this.transition$;
        nativeElement['$.style.transform'] = this.transform$;
        nativeElement['$.style.width.px'] = this.width$;
    }
    set element(element) {
        this.el$.next(element);
    }
}
TuiUnderlineComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiUnderlineComponent, deps: [{ token: ElementRef }, { token: NgZone }, { token: ANIMATION_FRAME }, { token: TUI_MODE }], target: i0.ɵɵFactoryTarget.Component });
TuiUnderlineComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiUnderlineComponent, selector: "tui-underline", inputs: { element: "element" }, host: { listeners: { "$.data-mode.attr": "mode$", "$.style.transitionProperty": "transition$()", "$.style.transform": "transform$()", "$.style.width.px": "width$()" } }, providers: [MODE_PROVIDER], ngImport: i0, template: '', isInline: true, styles: [":host{transition-property:all;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;position:absolute;left:0;height:100%;color:var(--tui-primary);transform:scale(0);box-shadow:inset 0 -.1875rem 0 -.0625rem;transition-property:none;pointer-events:none}:host[data-mode=onDark]{color:var(--tui-text-01-night)}:host[data-mode=onLight]{color:var(--tui-text-02)}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiUnderlineComponent.prototype, "element", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiUnderlineComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-underline',
                    template: '',
                    styleUrls: ['./underline.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [MODE_PROVIDER],
                    host: {
                        '($.data-mode.attr)': 'mode$',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ANIMATION_FRAME]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_MODE]
                }] }]; }, propDecorators: { element: [{
                type: Input
            }], transition$: [{
                type: HostListener,
                args: ['$.style.transitionProperty']
            }], transform$: [{
                type: HostListener,
                args: ['$.style.transform']
            }], width$: [{
                type: HostListener,
                args: ['$.style.width.px']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidW5kZXJsaW5lLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL3RhYnMvdW5kZXJsaW5lL3VuZGVybGluZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEdBQ1QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFBQyxjQUFjLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxhQUFhLEVBQUUsUUFBUSxFQUFnQixNQUFNLGdCQUFnQixDQUFDO0FBQ3RFLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUNyRCxPQUFPLEVBQWEsRUFBRSxFQUFFLGFBQWEsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNuRCxPQUFPLEVBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxLQUFLLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7OztBQVluRSxNQUFNLE9BQU8scUJBQXFCO0lBMkM5QixZQUN3QixFQUFDLGFBQWEsRUFBYSxFQUNkLE1BQWMsRUFDTCxlQUFtQyxFQUNsRCxLQUF1QztRQUZqQyxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ0wsb0JBQWUsR0FBZixlQUFlLENBQW9CO1FBQ2xELFVBQUssR0FBTCxLQUFLLENBQWtDO1FBOUNyRCxRQUFHLEdBQUcsSUFBSSxhQUFhLENBQXFCLENBQUMsQ0FBQyxDQUFDO1FBRS9DLGFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FDckMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQ2hCLE9BQU87WUFDSCxDQUFDLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQ3JCLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsRUFDbEIsV0FBVyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FDM0I7WUFDSCxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUNqQixFQUNELEtBQUssRUFBRSxDQUNWLENBQUM7UUFTTyxnQkFBVyxHQUFHLFVBQVUsQ0FDN0IsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQ1QsR0FBRyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxFQUNoQyxZQUFZLENBQUMsRUFBRSxDQUFDLENBQ25CLENBQ0osQ0FBQztRQUdPLGVBQVUsR0FBRyxVQUFVLENBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUNkLEdBQUcsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUNWLE9BQU8sQ0FBQyxDQUFDLENBQUMsZUFBZSxPQUFPLENBQUMsVUFBVSxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDaEUsQ0FDSixDQUNKLENBQUM7UUFHTyxXQUFNLEdBQUcsVUFBVSxDQUN4QixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFBLE9BQU8sYUFBUCxPQUFPLHVCQUFQLE9BQU8sQ0FBRSxXQUFXLEtBQUksQ0FBQyxDQUFDLENBQUMsQ0FDaEUsQ0FBQztRQVFFLGFBQWEsQ0FBQyw0QkFBNEIsQ0FBQyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUM7UUFDL0QsYUFBYSxDQUFDLG1CQUFtQixDQUFDLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNyRCxhQUFhLENBQUMsa0JBQWtCLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO0lBQ3BELENBQUM7SUFuQ0QsSUFBSSxPQUFPLENBQUMsT0FBMkI7UUFDbkMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDM0IsQ0FBQzs7bUhBbkJRLHFCQUFxQixrQkE0Q2xCLFVBQVUsYUFDVixNQUFNLGFBQ04sZUFBZSxhQUNmLFFBQVE7dUdBL0NYLHFCQUFxQixrUEFMbkIsQ0FBQyxhQUFhLENBQUMsMEJBSGhCLEVBQUU7QUF5Qlo7SUFEQyxjQUFjLEVBQUU7b0RBR2hCOzRGQW5CUSxxQkFBcUI7a0JBVmpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFFBQVEsRUFBRSxFQUFFO29CQUNaLFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO29CQUNyQyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtvQkFDL0MsU0FBUyxFQUFFLENBQUMsYUFBYSxDQUFDO29CQUMxQixJQUFJLEVBQUU7d0JBQ0Ysb0JBQW9CLEVBQUUsT0FBTztxQkFDaEM7aUJBQ0o7OzBCQTZDUSxNQUFNOzJCQUFDLFVBQVU7OzBCQUNqQixNQUFNOzJCQUFDLE1BQU07OzBCQUNiLE1BQU07MkJBQUMsZUFBZTs7MEJBQ3RCLE1BQU07MkJBQUMsUUFBUTs0Q0E5QmhCLE9BQU87c0JBRlYsS0FBSztnQkFPRyxXQUFXO3NCQURuQixZQUFZO3VCQUFDLDRCQUE0QjtnQkFTakMsVUFBVTtzQkFEbEIsWUFBWTt1QkFBQyxtQkFBbUI7Z0JBVXhCLE1BQU07c0JBRGQsWUFBWTt1QkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBFbGVtZW50UmVmLFxuICAgIEhvc3RMaXN0ZW5lcixcbiAgICBJbmplY3QsXG4gICAgSW5wdXQsXG4gICAgTmdab25lLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QU5JTUFUSU9OX0ZSQU1FfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIHR1aVpvbmVmcmVlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7TU9ERV9QUk9WSURFUiwgVFVJX01PREUsIFR1aUJyaWdodG5lc3N9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7YXNDYWxsYWJsZX0gZnJvbSAnQHRpbmtvZmYvbmctZXZlbnQtcGx1Z2lucyc7XG5pbXBvcnQge09ic2VydmFibGUsIG9mLCBSZXBsYXlTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBtYXAsIHNoYXJlLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0dWktdW5kZXJsaW5lJyxcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgc3R5bGVVcmxzOiBbJy4vdW5kZXJsaW5lLnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbiAgICBwcm92aWRlcnM6IFtNT0RFX1BST1ZJREVSXSxcbiAgICBob3N0OiB7XG4gICAgICAgICcoJC5kYXRhLW1vZGUuYXR0ciknOiAnbW9kZSQnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVVuZGVybGluZUNvbXBvbmVudCB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBlbCQgPSBuZXcgUmVwbGF5U3ViamVjdDxIVE1MRWxlbWVudCB8IG51bGw+KDEpO1xuXG4gICAgcHJpdmF0ZSByZWFkb25seSByZWZyZXNoJCA9IHRoaXMuZWwkLnBpcGUoXG4gICAgICAgIHN3aXRjaE1hcChlbGVtZW50ID0+XG4gICAgICAgICAgICBlbGVtZW50XG4gICAgICAgICAgICAgICAgPyB0aGlzLmFuaW1hdGlvbkZyYW1lJC5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgIG1hcCgoKSA9PiBlbGVtZW50KSxcbiAgICAgICAgICAgICAgICAgICAgICB0dWlab25lZnJlZSh0aGlzLm5nWm9uZSksXG4gICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgOiBvZihudWxsKSxcbiAgICAgICAgKSxcbiAgICAgICAgc2hhcmUoKSxcbiAgICApO1xuXG4gICAgQElucHV0KClcbiAgICBAdHVpRGVmYXVsdFByb3AoKVxuICAgIHNldCBlbGVtZW50KGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCkge1xuICAgICAgICB0aGlzLmVsJC5uZXh0KGVsZW1lbnQpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJyQuc3R5bGUudHJhbnNpdGlvblByb3BlcnR5JylcbiAgICByZWFkb25seSB0cmFuc2l0aW9uJCA9IGFzQ2FsbGFibGUoXG4gICAgICAgIHRoaXMuZWwkLnBpcGUoXG4gICAgICAgICAgICBtYXAoZWxlbWVudCA9PiBlbGVtZW50ICYmICdhbGwnKSxcbiAgICAgICAgICAgIGRlYm91bmNlVGltZSg1MCksXG4gICAgICAgICksXG4gICAgKTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJyQuc3R5bGUudHJhbnNmb3JtJylcbiAgICByZWFkb25seSB0cmFuc2Zvcm0kID0gYXNDYWxsYWJsZShcbiAgICAgICAgdGhpcy5yZWZyZXNoJC5waXBlKFxuICAgICAgICAgICAgbWFwKGVsZW1lbnQgPT5cbiAgICAgICAgICAgICAgICBlbGVtZW50ID8gYHRyYW5zbGF0ZTNkKCR7ZWxlbWVudC5vZmZzZXRMZWZ0fXB4LCAwLCAwKWAgOiBudWxsLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgQEhvc3RMaXN0ZW5lcignJC5zdHlsZS53aWR0aC5weCcpXG4gICAgcmVhZG9ubHkgd2lkdGgkID0gYXNDYWxsYWJsZShcbiAgICAgICAgdGhpcy5yZWZyZXNoJC5waXBlKG1hcChlbGVtZW50ID0+IGVsZW1lbnQ/LmNsaWVudFdpZHRoIHx8IDApKSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikge25hdGl2ZUVsZW1lbnR9OiBFbGVtZW50UmVmLFxuICAgICAgICBASW5qZWN0KE5nWm9uZSkgcHJpdmF0ZSByZWFkb25seSBuZ1pvbmU6IE5nWm9uZSxcbiAgICAgICAgQEluamVjdChBTklNQVRJT05fRlJBTUUpIHByaXZhdGUgcmVhZG9ubHkgYW5pbWF0aW9uRnJhbWUkOiBPYnNlcnZhYmxlPG51bWJlcj4sXG4gICAgICAgIEBJbmplY3QoVFVJX01PREUpIHJlYWRvbmx5IG1vZGUkOiBPYnNlcnZhYmxlPFR1aUJyaWdodG5lc3MgfCBudWxsPixcbiAgICApIHtcbiAgICAgICAgbmF0aXZlRWxlbWVudFsnJC5zdHlsZS50cmFuc2l0aW9uUHJvcGVydHknXSA9IHRoaXMudHJhbnNpdGlvbiQ7XG4gICAgICAgIG5hdGl2ZUVsZW1lbnRbJyQuc3R5bGUudHJhbnNmb3JtJ10gPSB0aGlzLnRyYW5zZm9ybSQ7XG4gICAgICAgIG5hdGl2ZUVsZW1lbnRbJyQuc3R5bGUud2lkdGgucHgnXSA9IHRoaXMud2lkdGgkO1xuICAgIH1cbn1cbiJdfQ==