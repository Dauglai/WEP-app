import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ElementRef, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, tuiAsControl, tuiAsFocusableItemAccessor, tuiClamp, tuiDefaultProp, tuiIsNativeFocused, tuiPure, tuiRound, } from '@taiga-ui/cdk';
import { TEXTFIELD_CONTROLLER_PROVIDER, TUI_TEXTFIELD_WATCHED_CONTROLLER, tuiGetFractionPartPadded, } from '@taiga-ui/core';
import { TuiInputNumberComponent } from '@taiga-ui/kit/components/input-number';
import { TuiSliderComponent, tuiSliderOptionsProvider, } from '@taiga-ui/kit/components/slider';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/input-number";
import * as i2 from "@taiga-ui/kit/components/slider";
import * as i3 from "@taiga-ui/core";
import * as i4 from "@angular/forms";
import * as i5 from "@angular/common";
import * as i6 from "@tinkoff/ng-polymorpheus";
import * as i7 from "@taiga-ui/cdk";
export class TuiInputSliderComponent extends AbstractTuiControl {
    constructor(control, cdr, controller) {
        super(control, cdr);
        this.controller = controller;
        this.min = 0;
        this.max = 100;
        this.quantum = 1;
        this.steps = 0;
        this.segments = 1;
        this.keySteps = null;
        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldPrefix = '';
        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */
        this.textfieldPostfix = '';
    }
    get prefix() {
        return this.textfieldPrefix || this.controller.prefix;
    }
    get postfix() {
        return this.textfieldPostfix || this.controller.postfix;
    }
    get nativeFocusableElement() {
        var _a;
        return !((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.computedDisabled
            ? null
            : this.inputNumberRef.nativeFocusableElement;
    }
    get focused() {
        var _a;
        return (tuiIsNativeFocused(this.nativeFocusableElement) ||
            tuiIsNativeFocused(((_a = this.sliderRef) === null || _a === void 0 ? void 0 : _a.nativeElement) || null));
    }
    get computedSteps() {
        return this.steps || (this.max - this.min) / this.quantum;
    }
    get precision() {
        return tuiGetFractionPartPadded(this.quantum).length;
    }
    get decimal() {
        return this.precision ? 'not-zero' : 'never';
    }
    get showValueContent() {
        return Boolean(this.valueContent && !this.focused);
    }
    get step() {
        return (this.max - this.min) / this.computedSteps;
    }
    computeKeySteps(keySteps, min, max) {
        return (keySteps || [
            [0, min],
            [100, max],
        ]);
    }
    focusTextInput() {
        var _a;
        const focusableElement = (_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement;
        if (focusableElement) {
            focusableElement.focus();
        }
    }
    safelyUpdateValue(value) {
        this.value = this.valueGuard(value !== null && value !== void 0 ? value : this.safeCurrentValue);
    }
    onVerticalArrowKeyDown(coefficient) {
        if (this.readOnly || !this.step) {
            return;
        }
        const value = this.value + coefficient * this.step;
        if (value !== this.value) {
            this.safelyUpdateValue(value);
        }
        this.updateTextInputValue(this.valueGuard(value));
    }
    onSliderChange(newValue) {
        this.safelyUpdateValue(newValue);
        this.updateTextInputValue(this.value);
    }
    onFocused(focused) {
        const { value, textInputValue, safeCurrentValue, inputNumberRef } = this;
        if (!focused && textInputValue !== (inputNumberRef === null || inputNumberRef === void 0 ? void 0 : inputNumberRef.getFormattedValue(value))) {
            this.updateTextInputValue(value !== null && value !== void 0 ? value : safeCurrentValue);
        }
        this.updateFocused(focused);
    }
    get textInputValue() {
        var _a;
        return ((_a = this.inputNumberRef) === null || _a === void 0 ? void 0 : _a.nativeValue) || '';
    }
    getFallbackValue() {
        return 0;
    }
    valueGuard(value) {
        const roundedValue = tuiRound(Math.round(value / this.quantum) * this.quantum, TUI_FLOATING_PRECISION);
        return tuiClamp(roundedValue, this.min, this.max);
    }
    updateTextInputValue(value) {
        if (this.inputNumberRef) {
            this.inputNumberRef.nativeValue =
                this.inputNumberRef.getFormattedValue(value);
        }
    }
}
TuiInputSliderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputSliderComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_TEXTFIELD_WATCHED_CONTROLLER }], target: i0.ɵɵFactoryTarget.Component });
TuiInputSliderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputSliderComponent, selector: "tui-input-slider", inputs: { min: "min", max: "max", quantum: "quantum", steps: "steps", segments: "segments", keySteps: "keySteps", valueContent: "valueContent", textfieldPrefix: ["prefix", "textfieldPrefix"], textfieldPostfix: ["postfix", "textfieldPostfix"] }, providers: [
        tuiAsFocusableItemAccessor(TuiInputSliderComponent),
        tuiAsControl(TuiInputSliderComponent),
        tuiSliderOptionsProvider({ trackColor: 'transparent' }),
        TEXTFIELD_CONTROLLER_PROVIDER,
    ], viewQueries: [{ propertyName: "inputNumberRef", first: true, predicate: TuiInputNumberComponent, descendants: true }, { propertyName: "sliderRef", first: true, predicate: TuiSliderComponent, descendants: true, read: ElementRef }], usesInheritance: true, ngImport: i0, template: "<tui-input-number\n    [min]=\"min\"\n    [max]=\"max\"\n    [precision]=\"precision\"\n    [decimal]=\"decimal\"\n    [tuiTextfieldPrefix]=\"showValueContent ? '' : prefix\"\n    [tuiTextfieldPostfix]=\"showValueContent ? '' : postfix\"\n    [disabled]=\"computedDisabled\"\n    [readOnly]=\"readOnly\"\n    [pseudoFocus]=\"computedFocused\"\n    [pseudoHover]=\"pseudoHover\"\n    [pseudoActive]=\"pseudoActive\"\n    [pseudoInvalid]=\"pseudoInvalid\"\n    [ngModel]=\"value\"\n    (ngModelChange)=\"safelyUpdateValue($event)\"\n    (focusedChange)=\"onFocused($event)\"\n    (keydown.arrowUp.prevent)=\"onVerticalArrowKeyDown(1)\"\n    (keydown.arrowDown.prevent)=\"onVerticalArrowKeyDown(-1)\"\n>\n    <ng-content></ng-content>\n    <div\n        *ngIf=\"showValueContent\"\n        ngProjectAs=\"tuiContent\"\n        automation-id=\"tui-input-slider__value-content\"\n    >\n        <ng-container *polymorpheusOutlet=\"valueContent as text; context: {$implicit: value}\">\n            {{ text }}\n        </ng-container>\n    </div>\n</tui-input-number>\n\n<input\n    tuiSlider\n    type=\"range\"\n    [tuiFocusable]=\"false\"\n    [max]=\"computedSteps\"\n    [segments]=\"segments\"\n    [keySteps]=\"computeKeySteps(keySteps, min, max)\"\n    [attr.disabled]=\"readOnly || computedDisabled || null\"\n    [ngModel]=\"value\"\n    (ngModelChange)=\"onSliderChange($event)\"\n    (click)=\"focusTextInput()\"\n/>\n", styles: [":host{position:relative;z-index:0;display:block;height:-webkit-max-content;height:max-content}input[type=range]{position:absolute;top:100%;left:0;right:0;box-sizing:border-box;padding-left:calc(var(--tui-radius-m) / 2);height:1rem;margin:-.5625rem 0 0;border-top-left-radius:0;border-bottom-left-radius:calc(var(--tui-radius-m) * 5) calc(var(--tui-radius-m) * 1.5)}\n"], components: [{ type: i1.TuiInputNumberComponent, selector: "tui-input-number", inputs: ["min", "max", "decimal", "precision", "prefix", "postfix"] }, { type: i2.TuiSliderComponent, selector: "input[type=range][tuiSlider]", inputs: ["size", "segments"] }], directives: [{ type: i1.TuiInputNumberDirective, selector: "tui-input-number" }, { type: i3.TuiTextfieldPrefixDirective, selector: "[tuiTextfieldPrefix]", inputs: ["tuiTextfieldPrefix"] }, { type: i3.TuiTextfieldPostfixDirective, selector: "[tuiTextfieldPostfix]", inputs: ["tuiTextfieldPostfix"] }, { type: i4.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i4.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i6.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i2.TuiSliderKeyStepsDirective, selector: "input[tuiSlider][keySteps]", inputs: ["keySteps"] }, { type: i4.RangeValueAccessor, selector: "input[type=range][formControlName],input[type=range][formControl],input[type=range][ngModel]" }, { type: i4.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i7.TuiFocusableDirective, selector: "[tuiFocusable]", inputs: ["tuiFocusable"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp(q => q > 0, 'Quantum must be positive')
], TuiInputSliderComponent.prototype, "quantum", void 0);
__decorate([
    tuiDefaultProp(s => s >= 0 && Number.isInteger(s), 'Steps must be non-negative integer')
], TuiInputSliderComponent.prototype, "steps", void 0);
__decorate([
    tuiDefaultProp(s => s > 0 && Number.isInteger(s), 'Segments must be positive integer')
], TuiInputSliderComponent.prototype, "segments", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "keySteps", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "textfieldPrefix", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputSliderComponent.prototype, "textfieldPostfix", void 0);
__decorate([
    tuiPure
], TuiInputSliderComponent.prototype, "computeKeySteps", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputSliderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-slider',
                    templateUrl: './input-slider.template.html',
                    styleUrls: ['./input-slider.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputSliderComponent),
                        tuiAsControl(TuiInputSliderComponent),
                        tuiSliderOptionsProvider({ trackColor: 'transparent' }),
                        TEXTFIELD_CONTROLLER_PROVIDER,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i3.TuiTextfieldController, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_WATCHED_CONTROLLER]
                }] }]; }, propDecorators: { inputNumberRef: [{
                type: ViewChild,
                args: [TuiInputNumberComponent]
            }], sliderRef: [{
                type: ViewChild,
                args: [TuiSliderComponent, { read: ElementRef }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], quantum: [{
                type: Input
            }], steps: [{
                type: Input
            }], segments: [{
                type: Input
            }], keySteps: [{
                type: Input
            }], valueContent: [{
                type: Input
            }], textfieldPrefix: [{
                type: Input,
                args: ['prefix']
            }], textfieldPostfix: [{
                type: Input,
                args: ['postfix']
            }], computeKeySteps: [] } });
//# sourceMappingURL=data:application/json;base64,