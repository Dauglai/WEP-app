import { Inject, Pipe } from '@angular/core';
import { TUI_DIGITAL_INFORMATION_UNITS, TUI_INPUT_FILE_TEXTS } from '@taiga-ui/kit/tokens';
import { tuiFormatSize } from '@taiga-ui/kit/utils';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiMaxSizeRejectionErrorPipe {
    constructor(inputFileTexts$, units$) {
        this.inputFileTexts$ = inputFileTexts$;
        this.units$ = units$;
    }
    transform(maxFileSize) {
        return combineLatest([this.inputFileTexts$, this.units$]).pipe(map(([{ maxSizeRejectionReason }, units]) => `${maxSizeRejectionReason}${tuiFormatSize(units, maxFileSize)}`));
    }
}
TuiMaxSizeRejectionErrorPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMaxSizeRejectionErrorPipe, deps: [{ token: TUI_INPUT_FILE_TEXTS }, { token: TUI_DIGITAL_INFORMATION_UNITS }], target: i0.ɵɵFactoryTarget.Pipe });
TuiMaxSizeRejectionErrorPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMaxSizeRejectionErrorPipe, name: "tuiMaxSizeRejectionError" });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMaxSizeRejectionErrorPipe, decorators: [{
            type: Pipe,
            args: [{ name: `tuiMaxSizeRejectionError` }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_FILE_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DIGITAL_INFORMATION_UNITS]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWF4LXNpemUtcmVqZWN0aW9uLWVycm9yLnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9pbnB1dC1maWxlcy9tYXgtc2l6ZS1yZWplY3Rpb24tZXJyb3IucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFFMUQsT0FBTyxFQUFDLDZCQUE2QixFQUFFLG9CQUFvQixFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDekYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ2xELE9BQU8sRUFBQyxhQUFhLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOztBQUduQyxNQUFNLE9BQU8sNEJBQTRCO0lBQ3JDLFlBRXFCLGVBRWhCLEVBRWdCLE1BRWhCO1FBTmdCLG9CQUFlLEdBQWYsZUFBZSxDQUUvQjtRQUVnQixXQUFNLEdBQU4sTUFBTSxDQUV0QjtJQUNGLENBQUM7SUFFSixTQUFTLENBQUMsV0FBbUI7UUFDekIsT0FBTyxhQUFhLENBQUMsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDMUQsR0FBRyxDQUNDLENBQUMsQ0FBQyxFQUFDLHNCQUFzQixFQUFDLEVBQUUsS0FBSyxDQUFDLEVBQUUsRUFBRSxDQUNsQyxHQUFHLHNCQUFzQixHQUFHLGFBQWEsQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLEVBQUUsQ0FDdEUsQ0FDSixDQUFDO0lBQ04sQ0FBQzs7MEhBbkJRLDRCQUE0QixrQkFFekIsb0JBQW9CLGFBSXBCLDZCQUE2Qjt3SEFOaEMsNEJBQTRCOzRGQUE1Qiw0QkFBNEI7a0JBRHhDLElBQUk7bUJBQUMsRUFBQyxJQUFJLEVBQUUsMEJBQTBCLEVBQUM7OzBCQUcvQixNQUFNOzJCQUFDLG9CQUFvQjs7MEJBSTNCLE1BQU07MkJBQUMsNkJBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlJbmplY3Rpb25Ub2tlblR5cGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfRElHSVRBTF9JTkZPUk1BVElPTl9VTklUUywgVFVJX0lOUFVUX0ZJTEVfVEVYVFN9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7dHVpRm9ybWF0U2l6ZX0gZnJvbSAnQHRhaWdhLXVpL2tpdC91dGlscyc7XG5pbXBvcnQge2NvbWJpbmVMYXRlc3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQFBpcGUoe25hbWU6IGB0dWlNYXhTaXplUmVqZWN0aW9uRXJyb3JgfSlcbmV4cG9ydCBjbGFzcyBUdWlNYXhTaXplUmVqZWN0aW9uRXJyb3JQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0lOUFVUX0ZJTEVfVEVYVFMpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaW5wdXRGaWxlVGV4dHMkOiBUdWlJbmplY3Rpb25Ub2tlblR5cGU8XG4gICAgICAgICAgICB0eXBlb2YgVFVJX0lOUFVUX0ZJTEVfVEVYVFNcbiAgICAgICAgPixcbiAgICAgICAgQEluamVjdChUVUlfRElHSVRBTF9JTkZPUk1BVElPTl9VTklUUylcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB1bml0cyQ6IFR1aUluamVjdGlvblRva2VuVHlwZTxcbiAgICAgICAgICAgIHR5cGVvZiBUVUlfRElHSVRBTF9JTkZPUk1BVElPTl9VTklUU1xuICAgICAgICA+LFxuICAgICkge31cblxuICAgIHRyYW5zZm9ybShtYXhGaWxlU2l6ZTogbnVtYmVyKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVMYXRlc3QoW3RoaXMuaW5wdXRGaWxlVGV4dHMkLCB0aGlzLnVuaXRzJF0pLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgICAgKFt7bWF4U2l6ZVJlamVjdGlvblJlYXNvbn0sIHVuaXRzXSkgPT5cbiAgICAgICAgICAgICAgICAgICAgYCR7bWF4U2l6ZVJlamVjdGlvblJlYXNvbn0ke3R1aUZvcm1hdFNpemUodW5pdHMsIG1heEZpbGVTaXplKX1gLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=