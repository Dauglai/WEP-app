import { Directive, ElementRef, HostBinding, Inject } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk';
// eslint-disable-next-line import/no-cycle
import { TuiInputFilesComponent } from './input-files.component';
import { TUI_INPUT_FILES_OPTIONS } from './input-files.options';
import * as i0 from "@angular/core";
import * as i1 from "./input-files.component";
import * as i2 from "@taiga-ui/cdk";
export class TuiInputFilesDirective {
    constructor(host, el, idService, options) {
        this.host = host;
        this.el = el;
        this.idService = idService;
        this.options = options;
    }
    get tabIndex() {
        return this.host.focusable ? 0 : -1;
    }
    get id() {
        return this.el.nativeElement.id || this.idService.generate();
    }
    get accept() {
        var _a;
        return (_a = this.el.nativeElement.accept) !== null && _a !== void 0 ? _a : this.options.accepts;
    }
    get multiple() {
        var _a;
        return (_a = this.el.nativeElement.multiple) !== null && _a !== void 0 ? _a : this.options.multiple;
    }
    get capture() {
        var _a;
        return (_a = this.el.nativeElement.getAttribute('capture')) !== null && _a !== void 0 ? _a : this.options.capture;
    }
    get input() {
        return this.el.nativeElement;
    }
}
TuiInputFilesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputFilesDirective, deps: [{ token: TuiInputFilesComponent }, { token: ElementRef }, { token: TuiIdService }, { token: TUI_INPUT_FILES_OPTIONS }], target: i0.ɵɵFactoryTarget.Directive });
TuiInputFilesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputFilesDirective, selector: "input[tuiInputFiles]", host: { attributes: { "type": "file" }, properties: { "tabIndex": "this.tabIndex", "id": "this.id", "accept": "this.accept", "multiple": "this.multiple", "attr.capture": "this.capture" }, classAttribute: "t-native" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputFilesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[tuiInputFiles]',
                    host: {
                        type: 'file',
                        class: 't-native',
                    },
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiInputFilesComponent, decorators: [{
                    type: Inject,
                    args: [TuiInputFilesComponent]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i2.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_FILES_OPTIONS]
                }] }]; }, propDecorators: { tabIndex: [{
                type: HostBinding,
                args: ['tabIndex']
            }], id: [{
                type: HostBinding,
                args: ['id']
            }], accept: [{
                type: HostBinding,
                args: ['accept']
            }], multiple: [{
                type: HostBinding,
                args: ['multiple']
            }], capture: [{
                type: HostBinding,
                args: ['attr.capture']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtZmlsZXMuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtZmlsZXMvaW5wdXQtZmlsZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUUzQywyQ0FBMkM7QUFDM0MsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0seUJBQXlCLENBQUM7QUFDL0QsT0FBTyxFQUFDLHVCQUF1QixFQUF1QixNQUFNLHVCQUF1QixDQUFDOzs7O0FBU3BGLE1BQU0sT0FBTyxzQkFBc0I7SUFDL0IsWUFDNkMsSUFBNEIsRUFDaEMsRUFBZ0MsRUFDOUIsU0FBdUIsRUFDWixPQUE2QjtRQUh0QyxTQUFJLEdBQUosSUFBSSxDQUF3QjtRQUNoQyxPQUFFLEdBQUYsRUFBRSxDQUE4QjtRQUM5QixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBQ1osWUFBTyxHQUFQLE9BQU8sQ0FBc0I7SUFDaEYsQ0FBQztJQUVKLElBQ0ksUUFBUTtRQUNSLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELElBQ0ksRUFBRTtRQUNGLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsRUFBRSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDakUsQ0FBQztJQUVELElBQ0ksTUFBTTs7UUFDTixPQUFPLE1BQUEsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsTUFBTSxtQ0FBSSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQztJQUNoRSxDQUFDO0lBRUQsSUFDSSxRQUFROztRQUNSLE9BQU8sTUFBQSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxRQUFRLG1DQUFJLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO0lBQ25FLENBQUM7SUFFRCxJQUNJLE9BQU87O1FBQ1AsT0FBTyxNQUFBLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsbUNBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUM7SUFDakYsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQU8sSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUM7SUFDakMsQ0FBQzs7b0hBbkNRLHNCQUFzQixrQkFFbkIsc0JBQXNCLGFBQ3RCLFVBQVUsYUFDVixZQUFZLGFBQ1osdUJBQXVCO3dHQUwxQixzQkFBc0I7NEZBQXRCLHNCQUFzQjtrQkFQbEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsc0JBQXNCO29CQUNoQyxJQUFJLEVBQUU7d0JBQ0YsSUFBSSxFQUFFLE1BQU07d0JBQ1osS0FBSyxFQUFFLFVBQVU7cUJBQ3BCO2lCQUNKOzswQkFHUSxNQUFNOzJCQUFDLHNCQUFzQjs7MEJBQzdCLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsWUFBWTs7MEJBQ25CLE1BQU07MkJBQUMsdUJBQXVCOzRDQUkvQixRQUFRO3NCQURYLFdBQVc7dUJBQUMsVUFBVTtnQkFNbkIsRUFBRTtzQkFETCxXQUFXO3VCQUFDLElBQUk7Z0JBTWIsTUFBTTtzQkFEVCxXQUFXO3VCQUFDLFFBQVE7Z0JBTWpCLFFBQVE7c0JBRFgsV0FBVzt1QkFBQyxVQUFVO2dCQU1uQixPQUFPO3NCQURWLFdBQVc7dUJBQUMsY0FBYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBFbGVtZW50UmVmLCBIb3N0QmluZGluZywgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpSWRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby1jeWNsZVxuaW1wb3J0IHtUdWlJbnB1dEZpbGVzQ29tcG9uZW50fSBmcm9tICcuL2lucHV0LWZpbGVzLmNvbXBvbmVudCc7XG5pbXBvcnQge1RVSV9JTlBVVF9GSUxFU19PUFRJT05TLCBUdWlJbnB1dEZpbGVzT3B0aW9uc30gZnJvbSAnLi9pbnB1dC1maWxlcy5vcHRpb25zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdpbnB1dFt0dWlJbnB1dEZpbGVzXScsXG4gICAgaG9zdDoge1xuICAgICAgICB0eXBlOiAnZmlsZScsXG4gICAgICAgIGNsYXNzOiAndC1uYXRpdmUnLFxuICAgIH0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aUlucHV0RmlsZXNEaXJlY3RpdmUge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aUlucHV0RmlsZXNDb21wb25lbnQpIHJlYWRvbmx5IGhvc3Q6IFR1aUlucHV0RmlsZXNDb21wb25lbnQsXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MSW5wdXRFbGVtZW50PixcbiAgICAgICAgQEluamVjdChUdWlJZFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaWRTZXJ2aWNlOiBUdWlJZFNlcnZpY2UsXG4gICAgICAgIEBJbmplY3QoVFVJX0lOUFVUX0ZJTEVTX09QVElPTlMpIHByaXZhdGUgcmVhZG9ubHkgb3B0aW9uczogVHVpSW5wdXRGaWxlc09wdGlvbnMsXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCd0YWJJbmRleCcpXG4gICAgZ2V0IHRhYkluZGV4KCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QuZm9jdXNhYmxlID8gMCA6IC0xO1xuICAgIH1cblxuICAgIEBIb3N0QmluZGluZygnaWQnKVxuICAgIGdldCBpZCgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50LmlkIHx8IHRoaXMuaWRTZXJ2aWNlLmdlbmVyYXRlKCk7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdhY2NlcHQnKVxuICAgIGdldCBhY2NlcHQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWwubmF0aXZlRWxlbWVudC5hY2NlcHQgPz8gdGhpcy5vcHRpb25zLmFjY2VwdHM7XG4gICAgfVxuXG4gICAgQEhvc3RCaW5kaW5nKCdtdWx0aXBsZScpXG4gICAgZ2V0IG11bHRpcGxlKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50Lm11bHRpcGxlID8/IHRoaXMub3B0aW9ucy5tdWx0aXBsZTtcbiAgICB9XG5cbiAgICBASG9zdEJpbmRpbmcoJ2F0dHIuY2FwdHVyZScpXG4gICAgZ2V0IGNhcHR1cmUoKTogc3RyaW5nIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmVsLm5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdjYXB0dXJlJykgPz8gdGhpcy5vcHRpb25zLmNhcHR1cmU7XG4gICAgfVxuXG4gICAgZ2V0IGlucHV0KCk6IEhUTUxJbnB1dEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5lbC5uYXRpdmVFbGVtZW50O1xuICAgIH1cbn1cbiJdfQ==