import { ChangeDetectionStrategy, Component, Input, TemplateRef } from '@angular/core';
import { tuiAsDataList } from '@taiga-ui/core';
import { AbstractTuiNativeMultiSelect } from './native-multi-select';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/kit/components/data-list-wrapper";
import * as i2 from "@angular/common";
import * as i3 from "@taiga-ui/core";
import * as i4 from "../multi-select-group/multi-select-group.directive";
import * as i5 from "@angular/forms";
import * as i6 from "@taiga-ui/cdk";
export class TuiNativeMultiSelectGroupComponent extends AbstractTuiNativeMultiSelect {
    constructor() {
        super(...arguments);
        this.items = [];
        this.labels = [];
    }
}
TuiNativeMultiSelectGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
TuiNativeMultiSelectGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeMultiSelectGroupComponent, selector: "select[multiple][tuiSelect][labels]", inputs: { items: "items", labels: "labels" }, host: { listeners: { "change": "onValueChange()", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.aria-invalid": "host.invalid", "disabled": "host.disabled || control.readOnly", "tabIndex": "host.focusable ? 0 : -1" } }, providers: [
        tuiAsDataList(TuiNativeMultiSelectGroupComponent),
        {
            provide: TemplateRef,
            deps: [TuiNativeMultiSelectGroupComponent],
            useFactory: ({ datalist }) => datalist,
        },
        {
            provide: AbstractTuiNativeMultiSelect,
            useExisting: TuiNativeMultiSelectGroupComponent,
        },
    ], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"control.control?.valueChanges | async\"></ng-container>\n\n<tui-data-list-wrapper\n    *tuiDataList\n    tuiMultiSelectGroup\n    [items]=\"items\"\n    [labels]=\"labels\"\n    [disabledItemHandler]=\"disabledItemHandler || host.disableItemHandler\"\n></tui-data-list-wrapper>\n<optgroup\n    *ngFor=\"let group of items; let index = index\"\n    [label]=\"labels[index]\"\n>\n    <option\n        *ngFor=\"let option of group\"\n        [selected]=\"option | tuiMapper : selectedMapper : host.value\"\n        [value]=\"option\"\n        [disabled]=\"disabledItemHandler ? disabledItemHandler(option) : host.disableItemHandler(option)\"\n    >\n        {{ option }}\n    </option>\n</optgroup>\n", styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0}\n"], components: [{ type: i1.TuiDataListGroupWrapperComponent, selector: "tui-data-list-wrapper[labels]", inputs: ["items", "labels"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i3.TuiDataListDirective, selector: "ng-template[tuiDataList]" }, { type: i4.TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]" }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { type: i5.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }], pipes: { "async": i2.AsyncPipe, "tuiMapper": i6.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'select[multiple][tuiSelect][labels]',
                    templateUrl: './native-multi-select-group.template.html',
                    providers: [
                        tuiAsDataList(TuiNativeMultiSelectGroupComponent),
                        {
                            provide: TemplateRef,
                            deps: [TuiNativeMultiSelectGroupComponent],
                            useFactory: ({ datalist }) => datalist,
                        },
                        {
                            provide: AbstractTuiNativeMultiSelect,
                            useExisting: TuiNativeMultiSelectGroupComponent,
                        },
                    ],
                    host: {
                        '[attr.aria-invalid]': 'host.invalid',
                        '[disabled]': 'host.disabled || control.readOnly',
                        '[tabIndex]': 'host.focusable ? 0 : -1',
                        '(change)': 'onValueChange()',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    },
                    styleUrls: ['./native-multi-select.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], propDecorators: { items: [{
                type: Input
            }], labels: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLW11bHRpLXNlbGVjdC1ncm91cC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9tdWx0aS1zZWxlY3QvbmF0aXZlLW11bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC9uYXRpdmUtbXVsdGktc2VsZWN0L25hdGl2ZS1tdWx0aS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckYsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRTdDLE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLHVCQUF1QixDQUFDOzs7Ozs7OztBQTRCbkUsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLDRCQUE0QjtJQTFCcEY7O1FBNEJJLFVBQUssR0FBK0IsRUFBRSxDQUFDO1FBR3ZDLFdBQU0sR0FBc0IsRUFBRSxDQUFDO0tBQ2xDOztnSUFOWSxrQ0FBa0M7b0hBQWxDLGtDQUFrQyx1V0F2QmhDO1FBQ1AsYUFBYSxDQUFDLGtDQUFrQyxDQUFDO1FBQ2pEO1lBQ0ksT0FBTyxFQUFFLFdBQVc7WUFDcEIsSUFBSSxFQUFFLENBQUMsa0NBQWtDLENBQUM7WUFDMUMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQXFDLEVBQUUsRUFBRSxDQUFDLFFBQVE7U0FDM0U7UUFDRDtZQUNJLE9BQU8sRUFBRSw0QkFBNEI7WUFDckMsV0FBVyxFQUFFLGtDQUFrQztTQUNsRDtLQUNKLGlEQ25CTCxpdEJBc0JBOzRGRFNhLGtDQUFrQztrQkExQjlDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHFDQUFxQztvQkFDL0MsV0FBVyxFQUFFLDJDQUEyQztvQkFDeEQsU0FBUyxFQUFFO3dCQUNQLGFBQWEsb0NBQW9DO3dCQUNqRDs0QkFDSSxPQUFPLEVBQUUsV0FBVzs0QkFDcEIsSUFBSSxFQUFFLG9DQUFvQzs0QkFDMUMsVUFBVSxFQUFFLENBQUMsRUFBQyxRQUFRLEVBQXFDLEVBQUUsRUFBRSxDQUFDLFFBQVE7eUJBQzNFO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSw0QkFBNEI7NEJBQ3JDLFdBQVcsb0NBQW9DO3lCQUNsRDtxQkFDSjtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YscUJBQXFCLEVBQUUsY0FBYzt3QkFDckMsWUFBWSxFQUFFLG1DQUFtQzt3QkFDakQsWUFBWSxFQUFFLHlCQUF5Qjt3QkFDdkMsVUFBVSxFQUFFLGlCQUFpQjt3QkFDN0IscUJBQXFCLEVBQUUsR0FBRzt3QkFDMUIseUJBQXlCLEVBQUUsR0FBRztxQkFDakM7b0JBQ0QsU0FBUyxFQUFFLENBQUMsa0NBQWtDLENBQUM7b0JBQy9DLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs4QkFHRyxLQUFLO3NCQURKLEtBQUs7Z0JBSU4sTUFBTTtzQkFETCxLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbnB1dCwgVGVtcGxhdGVSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlBc0RhdGFMaXN0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5cbmltcG9ydCB7QWJzdHJhY3RUdWlOYXRpdmVNdWx0aVNlbGVjdH0gZnJvbSAnLi9uYXRpdmUtbXVsdGktc2VsZWN0JztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdzZWxlY3RbbXVsdGlwbGVdW3R1aVNlbGVjdF1bbGFiZWxzXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL25hdGl2ZS1tdWx0aS1zZWxlY3QtZ3JvdXAudGVtcGxhdGUuaHRtbCcsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzRGF0YUxpc3QoVHVpTmF0aXZlTXVsdGlTZWxlY3RHcm91cENvbXBvbmVudCksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRlbXBsYXRlUmVmLFxuICAgICAgICAgICAgZGVwczogW1R1aU5hdGl2ZU11bHRpU2VsZWN0R3JvdXBDb21wb25lbnRdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogKHtkYXRhbGlzdH06IFR1aU5hdGl2ZU11bHRpU2VsZWN0R3JvdXBDb21wb25lbnQpID0+IGRhdGFsaXN0LFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBBYnN0cmFjdFR1aU5hdGl2ZU11bHRpU2VsZWN0LFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aU5hdGl2ZU11bHRpU2VsZWN0R3JvdXBDb21wb25lbnQsXG4gICAgICAgIH0sXG4gICAgXSxcbiAgICBob3N0OiB7XG4gICAgICAgICdbYXR0ci5hcmlhLWludmFsaWRdJzogJ2hvc3QuaW52YWxpZCcsXG4gICAgICAgICdbZGlzYWJsZWRdJzogJ2hvc3QuZGlzYWJsZWQgfHwgY29udHJvbC5yZWFkT25seScsXG4gICAgICAgICdbdGFiSW5kZXhdJzogJ2hvc3QuZm9jdXNhYmxlID8gMCA6IC0xJyxcbiAgICAgICAgJyhjaGFuZ2UpJzogJ29uVmFsdWVDaGFuZ2UoKScsXG4gICAgICAgICcoY2xpY2suc3RvcC5zaWxlbnQpJzogJzAnLFxuICAgICAgICAnKG1vdXNlZG93bi5zdG9wLnNpbGVudCknOiAnMCcsXG4gICAgfSxcbiAgICBzdHlsZVVybHM6IFsnLi9uYXRpdmUtbXVsdGktc2VsZWN0LnN0eWxlLmxlc3MnXSxcbiAgICBjaGFuZ2VEZXRlY3Rpb246IENoYW5nZURldGVjdGlvblN0cmF0ZWd5Lk9uUHVzaCxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTmF0aXZlTXVsdGlTZWxlY3RHcm91cENvbXBvbmVudCBleHRlbmRzIEFic3RyYWN0VHVpTmF0aXZlTXVsdGlTZWxlY3Qge1xuICAgIEBJbnB1dCgpXG4gICAgaXRlbXM6IHJlYWRvbmx5IHN0cmluZ1tdW10gfCBudWxsID0gW107XG5cbiAgICBASW5wdXQoKVxuICAgIGxhYmVsczogcmVhZG9ubHkgc3RyaW5nW10gPSBbXTtcbn1cbiIsIjxuZy1jb250YWluZXIgKm5nSWY9XCJjb250cm9sLmNvbnRyb2w/LnZhbHVlQ2hhbmdlcyB8IGFzeW5jXCI+PC9uZy1jb250YWluZXI+XG5cbjx0dWktZGF0YS1saXN0LXdyYXBwZXJcbiAgICAqdHVpRGF0YUxpc3RcbiAgICB0dWlNdWx0aVNlbGVjdEdyb3VwXG4gICAgW2l0ZW1zXT1cIml0ZW1zXCJcbiAgICBbbGFiZWxzXT1cImxhYmVsc1wiXG4gICAgW2Rpc2FibGVkSXRlbUhhbmRsZXJdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciB8fCBob3N0LmRpc2FibGVJdGVtSGFuZGxlclwiXG4+PC90dWktZGF0YS1saXN0LXdyYXBwZXI+XG48b3B0Z3JvdXBcbiAgICAqbmdGb3I9XCJsZXQgZ3JvdXAgb2YgaXRlbXM7IGxldCBpbmRleCA9IGluZGV4XCJcbiAgICBbbGFiZWxdPVwibGFiZWxzW2luZGV4XVwiXG4+XG4gICAgPG9wdGlvblxuICAgICAgICAqbmdGb3I9XCJsZXQgb3B0aW9uIG9mIGdyb3VwXCJcbiAgICAgICAgW3NlbGVjdGVkXT1cIm9wdGlvbiB8IHR1aU1hcHBlciA6IHNlbGVjdGVkTWFwcGVyIDogaG9zdC52YWx1ZVwiXG4gICAgICAgIFt2YWx1ZV09XCJvcHRpb25cIlxuICAgICAgICBbZGlzYWJsZWRdPVwiZGlzYWJsZWRJdGVtSGFuZGxlciA/IGRpc2FibGVkSXRlbUhhbmRsZXIob3B0aW9uKSA6IGhvc3QuZGlzYWJsZUl0ZW1IYW5kbGVyKG9wdGlvbilcIlxuICAgID5cbiAgICAgICAge3sgb3B0aW9uIH19XG4gICAgPC9vcHRpb24+XG48L29wdGdyb3VwPlxuIl19