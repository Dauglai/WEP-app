import { Directive, forwardRef, Optional } from '@angular/core';
import { NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';
import { EMPTY_FUNCTION, tuiArrayToggle } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, tuiAsOptionContent } from '@taiga-ui/core';
import { TuiMultiSelectOptionComponent } from '@taiga-ui/kit/components/multi-select-option';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { TuiMultiSelectComponent } from '../multi-select.component';
import * as i0 from "@angular/core";
export const TUI_MULTI_SELECT_OPTION = new PolymorpheusComponent(TuiMultiSelectOptionComponent);
export class TuiMultiSelectGroupDirective {
}
TuiMultiSelectGroupDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMultiSelectGroupDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });
TuiMultiSelectGroupDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiMultiSelectGroupDirective, selector: "[tuiMultiSelectGroup]", providers: [
        tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
        {
            provide: TUI_DATA_LIST_HOST,
            deps: [
                NgControl,
                [new Optional(), forwardRef(() => TuiMultiSelectComponent)],
            ],
            useFactory: (control, host) => host || {
                handleOption: option => {
                    var _a;
                    return (_a = control.control) === null || _a === void 0 ? void 0 : _a.setValue(tuiArrayToggle(control.value || [], option));
                },
            },
        },
        {
            provide: NG_VALUE_ACCESSOR,
            multi: true,
            useValue: {
                writeValue: EMPTY_FUNCTION,
                registerOnChange: EMPTY_FUNCTION,
                registerOnTouched: EMPTY_FUNCTION,
            },
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMultiSelectGroupDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiMultiSelectGroup]',
                    providers: [
                        tuiAsOptionContent(TUI_MULTI_SELECT_OPTION),
                        {
                            provide: TUI_DATA_LIST_HOST,
                            deps: [
                                NgControl,
                                [new Optional(), forwardRef(() => TuiMultiSelectComponent)],
                            ],
                            useFactory: (control, host) => host || {
                                handleOption: option => {
                                    var _a;
                                    return (_a = control.control) === null || _a === void 0 ? void 0 : _a.setValue(tuiArrayToggle(control.value || [], option));
                                },
                            },
                        },
                        {
                            provide: NG_VALUE_ACCESSOR,
                            multi: true,
                            useValue: {
                                writeValue: EMPTY_FUNCTION,
                                registerOnChange: EMPTY_FUNCTION,
                                registerOnTouched: EMPTY_FUNCTION,
                            },
                        },
                    ],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFVBQVUsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLGlCQUFpQixFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzVELE9BQU8sRUFBQyxjQUFjLEVBQUUsY0FBYyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdELE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxrQkFBa0IsRUFBa0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUN2RixPQUFPLEVBQUMsNkJBQTZCLEVBQUMsTUFBTSw4Q0FBOEMsQ0FBQztBQUMzRixPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUUvRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7QUFFbEUsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsSUFBSSxxQkFBcUIsQ0FDNUQsNkJBQTZCLENBQ2hDLENBQUM7QUFrQ0YsTUFBTSxPQUFPLDRCQUE0Qjs7MEhBQTVCLDRCQUE0Qjs4R0FBNUIsNEJBQTRCLGdEQTlCMUI7UUFDUCxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQztRQUMzQztZQUNJLE9BQU8sRUFBRSxrQkFBa0I7WUFDM0IsSUFBSSxFQUFFO2dCQUNGLFNBQVM7Z0JBQ1QsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO2FBQzlEO1lBQ0QsVUFBVSxFQUFFLENBQ1IsT0FBa0IsRUFDbEIsSUFBK0IsRUFDYixFQUFFLENBQ3BCLElBQUksSUFBSTtnQkFDSixZQUFZLEVBQUUsTUFBTSxDQUFDLEVBQUU7O29CQUNuQixPQUFBLE1BQUEsT0FBTyxDQUFDLE9BQU8sMENBQUUsUUFBUSxDQUNyQixjQUFjLENBQUMsT0FBTyxDQUFDLEtBQUssSUFBSSxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQzlDLENBQUE7aUJBQUE7YUFDUjtTQUNSO1FBQ0Q7WUFDSSxPQUFPLEVBQUUsaUJBQWlCO1lBQzFCLEtBQUssRUFBRSxJQUFJO1lBQ1gsUUFBUSxFQUFFO2dCQUNOLFVBQVUsRUFBRSxjQUFjO2dCQUMxQixnQkFBZ0IsRUFBRSxjQUFjO2dCQUNoQyxpQkFBaUIsRUFBRSxjQUFjO2FBQ3BDO1NBQ0o7S0FDSjs0RkFFUSw0QkFBNEI7a0JBaEN4QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSx1QkFBdUI7b0JBQ2pDLFNBQVMsRUFBRTt3QkFDUCxrQkFBa0IsQ0FBQyx1QkFBdUIsQ0FBQzt3QkFDM0M7NEJBQ0ksT0FBTyxFQUFFLGtCQUFrQjs0QkFDM0IsSUFBSSxFQUFFO2dDQUNGLFNBQVM7Z0NBQ1QsQ0FBQyxJQUFJLFFBQVEsRUFBRSxFQUFFLFVBQVUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDOzZCQUM5RDs0QkFDRCxVQUFVLEVBQUUsQ0FDUixPQUFrQixFQUNsQixJQUErQixFQUNiLEVBQUUsQ0FDcEIsSUFBSSxJQUFJO2dDQUNKLFlBQVksRUFBRSxNQUFNLENBQUMsRUFBRTs7b0NBQ25CLE9BQUEsTUFBQSxPQUFPLENBQUMsT0FBTywwQ0FBRSxRQUFRLENBQ3JCLGNBQWMsQ0FBQyxPQUFPLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FDOUMsQ0FBQTtpQ0FBQTs2QkFDUjt5QkFDUjt3QkFDRDs0QkFDSSxPQUFPLEVBQUUsaUJBQWlCOzRCQUMxQixLQUFLLEVBQUUsSUFBSTs0QkFDWCxRQUFRLEVBQUU7Z0NBQ04sVUFBVSxFQUFFLGNBQWM7Z0NBQzFCLGdCQUFnQixFQUFFLGNBQWM7Z0NBQ2hDLGlCQUFpQixFQUFFLGNBQWM7NkJBQ3BDO3lCQUNKO3FCQUNKO2lCQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIGZvcndhcmRSZWYsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TkdfVkFMVUVfQUNDRVNTT1IsIE5nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtFTVBUWV9GVU5DVElPTiwgdHVpQXJyYXlUb2dnbGV9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfREFUQV9MSVNUX0hPU1QsIHR1aUFzT3B0aW9uQ29udGVudCwgVHVpRGF0YUxpc3RIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1R1aU11bHRpU2VsZWN0T3B0aW9uQ29tcG9uZW50fSBmcm9tICdAdGFpZ2EtdWkva2l0L2NvbXBvbmVudHMvbXVsdGktc2VsZWN0LW9wdGlvbic7XG5pbXBvcnQge1BvbHltb3JwaGV1c0NvbXBvbmVudH0gZnJvbSAnQHRpbmtvZmYvbmctcG9seW1vcnBoZXVzJztcblxuaW1wb3J0IHtUdWlNdWx0aVNlbGVjdENvbXBvbmVudH0gZnJvbSAnLi4vbXVsdGktc2VsZWN0LmNvbXBvbmVudCc7XG5cbmV4cG9ydCBjb25zdCBUVUlfTVVMVElfU0VMRUNUX09QVElPTiA9IG5ldyBQb2x5bW9ycGhldXNDb21wb25lbnQoXG4gICAgVHVpTXVsdGlTZWxlY3RPcHRpb25Db21wb25lbnQsXG4pO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlNdWx0aVNlbGVjdEdyb3VwXScsXG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIHR1aUFzT3B0aW9uQ29udGVudChUVUlfTVVMVElfU0VMRUNUX09QVElPTiksXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9EQVRBX0xJU1RfSE9TVCxcbiAgICAgICAgICAgIGRlcHM6IFtcbiAgICAgICAgICAgICAgICBOZ0NvbnRyb2wsXG4gICAgICAgICAgICAgICAgW25ldyBPcHRpb25hbCgpLCBmb3J3YXJkUmVmKCgpID0+IFR1aU11bHRpU2VsZWN0Q29tcG9uZW50KV0sXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgdXNlRmFjdG9yeTogPFQ+KFxuICAgICAgICAgICAgICAgIGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgICAgICAgICAgICAgICBob3N0OiBUdWlEYXRhTGlzdEhvc3Q8VD4gfCBudWxsLFxuICAgICAgICAgICAgKTogVHVpRGF0YUxpc3RIb3N0PFQ+ID0+XG4gICAgICAgICAgICAgICAgaG9zdCB8fCB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZU9wdGlvbjogb3B0aW9uID0+XG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sLmNvbnRyb2w/LnNldFZhbHVlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR1aUFycmF5VG9nZ2xlKGNvbnRyb2wudmFsdWUgfHwgW10sIG9wdGlvbiksXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IE5HX1ZBTFVFX0FDQ0VTU09SLFxuICAgICAgICAgICAgbXVsdGk6IHRydWUsXG4gICAgICAgICAgICB1c2VWYWx1ZToge1xuICAgICAgICAgICAgICAgIHdyaXRlVmFsdWU6IEVNUFRZX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyT25DaGFuZ2U6IEVNUFRZX0ZVTkNUSU9OLFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyT25Ub3VjaGVkOiBFTVBUWV9GVU5DVElPTixcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpTXVsdGlTZWxlY3RHcm91cERpcmVjdGl2ZSB7fVxuIl19