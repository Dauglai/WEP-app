import { __decorate } from "tslib";
import { ChangeDetectionStrategy, Component, ContentChildren, Inject, Input, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { EMPTY_QUERY, TUI_DEFAULT_IDENTITY_MATCHER, tuiControlValue, tuiDefaultProp, tuiGetOriginalArrayFromQueryList, tuiIsPresent, tuiPure, tuiQueryListChanges, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TuiOptionComponent, } from '@taiga-ui/core';
import { TUI_MULTI_SELECT_TEXTS } from '@taiga-ui/kit/tokens';
import { combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/cdk";
import * as i3 from "@angular/common";
import * as i4 from "@angular/forms";
export class TuiMultiSelectGroupComponent {
    constructor(multiSelectTexts$, host, control) {
        this.multiSelectTexts$ = multiSelectTexts$;
        this.host = host;
        this.control = control;
        this.options = EMPTY_QUERY;
        this.label = '';
    }
    get size() {
        var _a;
        return ((_a = this.options.first) === null || _a === void 0 ? void 0 : _a.size) || 'm';
    }
    get empty$() {
        return tuiQueryListChanges(this.options).pipe(map(({ length }) => !length));
    }
    get disabled$() {
        return tuiQueryListChanges(this.options).pipe(map(items => items.every(({ disabled }) => disabled)));
    }
    get value$() {
        return combineLatest([this.items$, this.valueChanges$]).pipe(map(([items, current]) => {
            let result = false;
            for (let i = 0; i < items.length; i++) {
                const selected = current.some(selected => this.matcher(selected, items[i]));
                if ((!selected && result) || (selected && !result && i)) {
                    return null;
                }
                result = selected;
            }
            return result;
        }));
    }
    onClick(checked) {
        if (!this.control.control) {
            return;
        }
        const controlValue = this.control.value || [];
        const { values } = this;
        const filtered = controlValue.filter(current => values.every(item => !this.matcher(current, item)));
        this.control.control.setValue(checked ? filtered : [...filtered, ...values]);
    }
    get values() {
        return this.filter(tuiGetOriginalArrayFromQueryList(this.options));
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    get items$() {
        return tuiQueryListChanges(this.options).pipe(map(options => options.map(({ value }) => value).filter(tuiIsPresent)));
    }
    get valueChanges$() {
        return tuiControlValue(this.control).pipe(map(value => value || []));
    }
    filter(items) {
        return items.map(({ value }) => value).filter(tuiIsPresent);
    }
}
TuiMultiSelectGroupComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMultiSelectGroupComponent, deps: [{ token: TUI_MULTI_SELECT_TEXTS }, { token: TUI_DATA_LIST_HOST }, { token: NgControl }], target: i0.ɵɵFactoryTarget.Component });
TuiMultiSelectGroupComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiMultiSelectGroupComponent, selector: "tui-opt-group[tuiMultiSelectGroup]", inputs: { label: "label" }, queries: [{ propertyName: "options", predicate: TuiOptionComponent }], ngImport: i0, template: "<span\n    *tuiLet=\"value$ | async as value\"\n    class=\"t-wrapper\"\n>\n    <span class=\"t-label\">{{ label }}</span>\n    <button\n        *ngIf=\"label && !(empty$ | async)\"\n        tuiLink\n        type=\"button\"\n        class=\"t-button\"\n        [disabled]=\"!!(disabled$ | async)\"\n        (click)=\"onClick(value)\"\n    >\n        {{ (multiSelectTexts$ | async)?.[value ? 'none' : 'all'] }}\n    </button>\n</span>\n<ng-content></ng-content>\n", styles: [":host:before{display:none}.t-wrapper{display:flex;align-items:flex-start}.t-label:not(:empty){flex:1;padding:.75rem 1rem .25rem}.t-button{margin:.75rem 1rem 0 auto}\n"], components: [{ type: i1.TuiLinkComponent, selector: "a[tuiLink], button[tuiLink]", inputs: ["pseudo", "icon", "iconAlign", "iconRotated", "mode"], exportAs: ["tuiLink"] }], directives: [{ type: i2.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiMultiSelectGroupComponent.prototype, "label", void 0);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "empty$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "disabled$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "value$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "items$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "valueChanges$", null);
__decorate([
    tuiPure
], TuiMultiSelectGroupComponent.prototype, "filter", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMultiSelectGroupComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-opt-group[tuiMultiSelectGroup]',
                    templateUrl: './multi-select-group.template.html',
                    styleUrls: ['./multi-select-group.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MULTI_SELECT_TEXTS]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATA_LIST_HOST]
                }] }, { type: i4.NgControl, decorators: [{
                    type: Inject,
                    args: [NgControl]
                }] }]; }, propDecorators: { options: [{
                type: ContentChildren,
                args: [TuiOptionComponent]
            }], label: [{
                type: Input
            }], empty$: [], disabled$: [], value$: [], items$: [], valueChanges$: [], filter: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXVsdGktc2VsZWN0LWdyb3VwLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9jb21wb25lbnRzL211bHRpLXNlbGVjdC9tdWx0aS1zZWxlY3QtZ3JvdXAvbXVsdGktc2VsZWN0LWdyb3VwLnRlbXBsYXRlLmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFDSCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULGVBQWUsRUFDZixNQUFNLEVBQ04sS0FBSyxHQUVSLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQ0gsV0FBVyxFQUNYLDRCQUE0QixFQUM1QixlQUFlLEVBQ2YsY0FBYyxFQUNkLGdDQUFnQyxFQUdoQyxZQUFZLEVBQ1osT0FBTyxFQUNQLG1CQUFtQixHQUN0QixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQ0gsa0JBQWtCLEVBRWxCLGtCQUFrQixHQUdyQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBQyxzQkFBc0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQzVELE9BQU8sRUFBQyxhQUFhLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFRbkMsTUFBTSxPQUFPLDRCQUE0QjtJQVFyQyxZQUVhLGlCQUF1RSxFQUNuQyxJQUF3QixFQUNqQyxPQUFrQjtRQUY3QyxzQkFBaUIsR0FBakIsaUJBQWlCLENBQXNEO1FBQ25DLFNBQUksR0FBSixJQUFJLENBQW9CO1FBQ2pDLFlBQU8sR0FB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MkJBQUMsc0JBQXNCOzswQkFFN0IsTUFBTTsyQkFBQyxrQkFBa0I7OzBCQUN6QixNQUFNOzJCQUFDLFNBQVM7NENBVkosT0FBTztzQkFEdkIsZUFBZTt1QkFBQyxrQkFBa0I7Z0JBS25DLEtBQUs7c0JBRkosS0FBSztnQkFnQkYsTUFBTSxNQUtOLFNBQVMsTUFPVCxNQUFNLE1BNkNFLE1BQU0sTUFPTixhQUFhLE1BT2pCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICAgIENvbXBvbmVudCxcbiAgICBDb250ZW50Q2hpbGRyZW4sXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIFF1ZXJ5TGlzdCxcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge05nQ29udHJvbH0gZnJvbSAnQGFuZ3VsYXIvZm9ybXMnO1xuaW1wb3J0IHtcbiAgICBFTVBUWV9RVUVSWSxcbiAgICBUVUlfREVGQVVMVF9JREVOVElUWV9NQVRDSEVSLFxuICAgIHR1aUNvbnRyb2xWYWx1ZSxcbiAgICB0dWlEZWZhdWx0UHJvcCxcbiAgICB0dWlHZXRPcmlnaW5hbEFycmF5RnJvbVF1ZXJ5TGlzdCxcbiAgICBUdWlJZGVudGl0eU1hdGNoZXIsXG4gICAgVHVpSW5qZWN0aW9uVG9rZW5UeXBlLFxuICAgIHR1aUlzUHJlc2VudCxcbiAgICB0dWlQdXJlLFxuICAgIHR1aVF1ZXJ5TGlzdENoYW5nZXMsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtcbiAgICBUVUlfREFUQV9MSVNUX0hPU1QsXG4gICAgVHVpRGF0YUxpc3RIb3N0LFxuICAgIFR1aU9wdGlvbkNvbXBvbmVudCxcbiAgICBUdWlTaXplTCxcbiAgICBUdWlTaXplWFMsXG59IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7VFVJX01VTFRJX1NFTEVDVF9URVhUU30gZnJvbSAnQHRhaWdhLXVpL2tpdC90b2tlbnMnO1xuaW1wb3J0IHtjb21iaW5lTGF0ZXN0LCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLW9wdC1ncm91cFt0dWlNdWx0aVNlbGVjdEdyb3VwXScsXG4gICAgdGVtcGxhdGVVcmw6ICcuL211bHRpLXNlbGVjdC1ncm91cC50ZW1wbGF0ZS5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9tdWx0aS1zZWxlY3QtZ3JvdXAuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlNdWx0aVNlbGVjdEdyb3VwQ29tcG9uZW50PFQ+IHtcbiAgICBAQ29udGVudENoaWxkcmVuKFR1aU9wdGlvbkNvbXBvbmVudClcbiAgICBwcml2YXRlIHJlYWRvbmx5IG9wdGlvbnM6IFF1ZXJ5TGlzdDxUdWlPcHRpb25Db21wb25lbnQ8VD4+ID0gRU1QVFlfUVVFUlk7XG5cbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgbGFiZWwgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9NVUxUSV9TRUxFQ1RfVEVYVFMpXG4gICAgICAgIHJlYWRvbmx5IG11bHRpU2VsZWN0VGV4dHMkOiBUdWlJbmplY3Rpb25Ub2tlblR5cGU8dHlwZW9mIFRVSV9NVUxUSV9TRUxFQ1RfVEVYVFM+LFxuICAgICAgICBASW5qZWN0KFRVSV9EQVRBX0xJU1RfSE9TVCkgcHJpdmF0ZSByZWFkb25seSBob3N0OiBUdWlEYXRhTGlzdEhvc3Q8VD4sXG4gICAgICAgIEBJbmplY3QoTmdDb250cm9sKSBwcml2YXRlIHJlYWRvbmx5IGNvbnRyb2w6IE5nQ29udHJvbCxcbiAgICApIHt9XG5cbiAgICBnZXQgc2l6ZSgpOiBUdWlTaXplTCB8IFR1aVNpemVYUyB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wdGlvbnMuZmlyc3Q/LnNpemUgfHwgJ20nO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgZ2V0IGVtcHR5JCgpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICAgICAgcmV0dXJuIHR1aVF1ZXJ5TGlzdENoYW5nZXModGhpcy5vcHRpb25zKS5waXBlKG1hcCgoe2xlbmd0aH0pID0+ICFsZW5ndGgpKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIGdldCBkaXNhYmxlZCQoKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgICAgIHJldHVybiB0dWlRdWVyeUxpc3RDaGFuZ2VzKHRoaXMub3B0aW9ucykucGlwZShcbiAgICAgICAgICAgIG1hcChpdGVtcyA9PiBpdGVtcy5ldmVyeSgoe2Rpc2FibGVkfSkgPT4gZGlzYWJsZWQpKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIGdldCB2YWx1ZSQoKTogT2JzZXJ2YWJsZTxib29sZWFuIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gY29tYmluZUxhdGVzdChbdGhpcy5pdGVtcyQsIHRoaXMudmFsdWVDaGFuZ2VzJF0pLnBpcGUoXG4gICAgICAgICAgICBtYXAoKFtpdGVtcywgY3VycmVudF0pID0+IHtcbiAgICAgICAgICAgICAgICBsZXQgcmVzdWx0ID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNlbGVjdGVkID0gY3VycmVudC5zb21lKHNlbGVjdGVkID0+XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXIoc2VsZWN0ZWQsIGl0ZW1zW2ldKSxcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoKCFzZWxlY3RlZCAmJiByZXN1bHQpIHx8IChzZWxlY3RlZCAmJiAhcmVzdWx0ICYmIGkpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IHNlbGVjdGVkO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBvbkNsaWNrKGNoZWNrZWQ6IGJvb2xlYW4gfCBudWxsKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5jb250cm9sLmNvbnRyb2wpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNvbnRyb2xWYWx1ZTogcmVhZG9ubHkgVFtdID0gdGhpcy5jb250cm9sLnZhbHVlIHx8IFtdO1xuICAgICAgICBjb25zdCB7dmFsdWVzfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IGZpbHRlcmVkID0gY29udHJvbFZhbHVlLmZpbHRlcihjdXJyZW50ID0+XG4gICAgICAgICAgICB2YWx1ZXMuZXZlcnkoaXRlbSA9PiAhdGhpcy5tYXRjaGVyKGN1cnJlbnQsIGl0ZW0pKSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNvbnRyb2wuY29udHJvbC5zZXRWYWx1ZShjaGVja2VkID8gZmlsdGVyZWQgOiBbLi4uZmlsdGVyZWQsIC4uLnZhbHVlc10pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHZhbHVlcygpOiByZWFkb25seSBUW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIodHVpR2V0T3JpZ2luYWxBcnJheUZyb21RdWVyeUxpc3QodGhpcy5vcHRpb25zKSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXQgbWF0Y2hlcigpOiBUdWlJZGVudGl0eU1hdGNoZXI8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy5ob3N0LmlkZW50aXR5TWF0Y2hlciB8fCBUVUlfREVGQVVMVF9JREVOVElUWV9NQVRDSEVSO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBnZXQgaXRlbXMkKCk6IE9ic2VydmFibGU8cmVhZG9ubHkgVFtdPiB7XG4gICAgICAgIHJldHVybiB0dWlRdWVyeUxpc3RDaGFuZ2VzKHRoaXMub3B0aW9ucykucGlwZShcbiAgICAgICAgICAgIG1hcChvcHRpb25zID0+IG9wdGlvbnMubWFwKCh7dmFsdWV9KSA9PiB2YWx1ZSkuZmlsdGVyKHR1aUlzUHJlc2VudCkpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIEB0dWlQdXJlXG4gICAgcHJpdmF0ZSBnZXQgdmFsdWVDaGFuZ2VzJCgpOiBPYnNlcnZhYmxlPHJlYWRvbmx5IFRbXT4ge1xuICAgICAgICByZXR1cm4gdHVpQ29udHJvbFZhbHVlPHJlYWRvbmx5IFRbXT4odGhpcy5jb250cm9sKS5waXBlKFxuICAgICAgICAgICAgbWFwKHZhbHVlID0+IHZhbHVlIHx8IFtdKSxcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBAdHVpUHVyZVxuICAgIHByaXZhdGUgZmlsdGVyKGl0ZW1zOiBSZWFkb25seUFycmF5PFR1aU9wdGlvbkNvbXBvbmVudDxUPj4pOiByZWFkb25seSBUW10ge1xuICAgICAgICByZXR1cm4gaXRlbXMubWFwKCh7dmFsdWV9KSA9PiB2YWx1ZSkuZmlsdGVyKHR1aUlzUHJlc2VudCk7XG4gICAgfVxufVxuIiwiPHNwYW5cbiAgICAqdHVpTGV0PVwidmFsdWUkIHwgYXN5bmMgYXMgdmFsdWVcIlxuICAgIGNsYXNzPVwidC13cmFwcGVyXCJcbj5cbiAgICA8c3BhbiBjbGFzcz1cInQtbGFiZWxcIj57eyBsYWJlbCB9fTwvc3Bhbj5cbiAgICA8YnV0dG9uXG4gICAgICAgICpuZ0lmPVwibGFiZWwgJiYgIShlbXB0eSQgfCBhc3luYylcIlxuICAgICAgICB0dWlMaW5rXG4gICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICBjbGFzcz1cInQtYnV0dG9uXCJcbiAgICAgICAgW2Rpc2FibGVkXT1cIiEhKGRpc2FibGVkJCB8IGFzeW5jKVwiXG4gICAgICAgIChjbGljayk9XCJvbkNsaWNrKHZhbHVlKVwiXG4gICAgPlxuICAgICAgICB7eyAobXVsdGlTZWxlY3RUZXh0cyQgfCBhc3luYyk/Llt2YWx1ZSA/ICdub25lJyA6ICdhbGwnXSB9fVxuICAgIDwvYnV0dG9uPlxuPC9zcGFuPlxuPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PlxuIl19