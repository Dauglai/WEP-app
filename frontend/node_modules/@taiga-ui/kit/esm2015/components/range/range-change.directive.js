import { DOCUMENT } from '@angular/common';
import { Directive, ElementRef, EventEmitter, Inject, Output, Self } from '@angular/core';
import { tuiClamp, TuiDestroyService, tuiRound, tuiTypedFromEvent } from '@taiga-ui/cdk';
import { TUI_FLOATING_PRECISION } from '@taiga-ui/kit/constants';
import { merge } from 'rxjs';
import { filter, map, repeat, startWith, switchMap, takeUntil, tap } from 'rxjs/operators';
import { TuiRangeComponent } from './range.component';
import * as i0 from "@angular/core";
import * as i1 from "./range.component";
import * as i2 from "rxjs";
export class TuiRangeChangeDirective {
    constructor(doc, el, range, destroy$) {
        this.doc = doc;
        this.el = el;
        this.range = range;
        /**
         * TODO replace with pointer events (when all supported browsers can handle them).
         * Don't forget to use setPointerCapture instead of listening all doc events
         */
        this.pointerDown$ = merge(tuiTypedFromEvent(this.el.nativeElement, 'touchstart', {
            passive: true,
        }).pipe(filter(({ touches }) => touches.length === 1), map(({ touches }) => touches[0])), tuiTypedFromEvent(this.el.nativeElement, 'mousedown', { passive: true }));
        this.pointerMove$ = merge(tuiTypedFromEvent(this.doc, 'touchmove').pipe(filter(({ touches }) => touches.length === 1), map(({ touches }) => touches[0])), tuiTypedFromEvent(this.doc, 'mousemove'));
        this.pointerUp$ = merge(tuiTypedFromEvent(this.doc, 'touchend', { passive: true }), tuiTypedFromEvent(this.doc, 'mouseup', { passive: true }));
        this.activeThumbChange = new EventEmitter();
        let activeThumb;
        this.pointerDown$
            .pipe(tap(({ clientX, target }) => {
            activeThumb = this.detectActiveThumb(clientX, target);
            this.activeThumbChange.emit(activeThumb);
            if (this.range.focusable) {
                el.nativeElement.focus();
            }
        }), switchMap(event => this.pointerMove$.pipe(startWith(event))), map(({ clientX }) => this.getFractionFromEvents(clientX)), takeUntil(this.pointerUp$), repeat(), takeUntil(destroy$))
            .subscribe(fraction => {
            const value = this.range.getValueFromFraction(fraction);
            this.range.processValue(value, activeThumb === 'right');
        });
    }
    getFractionFromEvents(clickClientX) {
        const hostRect = this.el.nativeElement.getBoundingClientRect();
        const value = clickClientX - hostRect.left;
        const total = hostRect.width;
        return tuiClamp(tuiRound(value / total, TUI_FLOATING_PRECISION), 0, 1);
    }
    detectActiveThumb(clientX, target) {
        const [leftSliderRef, rightSliderRef] = this.range.slidersRefs;
        switch (target) {
            case leftSliderRef.nativeElement:
                return 'left';
            case rightSliderRef.nativeElement:
                return 'right';
            default:
                return this.findNearestActiveThumb(clientX);
        }
    }
    findNearestActiveThumb(clientX) {
        const fraction = this.getFractionFromEvents(clientX);
        const deltaLeft = fraction * 100 - this.range.left;
        const deltaRight = fraction * 100 - 100 + this.range.right;
        return Math.abs(deltaLeft) > Math.abs(deltaRight) ||
            deltaRight > 0 ||
            (this.range.left === 0 && this.range.right === 100)
            ? 'right'
            : 'left';
    }
}
TuiRangeChangeDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRangeChangeDirective, deps: [{ token: DOCUMENT }, { token: ElementRef }, { token: TuiRangeComponent }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiRangeChangeDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiRangeChangeDirective, selector: "tui-range", outputs: { activeThumbChange: "activeThumbChange" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRangeChangeDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-range',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiRangeComponent, decorators: [{
                    type: Inject,
                    args: [TuiRangeComponent]
                }] }, { type: i2.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { activeThumbChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,