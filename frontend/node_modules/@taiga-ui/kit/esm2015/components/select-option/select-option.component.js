import { ChangeDetectionStrategy, Component, ElementRef, Inject, Optional, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiControl, TUI_DEFAULT_IDENTITY_MATCHER, tuiIsPresent, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST, TuiDataListComponent, TuiOptionComponent, } from '@taiga-ui/core';
import { POLYMORPHEUS_CONTEXT, PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
import { EMPTY, merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@taiga-ui/cdk";
export class TuiSelectOptionComponent {
    constructor(context, host, el, option, dataList, control, abstractControl) {
        this.context = context;
        this.host = host;
        this.el = el;
        this.option = option;
        this.dataList = dataList;
        this.control = control;
        this.abstractControl = abstractControl;
        this.changeDetection$ = new Subject();
        this.selected$ = merge(this.changeDetection$, this.control.valueChanges || EMPTY, tuiTypedFromEvent(this.el.nativeElement, 'animationstart')).pipe(startWith(null), map(() => this.selected), distinctUntilChanged());
    }
    get matcher() {
        return this.host.identityMatcher || TUI_DEFAULT_IDENTITY_MATCHER;
    }
    ngDoCheck() {
        this.changeDetection$.next();
    }
    ngOnInit() {
        /**
         * This would cause changes inside already checked parent component (during the same change detection cycle),
         * and it might cause ExpressionChanged error due to potential HostBinding
         * (for example, inside {@link https://github.com/angular/angular/blob/main/packages/forms/src/directives/ng_control_status.ts#L99 NgControlStatus}).
         * Microtask keeps it in the same frame but allows change detection to run.
         */
        // eslint-disable-next-line @typescript-eslint/no-floating-promises
        Promise.resolve().then(() => {
            if (tuiIsPresent(this.option.value) && this.host.checkOption) {
                this.host.checkOption(this.option.value);
            }
        });
    }
    get value() {
        var _a, _b;
        return (_b = (_a = this.abstractControl) === null || _a === void 0 ? void 0 : _a.value) !== null && _b !== void 0 ? _b : this.control.value;
    }
    get selected() {
        return (tuiIsPresent(this.option.value) &&
            tuiIsPresent(this.value) &&
            this.matcher(this.value, this.option.value));
    }
}
TuiSelectOptionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionComponent, deps: [{ token: POLYMORPHEUS_CONTEXT }, { token: TUI_DATA_LIST_HOST }, { token: ElementRef }, { token: TuiOptionComponent }, { token: TuiDataListComponent, optional: true }, { token: NgControl }, { token: AbstractTuiControl, optional: true }], target: i0.ɵɵFactoryTarget.Component });
TuiSelectOptionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiSelectOptionComponent, selector: "tui-select-option", ngImport: i0, template: "<ng-container [ngTemplateOutlet]=\"context.$implicit\"></ng-container>\n<tui-svg\n    *ngIf=\"selected$ | async; else dummy\"\n    automation-id=\"tui-select-option__checkmark\"\n    src=\"tuiIconCheckLarge\"\n    class=\"t-checkmark\"\n    [tuiScrollIntoView]=\"true\"\n></tui-svg>\n<ng-template #dummy>\n    <span class=\"t-dummy\"></span>\n</ng-template>\n", styles: ["@keyframes retrigger{0%{left:1px}to{left:2px}}:host{display:flex;flex:1;align-items:center;max-width:100%;animation:retrigger 1s}.t-checkmark{margin:0 -.375rem 0 auto;border-left:5px solid transparent}.t-dummy{width:1.5rem}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }, { type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.TuiScrollIntoViewDirective, selector: "[tuiScrollIntoView]", inputs: ["tuiScrollIntoView"] }], pipes: { "async": i2.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiSelectOptionComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-select-option',
                    templateUrl: './select-option.template.html',
                    styleUrls: ['./select-option.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [POLYMORPHEUS_CONTEXT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATA_LIST_HOST]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.TuiOptionComponent, decorators: [{
                    type: Inject,
                    args: [TuiOptionComponent]
                }] }, { type: i1.TuiDataListComponent, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiDataListComponent]
                }] }, { type: i3.NgControl, decorators: [{
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i4.AbstractTuiControl, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AbstractTuiControl]
                }] }]; } });
export const TUI_SELECT_OPTION = new PolymorpheusComponent(TuiSelectOptionComponent);
//# sourceMappingURL=data:application/json;base64,