import { Directive, Inject, Self } from '@angular/core';
import { AbstractTuiControl, TuiDestroyService } from '@taiga-ui/cdk';
import { AbstractTuiTextfieldHost, tuiAsTextfieldHost } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER } from '@taiga-ui/kit/tokens';
import { Subject } from 'rxjs';
import { distinctUntilChanged, switchMap, takeUntil } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "./input-month.component";
import * as i2 from "rxjs";
export class TuiInputMonthDirective extends AbstractTuiTextfieldHost {
    constructor(host, formatter, destroy$) {
        super(host);
        this.value$ = new Subject();
        this.localizedValue = '';
        this.value$
            .pipe(distinctUntilChanged(), switchMap(formatter), takeUntil(destroy$))
            .subscribe(localizedValue => {
            this.localizedValue = localizedValue;
        });
    }
    get readOnly() {
        return true;
    }
    get value() {
        return this.localizedValue;
    }
    ngDoCheck() {
        this.value$.next(this.host.value);
    }
    onValueChange(value) {
        this.host.onValueChange(value);
    }
}
TuiInputMonthDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthDirective, deps: [{ token: AbstractTuiControl }, { token: TUI_MONTH_FORMATTER }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiInputMonthDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputMonthDirective, selector: "tui-input-month", providers: [tuiAsTextfieldHost(TuiInputMonthDirective), TuiDestroyService], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-input-month',
                    providers: [tuiAsTextfieldHost(TuiInputMonthDirective), TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiInputMonthComponent, decorators: [{
                    type: Inject,
                    args: [AbstractTuiControl]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MONTH_FORMATTER]
                }] }, { type: i2.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtbW9udGguZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtbW9udGgvaW5wdXQtbW9udGguZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQVcsTUFBTSxFQUFFLElBQUksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRCxPQUFPLEVBQUMsa0JBQWtCLEVBQUUsaUJBQWlCLEVBQXVCLE1BQU0sZUFBZSxDQUFDO0FBQzFGLE9BQU8sRUFBQyx3QkFBd0IsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQzVFLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3pELE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQVExRSxNQUFNLE9BQU8sc0JBQ1QsU0FBUSx3QkFBZ0Q7SUFPeEQsWUFDZ0MsSUFBNEIsRUFFeEQsU0FBMEQsRUFDdkIsUUFBNkI7UUFFaEUsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBVkMsV0FBTSxHQUFHLElBQUksT0FBTyxFQUFtQixDQUFDO1FBRWpELG1CQUFjLEdBQUcsRUFBRSxDQUFDO1FBVXhCLElBQUksQ0FBQyxNQUFNO2FBQ04sSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsU0FBUyxDQUFDLFNBQVMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUN2RSxTQUFTLENBQUMsY0FBYyxDQUFDLEVBQUU7WUFDeEIsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQUM7UUFDekMsQ0FBQyxDQUFDLENBQUM7SUFDWCxDQUFDO0lBRUQsSUFBYSxRQUFRO1FBQ2pCLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFRCxJQUFhLEtBQUs7UUFDZCxPQUFPLElBQUksQ0FBQyxjQUFjLENBQUM7SUFDL0IsQ0FBQztJQUVELFNBQVM7UUFDTCxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3RDLENBQUM7SUFFRCxhQUFhLENBQUMsS0FBYTtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNuQyxDQUFDOztvSEFyQ1Esc0JBQXNCLGtCQVNuQixrQkFBa0IsYUFDbEIsbUJBQW1CLGFBRVgsaUJBQWlCO3dHQVo1QixzQkFBc0IsMENBRnBCLENBQUMsa0JBQWtCLENBQUMsc0JBQXNCLENBQUMsRUFBRSxpQkFBaUIsQ0FBQzs0RkFFakUsc0JBQXNCO2tCQUpsQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxpQkFBaUI7b0JBQzNCLFNBQVMsRUFBRSxDQUFDLGtCQUFrQix3QkFBd0IsRUFBRSxpQkFBaUIsQ0FBQztpQkFDN0U7OzBCQVVRLE1BQU07MkJBQUMsa0JBQWtCOzswQkFDekIsTUFBTTsyQkFBQyxtQkFBbUI7OzBCQUUxQixJQUFJOzswQkFBSSxNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBEb0NoZWNrLCBJbmplY3QsIFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBYnN0cmFjdFR1aUNvbnRyb2wsIFR1aURlc3Ryb3lTZXJ2aWNlLCBUdWlIYW5kbGVyLCBUdWlNb250aH0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge0Fic3RyYWN0VHVpVGV4dGZpZWxkSG9zdCwgdHVpQXNUZXh0ZmllbGRIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5pbXBvcnQge1RVSV9NT05USF9GT1JNQVRURVJ9IGZyb20gJ0B0YWlnYS11aS9raXQvdG9rZW5zJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBzd2l0Y2hNYXAsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge1R1aUlucHV0TW9udGhDb21wb25lbnR9IGZyb20gJy4vaW5wdXQtbW9udGguY29tcG9uZW50JztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktaW5wdXQtbW9udGgnLFxuICAgIHByb3ZpZGVyczogW3R1aUFzVGV4dGZpZWxkSG9zdChUdWlJbnB1dE1vbnRoRGlyZWN0aXZlKSwgVHVpRGVzdHJveVNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlJbnB1dE1vbnRoRGlyZWN0aXZlXG4gICAgZXh0ZW5kcyBBYnN0cmFjdFR1aVRleHRmaWVsZEhvc3Q8VHVpSW5wdXRNb250aENvbXBvbmVudD5cbiAgICBpbXBsZW1lbnRzIERvQ2hlY2tcbntcbiAgICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlJCA9IG5ldyBTdWJqZWN0PFR1aU1vbnRoIHwgbnVsbD4oKTtcblxuICAgIHByaXZhdGUgbG9jYWxpemVkVmFsdWUgPSAnJztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEFic3RyYWN0VHVpQ29udHJvbCkgaG9zdDogVHVpSW5wdXRNb250aENvbXBvbmVudCxcbiAgICAgICAgQEluamVjdChUVUlfTU9OVEhfRk9STUFUVEVSKVxuICAgICAgICBmb3JtYXR0ZXI6IFR1aUhhbmRsZXI8VHVpTW9udGggfCBudWxsLCBPYnNlcnZhYmxlPHN0cmluZz4+LFxuICAgICAgICBAU2VsZigpIEBJbmplY3QoVHVpRGVzdHJveVNlcnZpY2UpIGRlc3Ryb3kkOiBPYnNlcnZhYmxlPHVua25vd24+LFxuICAgICkge1xuICAgICAgICBzdXBlcihob3N0KTtcblxuICAgICAgICB0aGlzLnZhbHVlJFxuICAgICAgICAgICAgLnBpcGUoZGlzdGluY3RVbnRpbENoYW5nZWQoKSwgc3dpdGNoTWFwKGZvcm1hdHRlciksIHRha2VVbnRpbChkZXN0cm95JCkpXG4gICAgICAgICAgICAuc3Vic2NyaWJlKGxvY2FsaXplZFZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsaXplZFZhbHVlID0gbG9jYWxpemVkVmFsdWU7XG4gICAgICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvdmVycmlkZSBnZXQgcmVhZE9ubHkoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIG92ZXJyaWRlIGdldCB2YWx1ZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGl6ZWRWYWx1ZTtcbiAgICB9XG5cbiAgICBuZ0RvQ2hlY2soKTogdm9pZCB7XG4gICAgICAgIHRoaXMudmFsdWUkLm5leHQodGhpcy5ob3N0LnZhbHVlKTtcbiAgICB9XG5cbiAgICBvblZhbHVlQ2hhbmdlKHZhbHVlOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5ob3N0Lm9uVmFsdWVDaGFuZ2UodmFsdWUpO1xuICAgIH1cbn1cbiJdfQ==