import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, Inject, Input, Optional, Self, ViewChild, } from '@angular/core';
import { NgControl } from '@angular/forms';
import { AbstractTuiNullableControl, ALWAYS_FALSE_HANDLER, tuiAsControl, tuiAsFocusableItemAccessor, tuiDateClamp, TuiDay, tuiDefaultProp, } from '@taiga-ui/cdk';
import { TuiMonthPipe, TuiPrimitiveTextfieldComponent, } from '@taiga-ui/core';
import { TUI_MONTH_FORMATTER_PROVIDER } from '@taiga-ui/kit/providers';
import { TUI_INPUT_DATE_OPTIONS, TUI_MONTH_FORMATTER, } from '@taiga-ui/kit/tokens';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@taiga-ui/kit/components/calendar-month";
import * as i3 from "@taiga-ui/cdk";
import * as i4 from "@angular/common";
import * as i5 from "@angular/forms";
export class TuiInputMonthComponent extends AbstractTuiNullableControl {
    constructor(control, cdr, formatter, options) {
        super(control, cdr);
        this.formatter = formatter;
        this.options = options;
        this.min = this.options.min;
        this.max = this.options.max;
        this.disabledItemHandler = ALWAYS_FALSE_HANDLER;
        this.defaultActiveYear = TuiDay.currentLocal();
        this.open = false;
    }
    get nativeFocusableElement() {
        return this.textfield ? this.textfield.nativeFocusableElement : null;
    }
    get computedDefaultActiveYear() {
        return (this.activeYear ||
            this.value ||
            tuiDateClamp(this.defaultActiveYear, this.min, this.max));
    }
    get focused() {
        return !!this.textfield && this.textfield.focused;
    }
    get calendarIcon() {
        return this.options.icon;
    }
    onValueChange(value) {
        if (value) {
            return;
        }
        this.value = null;
        this.onOpenChange(true);
    }
    onMonthClick(month) {
        this.value = month;
        this.close();
    }
    onFocused(focused) {
        this.updateFocused(focused);
    }
    onOpenChange(open) {
        if (open && this.value) {
            this.activeYear = this.value;
        }
        this.open = open;
    }
    setDisabledState() {
        super.setDisabledState();
        this.close();
    }
    close() {
        this.open = false;
    }
}
TuiInputMonthComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_MONTH_FORMATTER }, { token: TUI_INPUT_DATE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiInputMonthComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputMonthComponent, selector: "tui-input-month", inputs: { min: "min", max: "max", disabledItemHandler: "disabledItemHandler", defaultActiveYear: "defaultActiveYear" }, providers: [
        tuiAsFocusableItemAccessor(TuiInputMonthComponent),
        tuiAsControl(TuiInputMonthComponent),
        TUI_MONTH_FORMATTER_PROVIDER,
        TuiMonthPipe,
    ], viewQueries: [{ propertyName: "textfield", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"interactive\"\n    [content]=\"dropdown\"\n    [open]=\"open && interactive\"\n    (openChange)=\"onOpenChange($event)\"\n>\n    <tui-primitive-textfield\n        class=\"t-textfield\"\n        [editable]=\"false\"\n        [disabled]=\"computedDisabled\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [tuiTextfieldIcon]=\"calendarIcon\"\n        [pseudoFocus]=\"pseudoFocus\"\n        [pseudoHover]=\"pseudoHover\"\n        [invalid]=\"computedInvalid\"\n        [value]=\"(value | tuiMapper : formatter | async) || ''\"\n        (valueChange)=\"onValueChange($event)\"\n        (focusedChange)=\"onFocused($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n\n    <ng-template #dropdown>\n        <tui-calendar-month\n            tuiPreventDefault=\"mousedown\"\n            [disabledItemHandler]=\"disabledItemHandler\"\n            [min]=\"min\"\n            [max]=\"max\"\n            [value]=\"value\"\n            [year]=\"computedDefaultActiveYear\"\n            (yearChange)=\"activeYear = $event\"\n            (monthClick)=\"onMonthClick($event)\"\n        ></tui-calendar-month>\n    </ng-template>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }, { type: i2.TuiCalendarMonthComponent, selector: "tui-calendar-month", inputs: ["value", "year", "disabledItemHandler", "min", "max"], outputs: ["monthClick", "hoveredItemChange", "yearChange"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i1.TuiTextfieldIconDirective, selector: "[tuiTextfieldIcon]", inputs: ["tuiTextfieldIcon"] }, { type: i3.TuiPreventDefaultDirective, selector: "[tuiPreventDefault]", inputs: ["tuiPreventDefault"] }], pipes: { "async": i4.AsyncPipe, "tuiMapper": i3.TuiMapperPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "min", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "max", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "disabledItemHandler", void 0);
__decorate([
    tuiDefaultProp()
], TuiInputMonthComponent.prototype, "defaultActiveYear", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiInputMonthComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-input-month',
                    templateUrl: './input-month.template.html',
                    styleUrls: ['./input-month.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    providers: [
                        tuiAsFocusableItemAccessor(TuiInputMonthComponent),
                        tuiAsControl(TuiInputMonthComponent),
                        TUI_MONTH_FORMATTER_PROVIDER,
                        TuiMonthPipe,
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i5.NgControl, decorators: [{
                    type: Optional
                }, {
                    type: Self
                }, {
                    type: Inject,
                    args: [NgControl]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_MONTH_FORMATTER]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_INPUT_DATE_OPTIONS]
                }] }]; }, propDecorators: { textfield: [{
                type: ViewChild,
                args: [TuiPrimitiveTextfieldComponent]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], disabledItemHandler: [{
                type: Input
            }], defaultActiveYear: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,