import { Directive, Inject, Optional, SkipSelf } from '@angular/core';
import { TUI_BUTTON_OPTIONS, TuiModeDirective } from '@taiga-ui/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
export class TuiPushDirective extends TuiModeDirective {
    constructor(modeDirective) {
        var _a;
        super();
        this.modeDirective = modeDirective;
        this.size = 's';
        this.shape = null;
        this.change$ = ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.change$) || new Subject();
    }
    get appearance() {
        var _a;
        return ((_a = this.modeDirective) === null || _a === void 0 ? void 0 : _a.mode) === 'onDark' ? 'accent' : 'secondary';
    }
}
TuiPushDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushDirective, deps: [{ token: TuiModeDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiPushDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPushDirective, selector: "tui-push", providers: [
        {
            provide: TuiModeDirective,
            useExisting: TuiPushDirective,
        },
        {
            provide: TUI_BUTTON_OPTIONS,
            useExisting: TuiPushDirective,
        },
    ], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-push',
                    providers: [
                        {
                            provide: TuiModeDirective,
                            useExisting: TuiPushDirective,
                        },
                        {
                            provide: TUI_BUTTON_OPTIONS,
                            useExisting: TuiPushDirective,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiModeDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TuiModeDirective]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9wdXNoL3B1c2guZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFDLGtCQUFrQixFQUFvQixnQkFBZ0IsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3RGLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7OztBQWU3QixNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsZ0JBQWdCO0lBT2xELFlBSXFCLGFBQXNDOztRQUV2RCxLQUFLLEVBQUUsQ0FBQztRQUZTLGtCQUFhLEdBQWIsYUFBYSxDQUF5QjtRQVYzRCxTQUFJLEdBQTZCLEdBQUcsQ0FBQztRQUVyQyxVQUFLLEdBQUcsSUFBSSxDQUFDO1FBRUssWUFBTyxHQUFHLENBQUEsTUFBQSxJQUFJLENBQUMsYUFBYSwwQ0FBRSxPQUFPLEtBQUksSUFBSSxPQUFPLEVBQUUsQ0FBQztJQVN6RSxDQUFDO0lBRUQsSUFBSSxVQUFVOztRQUNWLE9BQU8sQ0FBQSxNQUFBLElBQUksQ0FBQyxhQUFhLDBDQUFFLElBQUksTUFBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDO0lBQzFFLENBQUM7OzhHQWxCUSxnQkFBZ0Isa0JBVWIsZ0JBQWdCO2tHQVZuQixnQkFBZ0IsbUNBWGQ7UUFDUDtZQUNJLE9BQU8sRUFBRSxnQkFBZ0I7WUFDekIsV0FBVyxFQUFFLGdCQUFnQjtTQUNoQztRQUNEO1lBQ0ksT0FBTyxFQUFFLGtCQUFrQjtZQUMzQixXQUFXLEVBQUUsZ0JBQWdCO1NBQ2hDO0tBQ0o7NEZBRVEsZ0JBQWdCO2tCQWI1QixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxVQUFVO29CQUNwQixTQUFTLEVBQUU7d0JBQ1A7NEJBQ0ksT0FBTyxFQUFFLGdCQUFnQjs0QkFDekIsV0FBVyxrQkFBa0I7eUJBQ2hDO3dCQUNEOzRCQUNJLE9BQU8sRUFBRSxrQkFBa0I7NEJBQzNCLFdBQVcsa0JBQWtCO3lCQUNoQztxQkFDSjtpQkFDSjs7MEJBU1EsUUFBUTs7MEJBQ1IsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxnQkFBZ0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBPcHRpb25hbCwgU2tpcFNlbGZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUVUlfQlVUVE9OX09QVElPTlMsIFR1aUJ1dHRvbk9wdGlvbnMsIFR1aU1vZGVEaXJlY3RpdmV9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAndHVpLXB1c2gnLFxuICAgIHByb3ZpZGVyczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBwcm92aWRlOiBUdWlNb2RlRGlyZWN0aXZlLFxuICAgICAgICAgICAgdXNlRXhpc3Rpbmc6IFR1aVB1c2hEaXJlY3RpdmUsXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHByb3ZpZGU6IFRVSV9CVVRUT05fT1BUSU9OUyxcbiAgICAgICAgICAgIHVzZUV4aXN0aW5nOiBUdWlQdXNoRGlyZWN0aXZlLFxuICAgICAgICB9LFxuICAgIF0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVB1c2hEaXJlY3RpdmUgZXh0ZW5kcyBUdWlNb2RlRGlyZWN0aXZlIGltcGxlbWVudHMgVHVpQnV0dG9uT3B0aW9ucyB7XG4gICAgc2l6ZTogVHVpQnV0dG9uT3B0aW9uc1snc2l6ZSddID0gJ3MnO1xuXG4gICAgc2hhcGUgPSBudWxsO1xuXG4gICAgb3ZlcnJpZGUgcmVhZG9ubHkgY2hhbmdlJCA9IHRoaXMubW9kZURpcmVjdGl2ZT8uY2hhbmdlJCB8fCBuZXcgU3ViamVjdCgpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTa2lwU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpTW9kZURpcmVjdGl2ZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBtb2RlRGlyZWN0aXZlOiBUdWlNb2RlRGlyZWN0aXZlIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBnZXQgYXBwZWFyYW5jZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5tb2RlRGlyZWN0aXZlPy5tb2RlID09PSAnb25EYXJrJyA/ICdhY2NlbnQnIDogJ3NlY29uZGFyeSc7XG4gICAgfVxufVxuIl19