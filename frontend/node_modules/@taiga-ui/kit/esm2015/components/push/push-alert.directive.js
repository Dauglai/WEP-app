import { ChangeDetectorRef, Directive, forwardRef, Inject, Input, Self, TemplateRef, } from '@angular/core';
import { TuiDestroyService, tuiIfMap } from '@taiga-ui/cdk';
import { PolymorpheusTemplate } from '@tinkoff/ng-polymorpheus';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
// TODO: find the best way for prevent cycle
// eslint-disable-next-line import/no-cycle
import { TuiPushService } from './push.service';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
import * as i2 from "./push.service";
export class TuiPushAlertDirective extends PolymorpheusTemplate {
    constructor(template, cdr, destroy$, push) {
        super(template, cdr);
        this.show$ = new Subject();
        this.show$
            .pipe(tuiIfMap(() => push.open(this)), takeUntil(destroy$))
            .subscribe();
    }
    set tuiPush(show) {
        this.show$.next(show);
    }
}
TuiPushAlertDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushAlertDirective, deps: [{ token: TemplateRef }, { token: ChangeDetectorRef }, { token: TuiDestroyService, self: true }, { token: forwardRef(() => TuiPushService) }], target: i0.ɵɵFactoryTarget.Directive });
TuiPushAlertDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPushAlertDirective, selector: "[tuiPush]", inputs: { tuiPush: "tuiPush" }, providers: [TuiDestroyService], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPushAlertDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiPush]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }, { type: i2.TuiPushService, decorators: [{
                    type: Inject,
                    args: [forwardRef(() => TuiPushService)]
                }] }]; }, propDecorators: { tuiPush: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHVzaC1hbGVydC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvY29tcG9uZW50cy9wdXNoL3B1c2gtYWxlcnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sS0FBSyxFQUNMLElBQUksRUFDSixXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFFLFFBQVEsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUV6Qyw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQU05QyxNQUFNLE9BQU8scUJBQXNCLFNBQVEsb0JBQW9CO0lBUTNELFlBQ3lCLFFBQTBCLEVBQ3BCLEdBQXNCLEVBQ2QsUUFBNkIsRUFDdEIsSUFBb0I7UUFFOUQsS0FBSyxDQUFDLFFBQVEsRUFBRSxHQUFHLENBQUMsQ0FBQztRQWJSLFVBQUssR0FBRyxJQUFJLE9BQU8sRUFBVyxDQUFDO1FBZTVDLElBQUksQ0FBQyxLQUFLO2FBQ0wsSUFBSSxDQUNELFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQy9CLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FDdEI7YUFDQSxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBbkJELElBQ0ksT0FBTyxDQUFDLElBQWE7UUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUIsQ0FBQzs7bUhBTlEscUJBQXFCLGtCQVNsQixXQUFXLGFBQ1gsaUJBQWlCLGFBQ1QsaUJBQWlCLHlCQUN6QixVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDO3VHQVpuQyxxQkFBcUIsb0VBRm5CLENBQUMsaUJBQWlCLENBQUM7NEZBRXJCLHFCQUFxQjtrQkFKakMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsV0FBVztvQkFDckIsU0FBUyxFQUFFLENBQUMsaUJBQWlCLENBQUM7aUJBQ2pDOzswQkFVUSxNQUFNOzJCQUFDLFdBQVc7OzBCQUNsQixNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3hCLElBQUk7OzBCQUFJLE1BQU07MkJBQUMsaUJBQWlCOzswQkFDaEMsTUFBTTsyQkFBQyxVQUFVLENBQUMsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDOzRDQVJ4QyxPQUFPO3NCQURWLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIENoYW5nZURldGVjdG9yUmVmLFxuICAgIERpcmVjdGl2ZSxcbiAgICBmb3J3YXJkUmVmLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBTZWxmLFxuICAgIFRlbXBsYXRlUmVmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7VHVpRGVzdHJveVNlcnZpY2UsIHR1aUlmTWFwfSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7UG9seW1vcnBoZXVzVGVtcGxhdGV9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHt0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLy8gVE9ETzogZmluZCB0aGUgYmVzdCB3YXkgZm9yIHByZXZlbnQgY3ljbGVcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tY3ljbGVcbmltcG9ydCB7VHVpUHVzaFNlcnZpY2V9IGZyb20gJy4vcHVzaC5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUHVzaF0nLFxuICAgIHByb3ZpZGVyczogW1R1aURlc3Ryb3lTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUHVzaEFsZXJ0RGlyZWN0aXZlIGV4dGVuZHMgUG9seW1vcnBoZXVzVGVtcGxhdGUge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgc2hvdyQgPSBuZXcgU3ViamVjdDxib29sZWFuPigpO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgdHVpUHVzaChzaG93OiBib29sZWFuKSB7XG4gICAgICAgIHRoaXMuc2hvdyQubmV4dChzaG93KTtcbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUZW1wbGF0ZVJlZikgdGVtcGxhdGU6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgICAgIEBJbmplY3QoQ2hhbmdlRGV0ZWN0b3JSZWYpIGNkcjogQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gICAgICAgIEBTZWxmKCkgQEluamVjdChUdWlEZXN0cm95U2VydmljZSkgZGVzdHJveSQ6IE9ic2VydmFibGU8dW5rbm93bj4sXG4gICAgICAgIEBJbmplY3QoZm9yd2FyZFJlZigoKSA9PiBUdWlQdXNoU2VydmljZSkpIHB1c2g6IFR1aVB1c2hTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBzdXBlcih0ZW1wbGF0ZSwgY2RyKTtcblxuICAgICAgICB0aGlzLnNob3ckXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICB0dWlJZk1hcCgoKSA9PiBwdXNoLm9wZW4odGhpcykpLFxuICAgICAgICAgICAgICAgIHRha2VVbnRpbChkZXN0cm95JCksXG4gICAgICAgICAgICApXG4gICAgICAgICAgICAuc3Vic2NyaWJlKCk7XG4gICAgfVxufVxuIl19