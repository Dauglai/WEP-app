import { __decorate } from "tslib";
import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ContentChildren, ElementRef, EventEmitter, HostBinding, HostListener, Inject, Input, Output, TemplateRef, } from '@angular/core';
import { EMPTY_QUERY, TUI_IS_MOBILE, tuiClamp, tuiDefaultProp, TuiItemDirective, tuiPure, } from '@taiga-ui/cdk';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./carousel-scroll.directive";
import * as i3 from "@ng-web-apis/intersection-observer";
import * as i4 from "@taiga-ui/cdk";
import * as i5 from "./carousel-autoscroll.directive";
export class TuiCarouselComponent {
    constructor(cdr, el, isMobile) {
        this.cdr = cdr;
        this.el = el;
        this.isMobile = isMobile;
        this.translate = 0;
        this.draggable = false;
        this.itemsCount = 1;
        this.index = 0;
        this.indexChange = new EventEmitter();
        this.items = EMPTY_QUERY;
        this.transitioned = true;
    }
    get transform() {
        const x = this.transitioned ? this.computedTranslate : this.translate;
        return `translateX(${100 * x}%)`;
    }
    onTransitioned(transitioned) {
        this.transitioned = transitioned;
        if (!transitioned) {
            this.translate = this.computedTranslate;
        }
    }
    getStyle(itemsCount) {
        const percent = `${100 / itemsCount}%`;
        return {
            flexBasis: percent,
            minWidth: percent,
            maxWidth: percent,
        };
    }
    next() {
        this.updateIndex(this.index + 1);
    }
    prev() {
        this.updateIndex(this.index - 1);
    }
    isDisabled(index) {
        return index < this.index || index > this.index + this.itemsCount;
    }
    onIntersection({ intersectionRatio }, index) {
        if (intersectionRatio && intersectionRatio !== 1 && !this.transitioned) {
            this.updateIndex(index - Math.floor(this.itemsCount / 2));
        }
    }
    onScroll(delta) {
        if (!this.isMobile) {
            this.updateIndex(this.index + delta);
        }
    }
    onPan(x) {
        if (!this.computedDraggable) {
            return;
        }
        const { clientWidth } = this.el.nativeElement;
        const min = 1 - this.items.length / this.itemsCount;
        this.translate = tuiClamp(x / clientWidth + this.translate, min, 0);
    }
    onSwipe(direction) {
        if (direction === 'left') {
            this.next();
        }
        else if (direction === 'right') {
            this.prev();
        }
    }
    onAutoscroll() {
        this.updateIndex(this.index === this.items.length - 1 ? 0 : this.index + 1);
    }
    get computedTranslate() {
        return -this.index / this.itemsCount;
    }
    get computedDraggable() {
        return this.isMobile || this.draggable;
    }
    updateIndex(index) {
        this.index = tuiClamp(index, 0, this.items.length - 1);
        this.indexChange.emit(this.index);
        this.cdr.markForCheck();
    }
}
TuiCarouselComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCarouselComponent, deps: [{ token: ChangeDetectorRef }, { token: ElementRef }, { token: TUI_IS_MOBILE }], target: i0.ɵɵFactoryTarget.Component });
TuiCarouselComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiCarouselComponent, selector: "tui-carousel", inputs: { draggable: "draggable", itemsCount: "itemsCount", index: "index" }, outputs: { indexChange: "indexChange" }, host: { listeners: { "touchstart": "onTransitioned(false)", "touchend": "onTransitioned(true)", "mousedown": "onTransitioned(false)", "document:mouseup.silent": "onTransitioned(true)" }, properties: { "class._draggable": "this.draggable", "class._transitioned": "this.transitioned" } }, queries: [{ propertyName: "items", predicate: TuiItemDirective, read: TemplateRef }], ngImport: i0, template: "<ng-container *ngIf=\"items.changes | async\"></ng-container>\n<div\n    class=\"t-scroller\"\n    (tuiCarouselScroll)=\"onScroll($event)\"\n>\n    <div\n        waIntersectionRoot\n        waIntersectionObserver\n        waIntersectionThreshold=\"0,1\"\n        waIntersectionRootMargin=\"100px 1000000px 100px -51%\"\n        class=\"t-wrapper\"\n    >\n        <div\n            class=\"t-items\"\n            [style.transform]=\"transform\"\n            (tuiPan)=\"onPan($event[0])\"\n            (tuiSwipe)=\"onSwipe($event.direction)\"\n            (tuiCarouselAutoscroll)=\"onAutoscroll()\"\n        >\n            <fieldset\n                *ngFor=\"let item of items; let i = index\"\n                class=\"t-item\"\n                [disabled]=\"isDisabled(i)\"\n                [ngStyle]=\"getStyle(itemsCount)\"\n                (waIntersectionObservee)=\"onIntersection($event[0], i)\"\n            >\n                <ng-container [ngTemplateOutlet]=\"item\"></ng-container>\n            </fieldset>\n        </div>\n    </div>\n</div>\n", styles: [":host{position:relative;display:block;overflow:hidden}:host._draggable{-webkit-user-select:none;-moz-user-select:none;user-select:none}:host._draggable:hover{cursor:grab}:host._draggable:active{cursor:grabbing}.t-items{display:flex}:host._transitioned .t-items{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out}.t-item{display:flex;flex-direction:column;justify-content:center;padding:var(--tui-carousel-padding, 0 1.25rem);flex:1;min-width:100%;max-width:100%;box-sizing:border-box;border:none;margin:0}.t-wrapper{position:-webkit-sticky;position:sticky;left:0;right:0;min-width:100%;overflow:hidden}.t-scroller{scrollbar-width:none;-ms-overflow-style:none;display:flex;overflow:auto;overscroll-behavior-x:none;padding-bottom:2rem;margin-bottom:-2rem}.t-scroller::-webkit-scrollbar,.t-scroller::-webkit-scrollbar-thumb{background:transparent;width:0;height:0}.t-scroller:before,.t-scroller:after{content:\"\";display:block;min-width:1rem}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.TuiCarouselScrollDirective, selector: "[tuiCarouselScroll]", outputs: ["tuiCarouselScroll"] }, { type: i3.IntersectionRootDirective, selector: "[waIntersectionRoot]" }, { type: i3.IntersectionObserverDirective, selector: "[waIntersectionObserver]", exportAs: ["IntersectionObserver"] }, { type: i4.TuiPanDirective, selector: "[tuiPan]", outputs: ["tuiPan"] }, { type: i4.TuiSwipeDirective, selector: "[tuiSwipe]", outputs: ["tuiSwipe"] }, { type: i5.TuiCarouselAutoscrollDirective, selector: "[tuiCarouselAutoscroll]", outputs: ["tuiCarouselAutoscroll"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i1.NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { type: i3.IntersectionObserveeDirective, selector: "[waIntersectionObservee]", outputs: ["waIntersectionObservee"] }, { type: i1.NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet"] }], pipes: { "async": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
__decorate([
    tuiDefaultProp()
], TuiCarouselComponent.prototype, "draggable", void 0);
__decorate([
    tuiDefaultProp()
], TuiCarouselComponent.prototype, "itemsCount", void 0);
__decorate([
    tuiDefaultProp()
], TuiCarouselComponent.prototype, "index", void 0);
__decorate([
    tuiPure
], TuiCarouselComponent.prototype, "getStyle", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCarouselComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-carousel',
                    templateUrl: './carousel.template.html',
                    styleUrls: ['./carousel.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef, decorators: [{
                    type: Inject,
                    args: [ChangeDetectorRef]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_IS_MOBILE]
                }] }]; }, propDecorators: { draggable: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class._draggable']
            }], itemsCount: [{
                type: Input
            }], index: [{
                type: Input
            }], indexChange: [{
                type: Output
            }], items: [{
                type: ContentChildren,
                args: [TuiItemDirective, { read: TemplateRef }]
            }], transitioned: [{
                type: HostBinding,
                args: ['class._transitioned']
            }], onTransitioned: [{
                type: HostListener,
                args: ['touchstart', ['false']]
            }, {
                type: HostListener,
                args: ['touchend', ['true']]
            }, {
                type: HostListener,
                args: ['mousedown', ['false']]
            }, {
                type: HostListener,
                args: ['document:mouseup.silent', ['true']]
            }], getStyle: [] } });
//# sourceMappingURL=data:application/json;base64,