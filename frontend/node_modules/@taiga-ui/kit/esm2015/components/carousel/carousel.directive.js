import { Directive, ElementRef, Inject, Input } from '@angular/core';
import { PAGE_VISIBILITY } from '@ng-web-apis/common';
import { ALWAYS_FALSE_HANDLER, ALWAYS_TRUE_HANDLER, tuiIfMap, tuiTypedFromEvent, } from '@taiga-ui/cdk';
import { BehaviorSubject, combineLatest, interval, merge, Observable } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiCarouselDirective extends Observable {
    constructor(el, visible$) {
        super(subscriber => this.output$.subscribe(subscriber));
        this.el = el;
        this.visible$ = visible$;
        this.duration$ = new BehaviorSubject(0);
        this.running$ = merge(tuiTypedFromEvent(this.el.nativeElement, 'mouseenter').pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'touchstart').pipe(map(ALWAYS_FALSE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'touchend').pipe(map(ALWAYS_TRUE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, 'mouseleave').pipe(map(ALWAYS_TRUE_HANDLER)), this.visible$);
        this.output$ = combineLatest([this.duration$, this.running$]).pipe(tuiIfMap(([duration]) => interval(duration), values => values.every(Boolean)));
    }
    set duration(duration) {
        this.duration$.next(duration);
    }
    set index(_) {
        this.duration$.next(this.duration$.value);
    }
}
TuiCarouselDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCarouselDirective, deps: [{ token: ElementRef }, { token: PAGE_VISIBILITY }], target: i0.ɵɵFactoryTarget.Directive });
TuiCarouselDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiCarouselDirective, selector: "tui-carousel", inputs: { duration: "duration", index: "index" }, usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCarouselDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'tui-carousel',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [PAGE_VISIBILITY]
                }] }]; }, propDecorators: { duration: [{
                type: Input
            }], index: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2Fyb3VzZWwuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvY2Fyb3VzZWwvY2Fyb3VzZWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDbkUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3BELE9BQU8sRUFDSCxvQkFBb0IsRUFDcEIsbUJBQW1CLEVBQ25CLFFBQVEsRUFDUixpQkFBaUIsR0FDcEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGVBQWUsRUFBRSxhQUFhLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDakYsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7QUFLbkMsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFVBQW1CO0lBb0N6RCxZQUN5QyxFQUEyQixFQUN0QixRQUE2QjtRQUV2RSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBSG5CLE9BQUUsR0FBRixFQUFFLENBQXlCO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQXFCO1FBckMxRCxjQUFTLEdBQUcsSUFBSSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFbkMsYUFBUSxHQUFHLEtBQUssQ0FDN0IsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FDNUIsRUFDRCxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxZQUFZLENBQUMsQ0FBQyxJQUFJLENBQ3ZELEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUM1QixFQUNELGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDckQsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQzNCLEVBQ0QsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsbUJBQW1CLENBQUMsQ0FDM0IsRUFDRCxJQUFJLENBQUMsUUFBUSxDQUNoQixDQUFDO1FBRWUsWUFBTyxHQUFHLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUMxRSxRQUFRLENBQ0osQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQ2xDLE1BQU0sQ0FBQyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FDbEMsQ0FDSixDQUFDO0lBaUJGLENBQUM7SUFmRCxJQUNJLFFBQVEsQ0FBQyxRQUFnQjtRQUN6QixJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsSUFDSSxLQUFLLENBQUMsQ0FBUztRQUNmLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUMsQ0FBQzs7a0hBbENRLG9CQUFvQixrQkFxQ2pCLFVBQVUsYUFDVixlQUFlO3NHQXRDbEIsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBSGhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGNBQWM7aUJBQzNCOzswQkFzQ1EsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsTUFBTTsyQkFBQyxlQUFlOzRDQVh2QixRQUFRO3NCQURYLEtBQUs7Z0JBTUYsS0FBSztzQkFEUixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQQUdFX1ZJU0lCSUxJVFl9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHtcbiAgICBBTFdBWVNfRkFMU0VfSEFORExFUixcbiAgICBBTFdBWVNfVFJVRV9IQU5ETEVSLFxuICAgIHR1aUlmTWFwLFxuICAgIHR1aVR5cGVkRnJvbUV2ZW50LFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBjb21iaW5lTGF0ZXN0LCBpbnRlcnZhbCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICd0dWktY2Fyb3VzZWwnLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlDYXJvdXNlbERpcmVjdGl2ZSBleHRlbmRzIE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZHVyYXRpb24kID0gbmV3IEJlaGF2aW9yU3ViamVjdCgwKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgcnVubmluZyQgPSBtZXJnZShcbiAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnbW91c2VlbnRlcicpLnBpcGUoXG4gICAgICAgICAgICBtYXAoQUxXQVlTX0ZBTFNFX0hBTkRMRVIpLFxuICAgICAgICApLFxuICAgICAgICB0dWlUeXBlZEZyb21FdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsICd0b3VjaHN0YXJ0JykucGlwZShcbiAgICAgICAgICAgIG1hcChBTFdBWVNfRkFMU0VfSEFORExFUiksXG4gICAgICAgICksXG4gICAgICAgIHR1aVR5cGVkRnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgJ3RvdWNoZW5kJykucGlwZShcbiAgICAgICAgICAgIG1hcChBTFdBWVNfVFJVRV9IQU5ETEVSKSxcbiAgICAgICAgKSxcbiAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCAnbW91c2VsZWF2ZScpLnBpcGUoXG4gICAgICAgICAgICBtYXAoQUxXQVlTX1RSVUVfSEFORExFUiksXG4gICAgICAgICksXG4gICAgICAgIHRoaXMudmlzaWJsZSQsXG4gICAgKTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgb3V0cHV0JCA9IGNvbWJpbmVMYXRlc3QoW3RoaXMuZHVyYXRpb24kLCB0aGlzLnJ1bm5pbmckXSkucGlwZShcbiAgICAgICAgdHVpSWZNYXAoXG4gICAgICAgICAgICAoW2R1cmF0aW9uXSkgPT4gaW50ZXJ2YWwoZHVyYXRpb24pLFxuICAgICAgICAgICAgdmFsdWVzID0+IHZhbHVlcy5ldmVyeShCb29sZWFuKSxcbiAgICAgICAgKSxcbiAgICApO1xuXG4gICAgQElucHV0KClcbiAgICBzZXQgZHVyYXRpb24oZHVyYXRpb246IG51bWJlcikge1xuICAgICAgICB0aGlzLmR1cmF0aW9uJC5uZXh0KGR1cmF0aW9uKTtcbiAgICB9XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCBpbmRleChfOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5kdXJhdGlvbiQubmV4dCh0aGlzLmR1cmF0aW9uJC52YWx1ZSk7XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRWxlbWVudFJlZikgcHJpdmF0ZSByZWFkb25seSBlbDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoUEFHRV9WSVNJQklMSVRZKSBwcml2YXRlIHJlYWRvbmx5IHZpc2libGUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+LFxuICAgICkge1xuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHRoaXMub3V0cHV0JC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgIH1cbn1cbiJdfQ==