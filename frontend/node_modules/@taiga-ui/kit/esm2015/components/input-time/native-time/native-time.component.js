import { ChangeDetectionStrategy, Component, Inject } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk';
import { TUI_TEXTFIELD_HOST } from '@taiga-ui/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk";
export class TuiNativeTimeComponent {
    constructor(host, idService) {
        this.host = host;
        this.autoIdString = idService.generate();
    }
    get items() {
        return this.host.items.map(item => item.toString(this.host.mode));
    }
    get value() {
        return this.host.value.length === this.host.mode.length ? this.host.value : '';
    }
    get step() {
        switch (this.host.mode) {
            case 'HH:MM:SS':
                return 1;
            case 'HH:MM:SS.MSS':
                return 0.001;
            default:
                return 60;
        }
    }
    onChange(value) {
        this.host.onValueChange(value);
    }
}
TuiNativeTimeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeTimeComponent, deps: [{ token: TUI_TEXTFIELD_HOST }, { token: TuiIdService }], target: i0.ɵɵFactoryTarget.Component });
TuiNativeTimeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiNativeTimeComponent, selector: "input[tuiTime]", host: { attributes: { "type": "time" }, listeners: { "change.stop": "onChange($event.target.value)", "click.stop.silent": "0", "mousedown.stop.silent": "0" }, properties: { "attr.list": "autoIdString", "tabIndex": "-1", "value": "value", "step": "step" } }, ngImport: i0, template: `
        <datalist
            *ngIf="items.length"
            [id]="autoIdString"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `, isInline: true, styles: [":host{position:absolute;top:0;left:0;width:100%;height:100%;opacity:0;pointer-events:auto;font-size:2rem}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiNativeTimeComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'input[tuiTime]',
                    template: `
        <datalist
            *ngIf="items.length"
            [id]="autoIdString"
        >
            <option
                *ngFor="let item of items"
                value="{{ item }}"
            ></option>
        </datalist>
    `,
                    host: {
                        type: 'time',
                        '[attr.list]': 'autoIdString',
                        '[tabIndex]': '-1',
                        '[value]': 'value',
                        '[step]': 'step',
                        '(change.stop)': 'onChange($event.target.value)',
                        '(click.stop.silent)': '0',
                        '(mousedown.stop.silent)': '0',
                    },
                    styleUrls: ['./native-time.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_HOST]
                }] }, { type: i2.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmF0aXZlLXRpbWUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvaW5wdXQtdGltZS9uYXRpdmUtdGltZS9uYXRpdmUtdGltZS5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLHVCQUF1QixFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekUsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUMsa0JBQWtCLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7OztBQThCbEQsTUFBTSxPQUFPLHNCQUFzQjtJQUUvQixZQUN5QyxJQUEyQixFQUMxQyxTQUF1QjtRQURSLFNBQUksR0FBSixJQUFJLENBQXVCO1FBR2hFLElBQUksQ0FBQyxZQUFZLEdBQUcsU0FBUyxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdDLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3RFLENBQUM7SUFFRCxJQUFJLEtBQUs7UUFDTCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDbkYsQ0FBQztJQUVELElBQUksSUFBSTtRQUNKLFFBQVEsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUU7WUFDcEIsS0FBSyxVQUFVO2dCQUNYLE9BQU8sQ0FBQyxDQUFDO1lBQ2IsS0FBSyxjQUFjO2dCQUNmLE9BQU8sS0FBSyxDQUFDO1lBQ2pCO2dCQUNJLE9BQU8sRUFBRSxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxLQUFhO1FBQ2xCLElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7O29IQTlCUSxzQkFBc0Isa0JBR25CLGtCQUFrQixhQUNsQixZQUFZO3dHQUpmLHNCQUFzQix3VEF4QnJCOzs7Ozs7Ozs7O0tBVVQ7NEZBY1Esc0JBQXNCO2tCQTFCbEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZ0JBQWdCO29CQUMxQixRQUFRLEVBQUU7Ozs7Ozs7Ozs7S0FVVDtvQkFDRCxJQUFJLEVBQUU7d0JBQ0YsSUFBSSxFQUFFLE1BQU07d0JBQ1osYUFBYSxFQUFFLGNBQWM7d0JBQzdCLFlBQVksRUFBRSxJQUFJO3dCQUNsQixTQUFTLEVBQUUsT0FBTzt3QkFDbEIsUUFBUSxFQUFFLE1BQU07d0JBQ2hCLGVBQWUsRUFBRSwrQkFBK0I7d0JBQ2hELHFCQUFxQixFQUFFLEdBQUc7d0JBQzFCLHlCQUF5QixFQUFFLEdBQUc7cUJBQ2pDO29CQUNELFNBQVMsRUFBRSxDQUFDLDBCQUEwQixDQUFDO29CQUN2QyxlQUFlLEVBQUUsdUJBQXVCLENBQUMsTUFBTTtpQkFDbEQ7OzBCQUlRLE1BQU07MkJBQUMsa0JBQWtCOzswQkFDekIsTUFBTTsyQkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBJbmplY3R9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlJZFNlcnZpY2V9IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHtUVUlfVEVYVEZJRUxEX0hPU1R9IGZyb20gJ0B0YWlnYS11aS9jb3JlJztcblxuaW1wb3J0IHR5cGUge1R1aUlucHV0VGltZURpcmVjdGl2ZX0gZnJvbSAnLi4vaW5wdXQtdGltZS5kaXJlY3RpdmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R1aVRpbWVdJyxcbiAgICB0ZW1wbGF0ZTogYFxuICAgICAgICA8ZGF0YWxpc3RcbiAgICAgICAgICAgICpuZ0lmPVwiaXRlbXMubGVuZ3RoXCJcbiAgICAgICAgICAgIFtpZF09XCJhdXRvSWRTdHJpbmdcIlxuICAgICAgICA+XG4gICAgICAgICAgICA8b3B0aW9uXG4gICAgICAgICAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgaXRlbXNcIlxuICAgICAgICAgICAgICAgIHZhbHVlPVwie3sgaXRlbSB9fVwiXG4gICAgICAgICAgICA+PC9vcHRpb24+XG4gICAgICAgIDwvZGF0YWxpc3Q+XG4gICAgYCxcbiAgICBob3N0OiB7XG4gICAgICAgIHR5cGU6ICd0aW1lJyxcbiAgICAgICAgJ1thdHRyLmxpc3RdJzogJ2F1dG9JZFN0cmluZycsXG4gICAgICAgICdbdGFiSW5kZXhdJzogJy0xJyxcbiAgICAgICAgJ1t2YWx1ZV0nOiAndmFsdWUnLFxuICAgICAgICAnW3N0ZXBdJzogJ3N0ZXAnLFxuICAgICAgICAnKGNoYW5nZS5zdG9wKSc6ICdvbkNoYW5nZSgkZXZlbnQudGFyZ2V0LnZhbHVlKScsXG4gICAgICAgICcoY2xpY2suc3RvcC5zaWxlbnQpJzogJzAnLFxuICAgICAgICAnKG1vdXNlZG93bi5zdG9wLnNpbGVudCknOiAnMCcsXG4gICAgfSxcbiAgICBzdHlsZVVybHM6IFsnLi9uYXRpdmUtdGltZS5zdHlsZS5sZXNzJ10sXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIFR1aU5hdGl2ZVRpbWVDb21wb25lbnQge1xuICAgIGF1dG9JZFN0cmluZzogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFRVSV9URVhURklFTERfSE9TVCkgcmVhZG9ubHkgaG9zdDogVHVpSW5wdXRUaW1lRGlyZWN0aXZlLFxuICAgICAgICBASW5qZWN0KFR1aUlkU2VydmljZSkgaWRTZXJ2aWNlOiBUdWlJZFNlcnZpY2UsXG4gICAgKSB7XG4gICAgICAgIHRoaXMuYXV0b0lkU3RyaW5nID0gaWRTZXJ2aWNlLmdlbmVyYXRlKCk7XG4gICAgfVxuXG4gICAgZ2V0IGl0ZW1zKCk6IHN0cmluZ1tdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG9zdC5pdGVtcy5tYXAoaXRlbSA9PiBpdGVtLnRvU3RyaW5nKHRoaXMuaG9zdC5tb2RlKSk7XG4gICAgfVxuXG4gICAgZ2V0IHZhbHVlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvc3QudmFsdWUubGVuZ3RoID09PSB0aGlzLmhvc3QubW9kZS5sZW5ndGggPyB0aGlzLmhvc3QudmFsdWUgOiAnJztcbiAgICB9XG5cbiAgICBnZXQgc3RlcCgpOiBudW1iZXIge1xuICAgICAgICBzd2l0Y2ggKHRoaXMuaG9zdC5tb2RlKSB7XG4gICAgICAgICAgICBjYXNlICdISDpNTTpTUyc6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgICAgICBjYXNlICdISDpNTTpTUy5NU1MnOlxuICAgICAgICAgICAgICAgIHJldHVybiAwLjAwMTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmV0dXJuIDYwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgb25DaGFuZ2UodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmhvc3Qub25WYWx1ZUNoYW5nZSh2YWx1ZSk7XG4gICAgfVxufVxuIl19