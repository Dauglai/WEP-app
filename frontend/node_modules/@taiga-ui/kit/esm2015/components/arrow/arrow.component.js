import { ChangeDetectionStrategy, Component, HostBinding, Inject } from '@angular/core';
import { TUI_TEXTFIELD_SIZE, TuiHostedDropdownComponent, tuiSizeBigger, } from '@taiga-ui/core';
import { PolymorpheusComponent } from '@tinkoff/ng-polymorpheus';
// TODO: find the best way for prevent cycle
// eslint-disable-next-line import/no-cycle
import { TUI_ARROW_OPTIONS } from './arrow-options';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/core";
import * as i2 from "@tinkoff/ng-polymorpheus";
import * as i3 from "@angular/common";
export class TuiArrowComponent {
    constructor(dropdown, textfieldSize, options) {
        this.dropdown = dropdown;
        this.textfieldSize = textfieldSize;
        this.options = options;
    }
    get rotated() {
        return this.dropdown.open;
    }
    get arrowIcon() {
        return tuiSizeBigger(this.textfieldSize.size)
            ? this.options.iconLarge
            : this.options.iconSmall;
    }
}
TuiArrowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArrowComponent, deps: [{ token: TuiHostedDropdownComponent }, { token: TUI_TEXTFIELD_SIZE }, { token: TUI_ARROW_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });
TuiArrowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiArrowComponent, selector: "tui-arrow", host: { properties: { "class._rotated": "this.rotated" } }, ngImport: i0, template: "<tui-svg\n    *polymorpheusOutlet=\"arrowIcon as src\"\n    [src]=\"src\"\n></tui-svg>\n<ng-container *ngIf=\"dropdown.openChange | async\"></ng-container>\n", styles: [":host{transition-property:transform;transition-duration:var(--tui-duration, .3s);transition-timing-function:ease-in-out;display:block;cursor:pointer;pointer-events:none}:host._rotated{transform:rotate(180deg)}\n"], components: [{ type: i1.TuiSvgComponent, selector: "tui-svg", inputs: ["src"] }], directives: [{ type: i2.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i3.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }], pipes: { "async": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiArrowComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-arrow',
                    templateUrl: './arrow.template.html',
                    styleUrls: ['./arrow.style.less'],
                    changeDetection: ChangeDetectionStrategy.OnPush,
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiHostedDropdownComponent, decorators: [{
                    type: Inject,
                    args: [TuiHostedDropdownComponent]
                }] }, { type: i1.TuiTextfieldSizeDirective, decorators: [{
                    type: Inject,
                    args: [TUI_TEXTFIELD_SIZE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_ARROW_OPTIONS]
                }] }]; }, propDecorators: { rotated: [{
                type: HostBinding,
                args: ['class._rotated']
            }] } });
export const TUI_ARROW = new PolymorpheusComponent(TuiArrowComponent);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXJyb3cuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvYXJyb3cvYXJyb3cuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L2NvbXBvbmVudHMvYXJyb3cvYXJyb3cudGVtcGxhdGUuaHRtbCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsdUJBQXVCLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDdEYsT0FBTyxFQUNILGtCQUFrQixFQUNsQiwwQkFBMEIsRUFDMUIsYUFBYSxHQUVoQixNQUFNLGdCQUFnQixDQUFDO0FBQ3hCLE9BQU8sRUFBQyxxQkFBcUIsRUFBc0IsTUFBTSwwQkFBMEIsQ0FBQztBQUVwRiw0Q0FBNEM7QUFDNUMsMkNBQTJDO0FBQzNDLE9BQU8sRUFBQyxpQkFBaUIsRUFBa0IsTUFBTSxpQkFBaUIsQ0FBQzs7Ozs7QUFRbkUsTUFBTSxPQUFPLGlCQUFpQjtJQUMxQixZQUVhLFFBQW9DLEVBRTVCLGFBQXdDLEVBQ2IsT0FBd0I7UUFIM0QsYUFBUSxHQUFSLFFBQVEsQ0FBNEI7UUFFNUIsa0JBQWEsR0FBYixhQUFhLENBQTJCO1FBQ2IsWUFBTyxHQUFQLE9BQU8sQ0FBaUI7SUFDckUsQ0FBQztJQUVKLElBQ0ksT0FBTztRQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7SUFDOUIsQ0FBQztJQUVELElBQUksU0FBUztRQUNULE9BQU8sYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVM7WUFDeEIsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDO0lBQ2pDLENBQUM7OytHQWxCUSxpQkFBaUIsa0JBRWQsMEJBQTBCLGFBRTFCLGtCQUFrQixhQUVsQixpQkFBaUI7bUdBTnBCLGlCQUFpQiw2R0NuQjlCLCtKQUtBOzRGRGNhLGlCQUFpQjtrQkFON0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsV0FBVztvQkFDckIsV0FBVyxFQUFFLHVCQUF1QjtvQkFDcEMsU0FBUyxFQUFFLENBQUMsb0JBQW9CLENBQUM7b0JBQ2pDLGVBQWUsRUFBRSx1QkFBdUIsQ0FBQyxNQUFNO2lCQUNsRDs7MEJBR1EsTUFBTTsyQkFBQywwQkFBMEI7OzBCQUVqQyxNQUFNOzJCQUFDLGtCQUFrQjs7MEJBRXpCLE1BQU07MkJBQUMsaUJBQWlCOzRDQUl6QixPQUFPO3NCQURWLFdBQVc7dUJBQUMsZ0JBQWdCOztBQVlqQyxNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSwgQ29tcG9uZW50LCBIb3N0QmluZGluZywgSW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7XG4gICAgVFVJX1RFWFRGSUVMRF9TSVpFLFxuICAgIFR1aUhvc3RlZERyb3Bkb3duQ29tcG9uZW50LFxuICAgIHR1aVNpemVCaWdnZXIsXG4gICAgVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2NvcmUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb21wb25lbnQsIFBvbHltb3JwaGV1c0NvbnRlbnR9IGZyb20gJ0B0aW5rb2ZmL25nLXBvbHltb3JwaGV1cyc7XG5cbi8vIFRPRE86IGZpbmQgdGhlIGJlc3Qgd2F5IGZvciBwcmV2ZW50IGN5Y2xlXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L25vLWN5Y2xlXG5pbXBvcnQge1RVSV9BUlJPV19PUFRJT05TLCBUdWlBcnJvd09wdGlvbnN9IGZyb20gJy4vYXJyb3ctb3B0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndHVpLWFycm93JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYXJyb3cudGVtcGxhdGUuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vYXJyb3cuc3R5bGUubGVzcyddLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBcnJvd0NvbXBvbmVudCB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVHVpSG9zdGVkRHJvcGRvd25Db21wb25lbnQpXG4gICAgICAgIHJlYWRvbmx5IGRyb3Bkb3duOiBUdWlIb3N0ZWREcm9wZG93bkNvbXBvbmVudCxcbiAgICAgICAgQEluamVjdChUVUlfVEVYVEZJRUxEX1NJWkUpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGV4dGZpZWxkU2l6ZTogVHVpVGV4dGZpZWxkU2l6ZURpcmVjdGl2ZSxcbiAgICAgICAgQEluamVjdChUVUlfQVJST1dfT1BUSU9OUykgcHJpdmF0ZSByZWFkb25seSBvcHRpb25zOiBUdWlBcnJvd09wdGlvbnMsXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5fcm90YXRlZCcpXG4gICAgZ2V0IHJvdGF0ZWQoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmRyb3Bkb3duLm9wZW47XG4gICAgfVxuXG4gICAgZ2V0IGFycm93SWNvbigpOiBQb2x5bW9ycGhldXNDb250ZW50IHtcbiAgICAgICAgcmV0dXJuIHR1aVNpemVCaWdnZXIodGhpcy50ZXh0ZmllbGRTaXplLnNpemUpXG4gICAgICAgICAgICA/IHRoaXMub3B0aW9ucy5pY29uTGFyZ2VcbiAgICAgICAgICAgIDogdGhpcy5vcHRpb25zLmljb25TbWFsbDtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBUVUlfQVJST1cgPSBuZXcgUG9seW1vcnBoZXVzQ29tcG9uZW50KFR1aUFycm93Q29tcG9uZW50KTtcbiIsIjx0dWktc3ZnXG4gICAgKnBvbHltb3JwaGV1c091dGxldD1cImFycm93SWNvbiBhcyBzcmNcIlxuICAgIFtzcmNdPVwic3JjXCJcbj48L3R1aS1zdmc+XG48bmctY29udGFpbmVyICpuZ0lmPVwiZHJvcGRvd24ub3BlbkNoYW5nZSB8IGFzeW5jXCI+PC9uZy1jb250YWluZXI+XG4iXX0=