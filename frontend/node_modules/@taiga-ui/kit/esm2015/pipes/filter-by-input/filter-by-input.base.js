import { __decorate } from "tslib";
import { tuiIsPresent, tuiPure, } from '@taiga-ui/cdk';
import { tuiIsFlat } from '@taiga-ui/kit/utils';
export class AbstractTuiFilterByInput {
    get query() {
        return this.accessor.nativeFocusableElement
            ? this.accessor.nativeFocusableElement.value || ``
            : ``;
    }
    filter(items, matcher, stringify, query) {
        if (!items) {
            return null;
        }
        return tuiIsFlat(items)
            ? this.filterFlat(items, matcher, stringify, query)
            : this.filter2d(items, matcher, stringify, query);
    }
    filterFlat(items, matcher, stringify, query) {
        const match = this.getMatch(items, stringify, query);
        return tuiIsPresent(match)
            ? items
            : items.filter(item => matcher(item, query, stringify));
    }
    filter2d(items, matcher, stringify, query) {
        const match = items.find(item => tuiIsPresent(this.getMatch(item, stringify, query)));
        return tuiIsPresent(match)
            ? items
            : items.map(inner => this.filterFlat(inner, matcher, stringify, query));
    }
    getMatch(items, stringify, query) {
        return items.find(item => stringify(item).toLocaleLowerCase() === query.toLocaleLowerCase());
    }
}
__decorate([
    tuiPure
], AbstractTuiFilterByInput.prototype, "filter", null);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LmJhc2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvcGlwZXMvZmlsdGVyLWJ5LWlucHV0L2ZpbHRlci1ieS1pbnB1dC5iYXNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBRUgsWUFBWSxFQUNaLE9BQU8sR0FHVixNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFROUMsTUFBTSxPQUFnQix3QkFBd0I7SUFHMUMsSUFBYyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLHNCQUFzQjtZQUN2QyxDQUFDLENBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxzQkFBMkMsQ0FBQyxLQUFLLElBQUksRUFBRTtZQUN4RSxDQUFDLENBQUMsRUFBRSxDQUFDO0lBQ2IsQ0FBQztJQUdTLE1BQU0sQ0FDWixLQUF3RCxFQUN4RCxPQUE0QixFQUM1QixTQUE4QixFQUM5QixLQUFhO1FBRWIsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sSUFBSSxDQUFDO1NBQ2Y7UUFFRCxPQUFPLFNBQVMsQ0FBQyxLQUFLLENBQUM7WUFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDO1lBQ25ELENBQUMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFTyxVQUFVLENBQ2QsS0FBbUIsRUFDbkIsT0FBNEIsRUFDNUIsU0FBOEIsRUFDOUIsS0FBYTtRQUViLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUVyRCxPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDdEIsQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsQ0FBQztJQUVPLFFBQVEsQ0FDWixLQUFrQyxFQUNsQyxPQUE0QixFQUM1QixTQUE4QixFQUM5QixLQUFhO1FBRWIsTUFBTSxLQUFLLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUM1QixZQUFZLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQ3RELENBQUM7UUFFRixPQUFPLFlBQVksQ0FBQyxLQUFLLENBQUM7WUFDdEIsQ0FBQyxDQUFDLEtBQUs7WUFDUCxDQUFDLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBRU8sUUFBUSxDQUNaLEtBQW1CLEVBQ25CLFNBQThCLEVBQzlCLEtBQWE7UUFFYixPQUFPLEtBQUssQ0FBQyxJQUFJLENBQ2IsSUFBSSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUMsaUJBQWlCLEVBQUUsS0FBSyxLQUFLLENBQUMsaUJBQWlCLEVBQUUsQ0FDNUUsQ0FBQztJQUNOLENBQUM7Q0FDSjtBQXBERztJQURDLE9BQU87c0RBY1AiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICB0dWlJc1ByZXNlbnQsXG4gICAgdHVpUHVyZSxcbiAgICBUdWlTdHJpbmdIYW5kbGVyLFxuICAgIFR1aVN0cmluZ01hdGNoZXIsXG59IGZyb20gJ0B0YWlnYS11aS9jZGsnO1xuaW1wb3J0IHt0dWlJc0ZsYXR9IGZyb20gJ0B0YWlnYS11aS9raXQvdXRpbHMnO1xuXG5leHBvcnQgdHlwZSBBcnJheUVsZW1lbnQ8QT4gPSBBIGV4dGVuZHMgUmVhZG9ubHlBcnJheTxpbmZlciBUPlxuICAgID8gQSBleHRlbmRzIFJlYWRvbmx5QXJyYXk8UmVhZG9ubHlBcnJheTxpbmZlciBHPj5cbiAgICAgICAgPyBHXG4gICAgICAgIDogVFxuICAgIDogbmV2ZXI7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBBYnN0cmFjdFR1aUZpbHRlckJ5SW5wdXQge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBhY2Nlc3NvcjogVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yO1xuXG4gICAgcHJvdGVjdGVkIGdldCBxdWVyeSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3Nvci5uYXRpdmVGb2N1c2FibGVFbGVtZW50XG4gICAgICAgICAgICA/ICh0aGlzLmFjY2Vzc29yLm5hdGl2ZUZvY3VzYWJsZUVsZW1lbnQgYXMgSFRNTElucHV0RWxlbWVudCkudmFsdWUgfHwgYGBcbiAgICAgICAgICAgIDogYGA7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcm90ZWN0ZWQgZmlsdGVyPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCxcbiAgICAgICAgbWF0Y2hlcjogVHVpU3RyaW5nTWF0Y2hlcjxUPixcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwge1xuICAgICAgICBpZiAoIWl0ZW1zKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0dWlJc0ZsYXQoaXRlbXMpXG4gICAgICAgICAgICA/IHRoaXMuZmlsdGVyRmxhdChpdGVtcywgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSlcbiAgICAgICAgICAgIDogdGhpcy5maWx0ZXIyZChpdGVtcywgbWF0Y2hlciwgc3RyaW5naWZ5LCBxdWVyeSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBmaWx0ZXJGbGF0PFQ+KFxuICAgICAgICBpdGVtczogcmVhZG9ubHkgVFtdLFxuICAgICAgICBtYXRjaGVyOiBUdWlTdHJpbmdNYXRjaGVyPFQ+LFxuICAgICAgICBzdHJpbmdpZnk6IFR1aVN0cmluZ0hhbmRsZXI8VD4sXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgKTogcmVhZG9ubHkgVFtdIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLmdldE1hdGNoKGl0ZW1zLCBzdHJpbmdpZnksIHF1ZXJ5KTtcblxuICAgICAgICByZXR1cm4gdHVpSXNQcmVzZW50KG1hdGNoKVxuICAgICAgICAgICAgPyBpdGVtc1xuICAgICAgICAgICAgOiBpdGVtcy5maWx0ZXIoaXRlbSA9PiBtYXRjaGVyKGl0ZW0sIHF1ZXJ5LCBzdHJpbmdpZnkpKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGZpbHRlcjJkPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+LFxuICAgICAgICBtYXRjaGVyOiBUdWlTdHJpbmdNYXRjaGVyPFQ+LFxuICAgICAgICBzdHJpbmdpZnk6IFR1aVN0cmluZ0hhbmRsZXI8VD4sXG4gICAgICAgIHF1ZXJ5OiBzdHJpbmcsXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBpdGVtcy5maW5kKGl0ZW0gPT5cbiAgICAgICAgICAgIHR1aUlzUHJlc2VudCh0aGlzLmdldE1hdGNoKGl0ZW0sIHN0cmluZ2lmeSwgcXVlcnkpKSxcbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gdHVpSXNQcmVzZW50KG1hdGNoKVxuICAgICAgICAgICAgPyBpdGVtc1xuICAgICAgICAgICAgOiBpdGVtcy5tYXAoaW5uZXIgPT4gdGhpcy5maWx0ZXJGbGF0KGlubmVyLCBtYXRjaGVyLCBzdHJpbmdpZnksIHF1ZXJ5KSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXRNYXRjaDxUPihcbiAgICAgICAgaXRlbXM6IHJlYWRvbmx5IFRbXSxcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICAgICBxdWVyeTogc3RyaW5nLFxuICAgICk6IFQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gaXRlbXMuZmluZChcbiAgICAgICAgICAgIGl0ZW0gPT4gc3RyaW5naWZ5KGl0ZW0pLnRvTG9jYWxlTG93ZXJDYXNlKCkgPT09IHF1ZXJ5LnRvTG9jYWxlTG93ZXJDYXNlKCksXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19