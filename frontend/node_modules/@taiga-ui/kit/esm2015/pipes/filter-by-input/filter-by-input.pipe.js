import { Inject, Pipe } from '@angular/core';
import { TUI_DEFAULT_MATCHER, TUI_DEFAULT_STRINGIFY, TUI_FOCUSABLE_ITEM_ACCESSOR, } from '@taiga-ui/cdk';
import { TUI_DATA_LIST_HOST } from '@taiga-ui/core';
import { AbstractTuiFilterByInput } from './filter-by-input.base';
import * as i0 from "@angular/core";
export class TuiFilterByInputPipe extends AbstractTuiFilterByInput {
    constructor(accessor, host) {
        super();
        this.accessor = accessor;
        this.host = host;
    }
    transform(items, matcher = TUI_DEFAULT_MATCHER) {
        return this.filter(items, matcher, this.host.stringify || TUI_DEFAULT_STRINGIFY, this.query);
    }
}
TuiFilterByInputPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipe, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR }, { token: TUI_DATA_LIST_HOST }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFilterByInputPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipe, name: "tuiFilterByInput", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: `tuiFilterByInput`,
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DATA_LIST_HOST]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LnBpcGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9raXQvcGlwZXMvZmlsdGVyLWJ5LWlucHV0L2ZpbHRlci1ieS1pbnB1dC5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxNQUFNLEVBQUUsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUMxRCxPQUFPLEVBQ0gsbUJBQW1CLEVBQ25CLHFCQUFxQixFQUNyQiwyQkFBMkIsR0FHOUIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGtCQUFrQixFQUFrQixNQUFNLGdCQUFnQixDQUFDO0FBRW5FLE9BQU8sRUFBQyx3QkFBd0IsRUFBZSxNQUFNLHdCQUF3QixDQUFDOztBQU05RSxNQUFNLE9BQU8sb0JBQ1QsU0FBUSx3QkFBd0I7SUFHaEMsWUFFdUIsUUFBcUMsRUFFdkMsSUFBOEI7UUFFL0MsS0FBSyxFQUFFLENBQUM7UUFKVyxhQUFRLEdBQVIsUUFBUSxDQUE2QjtRQUV2QyxTQUFJLEdBQUosSUFBSSxDQUEwQjtJQUduRCxDQUFDO0lBR0QsU0FBUyxDQUNMLEtBQXdELEVBQ3hELFVBQStCLG1CQUFtQjtRQUVsRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQ2QsS0FBSyxFQUNMLE9BQU8sRUFDUCxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsSUFBSSxxQkFBcUIsRUFDNUMsSUFBSSxDQUFDLEtBQUssQ0FDYixDQUFDO0lBQ04sQ0FBQzs7a0hBeEJRLG9CQUFvQixrQkFLakIsMkJBQTJCLGFBRTNCLGtCQUFrQjtnSEFQckIsb0JBQW9COzRGQUFwQixvQkFBb0I7a0JBSmhDLElBQUk7bUJBQUM7b0JBQ0YsSUFBSSxFQUFFLGtCQUFrQjtvQkFDeEIsSUFBSSxFQUFFLEtBQUs7aUJBQ2Q7OzBCQU1RLE1BQU07MkJBQUMsMkJBQTJCOzswQkFFbEMsTUFBTTsyQkFBQyxrQkFBa0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFRVSV9ERUZBVUxUX01BVENIRVIsXG4gICAgVFVJX0RFRkFVTFRfU1RSSU5HSUZZLFxuICAgIFRVSV9GT0NVU0FCTEVfSVRFTV9BQ0NFU1NPUixcbiAgICBUdWlGb2N1c2FibGVFbGVtZW50QWNjZXNzb3IsXG4gICAgVHVpU3RyaW5nTWF0Y2hlcixcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkayc7XG5pbXBvcnQge1RVSV9EQVRBX0xJU1RfSE9TVCwgVHVpRGF0YUxpc3RIb3N0fSBmcm9tICdAdGFpZ2EtdWkvY29yZSc7XG5cbmltcG9ydCB7QWJzdHJhY3RUdWlGaWx0ZXJCeUlucHV0LCBBcnJheUVsZW1lbnR9IGZyb20gJy4vZmlsdGVyLWJ5LWlucHV0LmJhc2UnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aUZpbHRlckJ5SW5wdXRgLFxuICAgIHB1cmU6IGZhbHNlLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlGaWx0ZXJCeUlucHV0UGlwZVxuICAgIGV4dGVuZHMgQWJzdHJhY3RUdWlGaWx0ZXJCeUlucHV0XG4gICAgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtXG57XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SKVxuICAgICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgYWNjZXNzb3I6IFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICAgICAgQEluamVjdChUVUlfREFUQV9MSVNUX0hPU1QpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgaG9zdDogVHVpRGF0YUxpc3RIb3N0PHVua25vd24+LFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybTxUPihpdGVtczogVCwgbWF0Y2hlcj86IFR1aVN0cmluZ01hdGNoZXI8QXJyYXlFbGVtZW50PFQ+Pik6IFQ7XG4gICAgdHJhbnNmb3JtPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCxcbiAgICAgICAgbWF0Y2hlcjogVHVpU3RyaW5nTWF0Y2hlcjxUPiA9IFRVSV9ERUZBVUxUX01BVENIRVIsXG4gICAgKTogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLmZpbHRlcihcbiAgICAgICAgICAgIGl0ZW1zLFxuICAgICAgICAgICAgbWF0Y2hlcixcbiAgICAgICAgICAgIHRoaXMuaG9zdC5zdHJpbmdpZnkgfHwgVFVJX0RFRkFVTFRfU1RSSU5HSUZZLFxuICAgICAgICAgICAgdGhpcy5xdWVyeSxcbiAgICAgICAgKTtcbiAgICB9XG59XG4iXX0=