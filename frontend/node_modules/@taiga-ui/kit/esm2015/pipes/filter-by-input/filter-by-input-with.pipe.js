import { Inject, Pipe } from '@angular/core';
import { TUI_DEFAULT_MATCHER, TUI_FOCUSABLE_ITEM_ACCESSOR, } from '@taiga-ui/cdk';
import { AbstractTuiFilterByInput } from './filter-by-input.base';
import * as i0 from "@angular/core";
/**
 * @deprecated Use {@link TuiFilterByInputPipe} instead
 */
export class TuiFilterByInputWithPipe extends AbstractTuiFilterByInput {
    constructor(accessor) {
        super();
        this.accessor = accessor;
    }
    transform(items, stringify) {
        return this.filter(items, TUI_DEFAULT_MATCHER, stringify, this.query);
    }
}
TuiFilterByInputWithPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFilterByInputWithPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, name: "tuiFilterByInputWith", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFilterByInputWithPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: `tuiFilterByInputWith`,
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyLWJ5LWlucHV0LXdpdGgucGlwZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2tpdC9waXBlcy9maWx0ZXItYnktaW5wdXQvZmlsdGVyLWJ5LWlucHV0LXdpdGgucGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsTUFBTSxFQUFFLElBQUksRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUNILG1CQUFtQixFQUNuQiwyQkFBMkIsR0FHOUIsTUFBTSxlQUFlLENBQUM7QUFFdkIsT0FBTyxFQUFDLHdCQUF3QixFQUFlLE1BQU0sd0JBQXdCLENBQUM7O0FBRTlFOztHQUVHO0FBS0gsTUFBTSxPQUFPLHdCQUNULFNBQVEsd0JBQXdCO0lBR2hDLFlBRXVCLFFBQXFDO1FBRXhELEtBQUssRUFBRSxDQUFDO1FBRlcsYUFBUSxHQUFSLFFBQVEsQ0FBNkI7SUFHNUQsQ0FBQztJQUdELFNBQVMsQ0FDTCxLQUF3RCxFQUN4RCxTQUE4QjtRQUU5QixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLG1CQUFtQixFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDMUUsQ0FBQzs7c0hBakJRLHdCQUF3QixrQkFLckIsMkJBQTJCO29IQUw5Qix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFKcEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsc0JBQXNCO29CQUM1QixJQUFJLEVBQUUsS0FBSztpQkFDZDs7MEJBTVEsTUFBTTsyQkFBQywyQkFBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgUGlwZSwgUGlwZVRyYW5zZm9ybX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICAgIFRVSV9ERUZBVUxUX01BVENIRVIsXG4gICAgVFVJX0ZPQ1VTQUJMRV9JVEVNX0FDQ0VTU09SLFxuICAgIFR1aUZvY3VzYWJsZUVsZW1lbnRBY2Nlc3NvcixcbiAgICBUdWlTdHJpbmdIYW5kbGVyLFxufSBmcm9tICdAdGFpZ2EtdWkvY2RrJztcblxuaW1wb3J0IHtBYnN0cmFjdFR1aUZpbHRlckJ5SW5wdXQsIEFycmF5RWxlbWVudH0gZnJvbSAnLi9maWx0ZXItYnktaW5wdXQuYmFzZSc7XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgVXNlIHtAbGluayBUdWlGaWx0ZXJCeUlucHV0UGlwZX0gaW5zdGVhZFxuICovXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aUZpbHRlckJ5SW5wdXRXaXRoYCxcbiAgICBwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRmlsdGVyQnlJbnB1dFdpdGhQaXBlXG4gICAgZXh0ZW5kcyBBYnN0cmFjdFR1aUZpbHRlckJ5SW5wdXRcbiAgICBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm1cbntcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfRk9DVVNBQkxFX0lURU1fQUNDRVNTT1IpXG4gICAgICAgIHByb3RlY3RlZCByZWFkb25seSBhY2Nlc3NvcjogVHVpRm9jdXNhYmxlRWxlbWVudEFjY2Vzc29yLFxuICAgICkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIHRyYW5zZm9ybTxUPihpdGVtczogVCwgbWF0Y2hlcj86IFR1aVN0cmluZ0hhbmRsZXI8QXJyYXlFbGVtZW50PFQ+Pik6IFQ7XG4gICAgdHJhbnNmb3JtPFQ+KFxuICAgICAgICBpdGVtczogUmVhZG9ubHlBcnJheTxyZWFkb25seSBUW10+IHwgcmVhZG9ubHkgVFtdIHwgbnVsbCxcbiAgICAgICAgc3RyaW5naWZ5OiBUdWlTdHJpbmdIYW5kbGVyPFQ+LFxuICAgICk6IFJlYWRvbmx5QXJyYXk8cmVhZG9ubHkgVFtdPiB8IHJlYWRvbmx5IFRbXSB8IG51bGwge1xuICAgICAgICByZXR1cm4gdGhpcy5maWx0ZXIoaXRlbXMsIFRVSV9ERUZBVUxUX01BVENIRVIsIHN0cmluZ2lmeSwgdGhpcy5xdWVyeSk7XG4gICAgfVxufVxuIl19