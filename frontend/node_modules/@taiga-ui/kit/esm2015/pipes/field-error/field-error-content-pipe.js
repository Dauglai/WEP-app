import { AsyncPipe } from '@angular/common';
import { Inject, Injector, Pipe } from '@angular/core';
import { TuiFieldErrorPipe } from './field-error-pipe';
import * as i0 from "@angular/core";
export class TuiFieldErrorContentPipe {
    constructor(injector) {
        this.injector = injector;
        this.localInjector = Injector.create({
            providers: [{ provide: AsyncPipe }, { provide: TuiFieldErrorPipe }],
            parent: this.injector,
        });
        this.asyncPipe = this.localInjector.get(AsyncPipe);
        this.fieldErrorPipe = this.localInjector.get(TuiFieldErrorPipe);
    }
    transform(order) {
        return this.getErrorContent(order);
    }
    ngOnDestroy() {
        this.asyncPipe.ngOnDestroy();
    }
    getErrorContent(order) {
        const error = this.asyncPipe.transform(this.fieldErrorPipe.transform(order));
        if (!error) {
            return ``;
        }
        return typeof error.message === `function`
            ? error.message(error.context)
            : error.message;
    }
}
TuiFieldErrorContentPipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFieldErrorContentPipe, deps: [{ token: Injector }], target: i0.ɵɵFactoryTarget.Pipe });
TuiFieldErrorContentPipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFieldErrorContentPipe, name: "tuiFieldErrorContent", pure: false });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiFieldErrorContentPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: `tuiFieldErrorContent`,
                    pure: false,
                }]
        }], ctorParameters: function () { return [{ type: i0.Injector, decorators: [{
                    type: Inject,
                    args: [Injector]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtZXJyb3ItY29udGVudC1waXBlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMva2l0L3BpcGVzL2ZpZWxkLWVycm9yL2ZpZWxkLWVycm9yLWNvbnRlbnQtcGlwZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDMUMsT0FBTyxFQUFDLE1BQU0sRUFBRSxRQUFRLEVBQWEsSUFBSSxFQUFnQixNQUFNLGVBQWUsQ0FBQztBQUcvRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQzs7QUFNckQsTUFBTSxPQUFPLHdCQUF3QjtJQVNqQyxZQUErQyxRQUFrQjtRQUFsQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBUmhELGtCQUFhLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQztZQUM3QyxTQUFTLEVBQUUsQ0FBQyxFQUFDLE9BQU8sRUFBRSxTQUFTLEVBQUMsRUFBRSxFQUFDLE9BQU8sRUFBRSxpQkFBaUIsRUFBQyxDQUFDO1lBQy9ELE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUTtTQUN4QixDQUFDLENBQUM7UUFFYyxjQUFTLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDOUMsbUJBQWMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBRVIsQ0FBQztJQUVyRSxTQUFTLENBQUMsS0FBd0I7UUFDOUIsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNqQyxDQUFDO0lBRU8sZUFBZSxDQUFDLEtBQXdCO1FBQzVDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFN0UsSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNSLE9BQU8sRUFBRSxDQUFDO1NBQ2I7UUFFRCxPQUFPLE9BQU8sS0FBSyxDQUFDLE9BQU8sS0FBSyxVQUFVO1lBQ3RDLENBQUMsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7WUFDOUIsQ0FBQyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQzs7c0hBN0JRLHdCQUF3QixrQkFTYixRQUFRO29IQVRuQix3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFKcEMsSUFBSTttQkFBQztvQkFDRixJQUFJLEVBQUUsc0JBQXNCO29CQUM1QixJQUFJLEVBQUUsS0FBSztpQkFDZDs7MEJBVWdCLE1BQU07MkJBQUMsUUFBUSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7QXN5bmNQaXBlfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtJbmplY3QsIEluamVjdG9yLCBPbkRlc3Ryb3ksIFBpcGUsIFBpcGVUcmFuc2Zvcm19IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuXG5pbXBvcnQge1R1aUZpZWxkRXJyb3JQaXBlfSBmcm9tICcuL2ZpZWxkLWVycm9yLXBpcGUnO1xuXG5AUGlwZSh7XG4gICAgbmFtZTogYHR1aUZpZWxkRXJyb3JDb250ZW50YCxcbiAgICBwdXJlOiBmYWxzZSxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRmllbGRFcnJvckNvbnRlbnRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxvY2FsSW5qZWN0b3IgPSBJbmplY3Rvci5jcmVhdGUoe1xuICAgICAgICBwcm92aWRlcnM6IFt7cHJvdmlkZTogQXN5bmNQaXBlfSwge3Byb3ZpZGU6IFR1aUZpZWxkRXJyb3JQaXBlfV0sXG4gICAgICAgIHBhcmVudDogdGhpcy5pbmplY3RvcixcbiAgICB9KTtcblxuICAgIHByaXZhdGUgcmVhZG9ubHkgYXN5bmNQaXBlID0gdGhpcy5sb2NhbEluamVjdG9yLmdldChBc3luY1BpcGUpO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgZmllbGRFcnJvclBpcGUgPSB0aGlzLmxvY2FsSW5qZWN0b3IuZ2V0KFR1aUZpZWxkRXJyb3JQaXBlKTtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoSW5qZWN0b3IpIHByaXZhdGUgcmVhZG9ubHkgaW5qZWN0b3I6IEluamVjdG9yKSB7fVxuXG4gICAgdHJhbnNmb3JtKG9yZGVyOiByZWFkb25seSBzdHJpbmdbXSk6IFBvbHltb3JwaGV1c0NvbnRlbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRFcnJvckNvbnRlbnQob3JkZXIpO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLmFzeW5jUGlwZS5uZ09uRGVzdHJveSgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0RXJyb3JDb250ZW50KG9yZGVyOiByZWFkb25seSBzdHJpbmdbXSk6IFBvbHltb3JwaGV1c0NvbnRlbnQge1xuICAgICAgICBjb25zdCBlcnJvciA9IHRoaXMuYXN5bmNQaXBlLnRyYW5zZm9ybSh0aGlzLmZpZWxkRXJyb3JQaXBlLnRyYW5zZm9ybShvcmRlcikpO1xuXG4gICAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBgYDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0eXBlb2YgZXJyb3IubWVzc2FnZSA9PT0gYGZ1bmN0aW9uYFxuICAgICAgICAgICAgPyBlcnJvci5tZXNzYWdlKGVycm9yLmNvbnRleHQpXG4gICAgICAgICAgICA6IGVycm9yLm1lc3NhZ2U7XG4gICAgfVxufVxuIl19