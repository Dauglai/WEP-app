(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@taiga-ui/kit/utils'), require('@taiga-ui/i18n'), require('@taiga-ui/cdk')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/tokens', ['exports', '@angular/core', '@angular/forms', '@taiga-ui/kit/utils', '@taiga-ui/i18n', '@taiga-ui/cdk'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].kit = global["taiga-ui"].kit || {}, global["taiga-ui"].kit.tokens = {}), global.ng.core, global.ng.forms, global["taiga-ui"].kit.utils, global.i18n, global.cdk));
})(this, (function (exports, core, forms, utils, i18n, cdk) { 'use strict';

    /**
     * Stream that emits calendar data change
     */
    var TUI_CALENDAR_DATE_STREAM = new core.InjectionToken("[TUI_CALENDAR_DATE_STREAM]");
    function tuiDateStreamWithTransformer(transformer) {
        return {
            provide: TUI_CALENDAR_DATE_STREAM,
            deps: [
                [new core.Optional(), new core.Self(), forms.NgControl],
                [new core.Optional(), transformer],
            ],
            useFactory: utils.tuiControlValueFactory,
        };
    }

    // TODO: Refactor to use `AbstractTuiValueTransformer` and add ability to provide it for all controls
    /**
     * Control value transformer of TuiDay to custom value format for InputDate* components
     */
    var TUI_DATE_VALUE_TRANSFORMER = new core.InjectionToken("[TUI_DATE_VALUE_TRANSFORMER]");
    /**
     * Control value transformer for InputDateRange component
     */
    var TUI_DATE_RANGE_VALUE_TRANSFORMER = new core.InjectionToken("[TUI_DATE_RANGE_VALUE_TRANSFORMER]");
    /**
     * Control value transformer for InputDateTime component
     */
    var TUI_DATE_TIME_VALUE_TRANSFORMER = new core.InjectionToken("[TUI_DATE_TIME_VALUE_TRANSFORMER]");

    var TUI_PROMPT_WORDS = new core.InjectionToken("[TUI_PROMPT_WORDS]", {
        factory: i18n.tuiExtractI18n("prompt"),
    });
    var TUI_CANCEL_WORD = new core.InjectionToken("[TUI_CANCEL_WORD]", {
        factory: i18n.tuiExtractI18n("cancel"),
    });
    var TUI_DONE_WORD = new core.InjectionToken("[TUI_DONE_WORD]", {
        factory: i18n.tuiExtractI18n("done"),
    });
    var TUI_MORE_WORD = new core.InjectionToken("[TUI_MORE_WORD]", {
        factory: i18n.tuiExtractI18n("more"),
    });
    var TUI_HIDE_TEXT = new core.InjectionToken("[TUI_HIDE_TEXT]", {
        factory: i18n.tuiExtractI18n("hide"),
    });
    var TUI_SHOW_ALL_TEXT = new core.InjectionToken("[TUI_SHOW_ALL_TEXT]", {
        factory: i18n.tuiExtractI18n("showAll"),
    });
    var TUI_OTHER_DATE_TEXT = new core.InjectionToken("[TUI_OTHER_DATE_TEXT]", {
        factory: i18n.tuiExtractI18n("otherDate"),
    });
    var TUI_CHOOSE_DAY_OR_RANGE_TEXTS = new core.InjectionToken("[TUI_CHOOSE_DAY_OR_RANGE_TEXTS]", {
        factory: i18n.tuiExtractI18n("mobileCalendarTexts"),
    });
    var TUI_FROM_TO_TEXTS = new core.InjectionToken("[TUI_FROM_TO_TEXTS]", {
        factory: i18n.tuiExtractI18n("range"),
    });
    var TUI_PLUS_MINUS_TEXTS = new core.InjectionToken("[TUI_PLUS_MINUS_TEXTS]", {
        factory: i18n.tuiExtractI18n("countTexts"),
    });
    var TUI_TIME_TEXTS = new core.InjectionToken("[TUI_TIME_TEXTS]", {
        factory: i18n.tuiExtractI18n("time"),
    });
    var TUI_DATE_TEXTS = new core.InjectionToken("[TUI_DATE_TEXTS]", {
        factory: i18n.tuiExtractI18n("dateTexts"),
    });
    var TUI_DIGITAL_INFORMATION_UNITS = new core.InjectionToken("[TUI_DIGITAL_INFORMATION_UNITS]", {
        factory: i18n.tuiExtractI18n("digitalInformationUnits"),
    });
    var TUI_COPY_TEXTS = new core.InjectionToken("[TUI_COPY_TEXTS]", {
        factory: i18n.tuiExtractI18n("copyTexts"),
    });
    var TUI_PASSWORD_TEXTS = new core.InjectionToken("[TUI_PASSWORD_TEXTS]", {
        factory: i18n.tuiExtractI18n("passwordTexts"),
    });
    var TUI_CALENDAR_MONTHS = new core.InjectionToken("[TUI_CALENDAR_MONTHS]", {
        factory: i18n.tuiExtractI18n("shortCalendarMonths"),
    });
    var TUI_FILE_TEXTS = new core.InjectionToken("[TUI_FILE_TEXTS]", {
        factory: i18n.tuiExtractI18n("fileTexts"),
    });
    var TUI_PAGINATION_TEXTS = new core.InjectionToken("[TUI_PAGINATION_TEXTS]", {
        factory: i18n.tuiExtractI18n("pagination"),
    });
    var TUI_INPUT_FILE_TEXTS = new core.InjectionToken("[TUI_INPUT_FILE_TEXTS]", {
        factory: i18n.tuiExtractI18n("inputFileTexts"),
    });
    var TUI_MULTI_SELECT_TEXTS = new core.InjectionToken("[TUI_MULTI_SELECT_TEXTS]", {
        factory: i18n.tuiExtractI18n("multiSelectTexts"),
    });
    var TUI_COUNTRIES = new core.InjectionToken("[TUI_COUNTRIES]", {
        factory: i18n.tuiExtractI18n("countries"),
    });

    var TUI_INPUT_DATE_DEFAULT_OPTIONS = {
        icon: function (_a) {
            var $implicit = _a.$implicit;
            return $implicit === "s" ? "tuiIconCalendar" : "tuiIconCalendarLarge";
        },
        min: cdk.TUI_FIRST_DAY,
        max: cdk.TUI_LAST_DAY,
        nativePicker: false,
    };
    /**
     * Default parameters for InputDate component
     */
    var TUI_INPUT_DATE_OPTIONS = new core.InjectionToken("[TUI_INPUT_DATE_OPTIONS]", {
        factory: function () { return TUI_INPUT_DATE_DEFAULT_OPTIONS; },
    });
    var tuiInputDateOptionsProvider = function (options) { return ({
        provide: TUI_INPUT_DATE_OPTIONS,
        useValue: Object.assign(Object.assign({}, TUI_INPUT_DATE_DEFAULT_OPTIONS), options),
    }); };

    var TUI_DEFAULT_ITEMS_HANDLERS = {
        stringify: cdk.TUI_DEFAULT_STRINGIFY,
        identityMatcher: cdk.TUI_DEFAULT_IDENTITY_MATCHER,
        disabledItemHandler: cdk.ALWAYS_FALSE_HANDLER,
    };
    /**
     * Default items handlers for components
     */
    var TUI_ITEMS_HANDLERS = new core.InjectionToken("[TUI_ITEMS_HANDLERS]", {
        factory: function () { return TUI_DEFAULT_ITEMS_HANDLERS; },
    });
    var tuiItemsHandlersProvider = function (options) { return ({
        provide: TUI_ITEMS_HANDLERS,
        useValue: Object.assign(Object.assign({}, TUI_DEFAULT_ITEMS_HANDLERS), options),
    }); };

    /**
     * A component for mobile data picker
     */
    var TUI_MOBILE_CALENDAR = new core.InjectionToken("[TUI_MOBILE_CALENDAR]");

    /**
     * A function to get localized formatted month
     */
    var TUI_MONTH_FORMATTER = new core.InjectionToken("[TUI_MONTH_FORMATTER]");

    /**
     * Margin between tabs
     */
    var TUI_TAB_MARGIN = new core.InjectionToken("[TUI_TAB_MARGIN]", {
        factory: function () { return 24; },
    });

    /**
     * Validation errors
     */
    var TUI_VALIDATION_ERRORS = new core.InjectionToken("[TUI_VALIDATION_ERRORS]", {
        factory: function () { return ({}); },
    });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_CALENDAR_DATE_STREAM = TUI_CALENDAR_DATE_STREAM;
    exports.TUI_CALENDAR_MONTHS = TUI_CALENDAR_MONTHS;
    exports.TUI_CANCEL_WORD = TUI_CANCEL_WORD;
    exports.TUI_CHOOSE_DAY_OR_RANGE_TEXTS = TUI_CHOOSE_DAY_OR_RANGE_TEXTS;
    exports.TUI_COPY_TEXTS = TUI_COPY_TEXTS;
    exports.TUI_COUNTRIES = TUI_COUNTRIES;
    exports.TUI_DATE_RANGE_VALUE_TRANSFORMER = TUI_DATE_RANGE_VALUE_TRANSFORMER;
    exports.TUI_DATE_TEXTS = TUI_DATE_TEXTS;
    exports.TUI_DATE_TIME_VALUE_TRANSFORMER = TUI_DATE_TIME_VALUE_TRANSFORMER;
    exports.TUI_DATE_VALUE_TRANSFORMER = TUI_DATE_VALUE_TRANSFORMER;
    exports.TUI_DEFAULT_ITEMS_HANDLERS = TUI_DEFAULT_ITEMS_HANDLERS;
    exports.TUI_DIGITAL_INFORMATION_UNITS = TUI_DIGITAL_INFORMATION_UNITS;
    exports.TUI_DONE_WORD = TUI_DONE_WORD;
    exports.TUI_FILE_TEXTS = TUI_FILE_TEXTS;
    exports.TUI_FROM_TO_TEXTS = TUI_FROM_TO_TEXTS;
    exports.TUI_HIDE_TEXT = TUI_HIDE_TEXT;
    exports.TUI_INPUT_DATE_DEFAULT_OPTIONS = TUI_INPUT_DATE_DEFAULT_OPTIONS;
    exports.TUI_INPUT_DATE_OPTIONS = TUI_INPUT_DATE_OPTIONS;
    exports.TUI_INPUT_FILE_TEXTS = TUI_INPUT_FILE_TEXTS;
    exports.TUI_ITEMS_HANDLERS = TUI_ITEMS_HANDLERS;
    exports.TUI_MOBILE_CALENDAR = TUI_MOBILE_CALENDAR;
    exports.TUI_MONTH_FORMATTER = TUI_MONTH_FORMATTER;
    exports.TUI_MORE_WORD = TUI_MORE_WORD;
    exports.TUI_MULTI_SELECT_TEXTS = TUI_MULTI_SELECT_TEXTS;
    exports.TUI_OTHER_DATE_TEXT = TUI_OTHER_DATE_TEXT;
    exports.TUI_PAGINATION_TEXTS = TUI_PAGINATION_TEXTS;
    exports.TUI_PASSWORD_TEXTS = TUI_PASSWORD_TEXTS;
    exports.TUI_PLUS_MINUS_TEXTS = TUI_PLUS_MINUS_TEXTS;
    exports.TUI_PROMPT_WORDS = TUI_PROMPT_WORDS;
    exports.TUI_SHOW_ALL_TEXT = TUI_SHOW_ALL_TEXT;
    exports.TUI_TAB_MARGIN = TUI_TAB_MARGIN;
    exports.TUI_TIME_TEXTS = TUI_TIME_TEXTS;
    exports.TUI_VALIDATION_ERRORS = TUI_VALIDATION_ERRORS;
    exports.tuiDateStreamWithTransformer = tuiDateStreamWithTransformer;
    exports.tuiInputDateOptionsProvider = tuiInputDateOptionsProvider;
    exports.tuiItemsHandlersProvider = tuiItemsHandlersProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-kit-tokens.umd.js.map
