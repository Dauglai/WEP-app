(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@taiga-ui/cdk'), require('@taiga-ui/core'), require('@taiga-ui/kit/providers'), require('rxjs/operators'), require('@taiga-ui/kit/directives'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/components/input-phone', ['exports', '@angular/core', '@angular/forms', '@taiga-ui/cdk', '@taiga-ui/core', '@taiga-ui/kit/providers', 'rxjs/operators', '@taiga-ui/kit/directives', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].kit = global["taiga-ui"].kit || {}, global["taiga-ui"].kit.components = global["taiga-ui"].kit.components || {}, global["taiga-ui"].kit.components["input-phone"] = {}), global.ng.core, global.ng.forms, global.i2, global.i1, global["taiga-ui"].kit.providers, global.rxjs.operators, global["taiga-ui"].kit.directives, global.rxjs));
})(this, (function (exports, i0, i4, i2, i1, providers, operators, i3, i5) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i4__namespace = /*#__PURE__*/_interopNamespace(i4);
    var i2__namespace = /*#__PURE__*/_interopNamespace(i2);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i3__namespace = /*#__PURE__*/_interopNamespace(i3);
    var i5__namespace = /*#__PURE__*/_interopNamespace(i5);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var TUI_INPUT_PHONE_DEFAULT_OPTIONS = {
        phoneMaskAfterCountryCode: "### ###-##-##",
        allowText: false,
        countryCode: "+7",
    };
    /**
     * Default parameters for input phone component
     */
    var TUI_INPUT_PHONE_OPTIONS = new i0.InjectionToken("[TUI_INPUT_PHONE_OPTIONS]", {
        factory: function () { return TUI_INPUT_PHONE_DEFAULT_OPTIONS; },
    });
    var tuiInputPhoneOptionsProvider = function (options) { return ({
        provide: TUI_INPUT_PHONE_OPTIONS,
        useValue: Object.assign(Object.assign({}, TUI_INPUT_PHONE_DEFAULT_OPTIONS), options),
    }); };

    var TuiInputPhoneComponent = /** @class */ (function (_super) {
        __extends(TuiInputPhoneComponent, _super);
        function TuiInputPhoneComponent(control, destroy$, cdr, selection$, textfieldCleaner, options) {
            var _this = _super.call(this, control, cdr) || this;
            _this.textfieldCleaner = textfieldCleaner;
            _this.options = options;
            _this.phoneMaskAfterCountryCode = _this.options.phoneMaskAfterCountryCode;
            _this.allowText = _this.options.allowText;
            _this.search = '';
            _this.searchChange = new i0.EventEmitter();
            _this.textMaskOptions = {
                mask: function (value) { return _this.allowText && !_this.value && isText(value) && value !== '+'
                    ? false
                    : __spreadArray(__spreadArray(__spreadArray([], __read(_this.countryCode.split(''))), [
                        ' '
                    ]), __read(_this.phoneMaskAfterCountryCode
                        .replace(/[^#\- ()]+/g, '')
                        .split('')
                        .map(function (item) { return (item === '#' ? /\d/ : item); }))); },
                pipe: function (value) {
                    if (_this.allowText) {
                        return value;
                    }
                    return value === '' && _this.focused && !_this.readOnly
                        ? _this.countryCode + " "
                        : value.replace(/-$/, '');
                },
                guide: false,
            };
            _this.countryCode = _this.options.countryCode;
            _this.open = false;
            selection$.pipe(operators.takeUntil(destroy$)).subscribe(function () {
                _this.setCaretPosition();
            });
            return _this;
        }
        Object.defineProperty(TuiInputPhoneComponent.prototype, "countryCodeSetter", {
            set: function (countryCode) {
                this.updateValueWithNewCountryCode(countryCode);
                this.countryCode = countryCode;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "nativeFocusableElement", {
            get: function () {
                return !this.textfield || this.computedDisabled
                    ? null
                    : this.textfield.nativeFocusableElement;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "focused", {
            get: function () {
                return (i2.tuiIsNativeFocused(this.nativeFocusableElement) ||
                    (!!this.dropdown && this.dropdown.focused));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "computedValue", {
            get: function () {
                return this.value
                    ? i1.tuiFormatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode)
                    : this.search || '';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "inputMode", {
            get: function () {
                return this.allowText ? 'text' : 'numeric';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "canOpen", {
            get: function () {
                return this.interactive && !!this.datalist;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "canClean", {
            get: function () {
                return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;
            },
            enumerable: false,
            configurable: true
        });
        TuiInputPhoneComponent.prototype.onDrop = function (event) {
            if (!event.dataTransfer) {
                return;
            }
            this.setValueWithoutPrefix(event.dataTransfer.getData('text'));
            event.preventDefault();
        };
        TuiInputPhoneComponent.prototype.onPaste = function (event) {
            this.setValueWithoutPrefix(i2.tuiGetClipboardDataText(event));
        };
        TuiInputPhoneComponent.prototype.onActiveZone = function (active) {
            this.updateFocused(active);
            if (active && !this.computedValue && !this.readOnly && !this.allowText) {
                this.updateSearch(this.countryCode);
                return;
            }
            if (this.computedValue === this.countryCode ||
                (this.search !== null &&
                    Number.isNaN(parseInt(this.search.replace(i1.TUI_MASK_SYMBOLS_REGEXP, ''), 10)))) {
                this.updateSearch('');
            }
        };
        TuiInputPhoneComponent.prototype.onBackspace = function (event) {
            var target = event.target;
            if ((target.selectionStart || 0) <= this.nonRemovableLength &&
                target.selectionStart === target.selectionEnd) {
                event.preventDefault();
            }
        };
        TuiInputPhoneComponent.prototype.onValueChange = function (value) {
            value = value === '' ? this.countryCode : value;
            var parsed = isText(value)
                ? value
                : value.replace(i1.TUI_MASK_SYMBOLS_REGEXP, '').slice(0, this.maxPhoneLength);
            this.updateSearch(parsed);
            this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;
            this.open = true;
        };
        TuiInputPhoneComponent.prototype.handleOption = function (item) {
            this.focusInput();
            this.value = item;
            this.updateSearch('');
            this.open = false;
        };
        TuiInputPhoneComponent.prototype.setDisabledState = function () {
            _super.prototype.setDisabledState.call(this);
            this.open = false;
        };
        TuiInputPhoneComponent.prototype.writeValue = function (value) {
            _super.prototype.writeValue.call(this, value);
            this.updateSearch('');
        };
        TuiInputPhoneComponent.prototype.getFallbackValue = function () {
            return '';
        };
        Object.defineProperty(TuiInputPhoneComponent.prototype, "caretIsInForbiddenArea", {
            get: function () {
                var nativeFocusableElement = this.nativeFocusableElement;
                if (!nativeFocusableElement) {
                    return false;
                }
                var selectionStart = nativeFocusableElement.selectionStart, selectionEnd = nativeFocusableElement.selectionEnd;
                return (i2.tuiIsNativeFocused(nativeFocusableElement) &&
                    selectionStart !== null &&
                    selectionStart < this.nonRemovableLength &&
                    selectionStart === selectionEnd);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "nonRemovableLength", {
            get: function () {
                return this.isTextValue ? 0 : this.countryCode.length + 1;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "maxPhoneLength", {
            get: function () {
                return (this.countryCode.length +
                    this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiInputPhoneComponent.prototype, "isTextValue", {
            get: function () {
                return !!this.search && isText(this.search);
            },
            enumerable: false,
            configurable: true
        });
        TuiInputPhoneComponent.prototype.setCaretPosition = function () {
            if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {
                this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);
            }
        };
        TuiInputPhoneComponent.prototype.setValueWithoutPrefix = function (value) {
            if (this.readOnly) {
                return;
            }
            this.open = true;
            this.value = this.cleanValue(value);
            this.updateSearch(this.allowText && isText(value)
                ? value
                : value.replace(i1.TUI_MASK_SYMBOLS_REGEXP, ''));
        };
        TuiInputPhoneComponent.prototype.cleanValue = function (value) {
            var reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.slice(1));
            var oldValueExist = this.value.length > this.countryCode.length &&
                this.value.length < this.maxPhoneLength;
            var newValueLength = value.replace(i1.TUI_MASK_SYMBOLS_REGEXP, '').length;
            var cleanNewValue = value.replace(/[^0-9]+/g, '');
            var selectionLength = String(getSelection()).length;
            if (oldValueExist && selectionLength === 0) {
                return ("" + this.value + cleanNewValue).slice(0, this.maxPhoneLength);
            }
            if (newValueLength < this.maxPhoneLength - 1) {
                return ("" + this.countryCode + cleanNewValue).slice(0, this.maxPhoneLength);
            }
            return ("" + this.countryCode + cleanNewValue.replace(reg, '')).slice(0, this.maxPhoneLength);
        };
        TuiInputPhoneComponent.prototype.focusInput = function () {
            if (this.nativeFocusableElement) {
                this.nativeFocusableElement.focus({ preventScroll: true });
            }
        };
        TuiInputPhoneComponent.prototype.updateSearch = function (search) {
            if (this.search === search) {
                return;
            }
            this.search = search;
            this.searchChange.emit(search);
        };
        TuiInputPhoneComponent.prototype.updateValueWithNewCountryCode = function (newCountryCode) {
            if (!this.isTextValue) {
                this.value = this.value.replace(this.countryCode, newCountryCode);
            }
        };
        return TuiInputPhoneComponent;
    }(i2.AbstractTuiControl));
    TuiInputPhoneComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneComponent, deps: [{ token: i4.NgControl, optional: true, self: true }, { token: i2.TuiDestroyService, self: true }, { token: i0.ChangeDetectorRef }, { token: i1.TUI_SELECTION_STREAM }, { token: i1.TUI_TEXTFIELD_CLEANER }, { token: TUI_INPUT_PHONE_OPTIONS }], target: i0__namespace.ɵɵFactoryTarget.Component });
    TuiInputPhoneComponent.ɵcmp = i0__namespace.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPhoneComponent, selector: "tui-input-phone", inputs: { countryCodeSetter: ["countryCode", "countryCodeSetter"], phoneMaskAfterCountryCode: "phoneMaskAfterCountryCode", allowText: "allowText", search: "search" }, outputs: { searchChange: "searchChange" }, providers: [
            i2.TuiDestroyService,
            i2.tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
            i2.tuiAsControl(TuiInputPhoneComponent),
            i1.tuiAsDataListHost(TuiInputPhoneComponent),
        ], queries: [{ propertyName: "datalist", first: true, predicate: i1.TuiDataListDirective, descendants: true, read: i0.TemplateRef }], viewQueries: [{ propertyName: "dropdown", first: true, predicate: i1.TuiHostedDropdownComponent, descendants: true }, { propertyName: "textfield", first: true, predicate: i1.TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0__namespace, template: "<tui-hosted-dropdown\n    class=\"t-hosted\"\n    [canOpen]=\"canOpen\"\n    [content]=\"datalist || ''\"\n    [(open)]=\"open\"\n    (tuiActiveZoneChange)=\"onActiveZone($event)\"\n>\n    <tui-primitive-textfield\n        tuiValueAccessor\n        class=\"t-textfield\"\n        [pseudoHover]=\"pseudoHover\"\n        [pseudoFocus]=\"computedFocused\"\n        [invalid]=\"computedInvalid\"\n        [nativeId]=\"nativeId\"\n        [readOnly]=\"readOnly\"\n        [disabled]=\"computedDisabled\"\n        [focusable]=\"focusable\"\n        [textMask]=\"textMaskOptions\"\n        [value]=\"computedValue\"\n        [tuiTextfieldCleaner]=\"canClean\"\n        (valueChange)=\"onValueChange($event)\"\n        (drop)=\"onDrop($event)\"\n        (keydown.backspace)=\"onBackspace($event)\"\n        (paste.prevent)=\"onPaste($event)\"\n    >\n        <ng-content></ng-content>\n        <ng-content\n            select=\"input\"\n            ngProjectAs=\"input\"\n        ></ng-content>\n    </tui-primitive-textfield>\n</tui-hosted-dropdown>\n", styles: [":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\n"], components: [{ type: i1__namespace.TuiHostedDropdownComponent, selector: "tui-hosted-dropdown", inputs: ["content", "sided", "canOpen", "open"], outputs: ["openChange", "focusedChange"] }, { type: i1__namespace.TuiPrimitiveTextfieldComponent, selector: "tui-primitive-textfield", inputs: ["editable", "filler", "iconCleaner", "readOnly", "invalid", "disabled", "prefix", "postfix", "value"], outputs: ["valueChange"] }], directives: [{ type: i2__namespace.TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: ["tuiActiveZoneParent"], outputs: ["tuiActiveZoneChange"], exportAs: ["tuiActiveZone"] }, { type: i1__namespace.TuiPrimitiveTextfieldDirective, selector: "tui-primitive-textfield" }, { type: i3__namespace.TuiValueAccessorDirective, selector: "[tuiValueAccessor]" }, { type: i3__namespace.MaskedInputDirective, selector: "[textMask]", inputs: ["textMask"], exportAs: ["textMask"] }, { type: i1__namespace.TuiTextfieldCleanerDirective, selector: "[tuiTextfieldCleaner]", inputs: ["tuiTextfieldCleaner"] }], viewProviders: [providers.FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0__namespace.ChangeDetectionStrategy.OnPush });
    __decorate([
        i2.tuiRequiredSetter()
    ], TuiInputPhoneComponent.prototype, "countryCodeSetter", null);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiInputPhoneComponent.prototype, "phoneMaskAfterCountryCode", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiInputPhoneComponent.prototype, "allowText", void 0);
    __decorate([
        i2.tuiDefaultProp()
    ], TuiInputPhoneComponent.prototype, "search", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneComponent, decorators: [{
                type: i0.Component,
                args: [{
                        selector: 'tui-input-phone',
                        templateUrl: './input-phone.template.html',
                        styleUrls: ['./input-phone.style.less'],
                        changeDetection: i0.ChangeDetectionStrategy.OnPush,
                        providers: [
                            i2.TuiDestroyService,
                            i2.tuiAsFocusableItemAccessor(TuiInputPhoneComponent),
                            i2.tuiAsControl(TuiInputPhoneComponent),
                            i1.tuiAsDataListHost(TuiInputPhoneComponent),
                        ],
                        viewProviders: [providers.FIXED_DROPDOWN_CONTROLLER_PROVIDER],
                    }]
            }], ctorParameters: function () {
            return [{ type: i4__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i4.NgControl]
                        }] }, { type: i5__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [i2.TuiDestroyService]
                        }] }, { type: i0__namespace.ChangeDetectorRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ChangeDetectorRef]
                        }] }, { type: i5__namespace.Observable, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_SELECTION_STREAM]
                        }] }, { type: i1__namespace.TuiTextfieldCleanerDirective, decorators: [{
                            type: i0.Inject,
                            args: [i1.TUI_TEXTFIELD_CLEANER]
                        }] }, { type: undefined, decorators: [{
                            type: i0.Inject,
                            args: [TUI_INPUT_PHONE_OPTIONS]
                        }] }];
        }, propDecorators: { dropdown: [{
                    type: i0.ViewChild,
                    args: [i1.TuiHostedDropdownComponent]
                }], textfield: [{
                    type: i0.ViewChild,
                    args: [i1.TuiPrimitiveTextfieldComponent]
                }], countryCodeSetter: [{
                    type: i0.Input,
                    args: ['countryCode']
                }], phoneMaskAfterCountryCode: [{
                    type: i0.Input
                }], allowText: [{
                    type: i0.Input
                }], search: [{
                    type: i0.Input
                }], searchChange: [{
                    type: i0.Output
                }], datalist: [{
                    type: i0.ContentChild,
                    args: [i1.TuiDataListDirective, { read: i0.TemplateRef }]
                }] } });
    function isText(value) {
        return Number.isNaN(parseInt(value.replace(i1.TUI_MASK_SYMBOLS_REGEXP, ''), 10));
    }

    var TuiInputPhoneDirective = /** @class */ (function (_super) {
        __extends(TuiInputPhoneDirective, _super);
        function TuiInputPhoneDirective() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        Object.defineProperty(TuiInputPhoneDirective.prototype, "value", {
            get: function () {
                return this.host.computedValue;
            },
            enumerable: false,
            configurable: true
        });
        TuiInputPhoneDirective.prototype.onValueChange = function (value) {
            this.host.onValueChange(value);
        };
        TuiInputPhoneDirective.prototype.process = function (input) {
            this.input = input;
        };
        TuiInputPhoneDirective.prototype.ngDoCheck = function () {
            if (!this.input) {
                return;
            }
            this.input.type = 'tel';
            this.input.inputMode = this.host.inputMode;
        };
        return TuiInputPhoneDirective;
    }(i1.AbstractTuiTextfieldHost));
    TuiInputPhoneDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneDirective, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiInputPhoneDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiInputPhoneDirective, selector: "tui-input-phone", providers: [i1.tuiAsTextfieldHost(TuiInputPhoneDirective)], usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'tui-input-phone',
                        providers: [i1.tuiAsTextfieldHost(TuiInputPhoneDirective)],
                    }]
            }] });

    var TuiInputPhoneModule = /** @class */ (function () {
        function TuiInputPhoneModule() {
        }
        return TuiInputPhoneModule;
    }());
    TuiInputPhoneModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiInputPhoneModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneModule, declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective], imports: [i3.TextMaskModule,
            i1.TuiPrimitiveTextfieldModule,
            i1.TuiHostedDropdownModule,
            i1.TuiTextfieldControllerModule,
            i2.TuiActiveZoneModule,
            i3.TuiValueAccessorModule], exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, i1.TuiTextfieldComponent] });
    TuiInputPhoneModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneModule, imports: [[
                i3.TextMaskModule,
                i1.TuiPrimitiveTextfieldModule,
                i1.TuiHostedDropdownModule,
                i1.TuiTextfieldControllerModule,
                i2.TuiActiveZoneModule,
                i3.TuiValueAccessorModule,
            ]] });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiInputPhoneModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        imports: [
                            i3.TextMaskModule,
                            i1.TuiPrimitiveTextfieldModule,
                            i1.TuiHostedDropdownModule,
                            i1.TuiTextfieldControllerModule,
                            i2.TuiActiveZoneModule,
                            i3.TuiValueAccessorModule,
                        ],
                        declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],
                        exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, i1.TuiTextfieldComponent],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TUI_INPUT_PHONE_DEFAULT_OPTIONS = TUI_INPUT_PHONE_DEFAULT_OPTIONS;
    exports.TUI_INPUT_PHONE_OPTIONS = TUI_INPUT_PHONE_OPTIONS;
    exports.TuiInputPhoneComponent = TuiInputPhoneComponent;
    exports.TuiInputPhoneDirective = TuiInputPhoneDirective;
    exports.TuiInputPhoneModule = TuiInputPhoneModule;
    exports.tuiInputPhoneOptionsProvider = tuiInputPhoneOptionsProvider;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-kit-components-input-phone.umd.js.map
