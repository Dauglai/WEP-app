{"version":3,"file":"taiga-ui-kit-tokens.umd.js","sources":["../../../projects/kit/tokens/calendar-date-stream.ts","../../../projects/kit/tokens/date-inputs-value-transformers.ts","../../../projects/kit/tokens/i18n.ts","../../../projects/kit/tokens/input-date-options.ts","../../../projects/kit/tokens/items-handlers.ts","../../../projects/kit/tokens/mobile-calendar.ts","../../../projects/kit/tokens/month-formatter.ts","../../../projects/kit/tokens/tab-margin.ts","../../../projects/kit/tokens/validation-errors.ts","../../../projects/kit/tokens/taiga-ui-kit-tokens.ts"],"sourcesContent":["import {InjectionToken, Optional, Provider, Self} from '@angular/core';\nimport {NgControl} from '@angular/forms';\nimport {TuiControlValueTransformer, TuiDay, TuiDayRange} from '@taiga-ui/cdk';\nimport {tuiControlValueFactory} from '@taiga-ui/kit/utils';\nimport {Observable} from 'rxjs';\n\n/**\n * Stream that emits calendar data change\n */\nexport const TUI_CALENDAR_DATE_STREAM = new InjectionToken<\n    Observable<TuiDay | TuiDayRange | null>\n>(`[TUI_CALENDAR_DATE_STREAM]`);\n\nexport function tuiDateStreamWithTransformer(\n    transformer: InjectionToken<TuiControlValueTransformer<any>>,\n): Provider {\n    return {\n        provide: TUI_CALENDAR_DATE_STREAM,\n        deps: [\n            [new Optional(), new Self(), NgControl],\n            [new Optional(), transformer],\n        ],\n        useFactory: tuiControlValueFactory,\n    };\n}\n","import {InjectionToken} from '@angular/core';\nimport {TuiControlValueTransformer, TuiDay, TuiDayRange, TuiTime} from '@taiga-ui/cdk';\n\n// TODO: Refactor to use `AbstractTuiValueTransformer` and add ability to provide it for all controls\n\n/**\n * Control value transformer of TuiDay to custom value format for InputDate* components\n */\nexport const TUI_DATE_VALUE_TRANSFORMER = new InjectionToken<\n    TuiControlValueTransformer<TuiDay | null>\n>(`[TUI_DATE_VALUE_TRANSFORMER]`);\n\n/**\n * Control value transformer for InputDateRange component\n */\nexport const TUI_DATE_RANGE_VALUE_TRANSFORMER = new InjectionToken<\n    TuiControlValueTransformer<TuiDayRange | null>\n>(`[TUI_DATE_RANGE_VALUE_TRANSFORMER]`);\n\n/**\n * Control value transformer for InputDateTime component\n */\nexport const TUI_DATE_TIME_VALUE_TRANSFORMER = new InjectionToken<\n    TuiControlValueTransformer<[TuiDay | null, TuiTime | null]>\n>(`[TUI_DATE_TIME_VALUE_TRANSFORMER]`);\n","import {InjectionToken} from '@angular/core';\nimport {TuiDateMode} from '@taiga-ui/cdk';\nimport {TuiCountryIsoCode, tuiExtractI18n} from '@taiga-ui/i18n';\nimport {Observable} from 'rxjs';\n\nexport const TUI_PROMPT_WORDS = new InjectionToken(`[TUI_PROMPT_WORDS]`, {\n    factory: tuiExtractI18n(`prompt`),\n});\n\nexport const TUI_CANCEL_WORD = new InjectionToken(`[TUI_CANCEL_WORD]`, {\n    factory: tuiExtractI18n(`cancel`),\n});\n\nexport const TUI_DONE_WORD = new InjectionToken(`[TUI_DONE_WORD]`, {\n    factory: tuiExtractI18n(`done`),\n});\n\nexport const TUI_MORE_WORD = new InjectionToken(`[TUI_MORE_WORD]`, {\n    factory: tuiExtractI18n(`more`),\n});\n\nexport const TUI_HIDE_TEXT = new InjectionToken(`[TUI_HIDE_TEXT]`, {\n    factory: tuiExtractI18n(`hide`),\n});\n\nexport const TUI_SHOW_ALL_TEXT = new InjectionToken(`[TUI_SHOW_ALL_TEXT]`, {\n    factory: tuiExtractI18n(`showAll`),\n});\n\nexport const TUI_OTHER_DATE_TEXT = new InjectionToken(`[TUI_OTHER_DATE_TEXT]`, {\n    factory: tuiExtractI18n(`otherDate`),\n});\n\nexport const TUI_CHOOSE_DAY_OR_RANGE_TEXTS = new InjectionToken(\n    `[TUI_CHOOSE_DAY_OR_RANGE_TEXTS]`,\n    {\n        factory: tuiExtractI18n(`mobileCalendarTexts`),\n    },\n);\n\nexport const TUI_FROM_TO_TEXTS = new InjectionToken(`[TUI_FROM_TO_TEXTS]`, {\n    factory: tuiExtractI18n(`range`),\n});\n\nexport const TUI_PLUS_MINUS_TEXTS = new InjectionToken(`[TUI_PLUS_MINUS_TEXTS]`, {\n    factory: tuiExtractI18n(`countTexts`),\n});\n\nexport const TUI_TIME_TEXTS = new InjectionToken(`[TUI_TIME_TEXTS]`, {\n    factory: tuiExtractI18n(`time`),\n});\n\nexport const TUI_DATE_TEXTS = new InjectionToken<Observable<Record<TuiDateMode, string>>>(\n    `[TUI_DATE_TEXTS]`,\n    {\n        factory: tuiExtractI18n(`dateTexts`),\n    },\n);\n\nexport const TUI_DIGITAL_INFORMATION_UNITS = new InjectionToken(\n    `[TUI_DIGITAL_INFORMATION_UNITS]`,\n    {\n        factory: tuiExtractI18n(`digitalInformationUnits`),\n    },\n);\n\nexport const TUI_COPY_TEXTS = new InjectionToken(`[TUI_COPY_TEXTS]`, {\n    factory: tuiExtractI18n(`copyTexts`),\n});\n\nexport const TUI_PASSWORD_TEXTS = new InjectionToken(`[TUI_PASSWORD_TEXTS]`, {\n    factory: tuiExtractI18n(`passwordTexts`),\n});\n\nexport const TUI_CALENDAR_MONTHS = new InjectionToken(`[TUI_CALENDAR_MONTHS]`, {\n    factory: tuiExtractI18n(`shortCalendarMonths`),\n});\n\nexport const TUI_FILE_TEXTS = new InjectionToken(`[TUI_FILE_TEXTS]`, {\n    factory: tuiExtractI18n(`fileTexts`),\n});\n\nexport const TUI_PAGINATION_TEXTS = new InjectionToken(`[TUI_PAGINATION_TEXTS]`, {\n    factory: tuiExtractI18n(`pagination`),\n});\n\nexport const TUI_INPUT_FILE_TEXTS = new InjectionToken(`[TUI_INPUT_FILE_TEXTS]`, {\n    factory: tuiExtractI18n(`inputFileTexts`),\n});\n\nexport const TUI_MULTI_SELECT_TEXTS = new InjectionToken(`[TUI_MULTI_SELECT_TEXTS]`, {\n    factory: tuiExtractI18n(`multiSelectTexts`),\n});\n\nexport const TUI_COUNTRIES = new InjectionToken<\n    Observable<Record<TuiCountryIsoCode, string>>\n>(`[TUI_COUNTRIES]`, {\n    factory: tuiExtractI18n(`countries`),\n});\n","import {InjectionToken, ValueProvider} from '@angular/core';\nimport {TUI_FIRST_DAY, TUI_LAST_DAY, TuiContextWithImplicit, TuiDay} from '@taiga-ui/cdk';\nimport {TuiSizeL, TuiSizeS} from '@taiga-ui/core';\nimport {PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\n\nexport interface TuiInputDateOptions {\n    readonly icon: PolymorpheusContent<TuiContextWithImplicit<TuiSizeL | TuiSizeS>>;\n    readonly min: TuiDay;\n    readonly max: TuiDay;\n    readonly nativePicker: boolean;\n}\n\nexport const TUI_INPUT_DATE_DEFAULT_OPTIONS: TuiInputDateOptions = {\n    icon: ({$implicit}) =>\n        $implicit === `s` ? `tuiIconCalendar` : `tuiIconCalendarLarge`,\n    min: TUI_FIRST_DAY,\n    max: TUI_LAST_DAY,\n    nativePicker: false,\n};\n\n/**\n * Default parameters for InputDate component\n */\nexport const TUI_INPUT_DATE_OPTIONS = new InjectionToken<TuiInputDateOptions>(\n    `[TUI_INPUT_DATE_OPTIONS]`,\n    {\n        factory: () => TUI_INPUT_DATE_DEFAULT_OPTIONS,\n    },\n);\n\nexport const tuiInputDateOptionsProvider: (\n    options: Partial<TuiInputDateOptions>,\n) => ValueProvider = (options: Partial<TuiInputDateOptions>) => ({\n    provide: TUI_INPUT_DATE_OPTIONS,\n    useValue: {...TUI_INPUT_DATE_DEFAULT_OPTIONS, ...options},\n});\n","import {InjectionToken, ValueProvider} from '@angular/core';\nimport {\n    ALWAYS_FALSE_HANDLER,\n    TUI_DEFAULT_IDENTITY_MATCHER,\n    TUI_DEFAULT_STRINGIFY,\n    TuiBooleanHandler,\n    TuiIdentityMatcher,\n    TuiStringHandler,\n} from '@taiga-ui/cdk';\n\nexport interface TuiItemsHandlers<T> {\n    readonly stringify: TuiStringHandler<T>;\n    readonly identityMatcher: TuiIdentityMatcher<T>;\n    readonly disabledItemHandler: TuiBooleanHandler<T>;\n}\n\nexport const TUI_DEFAULT_ITEMS_HANDLERS: TuiItemsHandlers<unknown> = {\n    stringify: TUI_DEFAULT_STRINGIFY,\n    identityMatcher: TUI_DEFAULT_IDENTITY_MATCHER,\n    disabledItemHandler: ALWAYS_FALSE_HANDLER,\n};\n\n/**\n * Default items handlers for components\n */\nexport const TUI_ITEMS_HANDLERS = new InjectionToken<TuiItemsHandlers<unknown>>(\n    `[TUI_ITEMS_HANDLERS]`,\n    {\n        factory: () => TUI_DEFAULT_ITEMS_HANDLERS,\n    },\n);\n\nexport const tuiItemsHandlersProvider: <T>(\n    options: Partial<TuiItemsHandlers<T>>,\n) => ValueProvider = <T>(options: Partial<TuiItemsHandlers<T>>) => ({\n    provide: TUI_ITEMS_HANDLERS,\n    useValue: {...TUI_DEFAULT_ITEMS_HANDLERS, ...options},\n});\n","import {InjectionToken, Type} from '@angular/core';\n\n/**\n * A component for mobile data picker\n */\nexport const TUI_MOBILE_CALENDAR = new InjectionToken<Type<unknown>>(\n    `[TUI_MOBILE_CALENDAR]`,\n);\n","import {InjectionToken} from '@angular/core';\nimport {TuiHandler, TuiMonth} from '@taiga-ui/cdk';\nimport {Observable} from 'rxjs';\n\n/**\n * A function to get localized formatted month\n */\nexport const TUI_MONTH_FORMATTER = new InjectionToken<\n    TuiHandler<TuiMonth | null, Observable<string>>\n>(`[TUI_MONTH_FORMATTER]`);\n","import {InjectionToken} from '@angular/core';\n\n/**\n * Margin between tabs\n */\nexport const TUI_TAB_MARGIN = new InjectionToken<number>(`[TUI_TAB_MARGIN]`, {\n    factory: () => 24,\n});\n","import {InjectionToken} from '@angular/core';\nimport {PolymorpheusContent} from '@tinkoff/ng-polymorpheus';\nimport {Observable} from 'rxjs';\n\n/**\n * Validation errors\n */\nexport const TUI_VALIDATION_ERRORS = new InjectionToken<\n    Record<string, Observable<PolymorpheusContent> | PolymorpheusContent>\n>(`[TUI_VALIDATION_ERRORS]`, {\n    factory: () => ({}),\n});\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["InjectionToken","Optional","Self","NgControl","tuiControlValueFactory","tuiExtractI18n","TUI_FIRST_DAY","TUI_LAST_DAY","TUI_DEFAULT_STRINGIFY","TUI_DEFAULT_IDENTITY_MATCHER","ALWAYS_FALSE_HANDLER"],"mappings":"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"}