(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/platform-browser'), require('@taiga-ui/core'), require('text-mask-core')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/kit/directives/mask', ['exports', '@angular/core', '@angular/forms', '@angular/platform-browser', '@taiga-ui/core', 'text-mask-core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].kit = global["taiga-ui"].kit || {}, global["taiga-ui"].kit.directives = global["taiga-ui"].kit.directives || {}, global["taiga-ui"].kit.directives.mask = {}), global.ng.core, global.ng.forms, global.ng.platformBrowser, global.core, global.textMaskCore));
})(this, (function (exports, i0, forms, platformBrowser, core, textMaskCore) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /* eslint-disable */
    /**
     * We must check whether the agent is Android because composition events
     * behave differently between iOS and Android.
     */
    function _isAndroid() {
        var userAgent = platformBrowser["ɵgetDOM"]() ? platformBrowser["ɵgetDOM"]().getUserAgent() : '';
        return /android (\d+)/.test(userAgent.toLowerCase());
    }
    /**
     * @internal
     * @deprecated
     * Don't use it! It can be deleted at any time (even in minor releases).
     * Use {@link https://github.com/text-mask/text-mask/tree/master/angular2 angular2-text-mask} instead.
     */
    var MaskedInputDirective = /** @class */ (function () {
        function MaskedInputDirective(_renderer, _elementRef, _compositionMode) {
            this._renderer = _renderer;
            this._elementRef = _elementRef;
            this._compositionMode = _compositionMode;
            this.textMaskConfig = {
                mask: [],
                guide: true,
                placeholderChar: '_',
                pipe: undefined,
                keepCharPositions: false,
            };
            this.onChange = function (_) { };
            this.onTouched = function () { };
            /** Whether the user is creating a composition string (IME events). */
            this._composing = false;
            if (this._compositionMode == null) {
                this._compositionMode = !_isAndroid();
            }
        }
        MaskedInputDirective.prototype.ngOnChanges = function () {
            this._setupMask(true);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(this.inputElement.value);
            }
        };
        MaskedInputDirective.prototype.writeValue = function (value) {
            this._setupMask();
            // set the initial value for cases where the mask is disabled
            var normalizedValue = value == null ? '' : value;
            this._renderer.setProperty(this.inputElement, 'value', normalizedValue);
            if (this.textMaskInputElement !== undefined) {
                this.textMaskInputElement.update(value);
            }
        };
        MaskedInputDirective.prototype.registerOnChange = function (fn) {
            this.onChange = fn;
        };
        MaskedInputDirective.prototype.registerOnTouched = function (fn) {
            this.onTouched = fn;
        };
        MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {
            this._renderer.setProperty(this._elementRef.nativeElement, 'disabled', isDisabled);
        };
        MaskedInputDirective.prototype._handleInput = function (value) {
            if (!this._compositionMode || (this._compositionMode && !this._composing)) {
                this._setupMask();
                if (this.textMaskInputElement !== undefined) {
                    this.textMaskInputElement.update(value);
                    // get the updated value
                    value = this.inputElement.value;
                    this.onChange(value);
                }
            }
        };
        MaskedInputDirective.prototype._setupMask = function (create) {
            if (create === void 0) { create = false; }
            if (!this.inputElement) {
                if (this._elementRef.nativeElement.tagName.toUpperCase() === 'INPUT') {
                    // `textMask` directive is used directly on an input element
                    this.inputElement = this._elementRef.nativeElement;
                }
                else {
                    // `textMask` directive is used on an abstracted input element, `md-input-container`, etc
                    this.inputElement =
                        this._elementRef.nativeElement.getElementsByTagName('INPUT')[0];
                }
            }
            if (this.inputElement && create) {
                this.textMaskInputElement = textMaskCore.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));
            }
        };
        MaskedInputDirective.prototype._compositionStart = function () {
            this._composing = true;
        };
        MaskedInputDirective.prototype._compositionEnd = function (value) {
            this._composing = false;
            this._compositionMode && this._handleInput(value);
        };
        return MaskedInputDirective;
    }());
    MaskedInputDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MaskedInputDirective, deps: [{ token: i0__namespace.Renderer2 }, { token: i0__namespace.ElementRef }, { token: forms.COMPOSITION_BUFFER_MODE, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    MaskedInputDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: MaskedInputDirective, selector: "[textMask]", inputs: { textMaskConfig: ["textMask", "textMaskConfig"] }, host: { listeners: { "input": "_handleInput($event.target.value)", "blur": "onTouched()", "compositionstart": "_compositionStart()", "compositionend": "_compositionEnd($event.target.value)" } }, providers: [
            {
                provide: forms.NG_VALUE_ACCESSOR,
                useExisting: i0.forwardRef(function () { return MaskedInputDirective; }),
                multi: true,
            },
            {
                provide: core.TUI_LEGACY_MASK,
                useExisting: i0.forwardRef(function () { return MaskedInputDirective; }),
            },
        ], exportAs: ["textMask"], usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: MaskedInputDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        host: {
                            '(input)': '_handleInput($event.target.value)',
                            '(blur)': 'onTouched()',
                            '(compositionstart)': '_compositionStart()',
                            '(compositionend)': '_compositionEnd($event.target.value)',
                        },
                        selector: '[textMask]',
                        exportAs: 'textMask',
                        providers: [
                            {
                                provide: forms.NG_VALUE_ACCESSOR,
                                useExisting: i0.forwardRef(function () { return MaskedInputDirective; }),
                                multi: true,
                            },
                            {
                                provide: core.TUI_LEGACY_MASK,
                                useExisting: i0.forwardRef(function () { return MaskedInputDirective; }),
                            },
                        ],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.Renderer2 }, { type: i0__namespace.ElementRef }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [forms.COMPOSITION_BUFFER_MODE]
                        }] }];
        }, propDecorators: { textMaskConfig: [{
                    type: i0.Input,
                    args: ['textMask']
                }] } });
    /**
     * @internal
     * @deprecated
     * Don't use it! It can be deleted at any time (even in minor releases).
     * Use {@link https://github.com/text-mask/text-mask/tree/master/angular2 angular2-text-mask} instead.
     */
    var TextMaskModule = /** @class */ (function () {
        function TextMaskModule() {
        }
        return TextMaskModule;
    }());
    TextMaskModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TextMaskModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TextMaskModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TextMaskModule, declarations: [MaskedInputDirective], exports: [MaskedInputDirective] });
    TextMaskModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TextMaskModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TextMaskModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [MaskedInputDirective],
                        exports: [MaskedInputDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.MaskedInputDirective = MaskedInputDirective;
    exports.TextMaskModule = TextMaskModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-kit-directives-mask.umd.js.map
