import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { EventEmitter, ElementRef, Directive, Inject, Input, HostBinding, Output, HostListener, NgModule } from '@angular/core';
import { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';

class TuiMediaDirective {
    constructor(el) {
        this.el = el;
        this.playbackRate = 1;
        this.volume = 1;
        this.currentTimeChange = new EventEmitter();
        this.pausedChange = new EventEmitter();
        this.volumeChange = new EventEmitter();
    }
    set playbackRateSetter(playbackRate) {
        this.updatePlaybackRate(playbackRate);
    }
    set currentTime(currentTime) {
        if (Math.abs(currentTime - this.currentTime) > 0.05) {
            this.el.nativeElement.currentTime = currentTime;
        }
    }
    get currentTime() {
        return this.el.nativeElement.currentTime;
    }
    set paused(paused) {
        if (paused) {
            this.el.nativeElement.pause();
        }
        else {
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            this.el.nativeElement.play();
            this.updatePlaybackRate(this.playbackRate);
        }
    }
    get paused() {
        return this.el.nativeElement.paused;
    }
    // @bad TODO: Make sure no other events can affect this like network issues etc.
    onPausedChange(paused) {
        this.pausedChange.emit(paused);
        this.updatePlaybackRate(this.playbackRate);
    }
    onVolumeChange() {
        this.volume = this.el.nativeElement.volume;
        this.volumeChange.emit(this.volume);
    }
    onCurrentTimeChange() {
        this.currentTimeChange.emit(this.currentTime);
    }
    changeDetectionTrigger() {
        // @bad TODO: consider if other events need to trigger CD
    }
    updatePlaybackRate(playbackRate) {
        this.playbackRate = playbackRate;
        this.el.nativeElement.playbackRate = this.playbackRate;
    }
}
TuiMediaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiMediaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiMediaDirective, selector: "video[tuiMedia], audio[tuiMedia]", inputs: { volume: "volume", playbackRateSetter: ["playbackRate", "playbackRateSetter"], currentTime: "currentTime", paused: "paused" }, outputs: { currentTimeChange: "currentTimeChange", pausedChange: "pausedChange", volumeChange: "volumeChange" }, host: { listeners: { "ended": "onPausedChange(true)", "pause": "onPausedChange(true)", "play": "onPausedChange(false)", "volumechange": "onVolumeChange()", "timeupdate": "onCurrentTimeChange()", "seeking": "onCurrentTimeChange()", "seeked": "onCurrentTimeChange()", "durationchange": "changeDetectionTrigger()" }, properties: { "volume": "this.volume" } }, exportAs: ["tuiMedia"], ngImport: i0 });
__decorate([
    tuiDefaultProp((volume) => Number.isFinite(volume) && volume >= 0 && volume <= 1)
], TuiMediaDirective.prototype, "volume", void 0);
__decorate([
    tuiRequiredSetter(nonNegativeFiniteAssertion)
], TuiMediaDirective.prototype, "playbackRateSetter", null);
__decorate([
    tuiRequiredSetter(nonNegativeFiniteAssertion)
], TuiMediaDirective.prototype, "currentTime", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'video[tuiMedia], audio[tuiMedia]',
                    exportAs: 'tuiMedia',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { volume: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['volume']
            }], playbackRateSetter: [{
                type: Input,
                args: ['playbackRate']
            }], currentTimeChange: [{
                type: Output
            }], pausedChange: [{
                type: Output
            }], volumeChange: [{
                type: Output
            }], currentTime: [{
                type: Input
            }], paused: [{
                type: Input
            }], onPausedChange: [{
                type: HostListener,
                args: ['ended', ['true']]
            }, {
                type: HostListener,
                args: ['pause', ['true']]
            }, {
                type: HostListener,
                args: ['play', ['false']]
            }], onVolumeChange: [{
                type: HostListener,
                args: ['volumechange']
            }], onCurrentTimeChange: [{
                type: HostListener,
                args: ['timeupdate']
            }, {
                type: HostListener,
                args: ['seeking']
            }, {
                type: HostListener,
                args: ['seeked']
            }], changeDetectionTrigger: [{
                type: HostListener,
                args: ['durationchange']
            }] } });
function nonNegativeFiniteAssertion(value) {
    return Number.isFinite(value) && value >= 0;
}

class TuiMediaModule {
}
TuiMediaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiMediaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaModule, declarations: [TuiMediaDirective], exports: [TuiMediaDirective] });
TuiMediaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiMediaModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiMediaDirective],
                    exports: [TuiMediaDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiMediaDirective, TuiMediaModule };
//# sourceMappingURL=taiga-ui-cdk-directives-media.js.map
