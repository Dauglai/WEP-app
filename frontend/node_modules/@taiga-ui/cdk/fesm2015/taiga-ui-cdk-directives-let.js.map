{"version":3,"file":"taiga-ui-cdk-directives-let.js","sources":["../../../projects/cdk/directives/let/let-context.ts","../../../projects/cdk/directives/let/let.directive.ts","../../../projects/cdk/directives/let/let.module.ts","../../../projects/cdk/directives/let/taiga-ui-cdk-directives-let.ts"],"sourcesContent":["import {TuiContextWithImplicit} from '@taiga-ui/cdk/interfaces';\n\nimport type {TuiLetDirective} from './let.directive';\n\n/**\n * @internal\n */\nexport class TuiLetContext<T> implements TuiContextWithImplicit<T> {\n    constructor(private readonly internalDirectiveInstance: TuiLetDirective<T>) {}\n\n    get $implicit(): T {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n\n    get tuiLet(): T {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n}\n","import {Directive, Inject, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {TuiLetContext} from './let-context';\n\n/**\n * Works like *ngIf but does not have a condition â€” use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\n@Directive({\n    selector: '[tuiLet]',\n})\nexport class TuiLetDirective<T> {\n    @Input()\n    tuiLet!: T;\n\n    constructor(\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\n        @Inject(TemplateRef) templateRef: TemplateRef<TuiLetContext<T>>,\n    ) {\n        viewContainer.createEmbeddedView(templateRef, new TuiLetContext<T>(this));\n    }\n\n    /**\n     * Asserts the correct type of the context for the template that `TuiLet` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `TuiLet` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard<T>(\n        _dir: TuiLetDirective<T>,\n        _ctx: unknown,\n    ): _ctx is TuiLetContext<T> {\n        return true;\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiLetDirective} from './let.directive';\n\n@NgModule({\n    declarations: [TuiLetDirective],\n    exports: [TuiLetDirective],\n})\nexport class TuiLetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":[],"mappings":";;;AAIA;;AAEG;MACU,aAAa,CAAA;AACtB,IAAA,WAAA,CAA6B,yBAA6C,EAAA;QAA7C,IAAyB,CAAA,yBAAA,GAAzB,yBAAyB,CAAoB;KAAI;AAE9E,IAAA,IAAI,SAAS,GAAA;AACT,QAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;KAChD;AAED,IAAA,IAAI,MAAM,GAAA;AACN,QAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;KAChD;AACJ;;ACbD;;;AAGG;MAIU,eAAe,CAAA;IAIxB,WAC8B,CAAA,aAA+B,EACpC,WAA0C,EAAA;QAE/D,aAAa,CAAC,kBAAkB,CAAC,WAAW,EAAE,IAAI,aAAa,CAAI,IAAI,CAAC,CAAC,CAAC;KAC7E;AAED;;;;;AAKG;AACH,IAAA,OAAO,sBAAsB,CACzB,IAAwB,EACxB,IAAa,EAAA;AAEb,QAAA,OAAO,IAAI,CAAC;KACf;;6GAtBQ,eAAe,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAKZ,gBAAgB,EAAA,EAAA,EAAA,KAAA,EAChB,WAAW,EAAA,CAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;iGANd,eAAe,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,EAAA,QAAA,EAAA,EAAA,EAAA,CAAA,CAAA;4FAAf,eAAe,EAAA,UAAA,EAAA,CAAA;kBAH3B,SAAS;AAAC,YAAA,IAAA,EAAA,CAAA;AACP,oBAAA,QAAQ,EAAE,UAAU;AACvB,iBAAA,CAAA;;0BAMQ,MAAM;2BAAC,gBAAgB,CAAA;;0BACvB,MAAM;2BAAC,WAAW,CAAA;4CAJvB,MAAM,EAAA,CAAA;sBADL,KAAK;;;MCJG,YAAY,CAAA;;0GAAZ,YAAY,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAA,EAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;2GAAZ,YAAY,EAAA,YAAA,EAAA,CAHN,eAAe,CAAA,EAAA,OAAA,EAAA,CACpB,eAAe,CAAA,EAAA,CAAA,CAAA;2GAEhB,YAAY,EAAA,CAAA,CAAA;4FAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;kBAJxB,QAAQ;AAAC,YAAA,IAAA,EAAA,CAAA;oBACN,YAAY,EAAE,CAAC,eAAe,CAAC;oBAC/B,OAAO,EAAE,CAAC,eAAe,CAAC;AAC7B,iBAAA,CAAA;;;ACPD;;AAEG;;;;"}