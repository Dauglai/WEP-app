import * as i0 from '@angular/core';
import { ElementRef, Directive, Inject, Self, Output, NgModule } from '@angular/core';
import { tuiTypedFromEvent, tuiPreventDefault } from '@taiga-ui/cdk/observables';
import { TuiDestroyService } from '@taiga-ui/cdk/services';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import * as i1 from 'rxjs';
import { merge } from 'rxjs';
import { map, filter, switchMap, startWith, distinctUntilChanged, takeUntil } from 'rxjs/operators';

class TuiDroppableDirective {
    constructor({ nativeElement }, destroy$) {
        this.tuiDroppableDropped = tuiTypedFromEvent(nativeElement, 'drop').pipe(tuiPreventDefault(), map(event => event.dataTransfer), filter(tuiIsPresent));
        this.tuiDroppableDragOverChange = tuiTypedFromEvent(nativeElement, 'dragenter').pipe(switchMap(({ target, dataTransfer }) => merge(tuiTypedFromEvent(nativeElement, 'dragleave').pipe(filter(event => event.target === target)), tuiTypedFromEvent(nativeElement, 'drop')).pipe(map(() => null), startWith(dataTransfer))), distinctUntilChanged((a, b) => (!!a && !!b) || (!a && !b)));
        // Required by Drag and Drop API to stop redirecting
        tuiTypedFromEvent(nativeElement, 'dragover')
            .pipe(tuiPreventDefault(), takeUntil(destroy$))
            .subscribe();
    }
}
TuiDroppableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDroppableDirective, deps: [{ token: ElementRef }, { token: TuiDestroyService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiDroppableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDroppableDirective, selector: "[tuiDroppableDropped], [tuiDroppableDragOverChange]", outputs: { tuiDroppableDropped: "tuiDroppableDropped", tuiDroppableDragOverChange: "tuiDroppableDragOverChange" }, providers: [TuiDestroyService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDroppableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDroppableDropped], [tuiDroppableDragOverChange]',
                    providers: [TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i1.Observable, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiDestroyService]
                }] }]; }, propDecorators: { tuiDroppableDropped: [{
                type: Output
            }], tuiDroppableDragOverChange: [{
                type: Output
            }] } });

class TuiDroppableModule {
}
TuiDroppableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDroppableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiDroppableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDroppableModule, declarations: [TuiDroppableDirective], exports: [TuiDroppableDirective] });
TuiDroppableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDroppableModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDroppableModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiDroppableDirective],
                    exports: [TuiDroppableDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiDroppableDirective, TuiDroppableModule };
//# sourceMappingURL=taiga-ui-cdk-directives-droppable.js.map
