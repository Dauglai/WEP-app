import * as i0 from '@angular/core';
import { ViewContainerRef, TemplateRef, Directive, Inject, Input, NgModule } from '@angular/core';
import { Subject, from, of } from 'rxjs';
import { concatMap, delay, takeUntil } from 'rxjs/operators';

class TuiForAsyncDirective {
    constructor(view, template) {
        this.view = view;
        this.template = template;
        this.destroy$ = new Subject();
        this.tuiForAsyncTimeout = 10;
    }
    ngOnChanges() {
        this.clearViewForOldNodes();
        this.createAsyncViewForNewNodes();
    }
    ngOnDestroy() {
        this.clearViewForOldNodes();
        this.destroy$.complete();
    }
    createAsyncViewForNewNodes() {
        from(this.iterableValues)
            .pipe(concatMap(entry => this.tuiForAsyncTimeout > 0
            ? of(entry).pipe(delay(this.tuiForAsyncTimeout))
            : of(entry)), takeUntil(this.destroy$))
            .subscribe(([index, item]) => this.createEmbeddedView(item, index));
    }
    get iterableValues() {
        var _a;
        return ((_a = this.tuiForAsyncOf) !== null && _a !== void 0 ? _a : []).entries();
    }
    createEmbeddedView(item, index) {
        this.view
            .createEmbeddedView(this.template, { $implicit: item, index }, index)
            .detectChanges();
    }
    clearViewForOldNodes() {
        this.destroy$.next();
        this.view.clear();
    }
}
TuiForAsyncDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiForAsyncDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiForAsyncDirective, selector: "[tuiForAsync][tuiForAsyncOf]", inputs: { tuiForAsyncOf: "tuiForAsyncOf", tuiForAsyncTimeout: "tuiForAsyncTimeout" }, usesOnChanges: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[tuiForAsync][tuiForAsyncOf]' }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { tuiForAsyncOf: [{
                type: Input
            }], tuiForAsyncTimeout: [{
                type: Input
            }] } });

/**
 * @experimental
 */
class TuiForAsyncModule {
}
TuiForAsyncModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiForAsyncModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncModule, declarations: [TuiForAsyncDirective], exports: [TuiForAsyncDirective] });
TuiForAsyncModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiForAsyncModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiForAsyncDirective],
                    exports: [TuiForAsyncDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiForAsyncDirective, TuiForAsyncModule };
//# sourceMappingURL=taiga-ui-cdk-directives-for-async.js.map
