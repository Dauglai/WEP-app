import * as i0 from '@angular/core';
import { Directive, EventEmitter, Inject, Input, Output, HostBinding, HostListener, NgModule } from '@angular/core';
import { TuiElementDirective } from '@taiga-ui/cdk/directives/element';
import { __decorate } from 'tslib';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiPx } from '@taiga-ui/cdk/utils/format';

class TuiResizeableDirective extends TuiElementDirective {
}
TuiResizeableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizeableDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });
TuiResizeableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiResizeableDirective, selector: "[tuiResizeable]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizeableDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiResizeable]',
                }]
        }] });

// TODO: Migrate to PointerEvent in 4.0
class TuiResizerDirective {
    constructor(resizeable) {
        this.resizeable = resizeable;
        this.tuiResizer = [0, 0];
        this.tuiSizeChange = new EventEmitter();
        this.x = NaN;
        this.y = NaN;
        this.width = 0;
        this.height = 0;
    }
    get cursor() {
        if (!this.tuiResizer[0]) {
            return 'ns-resize';
        }
        if (!this.tuiResizer[1]) {
            return 'ew-resize';
        }
        if (this.tuiResizer[0] * this.tuiResizer[1] > 0) {
            return 'nwse-resize';
        }
        return 'nesw-resize';
    }
    onTouchStart({ touches }) {
        this.onMouseDown(touches[0].clientX, touches[0].clientY);
    }
    onMouseDown(x, y) {
        this.x = x;
        this.y = y;
        this.width = this.resizeable.nativeElement.clientWidth;
        this.height = this.resizeable.nativeElement.clientHeight;
    }
    onMouseMove({ x, y, buttons }) {
        if (!buttons) {
            this.onMouseUp();
        }
        else {
            this.onMove(x, y);
        }
    }
    onTouchMove({ touches }) {
        this.onMove(touches[0].clientX, touches[0].clientY);
    }
    onMouseUp() {
        this.x = NaN;
    }
    onMove(x, y) {
        if (Number.isNaN(this.x)) {
            return;
        }
        const { style } = this.resizeable.nativeElement;
        const size = [
            this.width + this.tuiResizer[0] * (x - this.x),
            this.height + this.tuiResizer[1] * (y - this.y),
        ];
        if (this.tuiResizer[0]) {
            style.width = tuiPx(size[0]);
        }
        if (this.tuiResizer[1]) {
            style.height = tuiPx(size[1]);
        }
        this.tuiSizeChange.emit(size);
    }
}
TuiResizerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerDirective, deps: [{ token: TuiResizeableDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiResizerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiResizerDirective, selector: "[tuiResizer]", inputs: { tuiResizer: "tuiResizer" }, outputs: { tuiSizeChange: "tuiSizeChange" }, host: { listeners: { "touchstart.silent.passive": "onTouchStart($event)", "mousedown.silent.prevent": "onMouseDown($event.x,$event.y)", "document:mousemove.silent": "onMouseMove($event)", "document:touchmove.silent": "onTouchMove($event)", "document:mouseup.silent": "onMouseUp()", "document:touchend.silent": "onMouseUp()" }, properties: { "style.touchAction": "\"none\"", "style.cursor": "this.cursor" } }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiResizerDirective.prototype, "tuiResizer", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiResizer]',
                    host: { '[style.touchAction]': '"none"' },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TuiResizeableDirective]
                }] }]; }, propDecorators: { tuiResizer: [{
                type: Input
            }], tuiSizeChange: [{
                type: Output
            }], cursor: [{
                type: HostBinding,
                args: ['style.cursor']
            }], onTouchStart: [{
                type: HostListener,
                args: ['touchstart.silent.passive', ['$event']]
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown.silent.prevent', ['$event.x', '$event.y']]
            }], onMouseMove: [{
                type: HostListener,
                args: ['document:mousemove.silent', ['$event']]
            }], onTouchMove: [{
                type: HostListener,
                args: ['document:touchmove.silent', ['$event']]
            }], onMouseUp: [{
                type: HostListener,
                args: ['document:mouseup.silent']
            }, {
                type: HostListener,
                args: ['document:touchend.silent']
            }] } });

class TuiResizerModule {
}
TuiResizerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiResizerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerModule, declarations: [TuiResizeableDirective, TuiResizerDirective], exports: [TuiResizeableDirective, TuiResizerDirective] });
TuiResizerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiResizeableDirective, TuiResizerDirective],
                    exports: [TuiResizeableDirective, TuiResizerDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiResizeableDirective, TuiResizerDirective, TuiResizerModule };
//# sourceMappingURL=taiga-ui-cdk-directives-resizer.js.map
