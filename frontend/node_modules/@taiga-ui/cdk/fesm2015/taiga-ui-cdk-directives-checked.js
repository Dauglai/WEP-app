import * as i0 from '@angular/core';
import { EventEmitter, ElementRef, Renderer2, Directive, Inject, Input, Output, HostListener, NgModule } from '@angular/core';

class TuiCheckedDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tuiCheckedChange = new EventEmitter();
        this.updateProperty('checked', false);
    }
    set tuiChecked(checked) {
        this.updateProperty('checked', checked || false);
        this.updateProperty('indeterminate', checked === null);
    }
    onChange({ checked }) {
        this.updateProperty('indeterminate', false);
        this.tuiCheckedChange.emit(checked);
    }
    updateProperty(property, value) {
        this.renderer.setProperty(this.el.nativeElement, property, value);
    }
}
TuiCheckedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedDirective, deps: [{ token: ElementRef }, { token: Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
TuiCheckedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiCheckedDirective, selector: "input[tuiChecked], input[tuiCheckedChange]", inputs: { tuiChecked: "tuiChecked" }, outputs: { tuiCheckedChange: "tuiCheckedChange" }, host: { listeners: { "change": "onChange($event.target)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[tuiChecked], input[tuiCheckedChange]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }]; }, propDecorators: { tuiChecked: [{
                type: Input
            }], tuiCheckedChange: [{
                type: Output
            }], onChange: [{
                type: HostListener,
                args: ['change', ['$event.target']]
            }] } });

class TuiCheckedModule {
}
TuiCheckedModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiCheckedModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedModule, declarations: [TuiCheckedDirective], exports: [TuiCheckedDirective] });
TuiCheckedModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiCheckedDirective],
                    exports: [TuiCheckedDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiCheckedDirective, TuiCheckedModule };
//# sourceMappingURL=taiga-ui-cdk-directives-checked.js.map
