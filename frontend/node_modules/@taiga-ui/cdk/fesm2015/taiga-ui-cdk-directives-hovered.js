import * as i0 from '@angular/core';
import { ElementRef, NgZone, Injectable, Inject, Directive, NgModule } from '@angular/core';
import { ALWAYS_TRUE_HANDLER, ALWAYS_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { tuiTypedFromEvent, tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { tuiIsElement } from '@taiga-ui/cdk/utils';
import * as i1 from 'rxjs';
import { Observable, merge } from 'rxjs';
import { map, filter, distinctUntilChanged } from 'rxjs/operators';

function movedOut({ currentTarget, relatedTarget }) {
    return (!tuiIsElement(relatedTarget) ||
        !tuiIsElement(currentTarget) ||
        !currentTarget.contains(relatedTarget));
}
class TuiHoveredService extends Observable {
    constructor(el, ngZone) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.el = el;
        this.ngZone = ngZone;
        this.stream$ = merge(tuiTypedFromEvent(this.el.nativeElement, `mouseenter`).pipe(map(ALWAYS_TRUE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, `mouseleave`).pipe(map(ALWAYS_FALSE_HANDLER)), 
        // Hello, Safari
        tuiTypedFromEvent(this.el.nativeElement, `mouseout`).pipe(filter(movedOut), map(ALWAYS_FALSE_HANDLER))).pipe(distinctUntilChanged(), tuiZoneOptimized(this.ngZone));
    }
}
TuiHoveredService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredService, deps: [{ token: ElementRef }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
TuiHoveredService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }]; } });

class TuiHoveredDirective {
    constructor(tuiHoveredChange) {
        this.tuiHoveredChange = tuiHoveredChange;
    }
}
TuiHoveredDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredDirective, deps: [{ token: TuiHoveredService }], target: i0.ɵɵFactoryTarget.Directive });
TuiHoveredDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiHoveredDirective, selector: "[tuiHoveredChange]", outputs: { tuiHoveredChange: "tuiHoveredChange" }, providers: [TuiHoveredService], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiHoveredChange]',
                    outputs: ['tuiHoveredChange'],
                    providers: [TuiHoveredService],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TuiHoveredService]
                }] }]; } });

class TuiHoveredModule {
}
TuiHoveredModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiHoveredModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredModule, declarations: [TuiHoveredDirective], exports: [TuiHoveredDirective] });
TuiHoveredModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiHoveredDirective],
                    exports: [TuiHoveredDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiHoveredDirective, TuiHoveredModule, TuiHoveredService };
//# sourceMappingURL=taiga-ui-cdk-directives-hovered.js.map
