import { tuiAssert } from '@taiga-ui/cdk/classes';
import { TuiPureException } from '@taiga-ui/cdk/exceptions';

function tuiDebounce(timeout) {
    let timeoutRef;
    return function (_target, _key, descriptor) {
        const { value } = descriptor;
        descriptor.value = function (...args) {
            clearTimeout(timeoutRef);
            timeoutRef = setTimeout(() => value.apply(this, args), timeout);
        };
        return descriptor;
    };
}

/**
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
function tuiDefaultProp(assertion, ...args) {
    return (target, key) => {
        const { name } = target.constructor;
        const errorGetDefaultMessage = ngDevMode && errorGetDefault(key, name);
        const errorSetDefaultMessage = ngDevMode && errorSetDefault(key, name);
        Object.defineProperty(target, key, {
            configurable: true,
            get() {
                ngDevMode && tuiAssert.assert(false, errorGetDefaultMessage);
                return undefined;
            },
            set(initialValue) {
                const isValid = initialValue !== undefined;
                const errorMessage = ngDevMode && errorSetDefaultInitial(key, name);
                let currentValue = initialValue;
                ngDevMode && tuiAssert.assert(isValid, errorMessage);
                if (ngDevMode && isValid && assertion && tuiAssert) {
                    tuiAssert.assert(assertion.call(this, initialValue), `${String(key)} in ${name} received:`, initialValue, ...args);
                }
                Object.defineProperty(this, key, {
                    configurable: true,
                    get() {
                        return currentValue;
                    },
                    set(value) {
                        const isValid = value !== undefined;
                        const backupValue = initialValue;
                        ngDevMode &&
                            tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
                        if (ngDevMode && isValid && assertion && tuiAssert) {
                            tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                        }
                        currentValue = isValid ? value : backupValue;
                    },
                });
            },
        });
    };
}
function errorGetDefault(key, component) {
    return `Default value for ${String(key)} was not provided in ${component}, error in Taiga UI Angular Kit`;
}
function errorSetDefault(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, which is invalid input, using default value:`;
}
function errorSetDefaultInitial(key, component) {
    return `Undefined was passed as default value for ${String(key)} to ${component}, error in Taiga UI Angular Kit`;
}

/**
 * Implements lazy initialization for getter or memoization of a function call similar to pure {@link: Pipe}.
 * Replaces getter with its calculated value upon first call or keeps track of last call arguments and returned
 * value for function, skipping calculation when arguments are strictly the same.
 *
 * @throws error if used not on getter or function
 *
 * CAUTION: `this` is not available inside such functions/getters, they must be pure.
 */
function tuiPure(_target, propertyKey, { get, enumerable, value }) {
    if (get) {
        return {
            configurable: true,
            enumerable,
            get() {
                const value = get.call(this);
                Object.defineProperty(this, propertyKey, { enumerable, value });
                return value;
            },
        };
    }
    if (typeof value !== `function`) {
        throw new TuiPureException();
    }
    const original = value;
    return {
        configurable: true,
        enumerable,
        get() {
            let previousArgs = [];
            let originalFnWasCalledLeastAtOnce = false;
            let pureValue;
            const patched = (...args) => {
                const isPure = originalFnWasCalledLeastAtOnce &&
                    previousArgs.length === args.length &&
                    args.every((arg, index) => arg === previousArgs[index]);
                if (isPure) {
                    return pureValue;
                }
                previousArgs = args;
                pureValue = original.apply(this, args);
                originalFnWasCalledLeastAtOnce = true;
                return pureValue;
            };
            Object.defineProperty(this, propertyKey, {
                configurable: true,
                value: patched,
            });
            return patched;
        },
    };
}

/**
 * Decorator for checking input setter values against a custom assertion which
 * takes value passed to input setter and component instance as arguments.
 * It specifically checks for undefined values and prevents calls to the
 * original setter in this case.
 */
function tuiRequiredSetter(assertion, ...args) {
    return (target, key, { configurable, enumerable, get, set }) => {
        const { name } = target.constructor;
        return {
            configurable,
            enumerable,
            get,
            set(value) {
                if (ngDevMode && value !== undefined && assertion && tuiAssert) {
                    tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                }
                if (!set || value === undefined) {
                    ngDevMode &&
                        tuiAssert.assert(value !== undefined, errorSet(key, name));
                    return;
                }
                set.call(this, value);
            },
        };
    };
}
function errorSet(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, setter will not be called`;
}

/**
 * Generated bundle index. Do not edit.
 */

export { tuiDebounce, tuiDefaultProp, tuiPure, tuiRequiredSetter };
//# sourceMappingURL=taiga-ui-cdk-decorators.js.map
