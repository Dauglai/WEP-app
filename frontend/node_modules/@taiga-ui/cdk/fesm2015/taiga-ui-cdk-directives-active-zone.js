import { __decorate } from 'tslib';
import * as i0 from '@angular/core';
import { NgZone, ElementRef, Directive, Inject, Optional, SkipSelf, Input, Output, NgModule } from '@angular/core';
import { tuiDefaultProp, tuiPure } from '@taiga-ui/cdk/decorators';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { TUI_ACTIVE_ELEMENT } from '@taiga-ui/cdk/tokens';
import { tuiArrayRemove } from '@taiga-ui/cdk/utils';
import { map, startWith, distinctUntilChanged, skip } from 'rxjs/operators';
import * as i1 from 'rxjs';

class TuiActiveZoneDirective {
    constructor(active$, ngZone, el, directParentActiveZone) {
        this.active$ = active$;
        this.ngZone = ngZone;
        this.el = el;
        this.directParentActiveZone = directParentActiveZone;
        this.subActiveZones = [];
        this.tuiActiveZoneParent = null;
        this.tuiActiveZoneChange = this.active$.pipe(map(element => !!element && this.contains(element)), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.ngZone));
        if (this.directParentActiveZone) {
            this.directParentActiveZone.addSubActiveZone(this);
        }
    }
    set tuiActiveZoneParentSetter(zone) {
        this.setZone(zone);
    }
    ngOnDestroy() {
        if (this.directParentActiveZone) {
            this.directParentActiveZone.removeSubActiveZone(this);
        }
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
    }
    contains(node) {
        return (this.el.nativeElement.contains(node) ||
            this.subActiveZones.some((item, index, array) => array.indexOf(item) === index && item.contains(node)));
    }
    setZone(zone) {
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
        if (zone) {
            zone.addSubActiveZone(this);
        }
        this.tuiActiveZoneParent = zone;
    }
    addSubActiveZone(activeZone) {
        this.subActiveZones = [...this.subActiveZones, activeZone];
    }
    removeSubActiveZone(activeZone) {
        this.subActiveZones = tuiArrayRemove(this.subActiveZones, this.subActiveZones.indexOf(activeZone));
    }
}
TuiActiveZoneDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneDirective, deps: [{ token: TUI_ACTIVE_ELEMENT }, { token: NgZone }, { token: ElementRef }, { token: TuiActiveZoneDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiActiveZoneDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: { tuiActiveZoneParentSetter: ["tuiActiveZoneParent", "tuiActiveZoneParentSetter"] }, outputs: { tuiActiveZoneChange: "tuiActiveZoneChange" }, exportAs: ["tuiActiveZone"], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiActiveZoneDirective.prototype, "tuiActiveZoneParentSetter", null);
__decorate([
    tuiPure
], TuiActiveZoneDirective.prototype, "setZone", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)',
                    exportAs: 'tuiActiveZone',
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_ACTIVE_ELEMENT]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: TuiActiveZoneDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }]; }, propDecorators: { tuiActiveZoneParentSetter: [{
                type: Input,
                args: ['tuiActiveZoneParent']
            }], tuiActiveZoneChange: [{
                type: Output
            }], setZone: [] } });

class TuiActiveZoneModule {
}
TuiActiveZoneModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiActiveZoneModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneModule, declarations: [TuiActiveZoneDirective], exports: [TuiActiveZoneDirective] });
TuiActiveZoneModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiActiveZoneDirective],
                    exports: [TuiActiveZoneDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiActiveZoneDirective, TuiActiveZoneModule };
//# sourceMappingURL=taiga-ui-cdk-directives-active-zone.js.map
