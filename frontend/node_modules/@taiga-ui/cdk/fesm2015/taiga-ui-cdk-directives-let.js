import * as i0 from '@angular/core';
import { ViewContainerRef, TemplateRef, Directive, Inject, Input, NgModule } from '@angular/core';

/**
 * @internal
 */
class TuiLetContext {
    constructor(internalDirectiveInstance) {
        this.internalDirectiveInstance = internalDirectiveInstance;
    }
    get $implicit() {
        return this.internalDirectiveInstance.tuiLet;
    }
    get tuiLet() {
        return this.internalDirectiveInstance.tuiLet;
    }
}

/**
 * Works like *ngIf but does not have a condition — use it to declare
 * the result of pipes calculation (i.e. async pipe)
 */
class TuiLetDirective {
    constructor(viewContainer, templateRef) {
        viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
    }
    /**
     * Asserts the correct type of the context for the template that `TuiLet` will render.
     *
     * The presence of this method is a signal to the Ivy template type-check compiler that the
     * `TuiLet` structural directive renders its template with a specific context type.
     */
    static ngTemplateContextGuard(_dir, _ctx) {
        return true;
    }
}
TuiLetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLetDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiLetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLetDirective, selector: "[tuiLet]", inputs: { tuiLet: "tuiLet" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLetDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiLet]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { tuiLet: [{
                type: Input
            }] } });

class TuiLetModule {
}
TuiLetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
TuiLetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLetModule, declarations: [TuiLetDirective], exports: [TuiLetDirective] });
TuiLetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLetModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLetModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [TuiLetDirective],
                    exports: [TuiLetDirective],
                }]
        }] });

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLetContext, TuiLetDirective, TuiLetModule };
//# sourceMappingURL=taiga-ui-cdk-directives-let.js.map
