(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk/observables'), require('@taiga-ui/cdk/services'), require('@taiga-ui/cdk/utils/miscellaneous'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/droppable', ['exports', '@angular/core', '@taiga-ui/cdk/observables', '@taiga-ui/cdk/services', '@taiga-ui/cdk/utils/miscellaneous', 'rxjs', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives.droppable = {}), global.ng.core, global["taiga-ui"].cdk.observables, global["taiga-ui"].cdk.services, global["taiga-ui"].cdk.utils.miscellaneous, global.rxjs, global.rxjs.operators));
})(this, (function (exports, i0, observables, services, miscellaneous, i1, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    var TuiDroppableDirective = /** @class */ (function () {
        function TuiDroppableDirective(_a, destroy$) {
            var nativeElement = _a.nativeElement;
            this.tuiDroppableDropped = observables.tuiTypedFromEvent(nativeElement, 'drop').pipe(observables.tuiPreventDefault(), operators.map(function (event) { return event.dataTransfer; }), operators.filter(miscellaneous.tuiIsPresent));
            this.tuiDroppableDragOverChange = observables.tuiTypedFromEvent(nativeElement, 'dragenter').pipe(operators.switchMap(function (_a) {
                var target = _a.target, dataTransfer = _a.dataTransfer;
                return i1.merge(observables.tuiTypedFromEvent(nativeElement, 'dragleave').pipe(operators.filter(function (event) { return event.target === target; })), observables.tuiTypedFromEvent(nativeElement, 'drop')).pipe(operators.map(function () { return null; }), operators.startWith(dataTransfer));
            }), operators.distinctUntilChanged(function (a, b) { return (!!a && !!b) || (!a && !b); }));
            // Required by Drag and Drop API to stop redirecting
            observables.tuiTypedFromEvent(nativeElement, 'dragover')
                .pipe(observables.tuiPreventDefault(), operators.takeUntil(destroy$))
                .subscribe();
        }
        return TuiDroppableDirective;
    }());
    TuiDroppableDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDroppableDirective, deps: [{ token: i0.ElementRef }, { token: services.TuiDestroyService, self: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDroppableDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDroppableDirective, selector: "[tuiDroppableDropped], [tuiDroppableDragOverChange]", outputs: { tuiDroppableDropped: "tuiDroppableDropped", tuiDroppableDragOverChange: "tuiDroppableDragOverChange" }, providers: [services.TuiDestroyService], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDroppableDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDroppableDropped], [tuiDroppableDragOverChange]',
                        providers: [services.TuiDestroyService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i1__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [services.TuiDestroyService]
                        }] }];
        }, propDecorators: { tuiDroppableDropped: [{
                    type: i0.Output
                }], tuiDroppableDragOverChange: [{
                    type: i0.Output
                }] } });

    var TuiDroppableModule = /** @class */ (function () {
        function TuiDroppableModule() {
        }
        return TuiDroppableModule;
    }());
    TuiDroppableModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDroppableModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiDroppableModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDroppableModule, declarations: [TuiDroppableDirective], exports: [TuiDroppableDirective] });
    TuiDroppableModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDroppableModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDroppableModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiDroppableDirective],
                        exports: [TuiDroppableDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiDroppableDirective = TuiDroppableDirective;
    exports.TuiDroppableModule = TuiDroppableModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-droppable.umd.js.map
