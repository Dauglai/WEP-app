(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk/observables'), require('@taiga-ui/cdk/services'), require('@taiga-ui/cdk/utils/dom'), require('rxjs/operators'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/overscroll', ['exports', '@angular/core', '@taiga-ui/cdk/observables', '@taiga-ui/cdk/services', '@taiga-ui/cdk/utils/dom', 'rxjs/operators', 'rxjs'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives.overscroll = {}), global.ng.core, global["taiga-ui"].cdk.observables, global["taiga-ui"].cdk.services, global["taiga-ui"].cdk.utils.dom, global.rxjs.operators, global.rxjs));
})(this, (function (exports, i0, observables, services, dom, operators, i1) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);

    /**
     * Directive to isolate scrolling, i.e. prevent body scroll behind modal dialog
     */
    var TuiOverscrollDirective = /** @class */ (function () {
        function TuiOverscrollDirective(_b, ngZone, destroy$) {
            var _this = this;
            var nativeElement = _b.nativeElement;
            this.mode = 'scroll';
            observables.tuiTypedFromEvent(nativeElement, 'wheel', { passive: false })
                .pipe(operators.filter(function () { return _this.enabled; }), observables.tuiZonefree(ngZone), operators.takeUntil(destroy$))
                .subscribe(function (event) {
                _this.processEvent(event, !!event.deltaY, event.deltaY ? event.deltaY < 0 : event.deltaX < 0);
            });
            observables.tuiTypedFromEvent(nativeElement, 'touchstart', { passive: true })
                .pipe(operators.switchMap(function (_b) {
                var touches = _b.touches;
                var _c = touches[0], clientX = _c.clientX, clientY = _c.clientY;
                var deltaX = 0;
                var deltaY = 0;
                var vertical;
                return observables.tuiTypedFromEvent(nativeElement, 'touchmove', {
                    passive: false,
                }).pipe(operators.filter(function () { return _this.enabled; }), operators.tap(function (event) {
                    // We have to have it in tap instead of subscribe due to variables in closure
                    var changedTouch = event.changedTouches[0];
                    deltaX = clientX - changedTouch.clientX;
                    deltaY = clientY - changedTouch.clientY;
                    clientX = changedTouch.clientX;
                    clientY = changedTouch.clientY;
                    if (vertical === undefined) {
                        vertical = Math.abs(deltaY) > Math.abs(deltaX);
                    }
                    _this.processEvent(event, vertical, vertical ? deltaY < 0 : deltaX < 0);
                }));
            }), observables.tuiZonefree(ngZone), operators.takeUntil(destroy$))
                .subscribe();
        }
        Object.defineProperty(TuiOverscrollDirective.prototype, "enabled", {
            get: function () {
                return this.mode !== 'none';
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiOverscrollDirective.prototype, "overscrollBehavior", {
            get: function () {
                return this.enabled ? 'contain' : null;
            },
            enumerable: false,
            configurable: true
        });
        TuiOverscrollDirective.prototype.processEvent = function (event, vertical, negative) {
            var _a;
            var target = event.target, currentTarget = event.currentTarget, cancelable = event.cancelable;
            if (!cancelable ||
                !dom.tuiIsElement(target) ||
                ((_a = target) === null || _a === void 0 ? void 0 : _a.type) === 'range') {
                return;
            }
            // This is all what's needed in Chrome/Firefox thanks to CSS overscroll-behavior
            if (this.mode === 'all' &&
                ((vertical && !currentTarget.contains(dom.tuiGetScrollParent(target))) ||
                    (!vertical && !currentTarget.contains(dom.tuiGetScrollParent(target, false))))) {
                event.preventDefault();
                return;
            }
            // This is Safari/IE/Edge fallback
            if (vertical &&
                ((negative && !dom.tuiCanScroll(target, currentTarget, true, false)) ||
                    (!negative && !dom.tuiCanScroll(target, currentTarget, true, true)))) {
                event.preventDefault();
                return;
            }
            if (!vertical &&
                ((negative && !dom.tuiCanScroll(target, currentTarget, false, false)) ||
                    (!negative && !dom.tuiCanScroll(target, currentTarget, false, true)))) {
                event.preventDefault();
            }
        };
        return TuiOverscrollDirective;
    }());
    TuiOverscrollDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiOverscrollDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: services.TuiDestroyService, self: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiOverscrollDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiOverscrollDirective, selector: "[tuiOverscroll]", inputs: { mode: ["tuiOverscroll", "mode"] }, host: { properties: { "style.overscrollBehavior": "this.overscrollBehavior" } }, providers: [services.TuiDestroyService], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiOverscrollDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiOverscroll]',
                        providers: [services.TuiDestroyService],
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.NgZone, decorators: [{
                            type: i0.Inject,
                            args: [i0.NgZone]
                        }] }, { type: i1__namespace.Observable, decorators: [{
                            type: i0.Self
                        }, {
                            type: i0.Inject,
                            args: [services.TuiDestroyService]
                        }] }];
        }, propDecorators: { mode: [{
                    type: i0.Input,
                    args: ['tuiOverscroll']
                }], overscrollBehavior: [{
                    type: i0.HostBinding,
                    args: ['style.overscrollBehavior']
                }] } });

    var TuiOverscrollModule = /** @class */ (function () {
        function TuiOverscrollModule() {
        }
        return TuiOverscrollModule;
    }());
    TuiOverscrollModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiOverscrollModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiOverscrollModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiOverscrollModule, declarations: [TuiOverscrollDirective], exports: [TuiOverscrollDirective] });
    TuiOverscrollModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiOverscrollModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiOverscrollModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiOverscrollDirective],
                        exports: [TuiOverscrollDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiOverscrollDirective = TuiOverscrollDirective;
    exports.TuiOverscrollModule = TuiOverscrollModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-overscroll.umd.js.map
