{"version":3,"file":"taiga-ui-cdk-directives-let.umd.js","sources":["../../../projects/cdk/directives/let/let-context.ts","../../../projects/cdk/directives/let/let.directive.ts","../../../projects/cdk/directives/let/let.module.ts","../../../projects/cdk/directives/let/taiga-ui-cdk-directives-let.ts"],"sourcesContent":["import {TuiContextWithImplicit} from '@taiga-ui/cdk/interfaces';\n\nimport type {TuiLetDirective} from './let.directive';\n\n/**\n * @internal\n */\nexport class TuiLetContext<T> implements TuiContextWithImplicit<T> {\n    constructor(private readonly internalDirectiveInstance: TuiLetDirective<T>) {}\n\n    get $implicit(): T {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n\n    get tuiLet(): T {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n}\n","import {Directive, Inject, Input, TemplateRef, ViewContainerRef} from '@angular/core';\n\nimport {TuiLetContext} from './let-context';\n\n/**\n * Works like *ngIf but does not have a condition â€” use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\n@Directive({\n    selector: '[tuiLet]',\n})\nexport class TuiLetDirective<T> {\n    @Input()\n    tuiLet!: T;\n\n    constructor(\n        @Inject(ViewContainerRef) viewContainer: ViewContainerRef,\n        @Inject(TemplateRef) templateRef: TemplateRef<TuiLetContext<T>>,\n    ) {\n        viewContainer.createEmbeddedView(templateRef, new TuiLetContext<T>(this));\n    }\n\n    /**\n     * Asserts the correct type of the context for the template that `TuiLet` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `TuiLet` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard<T>(\n        _dir: TuiLetDirective<T>,\n        _ctx: unknown,\n    ): _ctx is TuiLetContext<T> {\n        return true;\n    }\n}\n","import {NgModule} from '@angular/core';\n\nimport {TuiLetDirective} from './let.directive';\n\n@NgModule({\n    declarations: [TuiLetDirective],\n    exports: [TuiLetDirective],\n})\nexport class TuiLetModule {}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"],"names":["ViewContainerRef","TemplateRef","i0","Directive","Inject","Input","NgModule"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAIA;;IAEG;AACH,QAAA,aAAA,kBAAA,YAAA;IACI,IAAA,SAAA,aAAA,CAA6B,yBAA6C,EAAA;IAA7C,QAAA,IAAyB,CAAA,yBAAA,GAAzB,yBAAyB,CAAoB;SAAI;IAE9E,IAAA,MAAA,CAAA,cAAA,CAAI,aAAS,CAAA,SAAA,EAAA,WAAA,EAAA;IAAb,QAAA,GAAA,EAAA,YAAA;IACI,YAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;aAChD;;;IAAA,KAAA,CAAA,CAAA;IAED,IAAA,MAAA,CAAA,cAAA,CAAI,aAAM,CAAA,SAAA,EAAA,QAAA,EAAA;IAAV,QAAA,GAAA,EAAA,YAAA;IACI,YAAA,OAAO,IAAI,CAAC,yBAAyB,CAAC,MAAM,CAAC;aAChD;;;IAAA,KAAA,CAAA,CAAA;QACJ,OAAA,aAAA,CAAA;IAAA,CAAA,EAAA;;ICbD;;;IAGG;AAIH,QAAA,eAAA,kBAAA,YAAA;QAII,SAC8B,eAAA,CAAA,aAA+B,EACpC,WAA0C,EAAA;YAE/D,aAAa,CAAC,kBAAkB,CAAC,WAAW,EAAE,IAAI,aAAa,CAAI,IAAI,CAAC,CAAC,CAAC;SAC7E;IAED;;;;;IAKG;IACI,IAAA,eAAA,CAAA,sBAAsB,GAA7B,UACI,IAAwB,EACxB,IAAa,EAAA;IAEb,QAAA,OAAO,IAAI,CAAC;SACf,CAAA;;;uIAtBQ,eAAe,EAAA,IAAA,EAAA,CAAA,EAAA,KAAA,EAKZA,mBAAgB,EAAA,EAAA,EAAA,KAAA,EAChBC,cAAW,EAAA,CAAA,EAAA,MAAA,EAAAC,aAAA,CAAA,eAAA,CAAA,SAAA,EAAA,CAAA,CAAA;gHANd,eAAe,EAAA,QAAA,EAAA,UAAA,EAAA,MAAA,EAAA,EAAA,MAAA,EAAA,QAAA,EAAA,EAAA,QAAA,EAAAA,aAAA,EAAA,CAAA,CAAA;sHAAf,eAAe,EAAA,UAAA,EAAA,CAAA;sBAH3BC,YAAS;IAAC,YAAA,IAAA,EAAA,CAAA;IACP,oBAAA,QAAQ,EAAE,UAAU;qBACvB,CAAA;;;kCAMQC,SAAM;mCAACJ,mBAAgB,CAAA;;kCACvBI,SAAM;mCAACH,cAAW,CAAA;;6BAJvB,MAAM,EAAA,CAAA;0BADLI,QAAK;;;ACJV,QAAA,YAAA,kBAAA,YAAA;IAAA,IAAA,SAAA,YAAA,GAAA;;;;oIAAa,YAAY,EAAA,IAAA,EAAA,EAAA,EAAA,MAAA,EAAAH,aAAA,CAAA,eAAA,CAAA,QAAA,EAAA,CAAA,CAAA;qIAAZ,YAAY,EAAA,YAAA,EAAA,CAHN,eAAe,CAAA,EAAA,OAAA,EAAA,CACpB,eAAe,CAAA,EAAA,CAAA,CAAA;qIAEhB,YAAY,EAAA,CAAA,CAAA;sHAAZ,YAAY,EAAA,UAAA,EAAA,CAAA;sBAJxBI,WAAQ;IAAC,YAAA,IAAA,EAAA,CAAA;wBACN,YAAY,EAAE,CAAC,eAAe,CAAC;wBAC/B,OAAO,EAAE,CAAC,eAAe,CAAC;qBAC7B,CAAA;;;ICPD;;IAEG;;;;;;;;;;;;"}