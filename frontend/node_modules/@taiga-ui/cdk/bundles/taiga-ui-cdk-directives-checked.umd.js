(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/checked', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives.checked = {}), global.ng.core));
})(this, (function (exports, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var TuiCheckedDirective = /** @class */ (function () {
        function TuiCheckedDirective(el, renderer) {
            this.el = el;
            this.renderer = renderer;
            this.tuiCheckedChange = new i0.EventEmitter();
            this.updateProperty('checked', false);
        }
        Object.defineProperty(TuiCheckedDirective.prototype, "tuiChecked", {
            set: function (checked) {
                this.updateProperty('checked', checked || false);
                this.updateProperty('indeterminate', checked === null);
            },
            enumerable: false,
            configurable: true
        });
        TuiCheckedDirective.prototype.onChange = function (_a) {
            var checked = _a.checked;
            this.updateProperty('indeterminate', false);
            this.tuiCheckedChange.emit(checked);
        };
        TuiCheckedDirective.prototype.updateProperty = function (property, value) {
            this.renderer.setProperty(this.el.nativeElement, property, value);
        };
        return TuiCheckedDirective;
    }());
    TuiCheckedDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCheckedDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiCheckedDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiCheckedDirective, selector: "input[tuiChecked], input[tuiCheckedChange]", inputs: { tuiChecked: "tuiChecked" }, outputs: { tuiCheckedChange: "tuiCheckedChange" }, host: { listeners: { "change": "onChange($event.target)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCheckedDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: 'input[tuiChecked], input[tuiCheckedChange]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.Renderer2, decorators: [{
                            type: i0.Inject,
                            args: [i0.Renderer2]
                        }] }];
        }, propDecorators: { tuiChecked: [{
                    type: i0.Input
                }], tuiCheckedChange: [{
                    type: i0.Output
                }], onChange: [{
                    type: i0.HostListener,
                    args: ['change', ['$event.target']]
                }] } });

    var TuiCheckedModule = /** @class */ (function () {
        function TuiCheckedModule() {
        }
        return TuiCheckedModule;
    }());
    TuiCheckedModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCheckedModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiCheckedModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCheckedModule, declarations: [TuiCheckedDirective], exports: [TuiCheckedDirective] });
    TuiCheckedModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCheckedModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiCheckedModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiCheckedDirective],
                        exports: [TuiCheckedDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiCheckedDirective = TuiCheckedDirective;
    exports.TuiCheckedModule = TuiCheckedModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-checked.umd.js.map
