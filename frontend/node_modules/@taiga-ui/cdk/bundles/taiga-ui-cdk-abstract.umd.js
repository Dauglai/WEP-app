(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@taiga-ui/cdk/classes'), require('@taiga-ui/cdk/constants'), require('@taiga-ui/cdk/decorators'), require('rxjs'), require('rxjs/operators'), require('@taiga-ui/cdk/observables'), require('@tinkoff/ng-polymorpheus'), require('@taiga-ui/cdk/services'), require('@taiga-ui/cdk/exceptions'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/abstract', ['exports', '@angular/core', '@angular/forms', '@taiga-ui/cdk/classes', '@taiga-ui/cdk/constants', '@taiga-ui/cdk/decorators', 'rxjs', 'rxjs/operators', '@taiga-ui/cdk/observables', '@tinkoff/ng-polymorpheus', '@taiga-ui/cdk/services', '@taiga-ui/cdk/exceptions', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.abstract = {}), global.ng.core, global.ng.forms, global["taiga-ui"].cdk.classes, global["taiga-ui"].cdk.constants, global["taiga-ui"].cdk.decorators, global.rxjs, global.rxjs.operators, global["taiga-ui"].cdk.observables, global.ngPolymorpheus, global["taiga-ui"].cdk.services, global["taiga-ui"].cdk.exceptions, global.ng.common));
})(this, (function (exports, i0, i1, classes, constants, decorators, rxjs, operators, observables, ngPolymorpheus, i1$1, exceptions, common) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);
    var i1__namespace = /*#__PURE__*/_interopNamespace(i1);
    var i1__namespace$1 = /*#__PURE__*/_interopNamespace(i1$1);

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation.

    Permission to use, copy, modify, and/or distribute this software for any
    purpose with or without fee is hereby granted.

    THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
    PERFORMANCE OF THIS SOFTWARE.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (Object.prototype.hasOwnProperty.call(b, p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    var __assign = function () {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s)
                    if (Object.prototype.hasOwnProperty.call(s, p))
                        t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    function __rest(s, e) {
        var t = {};
        for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
                t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }
    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
            r = Reflect.decorate(decorators, target, key, desc);
        else
            for (var i = decorators.length - 1; i >= 0; i--)
                if (d = decorators[i])
                    r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }
    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); };
    }
    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
            return Reflect.metadata(metadataKey, metadataValue);
    }
    function __awaiter(thisArg, _arguments, P, generator) {
        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try {
                step(generator.next(value));
            }
            catch (e) {
                reject(e);
            } }
            function rejected(value) { try {
                step(generator["throw"](value));
            }
            catch (e) {
                reject(e);
            } }
            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }
    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function () { if (t[0] & 1)
                throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function () { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f)
                throw new TypeError("Generator is already executing.");
            while (_)
                try {
                    if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
                        return t;
                    if (y = 0, t)
                        op = [op[0] & 2, t.value];
                    switch (op[0]) {
                        case 0:
                        case 1:
                            t = op;
                            break;
                        case 4:
                            _.label++;
                            return { value: op[1], done: false };
                        case 5:
                            _.label++;
                            y = op[1];
                            op = [0];
                            continue;
                        case 7:
                            op = _.ops.pop();
                            _.trys.pop();
                            continue;
                        default:
                            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                                _ = 0;
                                continue;
                            }
                            if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) {
                                _.label = op[1];
                                break;
                            }
                            if (op[0] === 6 && _.label < t[1]) {
                                _.label = t[1];
                                t = op;
                                break;
                            }
                            if (t && _.label < t[2]) {
                                _.label = t[2];
                                _.ops.push(op);
                                break;
                            }
                            if (t[2])
                                _.ops.pop();
                            _.trys.pop();
                            continue;
                    }
                    op = body.call(thisArg, _);
                }
                catch (e) {
                    op = [6, e];
                    y = 0;
                }
                finally {
                    f = t = 0;
                }
            if (op[0] & 5)
                throw op[1];
            return { value: op[0] ? op[1] : void 0, done: true };
        }
    }
    var __createBinding = Object.create ? (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        Object.defineProperty(o, k2, { enumerable: true, get: function () { return m[k]; } });
    }) : (function (o, m, k, k2) {
        if (k2 === undefined)
            k2 = k;
        o[k2] = m[k];
    });
    function __exportStar(m, o) {
        for (var p in m)
            if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
                __createBinding(o, m, p);
    }
    function __values(o) {
        var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
        if (m)
            return m.call(o);
        if (o && typeof o.length === "number")
            return {
                next: function () {
                    if (o && i >= o.length)
                        o = void 0;
                    return { value: o && o[i++], done: !o };
                }
            };
        throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    /** @deprecated */
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }
    /** @deprecated */
    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++)
            s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    }
    function __spreadArray(to, from, pack) {
        if (pack || arguments.length === 2)
            for (var i = 0, l = from.length, ar; i < l; i++) {
                if (ar || !(i in from)) {
                    if (!ar)
                        ar = Array.prototype.slice.call(from, 0, i);
                    ar[i] = from[i];
                }
            }
        return to.concat(ar || from);
    }
    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }
    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n])
            i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try {
            step(g[n](v));
        }
        catch (e) {
            settle(q[0][3], e);
        } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length)
            resume(q[0][0], q[0][1]); }
    }
    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }
    function __asyncValues(o) {
        if (!Symbol.asyncIterator)
            throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function (v) { resolve({ value: v, done: d }); }, reject); }
    }
    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) {
            Object.defineProperty(cooked, "raw", { value: raw });
        }
        else {
            cooked.raw = raw;
        }
        return cooked;
    }
    ;
    var __setModuleDefault = Object.create ? (function (o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
    }) : function (o, v) {
        o["default"] = v;
    };
    function __importStar(mod) {
        if (mod && mod.__esModule)
            return mod;
        var result = {};
        if (mod != null)
            for (var k in mod)
                if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
                    __createBinding(result, mod, k);
        __setModuleDefault(result, mod);
        return result;
    }
    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }
    function __classPrivateFieldGet(receiver, state, kind, f) {
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a getter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot read private member from an object whose class did not declare it");
        return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
    }
    function __classPrivateFieldSet(receiver, state, value, kind, f) {
        if (kind === "m")
            throw new TypeError("Private method is not writable");
        if (kind === "a" && !f)
            throw new TypeError("Private accessor was defined without a setter");
        if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
            throw new TypeError("Cannot write private member to an object whose class did not declare it");
        return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
    }

    var TUI = "tui_interactive_";
    /**
     * The most basic class for interactive components
     */
    var AbstractTuiInteractive = /** @class */ (function () {
        function AbstractTuiInteractive() {
            this.pseudoHover = null;
            this.pseudoActive = null;
            this.pseudoFocus = null;
            /**
             * Determines if component is focusable with keyboard.
             */
            this.focusable = true;
            this.nativeId = "";
            /**
             * Emits 'true' on focus and 'false' on blur.
             */
            this.focusedChange = new i0.EventEmitter();
            this.focusVisibleChange = new i0.EventEmitter();
            this.focusVisible = false;
            this.autoIdString = "" + TUI + AbstractTuiInteractive.autoId++ + Date.now();
        }
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedDisabled", {
            get: function () {
                return this.disabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusable", {
            get: function () {
                return !this.computedDisabled && (this.focusable || this.focused);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocused", {
            get: function () {
                var _a;
                return !this.computedDisabled && ((_a = this.pseudoFocus) !== null && _a !== void 0 ? _a : this.focused);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "computedFocusVisible", {
            get: function () {
                var _a;
                return !this.computedDisabled && ((_a = this.pseudoFocus) !== null && _a !== void 0 ? _a : this.focusVisible);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiInteractive.prototype, "id", {
            // TODO: 3.0 Consider removing since native input is exposed
            get: function () {
                return this.nativeId || this.autoIdString;
            },
            enumerable: false,
            configurable: true
        });
        AbstractTuiInteractive.prototype.updateFocused = function (focused) {
            this.focusedChange.emit(focused);
        };
        AbstractTuiInteractive.prototype.updateFocusVisible = function (focusVisible) {
            if (this.focusVisible === focusVisible) {
                return;
            }
            this.focusVisible = focusVisible;
            this.focusVisibleChange.emit(focusVisible);
        };
        return AbstractTuiInteractive;
    }());
    AbstractTuiInteractive.autoId = 0;
    AbstractTuiInteractive.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiInteractive, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiInteractive.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiInteractive, inputs: { pseudoHover: "pseudoHover", pseudoActive: "pseudoActive", pseudoFocus: "pseudoFocus", focusable: "focusable", nativeId: "nativeId" }, outputs: { focusedChange: "focusedChange", focusVisibleChange: "focusVisibleChange" }, host: { properties: { "class._disabled": "this.computedDisabled", "class._focused": "this.computedFocused", "class._focus-visible": "this.computedFocusVisible" } }, ngImport: i0__namespace });
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoHover", void 0);
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoActive", void 0);
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "pseudoFocus", void 0);
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "focusable", void 0);
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiInteractive.prototype, "nativeId", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiInteractive, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () { return []; }, propDecorators: { pseudoHover: [{
                    type: i0.Input
                }], pseudoActive: [{
                    type: i0.Input
                }], pseudoFocus: [{
                    type: i0.Input
                }], focusable: [{
                    type: i0.Input
                }], nativeId: [{
                    type: i0.Input
                }], focusedChange: [{
                    type: i0.Output
                }], focusVisibleChange: [{
                    type: i0.Output
                }], computedDisabled: [{
                    type: i0.HostBinding,
                    args: ["class._disabled"]
                }], computedFocused: [{
                    type: i0.HostBinding,
                    args: ["class._focused"]
                }], computedFocusVisible: [{
                    type: i0.HostBinding,
                    args: ["class._focus-visible"]
                }] } });

    var AbstractTuiValueTransformer = /** @class */ (function () {
        function AbstractTuiValueTransformer() {
        }
        return AbstractTuiValueTransformer;
    }());

    /**
     * Basic ControlValueAccessor class to build form components upon
     */
    var AbstractTuiControl = /** @class */ (function (_super) {
        __extends(AbstractTuiControl, _super);
        function AbstractTuiControl(ngControl, cdr, valueTransformer) {
            var _this = _super.call(this) || this;
            _this.ngControl = ngControl;
            _this.cdr = cdr;
            _this.valueTransformer = valueTransformer;
            _this.onTouched = constants.EMPTY_FUNCTION;
            _this.onChange = constants.EMPTY_FUNCTION;
            _this.fallbackValue = _this.getFallbackValue();
            _this.destroy$ = new rxjs.Subject();
            _this.readOnly = false;
            _this.pseudoInvalid = null;
            if (ngDevMode && _this.ngControl === null) {
                classes.tuiAssert.assert(false, "NgControl not injected in " + _this.constructor.name + "!\n", "Use [(ngModel)] or [formControl] or formControlName for correct work.");
            }
            if (_this.ngControl) {
                _this.ngControl.valueAccessor = _this;
            }
            return _this;
        }
        Object.defineProperty(AbstractTuiControl.prototype, "computedInvalid", {
            get: function () {
                return (this.interactive &&
                    (this.pseudoInvalid !== null
                        ? this.pseudoInvalid
                        : this.touched && this.invalid));
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "value", {
            get: function () {
                var _a;
                return (_a = this.previousInternalValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
            },
            set: function (value) {
                this.updateValue(value);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "safeCurrentValue", {
            get: function () {
                var _a;
                return (_a = this.rawValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "invalid", {
            get: function () {
                return this.safeNgControlData(function (_d) {
                    var invalid = _d.invalid;
                    return invalid;
                }, false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "valid", {
            get: function () {
                return this.safeNgControlData(function (_d) {
                    var valid = _d.valid;
                    return valid;
                }, false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "touched", {
            get: function () {
                return this.safeNgControlData(function (_d) {
                    var touched = _d.touched;
                    return touched;
                }, false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "disabled", {
            get: function () {
                return this.safeNgControlData(function (_d) {
                    var disabled = _d.disabled;
                    return disabled;
                }, false);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "interactive", {
            get: function () {
                return !this.readOnly && !this.computedDisabled;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "control", {
            get: function () {
                return this.safeNgControlData(function (_d) {
                    var control = _d.control;
                    return control;
                }, null);
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "computedName", {
            get: function () {
                var _a, _b;
                return (_b = (_a = this.controlName) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "controlName", {
            get: function () {
                var _a, _b, _c;
                return (_c = (_b = (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : null;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(AbstractTuiControl.prototype, "rawValue", {
            get: function () {
                var ngControl = this.ngControl;
                if (ngControl === null) {
                    return undefined;
                }
                var controlValue = ngControl instanceof i1.NgModel && this.previousInternalValue === undefined
                    ? ngControl.viewModel
                    : ngControl.value;
                return this.fromControlValue(controlValue);
            },
            enumerable: false,
            configurable: true
        });
        AbstractTuiControl.prototype.ngOnInit = function () {
            var _this = this;
            var _a, _b;
            if (!((_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.valueChanges) || !((_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.statusChanges)) {
                return;
            }
            rxjs.merge(this.ngControl.valueChanges, this.ngControl.statusChanges)
                .pipe(operators.takeUntil(this.destroy$))
                .subscribe(function () { return _this.refreshLocalValue(_this.safeCurrentValue); });
        };
        AbstractTuiControl.prototype.ngOnDestroy = function () {
            this.destroy$.next();
            this.destroy$.complete();
        };
        AbstractTuiControl.prototype.checkControlUpdate = function () {
            this.cdr.markForCheck();
        };
        AbstractTuiControl.prototype.registerOnChange = function (onChange) {
            var _this = this;
            this.onChange = function (componentValue) {
                onChange(_this.toControlValue(componentValue));
            };
        };
        AbstractTuiControl.prototype.registerOnTouched = function (onTouched) {
            this.onTouched = onTouched;
        };
        AbstractTuiControl.prototype.setDisabledState = function () {
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.writeValue = function (value) {
            var controlValue = this.ngControl instanceof i1.NgModel && this.previousInternalValue === undefined
                ? this.ngControl.model
                : value;
            this.refreshLocalValue(this.fromControlValue(controlValue));
        };
        AbstractTuiControl.prototype.updateFocused = function (focused) {
            if (!focused) {
                this.controlMarkAsTouched();
            }
            _super.prototype.updateFocused.call(this, focused);
        };
        /**
         * @deprecated use `value` setter
         */
        AbstractTuiControl.prototype.updateValue = function (value) {
            if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
                return;
            }
            this.previousInternalValue = value;
            this.controlSetValue(value);
        };
        AbstractTuiControl.prototype.valueIdenticalComparator = function (oldValue, newValue) {
            return oldValue === newValue;
        };
        AbstractTuiControl.prototype.safeNgControlData = function (extractor, defaultFieldValue) {
            var _a;
            return (_a = (this.ngControl && extractor(this.ngControl))) !== null && _a !== void 0 ? _a : defaultFieldValue;
        };
        AbstractTuiControl.prototype.controlMarkAsTouched = function () {
            this.onTouched();
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.controlSetValue = function (value) {
            this.onChange(value);
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.refreshLocalValue = function (value) {
            this.previousInternalValue = value;
            this.checkControlUpdate();
        };
        AbstractTuiControl.prototype.fromControlValue = function (controlValue) {
            return this.valueTransformer
                ? this.valueTransformer.fromControlValue(controlValue)
                : controlValue;
        };
        AbstractTuiControl.prototype.toControlValue = function (componentValue) {
            return this.valueTransformer
                ? this.valueTransformer.toControlValue(componentValue)
                : componentValue;
        };
        return AbstractTuiControl;
    }(AbstractTuiInteractive));
    AbstractTuiControl.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiControl, deps: [{ token: i1__namespace.NgControl, optional: true }, { token: i0__namespace.ChangeDetectorRef }, { token: AbstractTuiValueTransformer, optional: true }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiControl.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiControl, inputs: { readOnly: "readOnly", pseudoInvalid: "pseudoInvalid" }, host: { properties: { "class._readonly": "this.readOnly", "class._invalid": "this.computedInvalid" } }, usesInheritance: true, ngImport: i0__namespace });
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiControl.prototype, "readOnly", void 0);
    __decorate([
        decorators.tuiDefaultProp()
    ], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiControl, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: i1__namespace.NgControl, decorators: [{
                            type: i0.Optional
                        }] }, { type: i0__namespace.ChangeDetectorRef }, { type: undefined, decorators: [{
                            type: i0.Optional
                        }, {
                            type: i0.Inject,
                            args: [AbstractTuiValueTransformer]
                        }] }];
        }, propDecorators: { readOnly: [{
                    type: i0.Input
                }, {
                    type: i0.HostBinding,
                    args: ["class._readonly"]
                }], pseudoInvalid: [{
                    type: i0.Input
                }], computedInvalid: [{
                    type: i0.HostBinding,
                    args: ["class._invalid"]
                }] } });
    function tuiAsControl(useExisting) {
        return {
            provide: AbstractTuiControl,
            useExisting: useExisting,
        };
    }

    var AbstractTuiController = /** @class */ (function () {
        function AbstractTuiController() {
            this.change$ = new rxjs.Subject();
        }
        AbstractTuiController.prototype.ngOnChanges = function () {
            this.change$.next();
        };
        return AbstractTuiController;
    }());
    AbstractTuiController.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiController, deps: [], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiController.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiController, usesOnChanges: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiController, decorators: [{
                type: i0.Directive
            }] });

    var AbstractTuiDialogService = /** @class */ (function (_super) {
        __extends(AbstractTuiDialogService, _super);
        function AbstractTuiDialogService(idService) {
            var _this = _super.call(this, function (observer) { return _this.dialogs$.subscribe(observer); }) || this;
            _this.idService = idService;
            _this.dialogs$ = new rxjs.BehaviorSubject([]);
            return _this;
        }
        AbstractTuiDialogService.prototype.open = function (content, options) {
            var _this = this;
            if (options === void 0) { options = {}; }
            return new rxjs.Observable(function (observer) {
                var completeWith = function (result) {
                    observer.next(result);
                    observer.complete();
                };
                var dialog = Object.assign(Object.assign(Object.assign({}, _this.defaultOptions), options), { content: content, completeWith: completeWith, $implicit: observer, component: _this.component, createdAt: Date.now(), id: _this.idService.generate() });
                _this.dialogs$.next(__spreadArray(__spreadArray([], __read(_this.dialogs$.value)), [dialog]));
                return function () {
                    _this.dialogs$.next(_this.dialogs$.value.filter(function (item) { return item !== dialog; }));
                };
            });
        };
        return AbstractTuiDialogService;
    }(rxjs.Observable));
    AbstractTuiDialogService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiDialogService, deps: [{ token: i1$1.TuiIdService }], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AbstractTuiDialogService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiDialogService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiDialogService, decorators: [{
                type: i0.Injectable
            }], ctorParameters: function () {
            return [{ type: i1__namespace$1.TuiIdService, decorators: [{
                            type: i0.Inject,
                            args: [i1$1.TuiIdService]
                        }] }];
        } });

    var AbstractTuiDialogDirective = /** @class */ (function (_super) {
        __extends(AbstractTuiDialogDirective, _super);
        function AbstractTuiDialogDirective(templateRef, cdr, service) {
            var _this = _super.call(this, templateRef, cdr) || this;
            _this.service = service;
            _this.open$ = new rxjs.Subject();
            _this.options = {};
            _this.openChange = _this.open$.pipe(observables.tuiIfMap(function () { return _this.service.open(_this, _this.options).pipe(operators.ignoreElements(), operators.endWith(false)); }), operators.share());
            return _this;
        }
        Object.defineProperty(AbstractTuiDialogDirective.prototype, "open", {
            set: function (open) {
                this.open$.next(open);
            },
            enumerable: false,
            configurable: true
        });
        return AbstractTuiDialogDirective;
    }(ngPolymorpheus.PolymorpheusTemplate));
    AbstractTuiDialogDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiDialogDirective, deps: [{ token: i0.TemplateRef }, { token: i0.ChangeDetectorRef }, { token: AbstractTuiDialogService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiDialogDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiDialogDirective, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiDialogDirective, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: i0__namespace.TemplateRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.TemplateRef]
                        }] }, { type: i0__namespace.ChangeDetectorRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ChangeDetectorRef]
                        }] }, { type: AbstractTuiDialogService, decorators: [{
                            type: i0.Inject,
                            args: [AbstractTuiDialogService]
                        }] }];
        } });

    var AbstractTuiMultipleControl = /** @class */ (function (_super) {
        __extends(AbstractTuiMultipleControl, _super);
        function AbstractTuiMultipleControl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractTuiMultipleControl.prototype.clear = function () {
            this.value = [];
        };
        AbstractTuiMultipleControl.prototype.getFallbackValue = function () {
            return [];
        };
        return AbstractTuiMultipleControl;
    }(AbstractTuiControl));
    AbstractTuiMultipleControl.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiMultipleControl, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiMultipleControl.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiMultipleControl, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiMultipleControl, decorators: [{
                type: i0.Directive
            }] });

    var AbstractTuiNullableControl = /** @class */ (function (_super) {
        __extends(AbstractTuiNullableControl, _super);
        function AbstractTuiNullableControl() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        AbstractTuiNullableControl.prototype.getFallbackValue = function () {
            return null;
        };
        return AbstractTuiNullableControl;
    }(AbstractTuiControl));
    AbstractTuiNullableControl.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiNullableControl, deps: null, target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiNullableControl.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiNullableControl, usesInheritance: true, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiNullableControl, decorators: [{
                type: i0.Directive
            }] });

    /**
     * Abstract service for displaying portals
     */
    var AbstractTuiPortalService = /** @class */ (function () {
        function AbstractTuiPortalService() {
        }
        Object.defineProperty(AbstractTuiPortalService.prototype, "safeHost", {
            get: function () {
                if (!this.host) {
                    throw new exceptions.TuiNoHostException();
                }
                return this.host;
            },
            enumerable: false,
            configurable: true
        });
        AbstractTuiPortalService.prototype.attach = function (host) {
            this.host = host;
        };
        AbstractTuiPortalService.prototype.add = function (component) {
            return this.safeHost.addComponentChild(component);
        };
        AbstractTuiPortalService.prototype.remove = function (_a) {
            var hostView = _a.hostView;
            hostView.destroy();
        };
        AbstractTuiPortalService.prototype.addTemplate = function (templateRef, context) {
            return this.safeHost.addTemplateChild(templateRef, context);
        };
        AbstractTuiPortalService.prototype.removeTemplate = function (viewRef) {
            viewRef.destroy();
        };
        return AbstractTuiPortalService;
    }());
    AbstractTuiPortalService.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiPortalService, deps: [], target: i0__namespace.ɵɵFactoryTarget.Injectable });
    AbstractTuiPortalService.ɵprov = i0__namespace.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiPortalService });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiPortalService, decorators: [{
                type: i0.Injectable
            }] });

    /**
     * Abstract class for host element for dynamically created portals.
     */
    var AbstractTuiPortalHostComponent = /** @class */ (function () {
        function AbstractTuiPortalHostComponent(injector, el, portalService) {
            this.injector = injector;
            this.el = el;
            portalService.attach(this);
        }
        Object.defineProperty(AbstractTuiPortalHostComponent.prototype, "clientRect", {
            get: function () {
                return this.el.nativeElement.getBoundingClientRect();
            },
            enumerable: false,
            configurable: true
        });
        AbstractTuiPortalHostComponent.prototype.addComponentChild = function (component) {
            var parent = component.createInjector(this.injector);
            var resolver = parent.get(i0.ComponentFactoryResolver);
            var factory = resolver.resolveComponentFactory(component.component);
            var providers = [{ provide: AbstractTuiPortalHostComponent, useValue: this }];
            var injector = i0.Injector.create({ parent: parent, providers: providers });
            var ref = this.vcr.createComponent(factory, undefined, injector);
            ref.changeDetectorRef.detectChanges();
            return ref;
        };
        AbstractTuiPortalHostComponent.prototype.addTemplateChild = function (templateRef, context) {
            return this.vcr.createEmbeddedView(templateRef, context);
        };
        return AbstractTuiPortalHostComponent;
    }());
    AbstractTuiPortalHostComponent.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiPortalHostComponent, deps: [{ token: i0.INJECTOR }, { token: i0.ElementRef }, { token: AbstractTuiPortalService }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiPortalHostComponent.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiPortalHostComponent, viewQueries: [{ propertyName: "vcr", first: true, predicate: ["viewContainer"], descendants: true, read: i0.ViewContainerRef }], ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiPortalHostComponent, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: i0__namespace.Injector, decorators: [{
                            type: i0.Inject,
                            args: [i0.INJECTOR]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: AbstractTuiPortalService, decorators: [{
                            type: i0.Inject,
                            args: [AbstractTuiPortalService]
                        }] }];
        }, propDecorators: { vcr: [{
                    type: i0.ViewChild,
                    args: ["viewContainer", { read: i0.ViewContainerRef }]
                }] } });

    /**
     * Use this abstract class to create your own toggleable themes.
     * A component extending this class must have CSS variables definitions
     * and have ViewEncapsulation set to NONE. A boolean input allows to
     * switch theme on or off.
     */
    var AbstractTuiThemeSwitcher = /** @class */ (function () {
        function AbstractTuiThemeSwitcher(doc) {
            this.doc = doc;
            if (this.style !== null) {
                this.addTheme();
                return;
            }
            var styles = this.doc.head.querySelectorAll("style");
            this.constructor.style =
                styles[styles.length - 1];
        }
        Object.defineProperty(AbstractTuiThemeSwitcher.prototype, "style", {
            get: function () {
                return this.constructor.style;
            },
            enumerable: false,
            configurable: true
        });
        AbstractTuiThemeSwitcher.prototype.ngOnDestroy = function () {
            this.removeTheme();
        };
        AbstractTuiThemeSwitcher.prototype.addTheme = function () {
            if (this.style) {
                this.doc.head.appendChild(this.style);
            }
        };
        AbstractTuiThemeSwitcher.prototype.removeTheme = function () {
            if (this.style && this.doc.head.contains(this.style)) {
                this.doc.head.removeChild(this.style);
            }
        };
        return AbstractTuiThemeSwitcher;
    }());
    AbstractTuiThemeSwitcher.style = null;
    AbstractTuiThemeSwitcher.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiThemeSwitcher, deps: [{ token: common.DOCUMENT }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    AbstractTuiThemeSwitcher.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiThemeSwitcher, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: AbstractTuiThemeSwitcher, decorators: [{
                type: i0.Directive
            }], ctorParameters: function () {
            return [{ type: Document, decorators: [{
                            type: i0.Inject,
                            args: [common.DOCUMENT]
                        }] }];
        } });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.AbstractTuiControl = AbstractTuiControl;
    exports.AbstractTuiController = AbstractTuiController;
    exports.AbstractTuiDialogDirective = AbstractTuiDialogDirective;
    exports.AbstractTuiDialogService = AbstractTuiDialogService;
    exports.AbstractTuiInteractive = AbstractTuiInteractive;
    exports.AbstractTuiMultipleControl = AbstractTuiMultipleControl;
    exports.AbstractTuiNullableControl = AbstractTuiNullableControl;
    exports.AbstractTuiPortalHostComponent = AbstractTuiPortalHostComponent;
    exports.AbstractTuiPortalService = AbstractTuiPortalService;
    exports.AbstractTuiThemeSwitcher = AbstractTuiThemeSwitcher;
    exports.AbstractTuiValueTransformer = AbstractTuiValueTransformer;
    exports.tuiAsControl = tuiAsControl;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-abstract.umd.js.map
