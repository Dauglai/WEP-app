(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@taiga-ui/cdk/observables'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/drag', ['exports', '@angular/core', '@taiga-ui/cdk/observables', 'rxjs/operators'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives.drag = {}), global.ng.core, global["taiga-ui"].cdk.observables, global.rxjs.operators));
})(this, (function (exports, i0, observables, operators) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @deprecated not used anywhere
     */
    var TuiDragDirective = /** @class */ (function () {
        function TuiDragDirective(el) {
            this.el = el;
            this.dragAndDropFrom$ = observables.tuiDragAndDropFrom(this.el.nativeElement);
            this.start = this.dragAndDropFrom$.pipe(operators.filter(function (_a) {
                var stage = _a.stage;
                return stage === 0;
            } /* Start */), operators.map(function (_a) {
                var event = _a.event;
                return event;
            }));
            this.continues = this.dragAndDropFrom$.pipe(operators.filter(function (_a) {
                var stage = _a.stage;
                return stage === 1;
            } /* Continues */), operators.map(function (_a) {
                var event = _a.event;
                return event;
            }));
            this.end = this.dragAndDropFrom$.pipe(operators.filter(function (_a) {
                var stage = _a.stage;
                return stage === 2;
            } /* End */), operators.map(function (_a) {
                var event = _a.event;
                return event;
            }));
        }
        return TuiDragDirective;
    }());
    TuiDragDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDragDirective, deps: [{ token: i0.ElementRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiDragDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDragDirective, selector: "[tuiDragStart], [tuiDragContinues], [tuiDragEnd]", outputs: { start: "tuiDragStart", continues: "tuiDragContinues", end: "tuiDragEnd" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDragDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiDragStart], [tuiDragContinues], [tuiDragEnd]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }];
        }, propDecorators: { start: [{
                    type: i0.Output,
                    args: ['tuiDragStart']
                }], continues: [{
                    type: i0.Output,
                    args: ['tuiDragContinues']
                }], end: [{
                    type: i0.Output,
                    args: ['tuiDragEnd']
                }] } });

    /**
     * @deprecated not used anywhere
     */
    var TuiDragModule = /** @class */ (function () {
        function TuiDragModule() {
        }
        return TuiDragModule;
    }());
    TuiDragModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDragModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiDragModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDragModule, declarations: [TuiDragDirective], exports: [TuiDragDirective] });
    TuiDragModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDragModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiDragModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiDragDirective],
                        exports: [TuiDragDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiDragDirective = TuiDragDirective;
    exports.TuiDragModule = TuiDragModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-drag.umd.js.map
