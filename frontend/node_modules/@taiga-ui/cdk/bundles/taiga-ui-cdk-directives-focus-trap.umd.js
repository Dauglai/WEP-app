(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('@angular/core'), require('@taiga-ui/cdk/utils/dom'), require('@taiga-ui/cdk/utils/focus')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/focus-trap', ['exports', '@angular/common', '@angular/core', '@taiga-ui/cdk/utils/dom', '@taiga-ui/cdk/utils/focus'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives["focus-trap"] = {}), global.ng.common, global.ng.core, global["taiga-ui"].cdk.utils.dom, global["taiga-ui"].cdk.utils.focus));
})(this, (function (exports, common, i0, dom, focus) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    var TuiFocusTrapDirective = /** @class */ (function () {
        function TuiFocusTrapDirective(doc, el, renderer) {
            var _this = this;
            this.doc = doc;
            this.el = el;
            this.renderer = renderer;
            this.activeElement = focus.tuiGetNativeFocused(this.doc);
            /**
             * This would cause currently focused element to lose focus,
             * but it might cause ExpressionChanged error due to potential HostBinding.
             * Microtask keeps it in the same frame but allows change detection to run
             */
            // eslint-disable-next-line @typescript-eslint/no-floating-promises
            Promise.resolve().then(function () {
                _this.el.nativeElement.focus();
            });
        }
        TuiFocusTrapDirective.prototype.onBlur = function () {
            this.renderer.removeAttribute(this.el.nativeElement, 'tabIndex');
        };
        TuiFocusTrapDirective.prototype.onFocusIn = function (node) {
            var nativeElement = this.el.nativeElement;
            if (dom.tuiContainsOrAfter(nativeElement, node)) {
                return;
            }
            var focusable = focus.tuiGetClosestFocusable({
                initial: nativeElement,
                root: nativeElement,
            });
            if (focusable) {
                focusable.focus();
            }
        };
        TuiFocusTrapDirective.prototype.ngOnDestroy = function () {
            var _this = this;
            focus.tuiBlurNativeFocused(this.doc);
            /**
             * HostListeners are triggered even after ngOnDestroy
             * {@link https://github.com/angular/angular/issues/38100}
             * so we need to delay it but stay in the same sync cycle,
             * therefore using Promise instead of setTimeout
             */
            // eslint-disable-next-line
            Promise.resolve().then(function () {
                if (dom.tuiIsHTMLElement(_this.activeElement)) {
                    _this.activeElement.focus();
                }
            });
        };
        return TuiFocusTrapDirective;
    }());
    TuiFocusTrapDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFocusTrapDirective, deps: [{ token: common.DOCUMENT }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiFocusTrapDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiFocusTrapDirective, selector: "[tuiFocusTrap]", host: { attributes: { "tabIndex": "0" }, listeners: { "blur": "onBlur()", "window:focusin.silent": "onFocusIn($event.target)" } }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFocusTrapDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiFocusTrap]',
                        host: {
                            tabIndex: '0',
                        },
                    }]
            }], ctorParameters: function () {
            return [{ type: Document, decorators: [{
                            type: i0.Inject,
                            args: [common.DOCUMENT]
                        }] }, { type: i0__namespace.ElementRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ElementRef]
                        }] }, { type: i0__namespace.Renderer2, decorators: [{
                            type: i0.Inject,
                            args: [i0.Renderer2]
                        }] }];
        }, propDecorators: { onBlur: [{
                    type: i0.HostListener,
                    args: ['blur']
                }], onFocusIn: [{
                    type: i0.HostListener,
                    args: ['window:focusin.silent', ['$event.target']]
                }] } });

    var TuiFocusTrapModule = /** @class */ (function () {
        function TuiFocusTrapModule() {
        }
        return TuiFocusTrapModule;
    }());
    TuiFocusTrapModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFocusTrapModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiFocusTrapModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFocusTrapModule, declarations: [TuiFocusTrapDirective], exports: [TuiFocusTrapDirective] });
    TuiFocusTrapModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFocusTrapModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiFocusTrapModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiFocusTrapDirective],
                        exports: [TuiFocusTrapDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiFocusTrapDirective = TuiFocusTrapDirective;
    exports.TuiFocusTrapModule = TuiFocusTrapModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-focus-trap.umd.js.map
