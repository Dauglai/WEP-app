(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@taiga-ui/cdk/directives/let', ['exports', '@angular/core'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["taiga-ui"] = global["taiga-ui"] || {}, global["taiga-ui"].cdk = global["taiga-ui"].cdk || {}, global["taiga-ui"].cdk.directives = global["taiga-ui"].cdk.directives || {}, global["taiga-ui"].cdk.directives["let"] = {}), global.ng.core));
})(this, (function (exports, i0) { 'use strict';

    function _interopNamespace(e) {
        if (e && e.__esModule) return e;
        var n = Object.create(null);
        if (e) {
            Object.keys(e).forEach(function (k) {
                if (k !== 'default') {
                    var d = Object.getOwnPropertyDescriptor(e, k);
                    Object.defineProperty(n, k, d.get ? d : {
                        enumerable: true,
                        get: function () { return e[k]; }
                    });
                }
            });
        }
        n["default"] = e;
        return Object.freeze(n);
    }

    var i0__namespace = /*#__PURE__*/_interopNamespace(i0);

    /**
     * @internal
     */
    var TuiLetContext = /** @class */ (function () {
        function TuiLetContext(internalDirectiveInstance) {
            this.internalDirectiveInstance = internalDirectiveInstance;
        }
        Object.defineProperty(TuiLetContext.prototype, "$implicit", {
            get: function () {
                return this.internalDirectiveInstance.tuiLet;
            },
            enumerable: false,
            configurable: true
        });
        Object.defineProperty(TuiLetContext.prototype, "tuiLet", {
            get: function () {
                return this.internalDirectiveInstance.tuiLet;
            },
            enumerable: false,
            configurable: true
        });
        return TuiLetContext;
    }());

    /**
     * Works like *ngIf but does not have a condition — use it to declare
     * the result of pipes calculation (i.e. async pipe)
     */
    var TuiLetDirective = /** @class */ (function () {
        function TuiLetDirective(viewContainer, templateRef) {
            viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));
        }
        /**
         * Asserts the correct type of the context for the template that `TuiLet` will render.
         *
         * The presence of this method is a signal to the Ivy template type-check compiler that the
         * `TuiLet` structural directive renders its template with a specific context type.
         */
        TuiLetDirective.ngTemplateContextGuard = function (_dir, _ctx) {
            return true;
        };
        return TuiLetDirective;
    }());
    TuiLetDirective.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiLetDirective, deps: [{ token: i0.ViewContainerRef }, { token: i0.TemplateRef }], target: i0__namespace.ɵɵFactoryTarget.Directive });
    TuiLetDirective.ɵdir = i0__namespace.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiLetDirective, selector: "[tuiLet]", inputs: { tuiLet: "tuiLet" }, ngImport: i0__namespace });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiLetDirective, decorators: [{
                type: i0.Directive,
                args: [{
                        selector: '[tuiLet]',
                    }]
            }], ctorParameters: function () {
            return [{ type: i0__namespace.ViewContainerRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.ViewContainerRef]
                        }] }, { type: i0__namespace.TemplateRef, decorators: [{
                            type: i0.Inject,
                            args: [i0.TemplateRef]
                        }] }];
        }, propDecorators: { tuiLet: [{
                    type: i0.Input
                }] } });

    var TuiLetModule = /** @class */ (function () {
        function TuiLetModule() {
        }
        return TuiLetModule;
    }());
    TuiLetModule.ɵfac = i0__namespace.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiLetModule, deps: [], target: i0__namespace.ɵɵFactoryTarget.NgModule });
    TuiLetModule.ɵmod = i0__namespace.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiLetModule, declarations: [TuiLetDirective], exports: [TuiLetDirective] });
    TuiLetModule.ɵinj = i0__namespace.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiLetModule });
    i0__namespace.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0__namespace, type: TuiLetModule, decorators: [{
                type: i0.NgModule,
                args: [{
                        declarations: [TuiLetDirective],
                        exports: [TuiLetDirective],
                    }]
            }] });

    /**
     * Generated bundle index. Do not edit.
     */

    exports.TuiLetContext = TuiLetContext;
    exports.TuiLetDirective = TuiLetDirective;
    exports.TuiLetModule = TuiLetModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=taiga-ui-cdk-directives-let.umd.js.map
