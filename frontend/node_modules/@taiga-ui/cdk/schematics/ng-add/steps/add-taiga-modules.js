"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.addTaigaModules = void 0;
const tslib_1 = require("tslib");
const workspace_1 = require("@schematics/angular/utility/workspace");
const ng_morph_1 = require("ng-morph");
const constants_1 = require("../../constants");
const add_import_to_component_1 = require("../../utils/add-import-to-component");
const add_unique_import_1 = require("../../utils/add-unique-import");
const get_component_from_identifier_1 = require("../../utils/get-component-from-identifier");
const get_project_target_options_1 = require("../../utils/get-project-target-options");
const get_projects_1 = require("../../utils/get-projects");
const get_standalone_bootstrap_function_1 = require("../../utils/get-standalone-bootstrap-function");
const push_to_array_property_1 = require("../../utils/push-to-array-property");
const modules_1 = require("../constants/modules");
function addTaigaModules(options) {
    return (tree, context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const workspace = yield workspace_1.getWorkspace(tree);
        const project = get_projects_1.getProjects(options, workspace)[0];
        if (!project) {
            context.logger.warn(`[WARNING]: Target project not found in current workspace`);
            return;
        }
        const buildOptions = get_project_target_options_1.getProjectTargetOptions(project, `build`);
        const mainFilePath = buildOptions.main;
        if (!mainFilePath) {
            context.logger.error(`[ERROR]: Could not find the project main file`);
            return;
        }
        ng_morph_1.setActiveProject(ng_morph_1.createProject(tree, `/`, constants_1.ALL_FILES));
        const bootstrapFunction = get_standalone_bootstrap_function_1.getStandaloneBootstrapFunction(mainFilePath);
        if (bootstrapFunction) {
            addTuiEntitiesToStandalone({
                bootstrapFunction,
                options,
                context,
            });
        }
        else {
            const mainClass = ng_morph_1.getMainModule(mainFilePath);
            addTuiModules({ mainClass, options, context });
            addExtraTuiProvidersToRootComponent({ mainClass, options });
        }
        ng_morph_1.saveActiveProject();
    });
}
exports.addTaigaModules = addTaigaModules;
function addTuiModules({ mainClass, options, context, }) {
    const modules = getModules(options, [modules_1.BROWSER_ANIMATION_MODULE]);
    const mainModulePath = mainClass.getSourceFile().getFilePath();
    modules.forEach(module => {
        ng_morph_1.addImportToNgModule(mainClass, module.name, { unique: true });
        add_unique_import_1.addUniqueImport(mainModulePath, module.name, module.packageName);
    });
    context.logger.info(`${modules.map(module => module.name)} was added to ${mainModulePath}`);
}
function addExtraTuiProvidersToRootComponent({ mainClass, options, standalone = false, }) {
    if (!options.addSanitizer) {
        return;
    }
    const provider = `{provide: TUI_SANITIZER, useClass: NgDompurifySanitizer}`;
    if (standalone) {
        ng_morph_1.addProviderToComponent(mainClass, provider, { unique: true });
    }
    else {
        ng_morph_1.addProviderToNgModule(mainClass, provider, { unique: true });
    }
    modules_1.SANITIZER_MODULES.forEach(module => {
        add_unique_import_1.addUniqueImport(mainClass.getSourceFile().getFilePath(), module.name, module.packageName);
    });
}
function addTuiEntitiesToStandalone({ bootstrapFunction, options, context, }) {
    const [rootComponentIdentifier, bootstrapOptions = bootstrapFunction.addArgument(`{providers}: []`),] = bootstrapFunction.getArguments();
    const mainClass = get_component_from_identifier_1.getComponentFromIdentifier(rootComponentIdentifier);
    if (mainClass) {
        addMainModuleToRootComponent({ mainClass, options, context });
        addRootTuiProvidersToBootstrapFn(bootstrapOptions);
        addExtraTuiProvidersToRootComponent({ mainClass, options, standalone: true });
    }
}
function addRootTuiProvidersToBootstrapFn(bootstrapOptions) {
    const property = bootstrapOptions.getProperty(`providers`);
    const initializer = property.getInitializer();
    const providerFrom = initializer
        .getElements()
        .find(el => ng_morph_1.Node.isCallExpression(el) &&
        el.getExpression().getText() === `importProvidersFrom`);
    const modules = [modules_1.MAIN_MODULE, modules_1.BROWSER_ANIMATION_MODULE];
    if (ng_morph_1.Node.isCallExpression(providerFrom)) {
        const existing = providerFrom.getArguments();
        const moduleNames = modules
            .map(({ name }) => name)
            .filter(module => !existing.some(existingModule => existingModule.getText() === module));
        providerFrom.addArguments(moduleNames);
    }
    else {
        push_to_array_property_1.pushToObjectArrayProperty(bootstrapOptions, `providers`, `importProvidersFrom(TuiRootModule, BrowserAnimationsModule)`);
    }
    [...modules, { name: `importProvidersFrom`, packageName: `@angular/core` }].forEach(({ name, packageName }) => {
        add_unique_import_1.addUniqueImport(bootstrapOptions.getSourceFile().getFilePath(), name, packageName);
    });
}
function addMainModuleToRootComponent({ mainClass, options, context, }) {
    const rootComponentPath = mainClass.getSourceFile().getFilePath();
    const modules = getModules(options);
    modules.forEach(({ name, packageName }) => {
        add_import_to_component_1.addImportToComponent(mainClass, name);
        add_unique_import_1.addUniqueImport(rootComponentPath, name, packageName);
    });
    context.logger.info(`${modules.map(({ name }) => name)} was added to ${rootComponentPath}`);
}
function getModules(options, extraModules) {
    return [
        ...(extraModules || []),
        modules_1.MAIN_MODULE,
        ...(options.addDialogsModule ? modules_1.DIALOG_MODULES : []),
        ...(options.addAlertModule ? modules_1.ALERT_MODULES : []),
    ];
}
