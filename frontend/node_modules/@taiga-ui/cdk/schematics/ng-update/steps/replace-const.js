"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.replaceConst = exports.replaceConstants = void 0;
const ng_morph_1 = require("ng-morph");
const add_unique_import_1 = require("../../utils/add-unique-import");
const colored_log_1 = require("../../utils/colored-log");
const get_named_import_references_1 = require("../../utils/get-named-import-references");
const import_manipulations_1 = require("../../utils/import-manipulations");
function replaceConstants(options, constants) {
    !options[`skip-logs`] &&
        colored_log_1.infoLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.REPLACE_SYMBOL} replacing constants...`);
    constants.forEach(constToReplace => replaceConst(constToReplace));
    !options[`skip-logs`] &&
        colored_log_1.successLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.SUCCESS_SYMBOL} constants replaced \n`);
}
exports.replaceConstants = replaceConstants;
function replaceConst({ from, to }) {
    const references = get_named_import_references_1.getNamedImportReferences(from.name, from.moduleSpecifier);
    references.forEach(ref => {
        const parent = ref.getParent();
        if (ng_morph_1.Node.isImportSpecifier(parent)) {
            import_manipulations_1.removeImport(parent);
            add_unique_import_1.addUniqueImport(parent.getSourceFile().getFilePath(), to.namedImport || to.name, to.moduleSpecifier);
        }
        else {
            ref === null || ref === void 0 ? void 0 : ref.replaceWithText(to.name);
        }
    });
}
exports.replaceConst = replaceConst;
