"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.renameTypes = void 0;
const ng_morph_1 = require("ng-morph");
const colored_log_1 = require("../../utils/colored-log");
const get_named_import_references_1 = require("../../utils/get-named-import-references");
const import_manipulations_1 = require("../../utils/import-manipulations");
function renameTypes(options, types) {
    !options[`skip-logs`] &&
        colored_log_1.infoLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.REPLACE_SYMBOL} renaming types...`);
    types.forEach(({ from, to, moduleSpecifier, preserveGenerics }) => renameType(from, to, moduleSpecifier, preserveGenerics));
    !options[`skip-logs`] &&
        colored_log_1.successLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.SUCCESS_SYMBOL} types renamed \n`);
}
exports.renameTypes = renameTypes;
function renameType(from, to, moduleSpecifier, preserveGenerics = false) {
    const references = get_named_import_references_1.getNamedImportReferences(from, moduleSpecifier);
    references.forEach(ref => {
        const parent = ref.getParent();
        if (ng_morph_1.Node.isImportSpecifier(parent)) {
            processImport(parent, from, to);
        }
        else if (ng_morph_1.Node.isTypeReferenceNode(parent)) {
            const targetType = preserveGenerics && to ? addGeneric(to, parent.getTypeArguments()) : to;
            parent.replaceWithText(targetType || `any`);
        }
    });
}
function processImport(node, from, to) {
    const filePath = node.getSourceFile().getFilePath();
    const targetImportAlreadyExists = Boolean(ng_morph_1.getImports(filePath, { namedImports: to }).length);
    if (to && !targetImportAlreadyExists) {
        import_manipulations_1.renameImport(node, removeGeneric(to), removeGeneric(from));
    }
    else {
        import_manipulations_1.removeImport(node);
    }
}
function removeGeneric(type) {
    return type.replace(/<.*>$/gi, ``);
}
function addGeneric(typeName, generics) {
    const typeArgs = generics.map(t => t.getType().getText());
    const genericType = typeArgs.length ? `<${typeArgs.join(`, `)}>` : ``;
    return typeName + genericType;
}
