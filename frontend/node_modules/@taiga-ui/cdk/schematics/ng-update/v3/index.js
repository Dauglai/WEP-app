"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.updateToV3_5 = exports.updateToV3 = void 0;
const tslib_1 = require("tslib");
const schematics_1 = require("@angular-devkit/schematics");
const ng_morph_1 = require("ng-morph");
const perf_hooks_1 = require("perf_hooks");
const taiga_styles_1 = require("../../constants/taiga-styles");
const versions_1 = require("../../ng-add/constants/versions");
const angular_json_manipulations_1 = require("../../utils/angular-json-manipulations");
const colored_log_1 = require("../../utils/colored-log");
const get_execution_time_1 = require("../../utils/get-execution-time");
const remove_module_1 = require("../steps/remove-module");
const rename_types_1 = require("../steps/rename-types");
const replace_const_1 = require("../steps/replace-const");
const replace_deep_import_1 = require("../steps/replace-deep-import");
const replace_enums_1 = require("../steps/replace-enums");
const replace_services_1 = require("../steps/replace-services");
const show_warnings_1 = require("../steps/show-warnings");
const get_file_system_1 = require("../utils/get-file-system");
const migrate_expand_templates_1 = require("../v3-5/steps/migrate-expand-templates");
const constants_1 = require("./constants/constants");
const enums_1 = require("./constants/enums");
const modules_1 = require("./constants/modules");
const services_1 = require("./constants/services");
const types_1 = require("./constants/types");
const warnings_1 = require("./constants/warnings");
const migrate_date_time_1 = require("./steps/migrate-date-time");
const migrate_progress_1 = require("./steps/migrate-progress");
const migrate_sliders_1 = require("./steps/migrate-sliders");
const migrate_taiga_proprietary_icons_1 = require("./steps/migrate-taiga-proprietary-icons");
const migrate_templates_1 = require("./steps/migrate-templates");
const miscellaneous_1 = require("./steps/miscellaneous");
const replace_functions_1 = require("./steps/replace-functions");
const replace_styles_1 = require("./steps/replace-styles");
function updateToV3(options) {
    const t0 = perf_hooks_1.performance.now();
    !options[`skip-logs`] &&
        colored_log_1.titleLog(`\n\n${colored_log_1.START_SYMBOL} Your packages will be updated to @taiga-ui/*@${versions_1.TAIGA_VERSION}\n`);
    return schematics_1.chain([
        main(options),
        addTaigaStyles(options),
        migrate_taiga_proprietary_icons_1.migrateTaigaProprietaryIcons(options),
        showNormalizeWarning(),
        () => {
            const executionTime = get_execution_time_1.getExecutionTime(t0, perf_hooks_1.performance.now());
            !options[`skip-logs`] &&
                colored_log_1.titleLog(`${colored_log_1.FINISH_SYMBOL} We migrated packages to @taiga-ui/*@${versions_1.TAIGA_VERSION} in ${executionTime}. \n`);
        },
    ]);
}
exports.updateToV3 = updateToV3;
// eslint-disable-next-line @typescript-eslint/naming-convention
function updateToV3_5(options) {
    return (tree, _) => {
        const fileSystem = get_file_system_1.getFileSystem(tree);
        migrate_expand_templates_1.migrateExpandTemplates(fileSystem, options);
        fileSystem.commitEdits();
        ng_morph_1.saveActiveProject();
        !options[`skip-logs`] &&
            colored_log_1.titleLog(`${colored_log_1.FINISH_SYMBOL} We migrated packages to @taiga-ui/*@${versions_1.TAIGA_VERSION}\n`);
    };
}
exports.updateToV3_5 = updateToV3_5;
function main(options) {
    return (tree, context) => {
        const fileSystem = get_file_system_1.getFileSystem(tree);
        replace_deep_import_1.replaceDeepImports(options);
        replace_enums_1.replaceEnums(options, enums_1.ENUMS_TO_REPLACE);
        rename_types_1.renameTypes(options, types_1.TYPES_TO_RENAME);
        replace_const_1.replaceConstants(options, constants_1.CONSTANTS_TO_REPLACE);
        replace_services_1.replaceServices(options, services_1.SERVICES_TO_REPLACE);
        replace_styles_1.replaceStyles();
        show_warnings_1.showWarnings(context, warnings_1.MIGRATION_WARNINGS);
        migrate_templates_1.migrateTemplates(fileSystem, options);
        fileSystem.commitEdits();
        ng_morph_1.saveActiveProject();
        const updatedFileSystem = get_file_system_1.getFileSystem(tree);
        migrate_sliders_1.migrateSliders(updatedFileSystem, options);
        migrate_progress_1.migrateProgress(updatedFileSystem, options);
        remove_module_1.removeModules(options, modules_1.REMOVED_MODULES);
        migrate_date_time_1.dateTimeMigrations(options);
        replace_functions_1.replaceFunctions(options);
        miscellaneous_1.miscellaneousMigrations(options);
        ng_morph_1.saveActiveProject();
    };
}
function addTaigaStyles(options) {
    return (tree, context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        const proprietary = ng_morph_1.getPackageJsonDependency(tree, `@taiga-ui/proprietary-core`);
        const taigaStyles = proprietary ? [] : [taiga_styles_1.TAIGA_THEME_FONTS];
        const stylesToReplace = {
            from: taiga_styles_1.TAIGA_GLOBAL_OLD_STYLE,
            to: [taiga_styles_1.TAIGA_GLOBAL_NEW_STYLE],
        };
        if (yield angular_json_manipulations_1.isInvalidAngularJson(tree)) {
            context.logger.warn(`[WARNING]: Schematics don't support this version of angular.json.\n` +
                `– Add styles ${taigaStyles.join(`,`)} to angular.json manually.\n` +
                `– Manually replace "${taiga_styles_1.TAIGA_GLOBAL_OLD_STYLE}" with "${taiga_styles_1.TAIGA_GLOBAL_NEW_STYLE}" inside "styles" of angular.json (don't forget to install "@taiga-ui/styles")`);
            return;
        }
        return angular_json_manipulations_1.addStylesToAngularJson(options, context, taigaStyles, existingStyles => !!(existingStyles === null || existingStyles === void 0 ? void 0 : existingStyles.some(s => String(s).includes(`tinkoff-theme`))), stylesToReplace, tree);
    });
}
function showNormalizeWarning() {
    return (tree, context) => {
        var _a;
        try {
            if ((_a = ng_morph_1.getPackageJsonDependency(tree, `@taiga-ui/styles`)) === null || _a === void 0 ? void 0 : _a.version) {
                context.logger.warn(replace_styles_1.TUI_WARNING_NORMALIZE);
            }
        }
        catch (_b) {
            // noop
        }
    };
}
