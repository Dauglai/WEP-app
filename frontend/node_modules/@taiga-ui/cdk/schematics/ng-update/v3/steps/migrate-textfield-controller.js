"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateTextfieldController = void 0;
const ng_morph_1 = require("ng-morph");
const elements_1 = require("../../../utils/templates/elements");
const ng_component_input_manipulations_1 = require("../../../utils/templates/ng-component-input-manipulations");
const template_resource_1 = require("../../../utils/templates/template-resource");
const TEXTFIELDS = [
    `tui-input`,
    `tui-primitive-textfield`,
    `tui-text-area`,
    `tui-combo-box`,
    `tui-input-copy`,
    `tui-input-date`,
    `tui-input-date-range`,
    `tui-input-date-time`,
    `tui-input-number`,
    `tui-input-password`,
    `tui-input-count`,
    `tui-input-number`,
    `tui-input-phone`,
    `tui-input-slider`,
    `tui-input-card`,
];
const ATTRS_MAP = {
    tuitextfieldautocomplete: `autocomplete`,
    tuitextfieldinputmode: `inputmode`,
    tuitextfieldmaxlength: `maxlength`,
    tuitextfieldtype: `type`,
    tuitextfieldexampletext: `placeholder`,
    '[tuitextfieldautocomplete]': `[attr.autocomplete]`,
    '[tuitextfieldinputmode]': `[attr.inputmode]`,
    '[tuitextfieldmaxlength]': `[attr.maxlength]`,
    '[tuitextfieldtype]': `[attr.type]`,
    '[tuitextfieldexampletext]': `[attr.placeholder]`,
};
const CONTROLLER_ITEMS = Object.keys(ATTRS_MAP).map(attr => attr.toLowerCase());
function migrateTextfieldController({ resource, fileSystem, recorder, }) {
    const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(resource);
    const elements = elements_1.findElementsByTagNames(template, TEXTFIELDS);
    elements.forEach(element => {
        const attrs = element.attrs.filter(attr => CONTROLLER_ITEMS.includes(attr.name) && !exclusion(element, attr.name));
        if (!attrs.length) {
            return;
        }
        const existingInput = elements_1.findElementsByFn(element.childNodes, el => (el.tagName === `input` || el.tagName === `textarea`) &&
            elements_1.hasElementAttribute(el, `tuiTextfield`))[0];
        if (existingInput) {
            addAttrToExistingInput({ existingInput, attrs, recorder, templateOffset });
        }
        else {
            insertTuiTextfieldInput({ element, attrs, recorder, templateOffset });
        }
    });
    removeOldInputs(recorder, template, templateOffset);
}
exports.migrateTextfieldController = migrateTextfieldController;
function insertTuiTextfieldInput({ element, attrs, recorder, templateOffset, }) {
    var _a, _b;
    const newAttrs = attrs
        .map(attr => `${ATTRS_MAP[attr.name]}="${attr.value}"`)
        .join(`\n`);
    const content = element.tagName === `tui-text-area`
        ? `<textarea tuiTextfield ${newAttrs}></textarea> `
        : `<input tuiTextfield ${newAttrs}/> `;
    const insertTo = (_b = (_a = element.sourceCodeLocation) === null || _a === void 0 ? void 0 : _a.endTag) === null || _b === void 0 ? void 0 : _b.startOffset;
    if (insertTo) {
        recorder.insertRight(insertTo + templateOffset, content);
    }
}
function addAttrToExistingInput({ existingInput, attrs, recorder, templateOffset, }) {
    attrs.forEach(attr => {
        var _a, _b, _c;
        const insertTo = (_c = (_b = (_a = existingInput.sourceCodeLocation) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b[`tuitextfield`]) === null || _c === void 0 ? void 0 : _c.endOffset;
        if (insertTo) {
            recorder.insertLeft(insertTo + templateOffset, ` ${ATTRS_MAP[attr.name]}="${attr.value}"`);
        }
    });
}
function removeOldInputs(recorder, template, templateOffset) {
    const offsets = ng_morph_1.arrayFlat(CONTROLLER_ITEMS.map(item => ng_component_input_manipulations_1.getInputPropertyOffsets(template, item, getTagsToRemove(item))));
    offsets.forEach(([start, end]) => {
        recorder.remove(start + templateOffset, end - start);
    });
}
function getTagsToRemove(attrName) {
    return [`[tuitextfieldmaxlength]`, `tuitextfieldmaxlength`].includes(attrName)
        ? TEXTFIELDS.filter(tag => tag !== `tui-text-area`)
        : TEXTFIELDS;
}
const excludedAttrs = {
    'tui-text-area': [`[tuitextfieldmaxlength]`, `tuitextfieldmaxlength`],
};
function exclusion({ tagName }, attrName) {
    var _a;
    return (_a = excludedAttrs[tagName]) === null || _a === void 0 ? void 0 : _a.includes(attrName);
}
