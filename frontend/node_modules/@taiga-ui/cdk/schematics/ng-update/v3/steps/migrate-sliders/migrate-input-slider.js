"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateInputSlider = void 0;
const ng_morph_1 = require("ng-morph");
const constants_1 = require("../../../../constants");
const add_unique_import_1 = require("../../../../utils/add-unique-import");
const ng_component_1 = require("../../../../utils/angular/ng-component");
const progress_1 = require("../../../../utils/progress");
const project_root_1 = require("../../../../utils/project-root");
const elements_1 = require("../../../../utils/templates/elements");
const get_component_templates_1 = require("../../../../utils/templates/get-component-templates");
const ng_component_input_manipulations_1 = require("../../../../utils/templates/ng-component-input-manipulations");
function migrateInputSlider(fileSystem, options) {
    const templateResources = get_component_templates_1.getComponentTemplates(constants_1.ALL_TS_FILES);
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const COMPONENTS_WITH_MIN_MAX_LABELS = new Set();
    let progressLog = progress_1.setupProgressLogger({
        total: templateResources.length,
        prefix: `[replaceMinMaxLabels]`,
    });
    for (const templateResource of templateResources) {
        !options[`skip-logs`] && progressLog(templateResource.componentPath);
        replaceMinMaxLabels(templateResource, fileSystem, COMPONENTS_WITH_MIN_MAX_LABELS);
    }
    /**
     * We should update virtual file tree
     * otherwise all following ng-morph commands will overwrite all previous template manipulations
     * */
    fileSystem.commitEdits();
    ng_morph_1.saveActiveProject();
    ng_morph_1.setActiveProject(ng_morph_1.createProject(fileSystem.tree, project_root_1.projectRoot(), constants_1.ALL_FILES));
    progressLog = progress_1.setupProgressLogger({
        total: COMPONENTS_WITH_MIN_MAX_LABELS.size,
        prefix: `[addMinMaxLabelMethod]`,
    });
    for (const componentPath of Array.from(COMPONENTS_WITH_MIN_MAX_LABELS)) {
        !options[`skip-logs`] && progressLog(componentPath);
        addMinMaxLabelMethod(componentPath);
    }
}
exports.migrateInputSlider = migrateInputSlider;
const MIN_MAX_LABELS_MIGRATION_METHOD_NAME = `tuiMigrationMinMaxLabel`;
function replaceMinMaxLabels(templateResource, fileSystem, modifiedComponentStorage) {
    const wasMaxLabelModified = ng_component_input_manipulations_1.replaceInputProperty({
        templateResource,
        fileSystem,
        componentSelector: `tui-input-slider`,
        from: `maxLabel`,
        to: `[valueContent]`,
        newValue: MIN_MAX_LABELS_MIGRATION_METHOD_NAME,
    });
    const wasMinLabelModified = ng_component_input_manipulations_1.replaceInputProperty({
        templateResource,
        fileSystem,
        componentSelector: `tui-input-slider`,
        from: `minLabel`,
        to: `[valueContent]`,
        newValue: MIN_MAX_LABELS_MIGRATION_METHOD_NAME,
        filterFn: element => !elements_1.hasElementAttribute(element, `maxLabel`),
    });
    ng_component_input_manipulations_1.removeInputProperty({
        templateResource,
        fileSystem,
        componentSelector: `tui-input-slider`,
        inputProperty: `minLabel`,
        filterFn: element => elements_1.hasElementAttribute(element, `maxLabel`),
    });
    if (wasMaxLabelModified || wasMinLabelModified) {
        modifiedComponentStorage.add(templateResource.componentPath);
    }
}
function addMinMaxLabelMethod(componentPath) {
    const [ngComponent] = ng_component_1.getNgComponents(componentPath);
    if (ngComponent) {
        add_unique_import_1.addUniqueImport(componentPath, `TuiContextWithImplicit`, `@taiga-ui/cdk`);
        ng_morph_1.addMethods(ngComponent, {
            name: MIN_MAX_LABELS_MIGRATION_METHOD_NAME,
            returnType: `string`,
            parameters: [{ name: `context`, type: `TuiContextWithImplicit<number>` }],
            statements: [
                `const currentValue = context.$implicit;`,
                `const maxValue = 100; // TODO: (Taiga UI migration) replace with the MAX value of the input`,
                `const maxLabelText = "Max"; // TODO: (Taiga UI migration) replace with the required label`,
                `const minValue = 0; // TODO: (Taiga UI migration) replace with the MIN value of the input`,
                `const minLabelText = "Min"; // TODO: (Taiga UI migration) replace with the required label`,
                `if (currentValue === maxValue) return maxLabelText;`,
                `if (currentValue === minValue) return minLabelText;`,
                `return String(currentValue);`,
            ],
        });
    }
}
