"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateProgress = exports.DEPRECATED_PROGRESS_PIPES_REG = void 0;
const ng_morph_1 = require("ng-morph");
const constants_1 = require("../../../constants");
const colored_log_1 = require("../../../utils/colored-log");
const project_root_1 = require("../../../utils/project-root");
const elements_1 = require("../../../utils/templates/elements");
const get_component_templates_1 = require("../../../utils/templates/get-component-templates");
const template_resource_1 = require("../../../utils/templates/template-resource");
exports.DEPRECATED_PROGRESS_PIPES_REG = 
// eslint-disable-next-line unicorn/no-unsafe-regex
/\s*\|\s*tuiProgressColorSegments(Async\s*\|\s*async)?/gi;
const PROPERTY_FOR_DEPRECATED_PIPES = `[color]`;
function migrateProgress(fileSystem, options) {
    !options[`skip-logs`] &&
        colored_log_1.infoLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.REPLACE_SYMBOL} migrating progress bars...`);
    const templateResources = get_component_templates_1.getComponentTemplates(constants_1.ALL_TS_FILES);
    for (const templateResource of templateResources) {
        replaceProgressColorSegmentsPipe(templateResource, fileSystem);
    }
    fileSystem.commitEdits();
    ng_morph_1.saveActiveProject();
    ng_morph_1.setActiveProject(ng_morph_1.createProject(fileSystem.tree, project_root_1.projectRoot(), constants_1.ALL_FILES));
    !options[`skip-logs`] &&
        colored_log_1.successLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.SUCCESS_SYMBOL} progress bars migrated \n`);
}
exports.migrateProgress = migrateProgress;
function replaceProgressColorSegmentsPipe(templateResource, fileSystem) {
    var _a, _b;
    const template = template_resource_1.getTemplateFromTemplateResource(templateResource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(templateResource);
    const path = fileSystem.resolve(template_resource_1.getPathFromTemplateResource(templateResource));
    const recorder = fileSystem.edit(path);
    const progressElements = elements_1.findElementsWithAttribute(template, PROPERTY_FOR_DEPRECATED_PIPES).filter(isProgressWithDeprecatedPipe);
    for (const progressEl of progressElements) {
        const oldValue = ((_a = progressEl.attrs.find(attr => attr.name === PROPERTY_FOR_DEPRECATED_PIPES)) === null || _a === void 0 ? void 0 : _a.value) || ``;
        const newValue = oldValue.replace(exports.DEPRECATED_PROGRESS_PIPES_REG, ``);
        const attrLocations = (_b = progressEl.sourceCodeLocation) === null || _b === void 0 ? void 0 : _b.attrs;
        if (attrLocations) {
            const { startOffset, endOffset } = attrLocations[PROPERTY_FOR_DEPRECATED_PIPES];
            recorder.remove(templateOffset + startOffset, endOffset - startOffset);
            recorder.insertRight(templateOffset + startOffset, `[tuiProgressColorSegments]="${newValue}"`);
        }
    }
}
function isProgressWithDeprecatedPipe(element) {
    return (element.tagName === `progress` &&
        element.attrs.some(attr => attr.name === PROPERTY_FOR_DEPRECATED_PIPES &&
            attr.value.match(exports.DEPRECATED_PROGRESS_PIPES_REG)));
}
