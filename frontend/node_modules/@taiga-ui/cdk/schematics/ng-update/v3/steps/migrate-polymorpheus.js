"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migratePolymorpheus = void 0;
const replace_tag_1 = require("../../../utils/replace-tag");
const elements_1 = require("../../../utils/templates/elements");
const ng_component_input_manipulations_1 = require("../../../utils/templates/ng-component-input-manipulations");
const template_resource_1 = require("../../../utils/templates/template-resource");
function migratePolymorpheus({ resource, fileSystem, recorder, }) {
    const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(resource);
    const elements = elements_1.findElementsWithAttribute(template, `polymorpheus-outlet`);
    elements.forEach(element => {
        var _a, _b;
        const contentVal = (_a = element.attrs.find(attr => attr.name === `[content]`)) === null || _a === void 0 ? void 0 : _a.value;
        const contextVal = (_b = element.attrs.find(attr => attr.name === `[context]`)) === null || _b === void 0 ? void 0 : _b.value;
        const defaultTemplateEl = elements_1.findElementsByFn(element.childNodes, el => el.tagName === `ng-template`)[0];
        if (!contentVal) {
            return;
        }
        if (defaultTemplateEl) {
            insertPolymorpheusWithDefault({
                template,
                defaultTemplateEl,
                recorder,
                templateOffset,
                contentVal,
                contextVal,
            });
        }
        else {
            insertPolymorpheus({
                element,
                contentVal,
                contextVal,
                recorder,
                templateOffset,
            });
        }
    });
    removeOldInputs(recorder, template, templateOffset);
}
exports.migratePolymorpheus = migratePolymorpheus;
function insertPolymorpheus({ element, contentVal, contextVal, recorder, templateOffset, }) {
    var _a, _b;
    const content = `
<ng-container *polymorpheusOutlet="${contentVal} as text${contextVal ? `; context: ${contextVal}` : ``}">
    {{ text }}
</ng-container>`;
    const insertTo = (_b = (_a = element.sourceCodeLocation) === null || _a === void 0 ? void 0 : _a.startTag) === null || _b === void 0 ? void 0 : _b.endOffset;
    if (insertTo) {
        recorder.insertRight(insertTo + templateOffset, content);
    }
}
function removeOldInputs(recorder, template, templateOffset) {
    const offsets = [
        ...ng_component_input_manipulations_1.getInputPropertyOffsets(template, `[content]`, [`*`], el => elements_1.hasElementAttribute(el, `polymorpheus-outlet`)),
        ...ng_component_input_manipulations_1.getInputPropertyOffsets(template, `[context]`, [`*`], el => elements_1.hasElementAttribute(el, `polymorpheus-outlet`)),
        ...ng_component_input_manipulations_1.getInputPropertyOffsets(template, `polymorpheus-outlet`, [`*`], el => elements_1.hasElementAttribute(el, `polymorpheus-outlet`)),
    ];
    offsets.forEach(([start, end]) => {
        recorder.remove(start + templateOffset, end - start);
    });
}
function insertPolymorpheusWithDefault({ template, defaultTemplateEl, recorder, templateOffset, contentVal, contextVal, }) {
    var _a, _b;
    const templateVar = defaultTemplateEl.attrs.find(attr => attr.name.startsWith(`let-`));
    let templateVarName = templateVar === null || templateVar === void 0 ? void 0 : templateVar.name;
    if (templateVarName === null || templateVarName === void 0 ? void 0 : templateVarName.startsWith(`let-`)) {
        templateVarName = (_a = template.match(new RegExp(templateVarName, `i`))) === null || _a === void 0 ? void 0 : _a[0];
    }
    const varName = templateVarName === null || templateVarName === void 0 ? void 0 : templateVarName.replace(`let-`, ``);
    const attr = `*polymorpheusOutlet="${contentVal} as ${varName}${contextVal ? `; context: ${contextVal}` : ``}"`;
    replace_tag_1.replaceTag(recorder, defaultTemplateEl.sourceCodeLocation, `ng-template`, `ng-container`, templateOffset, [attr]);
    if (((_b = defaultTemplateEl.sourceCodeLocation) === null || _b === void 0 ? void 0 : _b.attrs) && (templateVar === null || templateVar === void 0 ? void 0 : templateVar.name)) {
        recorder.remove(defaultTemplateEl.sourceCodeLocation.attrs[templateVar.name].startOffset +
            templateOffset, templateVar.name.length);
    }
}
