"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateInputRange = void 0;
const ng_morph_1 = require("ng-morph");
const constants_1 = require("../../../../constants");
const add_unique_import_1 = require("../../../../utils/add-unique-import");
const ng_component_1 = require("../../../../utils/angular/ng-component");
const progress_1 = require("../../../../utils/progress");
const project_root_1 = require("../../../../utils/project-root");
const get_component_templates_1 = require("../../../../utils/templates/get-component-templates");
const ng_component_input_manipulations_1 = require("../../../../utils/templates/ng-component-input-manipulations");
const MIN_LABELS_MIGRATION_METHOD_NAME = `tuiMigrationInputRangeMinLabel`;
const MAX_LABELS_MIGRATION_METHOD_NAME = `tuiMigrationInputRangeMaxLabel`;
function migrateInputRange(fileSystem, options) {
    const templateResources = get_component_templates_1.getComponentTemplates(constants_1.ALL_TS_FILES);
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const COMPONENTS_WITH_MIN_LABELS = new Set();
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const COMPONENTS_WITH_MAX_LABELS = new Set();
    let progressLog = progress_1.setupProgressLogger({
        total: templateResources.length,
        prefix: `[replaceMinMaxLabel]`,
    });
    for (const templateResource of templateResources) {
        !options[`skip-logs`] && progressLog(templateResource.componentPath);
        replaceMinLabel(templateResource, fileSystem, COMPONENTS_WITH_MIN_LABELS);
        replaceMaxLabel(templateResource, fileSystem, COMPONENTS_WITH_MAX_LABELS);
    }
    save(fileSystem);
    progressLog = progress_1.setupProgressLogger({
        total: COMPONENTS_WITH_MIN_LABELS.size,
        prefix: `[COMPONENTS_WITH_MIN_LABELS]`,
    });
    for (const componentPath of Array.from(COMPONENTS_WITH_MIN_LABELS)) {
        !options[`skip-logs`] && progressLog(componentPath);
        addMinMaxLabelMethod(componentPath, MIN_LABELS_MIGRATION_METHOD_NAME, [
            `const currentValue = context.$implicit;`,
            `const minValue = 0; // TODO: (Taiga UI migration) replace with the MIN value of the input-range`,
            `const minLabelText = "Min"; // TODO: (Taiga UI migration) replace with the required label`,
            `if (currentValue === minValue) return minLabelText;`,
            `return String(currentValue);`,
        ]);
    }
    progressLog = progress_1.setupProgressLogger({
        total: COMPONENTS_WITH_MAX_LABELS.size,
        prefix: `[COMPONENTS_WITH_MAX_LABELS]`,
    });
    for (const componentPath of Array.from(COMPONENTS_WITH_MAX_LABELS)) {
        !options[`skip-logs`] && progressLog(componentPath);
        addMinMaxLabelMethod(componentPath, MAX_LABELS_MIGRATION_METHOD_NAME, [
            `const currentValue = context.$implicit;`,
            `const maxValue = 100; // TODO: (Taiga UI migration) replace with the MAX value of the input`,
            `const maxLabelText = "Max"; // TODO: (Taiga UI migration) replace with the required label`,
            `if (currentValue === maxValue) return maxLabelText;`,
            `return String(currentValue);`,
        ]);
    }
}
exports.migrateInputRange = migrateInputRange;
function replaceMinLabel(templateResource, fileSystem, modifiedComponentStorage) {
    const wasModified = ng_component_input_manipulations_1.replaceInputProperty({
        templateResource,
        fileSystem,
        componentSelector: `tui-input-range`,
        from: `minLabel`,
        to: `[leftValueContent]`,
        newValue: MIN_LABELS_MIGRATION_METHOD_NAME,
    });
    if (wasModified) {
        modifiedComponentStorage.add(templateResource.componentPath);
    }
}
function replaceMaxLabel(templateResource, fileSystem, modifiedComponentStorage) {
    const wasModified = ng_component_input_manipulations_1.replaceInputProperty({
        templateResource,
        fileSystem,
        componentSelector: `tui-input-range`,
        from: `maxLabel`,
        to: `[rightValueContent]`,
        newValue: MAX_LABELS_MIGRATION_METHOD_NAME,
    });
    if (wasModified) {
        modifiedComponentStorage.add(templateResource.componentPath);
    }
}
function addMinMaxLabelMethod(componentPath, methodName, methodCode) {
    const [ngComponent] = ng_component_1.getNgComponents(componentPath);
    if (ngComponent) {
        add_unique_import_1.addUniqueImport(ngComponent.getSourceFile().getFilePath(), `TuiContextWithImplicit`, `@taiga-ui/cdk`);
        ng_morph_1.addMethods(ngComponent, {
            name: methodName,
            returnType: `string`,
            parameters: [{ name: `context`, type: `TuiContextWithImplicit<number>` }],
            statements: methodCode,
        });
    }
}
/**
 * We should update virtual file tree after template manipulations
 * otherwise all following ng-morph commands will overwrite all previous template manipulations
 * */
function save(fileSystem) {
    fileSystem.commitEdits();
    ng_morph_1.saveActiveProject();
    ng_morph_1.setActiveProject(ng_morph_1.createProject(fileSystem.tree, project_root_1.projectRoot(), constants_1.ALL_FILES));
}
