"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateTaigaProprietaryIcons = void 0;
const tslib_1 = require("tslib");
const workspace_1 = require("@schematics/angular/utility/workspace");
const ng_morph_1 = require("ng-morph");
const is_string_1 = require("../../../../utils/miscellaneous/is-string");
const angular_json_manipulations_1 = require("../../../utils/angular-json-manipulations");
const get_project_target_options_1 = require("../../../utils/get-project-target-options");
const get_projects_1 = require("../../../utils/get-projects");
const PROPRIETARY_TDS_ICON_ASSETS = {
    glob: `**/*`,
    input: `node_modules/@taiga-ui/proprietary-tds-icons/src`,
    output: `assets/taiga-ui/icons`,
};
const MANUAL_MIGRATION_TIPS = `Add ${JSON.stringify(PROPRIETARY_TDS_ICON_ASSETS, null, 4)} to angular.json manually`;
function migrateTaigaProprietaryIcons(options) {
    return (tree, context) => tslib_1.__awaiter(this, void 0, void 0, function* () {
        var _a;
        let proprietaryIcons = null;
        try {
            proprietaryIcons =
                ((_a = ng_morph_1.getPackageJsonDependency(tree, `@taiga-ui/proprietary-icons`)) === null || _a === void 0 ? void 0 : _a.version) ||
                    null;
        }
        catch (_b) {
            // noop
        }
        if (yield angular_json_manipulations_1.isInvalidAngularJson(tree)) {
            context.logger.warn(`[WARNING]: Schematics don't support this version of angular.json. ${MANUAL_MIGRATION_TIPS}`);
            return;
        }
        return ng_morph_1.getSourceFiles(`**/angular.json`).length > 0
            ? workspace_1.updateWorkspace(workspace => {
                if (proprietaryIcons === null) {
                    return;
                }
                const projects = get_projects_1.getProjects(options, workspace);
                if (!projects.length) {
                    context.logger.warn(`[WARNING]: Target project not found. ${MANUAL_MIGRATION_TIPS}`);
                    return;
                }
                for (const project of projects) {
                    let targetOptions;
                    try {
                        targetOptions = get_project_target_options_1.getProjectTargetOptions(project, `build`);
                    }
                    catch (_a) {
                        context.logger.warn(`[WARNING]: No buildable project was found. ${MANUAL_MIGRATION_TIPS}`);
                        return;
                    }
                    if (Array.isArray(targetOptions === null || targetOptions === void 0 ? void 0 : targetOptions.assets)) {
                        const tdsSrc = `@taiga-ui/proprietary-tds-icons/src`;
                        const hasIcons = targetOptions.assets.find(asset => {
                            var _a;
                            return is_string_1.tuiIsString(asset)
                                ? asset.includes(tdsSrc)
                                : (_a = asset === null || asset === void 0 ? void 0 : asset.input) === null || _a === void 0 ? void 0 : _a.includes(tdsSrc);
                        });
                        if (hasIcons) {
                            return;
                        }
                        targetOptions.assets.push(PROPRIETARY_TDS_ICON_ASSETS);
                    }
                }
            })
            : () => { };
    });
}
exports.migrateTaigaProprietaryIcons = migrateTaigaProprietaryIcons;
