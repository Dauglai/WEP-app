"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.migrateExpandTemplates = void 0;
const constants_1 = require("../../../constants");
const colored_log_1 = require("../../../utils/colored-log");
const progress_1 = require("../../../utils/progress");
const elements_1 = require("../../../utils/templates/elements");
const get_component_templates_1 = require("../../../utils/templates/get-component-templates");
const template_resource_1 = require("../../../utils/templates/template-resource");
function migrateExpandTemplates(fileSystem, options) {
    !options[`skip-logs`] &&
        colored_log_1.infoLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.REPLACE_SYMBOL} migrating templates...`);
    const componentWithTemplatesPaths = get_component_templates_1.getComponentTemplates(constants_1.ALL_TS_FILES);
    const progressLog = progress_1.setupProgressLogger({
        total: componentWithTemplatesPaths.length,
    });
    componentWithTemplatesPaths.forEach(resource => {
        const path = fileSystem.resolve(template_resource_1.getPathFromTemplateResource(resource));
        const recorder = fileSystem.edit(path);
        !options[`skip-logs`] && progressLog(`expand migration`, true);
        migrateExpand({ resource, fileSystem, recorder });
    });
    !options[`skip-logs`] &&
        colored_log_1.successLog(`${colored_log_1.SMALL_TAB_SYMBOL}${colored_log_1.SUCCESS_SYMBOL} templates migrated \n`);
}
exports.migrateExpandTemplates = migrateExpandTemplates;
function migrateExpand({ resource, recorder, fileSystem, }) {
    const template = template_resource_1.getTemplateFromTemplateResource(resource, fileSystem);
    const templateOffset = template_resource_1.getTemplateOffset(resource);
    const elements = elements_1.findElementsByTagName(template, `tui-expand`);
    elements.forEach(element => {
        var _a;
        const templateElement = elements_1.findElementsByFn(element.childNodes, el => el.tagName === `ng-template`)[0];
        if (!templateElement) {
            return;
        }
        const tuiExpandAttr = templateElement.attrs.find(attr => attr.name === `tuiexpandcontent`);
        const insertTo = (_a = templateElement === null || templateElement === void 0 ? void 0 : templateElement.sourceCodeLocation) === null || _a === void 0 ? void 0 : _a.startTag.endOffset;
        if (!insertTo || tuiExpandAttr) {
            return;
        }
        recorder.insertRight(insertTo + templateOffset - 1, ` tuiExpandContent`);
    });
}
