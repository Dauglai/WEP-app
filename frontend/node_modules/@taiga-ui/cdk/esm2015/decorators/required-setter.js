import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * Decorator for checking input setter values against a custom assertion which
 * takes value passed to input setter and component instance as arguments.
 * It specifically checks for undefined values and prevents calls to the
 * original setter in this case.
 */
export function tuiRequiredSetter(assertion, ...args) {
    return (target, key, { configurable, enumerable, get, set }) => {
        const { name } = target.constructor;
        return {
            configurable,
            enumerable,
            get,
            set(value) {
                if (ngDevMode && value !== undefined && assertion && tuiAssert) {
                    tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                }
                if (!set || value === undefined) {
                    ngDevMode &&
                        tuiAssert.assert(value !== undefined, errorSet(key, name));
                    return;
                }
                set.call(this, value);
            },
        };
    };
}
function errorSet(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, setter will not be called`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWlyZWQtc2V0dGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RlY29yYXRvcnMvcmVxdWlyZWQtc2V0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdoRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxpQkFBaUIsQ0FDN0IsU0FBbUMsRUFDbkMsR0FBRyxJQUFXO0lBRWQsT0FBTyxDQUNILE1BQTJCLEVBQzNCLEdBQUcsRUFDSCxFQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBcUIsRUFDdEMsRUFBRTtRQUNwQixNQUFNLEVBQUMsSUFBSSxFQUFDLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQztRQUVsQyxPQUFPO1lBQ0gsWUFBWTtZQUNaLFVBQVU7WUFDVixHQUFHO1lBQ0gsR0FBRyxDQUFVLEtBQVc7Z0JBQ3BCLElBQUksU0FBUyxJQUFJLEtBQUssS0FBSyxTQUFTLElBQUksU0FBUyxJQUFJLFNBQVMsRUFBRTtvQkFDNUQsU0FBUyxDQUFDLE1BQU0sQ0FDWixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFDM0IsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sSUFBSSxZQUFZLEVBQ3JDLEtBQUssRUFDTCxHQUFHLElBQUksQ0FDVixDQUFDO2lCQUNMO2dCQUVELElBQUksQ0FBQyxHQUFHLElBQUksS0FBSyxLQUFLLFNBQVMsRUFBRTtvQkFDN0IsU0FBUzt3QkFDTCxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssS0FBSyxTQUFTLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO29CQUUvRCxPQUFPO2lCQUNWO2dCQUVELEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBQzFCLENBQUM7U0FDSixDQUFDO0lBQ04sQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsUUFBUSxDQUFDLEdBQW9CLEVBQUUsU0FBaUI7SUFDckQsT0FBTywyQkFBMkIsTUFBTSxDQUNwQyxHQUFHLENBQ04sT0FBTyxTQUFTLDZCQUE2QixDQUFDO0FBQ25ELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jbGFzc2VzJztcbmltcG9ydCB7VHVpQm9vbGVhbkhhbmRsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuXG4vKipcbiAqIERlY29yYXRvciBmb3IgY2hlY2tpbmcgaW5wdXQgc2V0dGVyIHZhbHVlcyBhZ2FpbnN0IGEgY3VzdG9tIGFzc2VydGlvbiB3aGljaFxuICogdGFrZXMgdmFsdWUgcGFzc2VkIHRvIGlucHV0IHNldHRlciBhbmQgY29tcG9uZW50IGluc3RhbmNlIGFzIGFyZ3VtZW50cy5cbiAqIEl0IHNwZWNpZmljYWxseSBjaGVja3MgZm9yIHVuZGVmaW5lZCB2YWx1ZXMgYW5kIHByZXZlbnRzIGNhbGxzIHRvIHRoZVxuICogb3JpZ2luYWwgc2V0dGVyIGluIHRoaXMgY2FzZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHR1aVJlcXVpcmVkU2V0dGVyPFQgZXh0ZW5kcyBSZWNvcmQ8c3RyaW5nLCBhbnk+LCBLIGV4dGVuZHMga2V5b2YgVD4oXG4gICAgYXNzZXJ0aW9uPzogVHVpQm9vbGVhbkhhbmRsZXI8VFtLXT4sXG4gICAgLi4uYXJnczogYW55W11cbik6IE1ldGhvZERlY29yYXRvciB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgdGFyZ2V0OiBSZWNvcmQ8c3RyaW5nLCBhbnk+LFxuICAgICAgICBrZXksXG4gICAgICAgIHtjb25maWd1cmFibGUsIGVudW1lcmFibGUsIGdldCwgc2V0fTogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgICk6IFByb3BlcnR5RGVzY3JpcHRvciA9PiB7XG4gICAgICAgIGNvbnN0IHtuYW1lfSA9IHRhcmdldC5jb25zdHJ1Y3RvcjtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlLFxuICAgICAgICAgICAgZW51bWVyYWJsZSxcbiAgICAgICAgICAgIGdldCxcbiAgICAgICAgICAgIHNldCh0aGlzOiBULCB2YWx1ZTogVFtLXSkge1xuICAgICAgICAgICAgICAgIGlmIChuZ0Rldk1vZGUgJiYgdmFsdWUgIT09IHVuZGVmaW5lZCAmJiBhc3NlcnRpb24gJiYgdHVpQXNzZXJ0KSB7XG4gICAgICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24uY2FsbCh0aGlzLCB2YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICBgJHtTdHJpbmcoa2V5KX0gaW4gJHtuYW1lfSByZWNlaXZlZDpgLFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghc2V0IHx8IHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmXG4gICAgICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KHZhbHVlICE9PSB1bmRlZmluZWQsIGVycm9yU2V0KGtleSwgbmFtZSkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBzZXQuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIGVycm9yU2V0KGtleTogc3RyaW5nIHwgc3ltYm9sLCBjb21wb25lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBVbmRlZmluZWQgd2FzIHBhc3NlZCBhcyAke1N0cmluZyhcbiAgICAgICAga2V5LFxuICAgICl9IHRvICR7Y29tcG9uZW50fSwgc2V0dGVyIHdpbGwgbm90IGJlIGNhbGxlZGA7XG59XG4iXX0=