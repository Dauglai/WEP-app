import { tuiAssert } from '@taiga-ui/cdk/classes';
/**
 * Decorator for checking input values for undefined. You can also pass
 * optional assertion to check input against.
 *
 * CAUTION: This decorator overwrites other getters and setters.
 */
export function tuiDefaultProp(assertion, ...args) {
    return (target, key) => {
        const { name } = target.constructor;
        const errorGetDefaultMessage = ngDevMode && errorGetDefault(key, name);
        const errorSetDefaultMessage = ngDevMode && errorSetDefault(key, name);
        Object.defineProperty(target, key, {
            configurable: true,
            get() {
                ngDevMode && tuiAssert.assert(false, errorGetDefaultMessage);
                return undefined;
            },
            set(initialValue) {
                const isValid = initialValue !== undefined;
                const errorMessage = ngDevMode && errorSetDefaultInitial(key, name);
                let currentValue = initialValue;
                ngDevMode && tuiAssert.assert(isValid, errorMessage);
                if (ngDevMode && isValid && assertion && tuiAssert) {
                    tuiAssert.assert(assertion.call(this, initialValue), `${String(key)} in ${name} received:`, initialValue, ...args);
                }
                Object.defineProperty(this, key, {
                    configurable: true,
                    get() {
                        return currentValue;
                    },
                    set(value) {
                        const isValid = value !== undefined;
                        const backupValue = initialValue;
                        ngDevMode &&
                            tuiAssert.assert(isValid, errorSetDefaultMessage, String(backupValue));
                        if (ngDevMode && isValid && assertion && tuiAssert) {
                            tuiAssert.assert(assertion.call(this, value), `${String(key)} in ${name} received:`, value, ...args);
                        }
                        currentValue = isValid ? value : backupValue;
                    },
                });
            },
        });
    };
}
function errorGetDefault(key, component) {
    return `Default value for ${String(key)} was not provided in ${component}, error in Taiga UI Angular Kit`;
}
function errorSetDefault(key, component) {
    return `Undefined was passed as ${String(key)} to ${component}, which is invalid input, using default value:`;
}
function errorSetDefaultInitial(key, component) {
    return `Undefined was passed as default value for ${String(key)} to ${component}, error in Taiga UI Angular Kit`;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVmYXVsdC1wcm9wLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RlY29yYXRvcnMvZGVmYXVsdC1wcm9wLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUdoRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxjQUFjLENBQzFCLFNBQW1DLEVBQ25DLEdBQUcsSUFBZTtJQUVsQixPQUFPLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxFQUFFO1FBQ25CLE1BQU0sRUFBQyxJQUFJLEVBQUMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDO1FBQ2xDLE1BQU0sc0JBQXNCLEdBQUcsU0FBUyxJQUFJLGVBQWUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDdkUsTUFBTSxzQkFBc0IsR0FBRyxTQUFTLElBQUksZUFBZSxDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUV2RSxNQUFNLENBQUMsY0FBYyxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUU7WUFDL0IsWUFBWSxFQUFFLElBQUk7WUFDbEIsR0FBRztnQkFDQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsc0JBQXNCLENBQUMsQ0FBQztnQkFFN0QsT0FBTyxTQUFTLENBQUM7WUFDckIsQ0FBQztZQUNELEdBQUcsQ0FBVSxZQUFrQjtnQkFDM0IsTUFBTSxPQUFPLEdBQUcsWUFBWSxLQUFLLFNBQVMsQ0FBQztnQkFDM0MsTUFBTSxZQUFZLEdBQUcsU0FBUyxJQUFJLHNCQUFzQixDQUFDLEdBQUcsRUFBRSxJQUFJLENBQUMsQ0FBQztnQkFDcEUsSUFBSSxZQUFZLEdBQUcsWUFBWSxDQUFDO2dCQUVoQyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsWUFBWSxDQUFDLENBQUM7Z0JBRXJELElBQUksU0FBUyxJQUFJLE9BQU8sSUFBSSxTQUFTLElBQUksU0FBUyxFQUFFO29CQUNoRCxTQUFTLENBQUMsTUFBTSxDQUNaLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLFlBQVksQ0FBQyxFQUNsQyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxJQUFJLFlBQVksRUFDckMsWUFBWSxFQUNaLEdBQUcsSUFBSSxDQUNWLENBQUM7aUJBQ0w7Z0JBRUQsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFO29CQUM3QixZQUFZLEVBQUUsSUFBSTtvQkFDbEIsR0FBRzt3QkFDQyxPQUFPLFlBQVksQ0FBQztvQkFDeEIsQ0FBQztvQkFDRCxHQUFHLENBQVUsS0FBVzt3QkFDcEIsTUFBTSxPQUFPLEdBQUcsS0FBSyxLQUFLLFNBQVMsQ0FBQzt3QkFDcEMsTUFBTSxXQUFXLEdBQUcsWUFBWSxDQUFDO3dCQUVqQyxTQUFTOzRCQUNMLFNBQVMsQ0FBQyxNQUFNLENBQ1osT0FBTyxFQUNQLHNCQUFzQixFQUN0QixNQUFNLENBQUMsV0FBVyxDQUFDLENBQ3RCLENBQUM7d0JBRU4sSUFBSSxTQUFTLElBQUksT0FBTyxJQUFJLFNBQVMsSUFBSSxTQUFTLEVBQUU7NEJBQ2hELFNBQVMsQ0FBQyxNQUFNLENBQ1osU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQzNCLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLElBQUksWUFBWSxFQUNyQyxLQUFLLEVBQ0wsR0FBRyxJQUFJLENBQ1YsQ0FBQzt5QkFDTDt3QkFFRCxZQUFZLEdBQUcsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQztvQkFDakQsQ0FBQztpQkFDSixDQUFDLENBQUM7WUFDUCxDQUFDO1NBQ0osQ0FBQyxDQUFDO0lBQ1AsQ0FBQyxDQUFDO0FBQ04sQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEdBQW9CLEVBQUUsU0FBaUI7SUFDNUQsT0FBTyxxQkFBcUIsTUFBTSxDQUM5QixHQUFHLENBQ04sd0JBQXdCLFNBQVMsaUNBQWlDLENBQUM7QUFDeEUsQ0FBQztBQUVELFNBQVMsZUFBZSxDQUFDLEdBQW9CLEVBQUUsU0FBaUI7SUFDNUQsT0FBTywyQkFBMkIsTUFBTSxDQUNwQyxHQUFHLENBQ04sT0FBTyxTQUFTLGdEQUFnRCxDQUFDO0FBQ3RFLENBQUM7QUFFRCxTQUFTLHNCQUFzQixDQUFDLEdBQW9CLEVBQUUsU0FBaUI7SUFDbkUsT0FBTyw2Q0FBNkMsTUFBTSxDQUN0RCxHQUFHLENBQ04sT0FBTyxTQUFTLGlDQUFpQyxDQUFDO0FBQ3ZELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge3R1aUFzc2VydH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jbGFzc2VzJztcbmltcG9ydCB7VHVpQm9vbGVhbkhhbmRsZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvdHlwZXMnO1xuXG4vKipcbiAqIERlY29yYXRvciBmb3IgY2hlY2tpbmcgaW5wdXQgdmFsdWVzIGZvciB1bmRlZmluZWQuIFlvdSBjYW4gYWxzbyBwYXNzXG4gKiBvcHRpb25hbCBhc3NlcnRpb24gdG8gY2hlY2sgaW5wdXQgYWdhaW5zdC5cbiAqXG4gKiBDQVVUSU9OOiBUaGlzIGRlY29yYXRvciBvdmVyd3JpdGVzIG90aGVyIGdldHRlcnMgYW5kIHNldHRlcnMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0dWlEZWZhdWx0UHJvcDxUIGV4dGVuZHMgUmVjb3JkPHN0cmluZywgYW55PiwgSyBleHRlbmRzIGtleW9mIFQ+KFxuICAgIGFzc2VydGlvbj86IFR1aUJvb2xlYW5IYW5kbGVyPFRbS10+LFxuICAgIC4uLmFyZ3M6IHVua25vd25bXVxuKTogUHJvcGVydHlEZWNvcmF0b3Ige1xuICAgIHJldHVybiAodGFyZ2V0LCBrZXkpID0+IHtcbiAgICAgICAgY29uc3Qge25hbWV9ID0gdGFyZ2V0LmNvbnN0cnVjdG9yO1xuICAgICAgICBjb25zdCBlcnJvckdldERlZmF1bHRNZXNzYWdlID0gbmdEZXZNb2RlICYmIGVycm9yR2V0RGVmYXVsdChrZXksIG5hbWUpO1xuICAgICAgICBjb25zdCBlcnJvclNldERlZmF1bHRNZXNzYWdlID0gbmdEZXZNb2RlICYmIGVycm9yU2V0RGVmYXVsdChrZXksIG5hbWUpO1xuXG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwge1xuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0KCk6IHVuZGVmaW5lZCB7XG4gICAgICAgICAgICAgICAgbmdEZXZNb2RlICYmIHR1aUFzc2VydC5hc3NlcnQoZmFsc2UsIGVycm9yR2V0RGVmYXVsdE1lc3NhZ2UpO1xuXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodGhpczogVCwgaW5pdGlhbFZhbHVlOiBUW0tdKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaXNWYWxpZCA9IGluaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IG5nRGV2TW9kZSAmJiBlcnJvclNldERlZmF1bHRJbml0aWFsKGtleSwgbmFtZSk7XG4gICAgICAgICAgICAgICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcblxuICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJiB0dWlBc3NlcnQuYXNzZXJ0KGlzVmFsaWQsIGVycm9yTWVzc2FnZSk7XG5cbiAgICAgICAgICAgICAgICBpZiAobmdEZXZNb2RlICYmIGlzVmFsaWQgJiYgYXNzZXJ0aW9uICYmIHR1aUFzc2VydCkge1xuICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgYXNzZXJ0aW9uLmNhbGwodGhpcywgaW5pdGlhbFZhbHVlKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGAke1N0cmluZyhrZXkpfSBpbiAke25hbWV9IHJlY2VpdmVkOmAsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBrZXksIHtcbiAgICAgICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBnZXQoKTogVFtLXSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICBzZXQodGhpczogVCwgdmFsdWU6IFRbS10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGlzVmFsaWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYmFja3VwVmFsdWUgPSBpbml0aWFsVmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG5nRGV2TW9kZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR1aUFzc2VydC5hc3NlcnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yU2V0RGVmYXVsdE1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0cmluZyhiYWNrdXBWYWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5nRGV2TW9kZSAmJiBpc1ZhbGlkICYmIGFzc2VydGlvbiAmJiB0dWlBc3NlcnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0dWlBc3NlcnQuYXNzZXJ0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhc3NlcnRpb24uY2FsbCh0aGlzLCB2YWx1ZSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke1N0cmluZyhrZXkpfSBpbiAke25hbWV9IHJlY2VpdmVkOmAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGlzVmFsaWQgPyB2YWx1ZSA6IGJhY2t1cFZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZXJyb3JHZXREZWZhdWx0KGtleTogc3RyaW5nIHwgc3ltYm9sLCBjb21wb25lbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGBEZWZhdWx0IHZhbHVlIGZvciAke1N0cmluZyhcbiAgICAgICAga2V5LFxuICAgICl9IHdhcyBub3QgcHJvdmlkZWQgaW4gJHtjb21wb25lbnR9LCBlcnJvciBpbiBUYWlnYSBVSSBBbmd1bGFyIEtpdGA7XG59XG5cbmZ1bmN0aW9uIGVycm9yU2V0RGVmYXVsdChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgYXMgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB0byAke2NvbXBvbmVudH0sIHdoaWNoIGlzIGludmFsaWQgaW5wdXQsIHVzaW5nIGRlZmF1bHQgdmFsdWU6YDtcbn1cblxuZnVuY3Rpb24gZXJyb3JTZXREZWZhdWx0SW5pdGlhbChrZXk6IHN0cmluZyB8IHN5bWJvbCwgY29tcG9uZW50OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBgVW5kZWZpbmVkIHdhcyBwYXNzZWQgYXMgZGVmYXVsdCB2YWx1ZSBmb3IgJHtTdHJpbmcoXG4gICAgICAgIGtleSxcbiAgICApfSB0byAke2NvbXBvbmVudH0sIGVycm9yIGluIFRhaWdhIFVJIEFuZ3VsYXIgS2l0YDtcbn1cbiJdfQ==