import { __awaiter } from "tslib";
import { isPlatformServer } from '@angular/common';
import { Inject, Injectable, PLATFORM_ID } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { defer, from } from 'rxjs';
import { fromFetch } from 'rxjs/fetch';
import { shareReplay, switchMap } from 'rxjs/operators';
import * as i0 from "@angular/core";
export class TuiStaticRequestService {
    constructor(win, platformId) {
        this.win = win;
        this.platformId = platformId;
        this.cache = new Map();
    }
    request(url) {
        const cache = this.cache.get(url);
        if (cache) {
            return cache;
        }
        const response$ = `AbortController` in this.win || isPlatformServer(this.platformId)
            ? fromFetch(url)
            : /**
               * Fallback for Firefox 55 and 56
               * TODO: drop after browser support bump
               */
                defer(() => from(fetch(url)));
        const piped = response$.pipe(switchMap((res) => __awaiter(this, void 0, void 0, function* () { return res.text(); })), shareReplay({ bufferSize: 1, refCount: false }));
        this.cache.set(url, piped);
        return piped;
    }
}
TuiStaticRequestService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStaticRequestService, deps: [{ token: WINDOW }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Injectable });
TuiStaticRequestService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStaticRequestService, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiStaticRequestService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: `root`,
                }]
        }], ctorParameters: function () { return [{ type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGljLXJlcXVlc3Quc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9zZXJ2aWNlcy9zdGF0aWMtcmVxdWVzdC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsZ0JBQWdCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRCxPQUFPLEVBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDOUQsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQzNDLE9BQU8sRUFBQyxLQUFLLEVBQUUsSUFBSSxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFDckMsT0FBTyxFQUFDLFdBQVcsRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFLdEQsTUFBTSxPQUFPLHVCQUF1QjtJQUdoQyxZQUNxQyxHQUFXLEVBQ04sVUFBbUM7UUFEeEMsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUNOLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBSjVELFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBOEIsQ0FBQztJQUs1RCxDQUFDO0lBRUosT0FBTyxDQUFDLEdBQVc7UUFDZixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQyxJQUFJLEtBQUssRUFBRTtZQUNQLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO1FBRUQsTUFBTSxTQUFTLEdBQ1gsaUJBQWlCLElBQUksSUFBSSxDQUFDLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDO1lBQzlELENBQUMsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQ2hCLENBQUMsQ0FBQzs7O2lCQUdHO2dCQUNILEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUV4QyxNQUFNLEtBQUssR0FBRyxTQUFTLENBQUMsSUFBSSxDQUN4QixTQUFTLENBQUMsQ0FBTSxHQUFHLEVBQUMsRUFBRSxnREFBQyxPQUFBLEdBQUcsQ0FBQyxJQUFJLEVBQUUsQ0FBQSxHQUFBLENBQUMsRUFDbEMsV0FBVyxDQUFDLEVBQUMsVUFBVSxFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FDaEQsQ0FBQztRQUVGLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUUzQixPQUFPLEtBQUssQ0FBQztJQUNqQixDQUFDOztxSEFoQ1EsdUJBQXVCLGtCQUlwQixNQUFNLGFBQ04sV0FBVzt5SEFMZCx1QkFBdUIsY0FGcEIsTUFBTTs0RkFFVCx1QkFBdUI7a0JBSG5DLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzBEQUs2QyxNQUFNOzBCQUEzQyxNQUFNOzJCQUFDLE1BQU07OzBCQUNiLE1BQU07MkJBQUMsV0FBVyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7aXNQbGF0Zm9ybVNlcnZlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlLCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1dJTkRPV30gZnJvbSAnQG5nLXdlYi1hcGlzL2NvbW1vbic7XG5pbXBvcnQge2RlZmVyLCBmcm9tLCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZnJvbUZldGNofSBmcm9tICdyeGpzL2ZldGNoJztcbmltcG9ydCB7c2hhcmVSZXBsYXksIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogYHJvb3RgLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlTdGF0aWNSZXF1ZXN0U2VydmljZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBjYWNoZSA9IG5ldyBNYXA8c3RyaW5nLCBPYnNlcnZhYmxlPHN0cmluZz4+KCk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChXSU5ET1cpIHByaXZhdGUgcmVhZG9ubHkgd2luOiBXaW5kb3csXG4gICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByaXZhdGUgcmVhZG9ubHkgcGxhdGZvcm1JZDogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gICAgKSB7fVxuXG4gICAgcmVxdWVzdCh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgICAgIGNvbnN0IGNhY2hlID0gdGhpcy5jYWNoZS5nZXQodXJsKTtcblxuICAgICAgICBpZiAoY2FjaGUpIHtcbiAgICAgICAgICAgIHJldHVybiBjYWNoZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlJCA9XG4gICAgICAgICAgICBgQWJvcnRDb250cm9sbGVyYCBpbiB0aGlzLndpbiB8fCBpc1BsYXRmb3JtU2VydmVyKHRoaXMucGxhdGZvcm1JZClcbiAgICAgICAgICAgICAgICA/IGZyb21GZXRjaCh1cmwpXG4gICAgICAgICAgICAgICAgOiAvKipcbiAgICAgICAgICAgICAgICAgICAqIEZhbGxiYWNrIGZvciBGaXJlZm94IDU1IGFuZCA1NlxuICAgICAgICAgICAgICAgICAgICogVE9ETzogZHJvcCBhZnRlciBicm93c2VyIHN1cHBvcnQgYnVtcFxuICAgICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgICBkZWZlcigoKSA9PiBmcm9tKGZldGNoKHVybCkpKTtcblxuICAgICAgICBjb25zdCBwaXBlZCA9IHJlc3BvbnNlJC5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKGFzeW5jIHJlcyA9PiByZXMudGV4dCgpKSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogZmFsc2V9KSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLmNhY2hlLnNldCh1cmwsIHBpcGVkKTtcblxuICAgICAgICByZXR1cm4gcGlwZWQ7XG4gICAgfVxufVxuIl19