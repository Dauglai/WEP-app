import { ChangeDetectionStrategy, Component, Inject, InjectionToken } from '@angular/core';
import { Title } from '@angular/platform-browser';
import { HISTORY } from '@ng-web-apis/common';
import { TUI_PARENT_ANIMATION } from '@taiga-ui/cdk/constants';
import { TUI_DIALOGS } from '@taiga-ui/cdk/tokens';
import { combineLatest, of } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@taiga-ui/cdk/directives/focus-trap";
import * as i3 from "@taiga-ui/cdk/directives/overscroll";
import * as i4 from "@tinkoff/ng-polymorpheus";
import * as i5 from "@taiga-ui/cdk/directives";
import * as i6 from "rxjs";
import * as i7 from "@angular/platform-browser";
/**
 * Is closing dialog on browser backward navigation enabled
 */
export const TUI_DIALOG_CLOSES_ON_BACK = new InjectionToken('[TUI_DIALOG_CLOSES_ON_BACK]', {
    factory: () => of(false),
});
const FAKE_HISTORY_STATE = { label: 'ignoreMe' };
const isFakeHistoryState = (historyState) => (historyState === null || historyState === void 0 ? void 0 : historyState.label) === FAKE_HISTORY_STATE.label;
export class TuiDialogHostComponent {
    constructor(isDialogClosesOnBack$, dialogsByType, historyRef, titleService) {
        this.isDialogClosesOnBack$ = isDialogClosesOnBack$;
        this.dialogsByType = dialogsByType;
        this.historyRef = historyRef;
        this.titleService = titleService;
        this.dialogs$ = combineLatest(this.dialogsByType).pipe(map(allTypesDialogs => new Array()
            .concat(...allTypesDialogs)
            .sort((a, b) => a.createdAt - b.createdAt)));
    }
    closeLast(dialogs, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack) {
            return;
        }
        const [last] = dialogs.slice(-1);
        if (!last) {
            return;
        }
        if (dialogs.length > 1) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        last.$implicit.complete();
    }
    onDialog({ propertyName }, popupOpened, isDialogClosesOnBack) {
        if (!isDialogClosesOnBack || propertyName !== 'letter-spacing') {
            return;
        }
        if (popupOpened) {
            this.historyRef.pushState(FAKE_HISTORY_STATE, this.titleService.getTitle());
        }
        else if (isFakeHistoryState(this.historyRef.state)) {
            this.historyRef.back();
        }
    }
}
TuiDialogHostComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogHostComponent, deps: [{ token: TUI_DIALOG_CLOSES_ON_BACK }, { token: TUI_DIALOGS }, { token: HISTORY }, { token: Title }], target: i0.ɵɵFactoryTarget.Component });
TuiDialogHostComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.2.17", type: TuiDialogHostComponent, selector: "tui-dialog-host", ngImport: i0, template: "<ng-container *ngIf=\"dialogs$ | async as dialogs\">\n    <section\n        *ngFor=\"let item of dialogs\"\n        tuiFocusTrap\n        tuiScrollRef\n        tuiOverscroll=\"all\"\n        role=\"dialog\"\n        aria-modal=\"true\"\n        class=\"t-dialog\"\n        @tuiParentAnimation\n        [attr.aria-labelledby]=\"item.id\"\n    >\n        <ng-container *polymorpheusOutlet=\"item.component; context: item\"></ng-container>\n    </section>\n    <div\n        *tuiLet=\"isDialogClosesOnBack$ | async as isDialogClosesOnBack\"\n        class=\"t-overlay\"\n        [class.t-overlay_visible]=\"dialogs.length\"\n        (window:popstate)=\"closeLast(dialogs, !!isDialogClosesOnBack)\"\n        (transitionend)=\"onDialog($event, !!dialogs.length, !!isDialogClosesOnBack)\"\n    ></div>\n</ng-container>\n", styles: [":host{position:fixed;left:0;bottom:0;width:100%;height:0}.t-overlay,.t-dialog{position:fixed;top:0;left:0;right:0;bottom:0;display:flex;align-items:flex-start;outline:none;overflow:auto;overflow:overlay}.t-dialog{bottom:auto;height:100%}.t-overlay{height:100%;pointer-events:none;touch-action:none;opacity:0;letter-spacing:normal;transition:opacity var(--tui-duration),letter-spacing .01s;background:rgba(0,0,0,.75);-webkit-backdrop-filter:var(--tui-backdrop, none);backdrop-filter:var(--tui-backdrop, none)}.t-overlay_visible{opacity:1;letter-spacing:1px}.t-dialog:last-of-type{z-index:1}\n"], directives: [{ type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i2.TuiFocusTrapDirective, selector: "[tuiFocusTrap]" }, { type: i3.TuiOverscrollDirective, selector: "[tuiOverscroll]", inputs: ["tuiOverscroll"] }, { type: i4.PolymorpheusOutletDirective, selector: "[polymorpheusOutlet]", inputs: ["polymorpheusOutlet", "polymorpheusOutletContext"] }, { type: i5.TuiLetDirective, selector: "[tuiLet]", inputs: ["tuiLet"] }], pipes: { "async": i1.AsyncPipe }, animations: [TUI_PARENT_ANIMATION], changeDetection: i0.ChangeDetectionStrategy.Default });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDialogHostComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'tui-dialog-host',
                    templateUrl: './dialog-host.template.html',
                    styleUrls: ['./dialog-host.style.less'],
                    // So that we do not force OnPush on custom dialogs
                    // eslint-disable-next-line @angular-eslint/prefer-on-push-component-change-detection
                    changeDetection: ChangeDetectionStrategy.Default,
                    animations: [TUI_PARENT_ANIMATION],
                }]
        }], ctorParameters: function () { return [{ type: i6.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_DIALOG_CLOSES_ON_BACK]
                }] }, { type: Array, decorators: [{
                    type: Inject,
                    args: [TUI_DIALOGS]
                }] }, { type: History, decorators: [{
                    type: Inject,
                    args: [HISTORY]
                }] }, { type: i7.Title, decorators: [{
                    type: Inject,
                    args: [Title]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,