import { __decorate } from "tslib";
import { Directive, EventEmitter, HostBinding, HostListener, Inject, Input, Output, } from '@angular/core';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiPx } from '@taiga-ui/cdk/utils/format';
import { TuiResizeableDirective } from './resizeable.directive';
import * as i0 from "@angular/core";
// TODO: Migrate to PointerEvent in 4.0
export class TuiResizerDirective {
    constructor(resizeable) {
        this.resizeable = resizeable;
        this.tuiResizer = [0, 0];
        this.tuiSizeChange = new EventEmitter();
        this.x = NaN;
        this.y = NaN;
        this.width = 0;
        this.height = 0;
    }
    get cursor() {
        if (!this.tuiResizer[0]) {
            return 'ns-resize';
        }
        if (!this.tuiResizer[1]) {
            return 'ew-resize';
        }
        if (this.tuiResizer[0] * this.tuiResizer[1] > 0) {
            return 'nwse-resize';
        }
        return 'nesw-resize';
    }
    onTouchStart({ touches }) {
        this.onMouseDown(touches[0].clientX, touches[0].clientY);
    }
    onMouseDown(x, y) {
        this.x = x;
        this.y = y;
        this.width = this.resizeable.nativeElement.clientWidth;
        this.height = this.resizeable.nativeElement.clientHeight;
    }
    onMouseMove({ x, y, buttons }) {
        if (!buttons) {
            this.onMouseUp();
        }
        else {
            this.onMove(x, y);
        }
    }
    onTouchMove({ touches }) {
        this.onMove(touches[0].clientX, touches[0].clientY);
    }
    onMouseUp() {
        this.x = NaN;
    }
    onMove(x, y) {
        if (Number.isNaN(this.x)) {
            return;
        }
        const { style } = this.resizeable.nativeElement;
        const size = [
            this.width + this.tuiResizer[0] * (x - this.x),
            this.height + this.tuiResizer[1] * (y - this.y),
        ];
        if (this.tuiResizer[0]) {
            style.width = tuiPx(size[0]);
        }
        if (this.tuiResizer[1]) {
            style.height = tuiPx(size[1]);
        }
        this.tuiSizeChange.emit(size);
    }
}
TuiResizerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerDirective, deps: [{ token: TuiResizeableDirective }], target: i0.ɵɵFactoryTarget.Directive });
TuiResizerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiResizerDirective, selector: "[tuiResizer]", inputs: { tuiResizer: "tuiResizer" }, outputs: { tuiSizeChange: "tuiSizeChange" }, host: { listeners: { "touchstart.silent.passive": "onTouchStart($event)", "mousedown.silent.prevent": "onMouseDown($event.x,$event.y)", "document:mousemove.silent": "onMouseMove($event)", "document:touchmove.silent": "onTouchMove($event)", "document:mouseup.silent": "onMouseUp()", "document:touchend.silent": "onMouseUp()" }, properties: { "style.touchAction": "\"none\"", "style.cursor": "this.cursor" } }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiResizerDirective.prototype, "tuiResizer", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiResizerDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiResizer]',
                    host: { '[style.touchAction]': '"none"' },
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [TuiResizeableDirective]
                }] }]; }, propDecorators: { tuiResizer: [{
                type: Input
            }], tuiSizeChange: [{
                type: Output
            }], cursor: [{
                type: HostBinding,
                args: ['style.cursor']
            }], onTouchStart: [{
                type: HostListener,
                args: ['touchstart.silent.passive', ['$event']]
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown.silent.prevent', ['$event.x', '$event.y']]
            }], onMouseMove: [{
                type: HostListener,
                args: ['document:mousemove.silent', ['$event']]
            }], onTouchMove: [{
                type: HostListener,
                args: ['document:touchmove.silent', ['$event']]
            }], onMouseUp: [{
                type: HostListener,
                args: ['document:mouseup.silent']
            }, {
                type: HostListener,
                args: ['document:touchend.silent']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9yZXNpemVyL3Jlc2l6ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUVULFlBQVksRUFDWixXQUFXLEVBQ1gsWUFBWSxFQUNaLE1BQU0sRUFDTixLQUFLLEVBQ0wsTUFBTSxHQUNULE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sNEJBQTRCLENBQUM7QUFFakQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7O0FBRTlELHVDQUF1QztBQUt2QyxNQUFNLE9BQU8sbUJBQW1CO0lBYTVCLFlBRXFCLFVBQW1DO1FBQW5DLGVBQVUsR0FBVixVQUFVLENBQXlCO1FBWnhELGVBQVUsR0FBb0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFHNUMsa0JBQWEsR0FBRyxJQUFJLFlBQVksRUFBbUMsQ0FBQztRQUU3RSxNQUFDLEdBQUcsR0FBRyxDQUFDO1FBQ1IsTUFBQyxHQUFHLEdBQUcsQ0FBQztRQUNSLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixXQUFNLEdBQUcsQ0FBQyxDQUFDO0lBS1IsQ0FBQztJQUVKLElBQ0ksTUFBTTtRQUNOLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3JCLE9BQU8sV0FBVyxDQUFDO1NBQ3RCO1FBRUQsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDckIsT0FBTyxXQUFXLENBQUM7U0FDdEI7UUFFRCxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLEdBQUcsSUFBSSxDQUFDLFVB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V0FBVzt1QkFBQyxjQUFjO2dCQWtCM0IsWUFBWTtzQkFEWCxZQUFZO3VCQUFDLDJCQUEyQixFQUFFLENBQUMsUUFBUSxDQUFDO2dCQU1yRCxXQUFXO3NCQURWLFlBQVk7dUJBQUMsMEJBQTBCLEVBQUUsQ0FBQyxVQUFVLEVBQUUsVUFBVSxDQUFDO2dCQVNsRSxXQUFXO3NCQURWLFlBQVk7dUJBQUMsMkJBQTJCLEVBQUUsQ0FBQyxRQUFRLENBQUM7Z0JBVXJELFdBQVc7c0JBRFYsWUFBWTt1QkFBQywyQkFBMkIsRUFBRSxDQUFDLFFBQVEsQ0FBQztnQkFPckQsU0FBUztzQkFGUixZQUFZO3VCQUFDLHlCQUF5Qjs7c0JBQ3RDLFlBQVk7dUJBQUMsMEJBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtcbiAgICBEaXJlY3RpdmUsXG4gICAgRWxlbWVudFJlZixcbiAgICBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdEJpbmRpbmcsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEluamVjdCxcbiAgICBJbnB1dCxcbiAgICBPdXRwdXQsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlEZWZhdWx0UHJvcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzJztcbmltcG9ydCB7dHVpUHh9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvZm9ybWF0JztcblxuaW1wb3J0IHtUdWlSZXNpemVhYmxlRGlyZWN0aXZlfSBmcm9tICcuL3Jlc2l6ZWFibGUuZGlyZWN0aXZlJztcblxuLy8gVE9ETzogTWlncmF0ZSB0byBQb2ludGVyRXZlbnQgaW4gNC4wXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlSZXNpemVyXScsXG4gICAgaG9zdDogeydbc3R5bGUudG91Y2hBY3Rpb25dJzogJ1wibm9uZVwiJ30sXG59KVxuZXhwb3J0IGNsYXNzIFR1aVJlc2l6ZXJEaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICB0dWlSZXNpemVyOiByZWFkb25seSBbeDogbnVtYmVyLCB5OiBudW1iZXJdID0gWzAsIDBdO1xuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpU2l6ZUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8cmVhZG9ubHkgW3g6IG51bWJlciwgeTogbnVtYmVyXT4oKTtcblxuICAgIHggPSBOYU47XG4gICAgeSA9IE5hTjtcbiAgICB3aWR0aCA9IDA7XG4gICAgaGVpZ2h0ID0gMDtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KFR1aVJlc2l6ZWFibGVEaXJlY3RpdmUpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcmVzaXplYWJsZTogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sXG4gICAgKSB7fVxuXG4gICAgQEhvc3RCaW5kaW5nKCdzdHlsZS5jdXJzb3InKVxuICAgIGdldCBjdXJzb3IoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKCF0aGlzLnR1aVJlc2l6ZXJbMF0pIHtcbiAgICAgICAgICAgIHJldHVybiAnbnMtcmVzaXplJztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy50dWlSZXNpemVyWzFdKSB7XG4gICAgICAgICAgICByZXR1cm4gJ2V3LXJlc2l6ZSc7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50dWlSZXNpemVyWzBdICogdGhpcy50dWlSZXNpemVyWzFdID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuICdud3NlLXJlc2l6ZSc7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJ25lc3ctcmVzaXplJztcbiAgICB9XG5cbiAgICBASG9zdExpc3RlbmVyKCd0b3VjaHN0YXJ0LnNpbGVudC5wYXNzaXZlJywgWyckZXZlbnQnXSlcbiAgICBvblRvdWNoU3RhcnQoe3RvdWNoZXN9OiBUb3VjaEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMub25Nb3VzZURvd24odG91Y2hlc1swXS5jbGllbnRYLCB0b3VjaGVzWzBdLmNsaWVudFkpO1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ21vdXNlZG93bi5zaWxlbnQucHJldmVudCcsIFsnJGV2ZW50LngnLCAnJGV2ZW50LnknXSlcbiAgICBvbk1vdXNlRG93bih4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgICAgICB0aGlzLnggPSB4O1xuICAgICAgICB0aGlzLnkgPSB5O1xuICAgICAgICB0aGlzLndpZHRoID0gdGhpcy5yZXNpemVhYmxlLm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgIHRoaXMuaGVpZ2h0ID0gdGhpcy5yZXNpemVhYmxlLm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50Om1vdXNlbW92ZS5zaWxlbnQnLCBbJyRldmVudCddKVxuICAgIG9uTW91c2VNb3ZlKHt4LCB5LCBidXR0b25zfTogTW91c2VFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoIWJ1dHRvbnMpIHtcbiAgICAgICAgICAgIHRoaXMub25Nb3VzZVVwKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm9uTW92ZSh4LCB5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OnRvdWNobW92ZS5zaWxlbnQnLCBbJyRldmVudCddKVxuICAgIG9uVG91Y2hNb3ZlKHt0b3VjaGVzfTogVG91Y2hFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLm9uTW92ZSh0b3VjaGVzWzBdLmNsaWVudFgsIHRvdWNoZXNbMF0uY2xpZW50WSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignZG9jdW1lbnQ6bW91c2V1cC5zaWxlbnQnKVxuICAgIEBIb3N0TGlzdGVuZXIoJ2RvY3VtZW50OnRvdWNoZW5kLnNpbGVudCcpXG4gICAgb25Nb3VzZVVwKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnggPSBOYU47XG4gICAgfVxuXG4gICAgb25Nb3ZlKHg6IG51bWJlciwgeTogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmIChOdW1iZXIuaXNOYU4odGhpcy54KSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qge3N0eWxlfSA9IHRoaXMucmVzaXplYWJsZS5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBzaXplID0gW1xuICAgICAgICAgICAgdGhpcy53aWR0aCArIHRoaXMudHVpUmVzaXplclswXSAqICh4IC0gdGhpcy54KSxcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ICsgdGhpcy50dWlSZXNpemVyWzFdICogKHkgLSB0aGlzLnkpLFxuICAgICAgICBdIGFzIGNvbnN0O1xuXG4gICAgICAgIGlmICh0aGlzLnR1aVJlc2l6ZXJbMF0pIHtcbiAgICAgICAgICAgIHN0eWxlLndpZHRoID0gdHVpUHgoc2l6ZVswXSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50dWlSZXNpemVyWzFdKSB7XG4gICAgICAgICAgICBzdHlsZS5oZWlnaHQgPSB0dWlQeChzaXplWzFdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudHVpU2l6ZUNoYW5nZS5lbWl0KHNpemUpO1xuICAgIH1cbn1cbiJdfQ==