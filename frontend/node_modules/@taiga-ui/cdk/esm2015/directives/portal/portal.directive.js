import { Directive, Inject, Input, TemplateRef, } from '@angular/core';
import { TuiDropdownPortalService } from '@taiga-ui/cdk/components/dropdown-host';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/components/dropdown-host";
export class TuiPortalDirective {
    constructor(templateRef, portalService) {
        this.templateRef = templateRef;
        this.portalService = portalService;
    }
    set tuiPortal(show) {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
        if (show) {
            this.viewRef = this.portalService.addTemplate(this.templateRef);
        }
    }
    ngOnDestroy() {
        var _a;
        (_a = this.viewRef) === null || _a === void 0 ? void 0 : _a.destroy();
    }
}
TuiPortalDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPortalDirective, deps: [{ token: TemplateRef }, { token: TuiDropdownPortalService }], target: i0.ɵɵFactoryTarget.Directive });
TuiPortalDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPortalDirective, selector: "[tuiPortal]", inputs: { tuiPortal: "tuiPortal" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPortalDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiPortal]',
                }]
        }], ctorParameters: function () { return [{ type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }, { type: i1.TuiDropdownPortalService, decorators: [{
                    type: Inject,
                    args: [TuiDropdownPortalService]
                }] }]; }, propDecorators: { tuiPortal: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicG9ydGFsLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL3BvcnRhbC9wb3J0YWwuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBRVQsTUFBTSxFQUNOLEtBQUssRUFFTCxXQUFXLEdBQ2QsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sd0NBQXdDLENBQUM7OztBQUtoRixNQUFNLE9BQU8sa0JBQWtCO0lBWTNCLFlBRXFCLFdBQWlELEVBRWpELGFBQXVDO1FBRnZDLGdCQUFXLEdBQVgsV0FBVyxDQUFzQztRQUVqRCxrQkFBYSxHQUFiLGFBQWEsQ0FBMEI7SUFDekQsQ0FBQztJQWRKLElBQ0ksU0FBUyxDQUFDLElBQWE7O1FBQ3ZCLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsT0FBTyxFQUFFLENBQUM7UUFFeEIsSUFBSSxJQUFJLEVBQUU7WUFDTixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNuRTtJQUNMLENBQUM7SUFTRCxXQUFXOztRQUNQLE1BQUEsSUFBSSxDQUFDLE9BQU8sMENBQUUsT0FBTyxFQUFFLENBQUM7SUFDNUIsQ0FBQzs7Z0hBckJRLGtCQUFrQixrQkFhZixXQUFXLGFBRVgsd0JBQXdCO29HQWYzQixrQkFBa0I7NEZBQWxCLGtCQUFrQjtrQkFIOUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsYUFBYTtpQkFDMUI7OzBCQWNRLE1BQU07MkJBQUMsV0FBVzs7MEJBRWxCLE1BQU07MkJBQUMsd0JBQXdCOzRDQVhoQyxTQUFTO3NCQURaLEtBQUsiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbWJlZGRlZFZpZXdSZWYsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE9uRGVzdHJveSxcbiAgICBUZW1wbGF0ZVJlZixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1R1aURyb3Bkb3duUG9ydGFsU2VydmljZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb21wb25lbnRzL2Ryb3Bkb3duLWhvc3QnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlQb3J0YWxdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpUG9ydGFsRGlyZWN0aXZlIGltcGxlbWVudHMgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHZpZXdSZWY/OiBFbWJlZGRlZFZpZXdSZWY8dW5rbm93bj47XG5cbiAgICBASW5wdXQoKVxuICAgIHNldCB0dWlQb3J0YWwoc2hvdzogYm9vbGVhbikge1xuICAgICAgICB0aGlzLnZpZXdSZWY/LmRlc3Ryb3koKTtcblxuICAgICAgICBpZiAoc2hvdykge1xuICAgICAgICAgICAgdGhpcy52aWV3UmVmID0gdGhpcy5wb3J0YWxTZXJ2aWNlLmFkZFRlbXBsYXRlKHRoaXMudGVtcGxhdGVSZWYpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFJlY29yZDxzdHJpbmcsIHVua25vd24+PixcbiAgICAgICAgQEluamVjdChUdWlEcm9wZG93blBvcnRhbFNlcnZpY2UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgcG9ydGFsU2VydmljZTogVHVpRHJvcGRvd25Qb3J0YWxTZXJ2aWNlLFxuICAgICkge31cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnZpZXdSZWY/LmRlc3Ryb3koKTtcbiAgICB9XG59XG4iXX0=