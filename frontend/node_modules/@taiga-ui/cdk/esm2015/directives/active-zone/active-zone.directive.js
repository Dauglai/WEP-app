import { __decorate } from "tslib";
import { Directive, ElementRef, Inject, Input, NgZone, Optional, Output, SkipSelf, } from '@angular/core';
import { tuiDefaultProp, tuiPure } from '@taiga-ui/cdk/decorators';
import { tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { TUI_ACTIVE_ELEMENT } from '@taiga-ui/cdk/tokens';
import { tuiArrayRemove } from '@taiga-ui/cdk/utils';
import { distinctUntilChanged, map, skip, startWith } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
export class TuiActiveZoneDirective {
    constructor(active$, ngZone, el, directParentActiveZone) {
        this.active$ = active$;
        this.ngZone = ngZone;
        this.el = el;
        this.directParentActiveZone = directParentActiveZone;
        this.subActiveZones = [];
        this.tuiActiveZoneParent = null;
        this.tuiActiveZoneChange = this.active$.pipe(map(element => !!element && this.contains(element)), startWith(false), distinctUntilChanged(), skip(1), tuiZoneOptimized(this.ngZone));
        if (this.directParentActiveZone) {
            this.directParentActiveZone.addSubActiveZone(this);
        }
    }
    set tuiActiveZoneParentSetter(zone) {
        this.setZone(zone);
    }
    ngOnDestroy() {
        if (this.directParentActiveZone) {
            this.directParentActiveZone.removeSubActiveZone(this);
        }
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
    }
    contains(node) {
        return (this.el.nativeElement.contains(node) ||
            this.subActiveZones.some((item, index, array) => array.indexOf(item) === index && item.contains(node)));
    }
    setZone(zone) {
        if (this.tuiActiveZoneParent) {
            this.tuiActiveZoneParent.removeSubActiveZone(this);
        }
        if (zone) {
            zone.addSubActiveZone(this);
        }
        this.tuiActiveZoneParent = zone;
    }
    addSubActiveZone(activeZone) {
        this.subActiveZones = [...this.subActiveZones, activeZone];
    }
    removeSubActiveZone(activeZone) {
        this.subActiveZones = tuiArrayRemove(this.subActiveZones, this.subActiveZones.indexOf(activeZone));
    }
}
TuiActiveZoneDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneDirective, deps: [{ token: TUI_ACTIVE_ELEMENT }, { token: NgZone }, { token: ElementRef }, { token: TuiActiveZoneDirective, optional: true, skipSelf: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiActiveZoneDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiActiveZoneDirective, selector: "[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)", inputs: { tuiActiveZoneParentSetter: ["tuiActiveZoneParent", "tuiActiveZoneParentSetter"] }, outputs: { tuiActiveZoneChange: "tuiActiveZoneChange" }, exportAs: ["tuiActiveZone"], ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiActiveZoneDirective.prototype, "tuiActiveZoneParentSetter", null);
__decorate([
    tuiPure
], TuiActiveZoneDirective.prototype, "setZone", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiActiveZoneDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)',
                    exportAs: 'tuiActiveZone',
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [TUI_ACTIVE_ELEMENT]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: TuiActiveZoneDirective, decorators: [{
                    type: Optional
                }, {
                    type: SkipSelf
                }, {
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }]; }, propDecorators: { tuiActiveZoneParentSetter: [{
                type: Input,
                args: ['tuiActiveZoneParent']
            }], tuiActiveZoneChange: [{
                type: Output
            }], setZone: [] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWN0aXZlLXpvbmUuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvYWN0aXZlLXpvbmUvYWN0aXZlLXpvbmUuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQ0gsU0FBUyxFQUNULFVBQVUsRUFDVixNQUFNLEVBQ04sS0FBSyxFQUNMLE1BQU0sRUFFTixRQUFRLEVBQ1IsTUFBTSxFQUNOLFFBQVEsR0FDWCxNQUFNLGVBQWUsQ0FBQztBQUN2QixPQUFPLEVBQUMsY0FBYyxFQUFFLE9BQU8sRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxnQkFBZ0IsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzNELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBQ3hELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUVuRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7O0FBTzFFLE1BQU0sT0FBTyxzQkFBc0I7SUFvQi9CLFlBRXFCLE9BQW1DLEVBQ25CLE1BQWMsRUFDVixFQUF1QixFQUkzQyxzQkFBcUQ7UUFOckQsWUFBTyxHQUFQLE9BQU8sQ0FBNEI7UUFDbkIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUNWLE9BQUUsR0FBRixFQUFFLENBQXFCO1FBSTNDLDJCQUFzQixHQUF0QixzQkFBc0IsQ0FBK0I7UUEzQmxFLG1CQUFjLEdBQXNDLEVBQUUsQ0FBQztRQUV2RCx3QkFBbUIsR0FBa0MsSUFBSSxDQUFDO1FBU3pELHdCQUFtQixHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUM1QyxHQUFHLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsRUFDbkQsU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUNoQixvQkFBb0IsRUFBRSxFQUN0QixJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUNoQyxDQUFDO1FBWUUsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDN0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3REO0lBQ0wsQ0FBQztJQTFCRCxJQUFJLHlCQUF5QixDQUFDLElBQW1DO1FBQzdELElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQTBCRCxXQUFXO1FBQ1AsSUFBSSxJQUFJLENBQUMsc0JBQXNCLEVBQUU7WUFDN0IsSUFBSSxDQUFDLHNCQUFzQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3pEO1FBRUQsSUFBSSxJQUFJLENBQUMsbUJBQW1CLEVBQUU7WUFDMUIsSUFBSSxDQUFDLG1CQUFtQixDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQ3REO0lBQ0wsQ0FBQztJQUVELFFBQVEsQ0FBQyxJQUFVO1FBQ2YsT0FBTyxDQUNILElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDcEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQ3BCLENBQUMsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRSxDQUNuQixLQUFLLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLEtBQUssSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUMzRCxDQUNKLENBQUM7SUFDTixDQUFDO0lBR08sT0FBTyxDQUFDLElBQW1DO1FBQy9DLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO1lBQzFCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztTQUN0RDtRQUVELElBQUksSUFBSSxFQUFFO1lBQ04sSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxDQUFDO1NBQy9CO1FBRUQsSUFBSSxDQUFDLG1CQUFtQixHQUFHLElBQUksQ0FBQztJQUNwQyxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsVUFBa0M7UUFDdkQsSUFBSSxDQUFDLGNBQWMsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLGNBQWMsRUFBRSxVQUFVLENBQUMsQ0FBQztJQUMvRCxDQUFDO0lBRU8sbUJBQW1CLENBQUMsVUFBa0M7UUFDMUQsSUFBSSxDQUFDLGNBQWMsR0FBRyxjQUFjLENBQ2hDLElBQUksQ0FBQyxjQUFjLEVBQ25CLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUMxQyxDQUFDO0lBQ04sQ0FBQzs7b0hBN0VRLHNCQUFzQixrQkFxQm5CLGtCQUFrQixhQUVsQixNQUFNLGFBQ04sVUFBVSxhQUdWLHNCQUFzQjt3R0EzQnpCLHNCQUFzQjtBQU8vQjtJQURDLGNBQWMsRUFBRTt1RUFHaEI7QUErQ0Q7SUFEQyxPQUFPO3FEQVdQOzRGQWxFUSxzQkFBc0I7a0JBTGxDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUNKLHFIQUFxSDtvQkFDekgsUUFBUSxFQUFFLGVBQWU7aUJBQzVCOzswQkFzQlEsTUFBTTsyQkFBQyxrQkFBa0I7OzBCQUV6QixNQUFNOzJCQUFDLE1BQU07OzBCQUNiLE1BQU07MkJBQUMsVUFBVTs4QkFJdUIsc0JBQXNCOzBCQUg5RCxRQUFROzswQkFDUixRQUFROzswQkFDUixNQUFNOzJCQUFDLHNCQUFzQjs0Q0FwQjlCLHlCQUF5QjtzQkFGNUIsS0FBSzt1QkFBQyxxQkFBcUI7Z0JBT25CLG1CQUFtQjtzQkFEM0IsTUFBTTtnQkE2Q0MsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgRGlyZWN0aXZlLFxuICAgIEVsZW1lbnRSZWYsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE5nWm9uZSxcbiAgICBPbkRlc3Ryb3ksXG4gICAgT3B0aW9uYWwsXG4gICAgT3V0cHV0LFxuICAgIFNraXBTZWxmLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpRGVmYXVsdFByb3AsIHR1aVB1cmV9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGVjb3JhdG9ycyc7XG5pbXBvcnQge3R1aVpvbmVPcHRpbWl6ZWR9IGZyb20gJ0B0YWlnYS11aS9jZGsvb2JzZXJ2YWJsZXMnO1xuaW1wb3J0IHtUVUlfQUNUSVZFX0VMRU1FTlR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdG9rZW5zJztcbmltcG9ydCB7dHVpQXJyYXlSZW1vdmV9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIG1hcCwgc2tpcCwgc3RhcnRXaXRofSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOlxuICAgICAgICAnW3R1aUFjdGl2ZVpvbmVdOm5vdChuZy1jb250YWluZXIpLCBbdHVpQWN0aXZlWm9uZUNoYW5nZV06bm90KG5nLWNvbnRhaW5lciksIFt0dWlBY3RpdmVab25lUGFyZW50XTpub3QobmctY29udGFpbmVyKScsXG4gICAgZXhwb3J0QXM6ICd0dWlBY3RpdmVab25lJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBzdWJBY3RpdmVab25lczogcmVhZG9ubHkgVHVpQWN0aXZlWm9uZURpcmVjdGl2ZVtdID0gW107XG5cbiAgICBwcml2YXRlIHR1aUFjdGl2ZVpvbmVQYXJlbnQ6IFR1aUFjdGl2ZVpvbmVEaXJlY3RpdmUgfCBudWxsID0gbnVsbDtcblxuICAgIEBJbnB1dCgndHVpQWN0aXZlWm9uZVBhcmVudCcpXG4gICAgQHR1aURlZmF1bHRQcm9wKClcbiAgICBzZXQgdHVpQWN0aXZlWm9uZVBhcmVudFNldHRlcih6b25lOiBUdWlBY3RpdmVab25lRGlyZWN0aXZlIHwgbnVsbCkge1xuICAgICAgICB0aGlzLnNldFpvbmUoem9uZSk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpQWN0aXZlWm9uZUNoYW5nZSA9IHRoaXMuYWN0aXZlJC5waXBlKFxuICAgICAgICBtYXAoZWxlbWVudCA9PiAhIWVsZW1lbnQgJiYgdGhpcy5jb250YWlucyhlbGVtZW50KSksXG4gICAgICAgIHN0YXJ0V2l0aChmYWxzZSksXG4gICAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICAgIHNraXAoMSksXG4gICAgICAgIHR1aVpvbmVPcHRpbWl6ZWQodGhpcy5uZ1pvbmUpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChUVUlfQUNUSVZFX0VMRU1FTlQpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgYWN0aXZlJDogT2JzZXJ2YWJsZTxFbGVtZW50IHwgbnVsbD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBTa2lwU2VsZigpXG4gICAgICAgIEBJbmplY3QoVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBkaXJlY3RQYXJlbnRBY3RpdmVab25lOiBUdWlBY3RpdmVab25lRGlyZWN0aXZlIHwgbnVsbCxcbiAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0UGFyZW50QWN0aXZlWm9uZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3RQYXJlbnRBY3RpdmVab25lLmFkZFN1YkFjdGl2ZVpvbmUodGhpcyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuZGlyZWN0UGFyZW50QWN0aXZlWm9uZSkge1xuICAgICAgICAgICAgdGhpcy5kaXJlY3RQYXJlbnRBY3RpdmVab25lLnJlbW92ZVN1YkFjdGl2ZVpvbmUodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy50dWlBY3RpdmVab25lUGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLnR1aUFjdGl2ZVpvbmVQYXJlbnQucmVtb3ZlU3ViQWN0aXZlWm9uZSh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnRhaW5zKG5vZGU6IE5vZGUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIHRoaXMuZWwubmF0aXZlRWxlbWVudC5jb250YWlucyhub2RlKSB8fFxuICAgICAgICAgICAgdGhpcy5zdWJBY3RpdmVab25lcy5zb21lKFxuICAgICAgICAgICAgICAgIChpdGVtLCBpbmRleCwgYXJyYXkpID0+XG4gICAgICAgICAgICAgICAgICAgIGFycmF5LmluZGV4T2YoaXRlbSkgPT09IGluZGV4ICYmIGl0ZW0uY29udGFpbnMobm9kZSksXG4gICAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgQHR1aVB1cmVcbiAgICBwcml2YXRlIHNldFpvbmUoem9uZTogVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMudHVpQWN0aXZlWm9uZVBhcmVudCkge1xuICAgICAgICAgICAgdGhpcy50dWlBY3RpdmVab25lUGFyZW50LnJlbW92ZVN1YkFjdGl2ZVpvbmUodGhpcyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoem9uZSkge1xuICAgICAgICAgICAgem9uZS5hZGRTdWJBY3RpdmVab25lKHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy50dWlBY3RpdmVab25lUGFyZW50ID0gem9uZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGFkZFN1YkFjdGl2ZVpvbmUoYWN0aXZlWm9uZTogVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSk6IHZvaWQge1xuICAgICAgICB0aGlzLnN1YkFjdGl2ZVpvbmVzID0gWy4uLnRoaXMuc3ViQWN0aXZlWm9uZXMsIGFjdGl2ZVpvbmVdO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVtb3ZlU3ViQWN0aXZlWm9uZShhY3RpdmVab25lOiBUdWlBY3RpdmVab25lRGlyZWN0aXZlKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3ViQWN0aXZlWm9uZXMgPSB0dWlBcnJheVJlbW92ZShcbiAgICAgICAgICAgIHRoaXMuc3ViQWN0aXZlWm9uZXMsXG4gICAgICAgICAgICB0aGlzLnN1YkFjdGl2ZVpvbmVzLmluZGV4T2YoYWN0aXZlWm9uZSksXG4gICAgICAgICk7XG4gICAgfVxufVxuIl19