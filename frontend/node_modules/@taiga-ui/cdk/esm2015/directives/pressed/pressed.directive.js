import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { tuiPressedObservable } from '@taiga-ui/cdk/observables';
import { TUI_TAKE_ONLY_TRUSTED_EVENTS } from '@taiga-ui/cdk/tokens';
import * as i0 from "@angular/core";
export class TuiPressedDirective {
    constructor(el, takeOnlyTrustedEvents) {
        this.el = el;
        this.takeOnlyTrustedEvents = takeOnlyTrustedEvents;
        this.tuiPressedChange = tuiPressedObservable(this.el.nativeElement, {
            onlyTrusted: this.takeOnlyTrustedEvents,
        });
    }
}
TuiPressedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPressedDirective, deps: [{ token: ElementRef }, { token: TUI_TAKE_ONLY_TRUSTED_EVENTS }], target: i0.ɵɵFactoryTarget.Directive });
TuiPressedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiPressedDirective, selector: "[tuiPressedChange]", outputs: { tuiPressedChange: "tuiPressedChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiPressedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiPressedChange]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_TAKE_ONLY_TRUSTED_EVENTS]
                }] }]; }, propDecorators: { tuiPressedChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlc3NlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9wcmVzc2VkL3ByZXNzZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDL0QsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sc0JBQXNCLENBQUM7O0FBS2xFLE1BQU0sT0FBTyxtQkFBbUI7SUFNNUIsWUFDeUMsRUFBdUIsRUFFM0MscUJBQThCO1FBRlYsT0FBRSxHQUFGLEVBQUUsQ0FBcUI7UUFFM0MsMEJBQXFCLEdBQXJCLHFCQUFxQixDQUFTO1FBUDFDLHFCQUFnQixHQUFHLG9CQUFvQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFO1lBQ3BFLFdBQVcsRUFBRSxJQUFJLENBQUMscUJBQXFCO1NBQzFDLENBQUMsQ0FBQztJQU1BLENBQUM7O2lIQVZLLG1CQUFtQixrQkFPaEIsVUFBVSxhQUNWLDRCQUE0QjtxR0FSL0IsbUJBQW1COzRGQUFuQixtQkFBbUI7a0JBSC9CLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtpQkFDakM7OzBCQVFRLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsNEJBQTRCOzRDQU4vQixnQkFBZ0I7c0JBRHhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlQcmVzc2VkT2JzZXJ2YWJsZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge1RVSV9UQUtFX09OTFlfVFJVU1RFRF9FVkVOVFN9IGZyb20gJ0B0YWlnYS11aS9jZGsvdG9rZW5zJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpUHJlc3NlZENoYW5nZV0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlQcmVzc2VkRGlyZWN0aXZlIHtcbiAgICBAT3V0cHV0KClcbiAgICByZWFkb25seSB0dWlQcmVzc2VkQ2hhbmdlID0gdHVpUHJlc3NlZE9ic2VydmFibGUodGhpcy5lbC5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgIG9ubHlUcnVzdGVkOiB0aGlzLnRha2VPbmx5VHJ1c3RlZEV2ZW50cyxcbiAgICB9KTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoVFVJX1RBS0VfT05MWV9UUlVTVEVEX0VWRU5UUylcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSB0YWtlT25seVRydXN0ZWRFdmVudHM6IGJvb2xlYW4sXG4gICAgKSB7fVxufVxuIl19