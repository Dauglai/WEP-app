import { __decorate } from "tslib";
import { Directive, HostListener, Inject, Input } from '@angular/core';
import { WINDOW } from '@ng-web-apis/common';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { tuiGetSelectedText } from '@taiga-ui/cdk/utils';
import { identity } from 'rxjs';
import * as i0 from "@angular/core";
export class TuiCopyProcessorDirective {
    constructor(win) {
        this.win = win;
        this.tuiCopyProcessor = identity;
    }
    onCopy(event) {
        var _a;
        const text = tuiGetSelectedText(this.win);
        if (text) {
            (_a = event.clipboardData) === null || _a === void 0 ? void 0 : _a.setData('text/plain', this.tuiCopyProcessor(text));
        }
    }
}
TuiCopyProcessorDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCopyProcessorDirective, deps: [{ token: WINDOW }], target: i0.ɵɵFactoryTarget.Directive });
TuiCopyProcessorDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiCopyProcessorDirective, selector: "[tuiCopyProcessor]", inputs: { tuiCopyProcessor: "tuiCopyProcessor" }, host: { listeners: { "copy.prevent": "onCopy($event)" } }, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], TuiCopyProcessorDirective.prototype, "tuiCopyProcessor", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCopyProcessorDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiCopyProcessor]',
                }]
        }], ctorParameters: function () { return [{ type: Window, decorators: [{
                    type: Inject,
                    args: [WINDOW]
                }] }]; }, propDecorators: { tuiCopyProcessor: [{
                type: Input
            }], onCopy: [{
                type: HostListener,
                args: ['copy.prevent', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29weS1wcm9jZXNzb3IuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvY29weS1wcm9jZXNzb3IvY29weS1wcm9jZXNzb3IuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFFeEQsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLE1BQU0sQ0FBQzs7QUFLOUIsTUFBTSxPQUFPLHlCQUF5QjtJQUtsQyxZQUE2QyxHQUFXO1FBQVgsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUZ4RCxxQkFBZ0IsR0FBNkIsUUFBUSxDQUFDO0lBRUssQ0FBQztJQUc1RCxNQUFNLENBQUMsS0FBcUI7O1FBQ3hCLE1BQU0sSUFBSSxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQyxJQUFJLElBQUksRUFBRTtZQUNOLE1BQUEsS0FBSyxDQUFDLGFBQWEsMENBQUUsT0FBTyxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztTQUMzRTtJQUNMLENBQUM7O3VIQWRRLHlCQUF5QixrQkFLZCxNQUFNOzJHQUxqQix5QkFBeUI7QUFHbEM7SUFEQyxjQUFjLEVBQUU7bUVBQ3FDOzRGQUg3Qyx5QkFBeUI7a0JBSHJDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtpQkFDakM7MERBTXFELE1BQU07MEJBQTNDLE1BQU07MkJBQUMsTUFBTTs0Q0FGMUIsZ0JBQWdCO3NCQUZmLEtBQUs7Z0JBT04sTUFBTTtzQkFETCxZQUFZO3VCQUFDLGNBQWMsRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGlyZWN0aXZlLCBIb3N0TGlzdGVuZXIsIEluamVjdCwgSW5wdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtXSU5ET1d9IGZyb20gJ0BuZy13ZWItYXBpcy9jb21tb24nO1xuaW1wb3J0IHt0dWlEZWZhdWx0UHJvcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9kZWNvcmF0b3JzJztcbmltcG9ydCB7VHVpU3RyaW5nSGFuZGxlcn0gZnJvbSAnQHRhaWdhLXVpL2Nkay90eXBlcyc7XG5pbXBvcnQge3R1aUdldFNlbGVjdGVkVGV4dH0gZnJvbSAnQHRhaWdhLXVpL2Nkay91dGlscyc7XG5pbXBvcnQge2lkZW50aXR5fSBmcm9tICdyeGpzJztcblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpQ29weVByb2Nlc3Nvcl0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlDb3B5UHJvY2Vzc29yRGlyZWN0aXZlIHtcbiAgICBASW5wdXQoKVxuICAgIEB0dWlEZWZhdWx0UHJvcCgpXG4gICAgdHVpQ29weVByb2Nlc3NvcjogVHVpU3RyaW5nSGFuZGxlcjxzdHJpbmc+ID0gaWRlbnRpdHk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFdJTkRPVykgcHJpdmF0ZSByZWFkb25seSB3aW46IFdpbmRvdykge31cblxuICAgIEBIb3N0TGlzdGVuZXIoJ2NvcHkucHJldmVudCcsIFsnJGV2ZW50J10pXG4gICAgb25Db3B5KGV2ZW50OiBDbGlwYm9hcmRFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCB0ZXh0ID0gdHVpR2V0U2VsZWN0ZWRUZXh0KHRoaXMud2luKTtcblxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgICAgZXZlbnQuY2xpcGJvYXJkRGF0YT8uc2V0RGF0YSgndGV4dC9wbGFpbicsIHRoaXMudHVpQ29weVByb2Nlc3Nvcih0ZXh0KSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=