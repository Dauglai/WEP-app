import { __decorate } from "tslib";
import { Directive, Inject, Input, Optional, Output, Self } from '@angular/core';
import { tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
import { TuiActiveZoneDirective } from '@taiga-ui/cdk/directives/active-zone';
import { tuiIfMap } from '@taiga-ui/cdk/observables';
import { TuiDestroyService, TuiObscuredService, TuiParentsScrollService, } from '@taiga-ui/cdk/services';
import { Subject } from 'rxjs';
import { map } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/directives/active-zone";
import * as i2 from "@taiga-ui/cdk/services";
/**
 * Directive that monitors element visibility
 */
export class TuiObscuredDirective {
    constructor(activeZone, obscured$) {
        this.enabled$ = new Subject();
        const mapped$ = obscured$.pipe(map(obscuredBy => !!obscuredBy &&
            (!activeZone ||
                !obscuredBy.length ||
                obscuredBy.every(element => !activeZone.contains(element)))));
        this.tuiObscured = this.enabled$.pipe(tuiIfMap(() => mapped$));
    }
    set tuiObscuredEnabled(enabled) {
        this.enabled$.next(enabled);
    }
}
TuiObscuredDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiObscuredDirective, deps: [{ token: TuiActiveZoneDirective, optional: true }, { token: TuiObscuredService, self: true }], target: i0.ɵɵFactoryTarget.Directive });
TuiObscuredDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiObscuredDirective, selector: "[tuiObscured]", inputs: { tuiObscuredEnabled: "tuiObscuredEnabled" }, outputs: { tuiObscured: "tuiObscured" }, providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService], ngImport: i0 });
__decorate([
    tuiRequiredSetter()
], TuiObscuredDirective.prototype, "tuiObscuredEnabled", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiObscuredDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiObscured]',
                    providers: [TuiObscuredService, TuiParentsScrollService, TuiDestroyService],
                }]
        }], ctorParameters: function () { return [{ type: i1.TuiActiveZoneDirective, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TuiActiveZoneDirective]
                }] }, { type: i2.TuiObscuredService, decorators: [{
                    type: Self
                }, {
                    type: Inject,
                    args: [TuiObscuredService]
                }] }]; }, propDecorators: { tuiObscuredEnabled: [{
                type: Input
            }], tuiObscured: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib2JzY3VyZWQuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvb2JzY3VyZWQvb2JzY3VyZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDL0UsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sc0NBQXNDLENBQUM7QUFDNUUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ25ELE9BQU8sRUFDSCxpQkFBaUIsRUFDakIsa0JBQWtCLEVBQ2xCLHVCQUF1QixHQUMxQixNQUFNLHdCQUF3QixDQUFDO0FBQ2hDLE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDekMsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7O0FBRW5DOztHQUVHO0FBS0gsTUFBTSxPQUFPLG9CQUFvQjtJQVk3QixZQUdJLFVBQXlDLEVBR3pDLFNBQTZCO1FBakJoQixhQUFRLEdBQUcsSUFBSSxPQUFPLEVBQVcsQ0FBQztRQW1CL0MsTUFBTSxPQUFPLEdBQUcsU0FBUyxDQUFDLElBQUksQ0FDMUIsR0FBRyxDQUNDLFVBQVUsQ0FBQyxFQUFFLENBQ1QsQ0FBQyxDQUFDLFVBQVU7WUFDWixDQUFDLENBQUMsVUFBVTtnQkFDUixDQUFDLFVBQVUsQ0FBQyxNQUFNO2dCQUNsQixVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FDdEUsQ0FDSixDQUFDO1FBRUYsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUNuRSxDQUFDO0lBMUJELElBQUksa0JBQWtCLENBQUMsT0FBZ0I7UUFDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDaEMsQ0FBQzs7a0hBUFEsb0JBQW9CLGtCQWNqQixzQkFBc0IsNkJBR3RCLGtCQUFrQjtzR0FqQnJCLG9CQUFvQix1SUFGbEIsQ0FBQyxrQkFBa0IsRUFBRSx1QkFBdUIsRUFBRSxpQkFBaUIsQ0FBQztBQU8zRTtJQURDLGlCQUFpQixFQUFFOzhEQUduQjs0RkFQUSxvQkFBb0I7a0JBSmhDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGVBQWU7b0JBQ3pCLFNBQVMsRUFBRSxDQUFDLGtCQUFrQixFQUFFLHVCQUF1QixFQUFFLGlCQUFpQixDQUFDO2lCQUM5RTs7MEJBY1EsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxzQkFBc0I7OzBCQUU3QixJQUFJOzswQkFDSixNQUFNOzJCQUFDLGtCQUFrQjs0Q0FaMUIsa0JBQWtCO3NCQUZyQixLQUFLO2dCQU9HLFdBQVc7c0JBRG5CLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dCwgT3B0aW9uYWwsIE91dHB1dCwgU2VsZn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aVJlcXVpcmVkU2V0dGVyfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RlY29yYXRvcnMnO1xuaW1wb3J0IHtUdWlBY3RpdmVab25lRGlyZWN0aXZlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2RpcmVjdGl2ZXMvYWN0aXZlLXpvbmUnO1xuaW1wb3J0IHt0dWlJZk1hcH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge1xuICAgIFR1aURlc3Ryb3lTZXJ2aWNlLFxuICAgIFR1aU9ic2N1cmVkU2VydmljZSxcbiAgICBUdWlQYXJlbnRzU2Nyb2xsU2VydmljZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9zZXJ2aWNlcyc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuLyoqXG4gKiBEaXJlY3RpdmUgdGhhdCBtb25pdG9ycyBlbGVtZW50IHZpc2liaWxpdHlcbiAqL1xuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbdHVpT2JzY3VyZWRdJyxcbiAgICBwcm92aWRlcnM6IFtUdWlPYnNjdXJlZFNlcnZpY2UsIFR1aVBhcmVudHNTY3JvbGxTZXJ2aWNlLCBUdWlEZXN0cm95U2VydmljZV0sXG59KVxuZXhwb3J0IGNsYXNzIFR1aU9ic2N1cmVkRGlyZWN0aXZlIHtcbiAgICBwcml2YXRlIHJlYWRvbmx5IGVuYWJsZWQkID0gbmV3IFN1YmplY3Q8Ym9vbGVhbj4oKTtcblxuICAgIEBJbnB1dCgpXG4gICAgQHR1aVJlcXVpcmVkU2V0dGVyKClcbiAgICBzZXQgdHVpT2JzY3VyZWRFbmFibGVkKGVuYWJsZWQ6IGJvb2xlYW4pIHtcbiAgICAgICAgdGhpcy5lbmFibGVkJC5uZXh0KGVuYWJsZWQpO1xuICAgIH1cblxuICAgIEBPdXRwdXQoKVxuICAgIHJlYWRvbmx5IHR1aU9ic2N1cmVkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpXG4gICAgICAgIEBJbmplY3QoVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSlcbiAgICAgICAgYWN0aXZlWm9uZTogVHVpQWN0aXZlWm9uZURpcmVjdGl2ZSB8IG51bGwsXG4gICAgICAgIEBTZWxmKClcbiAgICAgICAgQEluamVjdChUdWlPYnNjdXJlZFNlcnZpY2UpXG4gICAgICAgIG9ic2N1cmVkJDogVHVpT2JzY3VyZWRTZXJ2aWNlLFxuICAgICkge1xuICAgICAgICBjb25zdCBtYXBwZWQkID0gb2JzY3VyZWQkLnBpcGUoXG4gICAgICAgICAgICBtYXAoXG4gICAgICAgICAgICAgICAgb2JzY3VyZWRCeSA9PlxuICAgICAgICAgICAgICAgICAgICAhIW9ic2N1cmVkQnkgJiZcbiAgICAgICAgICAgICAgICAgICAgKCFhY3RpdmVab25lIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAhb2JzY3VyZWRCeS5sZW5ndGggfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIG9ic2N1cmVkQnkuZXZlcnkoZWxlbWVudCA9PiAhYWN0aXZlWm9uZS5jb250YWlucyhlbGVtZW50KSkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLnR1aU9ic2N1cmVkID0gdGhpcy5lbmFibGVkJC5waXBlKHR1aUlmTWFwKCgpID0+IG1hcHBlZCQpKTtcbiAgICB9XG59XG4iXX0=