import { Directive, Inject, Input } from '@angular/core';
import { tuiCoerceBooleanProperty } from '@taiga-ui/cdk/coercion';
import { TUI_AUTOFOCUS_HANDLER, TUI_AUTOFOCUS_PROVIDERS, } from './autofocus.options';
import * as i0 from "@angular/core";
export class TuiAutoFocusDirective {
    constructor(handler) {
        this.handler = handler;
        this.autoFocus = true;
    }
    ngAfterViewInit() {
        if (tuiCoerceBooleanProperty(this.autoFocus)) {
            this.focus();
        }
    }
    focus() {
        void Promise.resolve().then(() => this.handler.setFocus());
    }
}
TuiAutoFocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAutoFocusDirective, deps: [{ token: TUI_AUTOFOCUS_HANDLER }], target: i0.ɵɵFactoryTarget.Directive });
TuiAutoFocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiAutoFocusDirective, selector: "[tuiAutoFocus]", inputs: { autoFocus: ["tuiAutoFocus", "autoFocus"] }, providers: TUI_AUTOFOCUS_PROVIDERS, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiAutoFocusDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiAutoFocus]',
                    providers: TUI_AUTOFOCUS_PROVIDERS,
                }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_AUTOFOCUS_HANDLER]
                }] }]; }, propDecorators: { autoFocus: [{
                type: Input,
                args: ['tuiAutoFocus']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2ZvY3VzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL2F1dG8tZm9jdXMvYXV0b2ZvY3VzLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQWdCLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBQyx3QkFBd0IsRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBRWhFLE9BQU8sRUFDSCxxQkFBcUIsRUFDckIsdUJBQXVCLEdBRTFCLE1BQU0scUJBQXFCLENBQUM7O0FBTTdCLE1BQU0sT0FBTyxxQkFBcUI7SUFJOUIsWUFFcUIsT0FBNEI7UUFBNUIsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFKakQsY0FBUyxHQUFpQixJQUFJLENBQUM7SUFLNUIsQ0FBQztJQUVKLGVBQWU7UUFDWCxJQUFJLHdCQUF3QixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRTtZQUMxQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUM7U0FDaEI7SUFDTCxDQUFDO0lBRUQsS0FBSztRQUNELEtBQUssT0FBTyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUM7SUFDL0QsQ0FBQzs7bUhBakJRLHFCQUFxQixrQkFLbEIscUJBQXFCO3VHQUx4QixxQkFBcUIsK0ZBRm5CLHVCQUF1Qjs0RkFFekIscUJBQXFCO2tCQUpqQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxnQkFBZ0I7b0JBQzFCLFNBQVMsRUFBRSx1QkFBdUI7aUJBQ3JDOzswQkFNUSxNQUFNOzJCQUFDLHFCQUFxQjs0Q0FIakMsU0FBUztzQkFEUixLQUFLO3VCQUFDLGNBQWMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0FmdGVyVmlld0luaXQsIERpcmVjdGl2ZSwgSW5qZWN0LCBJbnB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge3R1aUNvZXJjZUJvb2xlYW5Qcm9wZXJ0eX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb2VyY2lvbic7XG5cbmltcG9ydCB7XG4gICAgVFVJX0FVVE9GT0NVU19IQU5ETEVSLFxuICAgIFRVSV9BVVRPRk9DVVNfUFJPVklERVJTLFxuICAgIFR1aUF1dG9mb2N1c0hhbmRsZXIsXG59IGZyb20gJy4vYXV0b2ZvY3VzLm9wdGlvbnMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlBdXRvRm9jdXNdJyxcbiAgICBwcm92aWRlcnM6IFRVSV9BVVRPRk9DVVNfUFJPVklERVJTLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlBdXRvRm9jdXNEaXJlY3RpdmUgaW1wbGVtZW50cyBBZnRlclZpZXdJbml0IHtcbiAgICBASW5wdXQoJ3R1aUF1dG9Gb2N1cycpXG4gICAgYXV0b0ZvY3VzOiBib29sZWFuIHwgJycgPSB0cnVlO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0FVVE9GT0NVU19IQU5ETEVSKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGhhbmRsZXI6IFR1aUF1dG9mb2N1c0hhbmRsZXIsXG4gICAgKSB7fVxuXG4gICAgbmdBZnRlclZpZXdJbml0KCk6IHZvaWQge1xuICAgICAgICBpZiAodHVpQ29lcmNlQm9vbGVhblByb3BlcnR5KHRoaXMuYXV0b0ZvY3VzKSkge1xuICAgICAgICAgICAgdGhpcy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9jdXMoKTogdm9pZCB7XG4gICAgICAgIHZvaWQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiB0aGlzLmhhbmRsZXIuc2V0Rm9jdXMoKSk7XG4gICAgfVxufVxuIl19