import { __decorate } from "tslib";
import { Directive, Inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';
import { tuiRequiredSetter } from '@taiga-ui/cdk/decorators';
import { tuiClamp } from '@taiga-ui/cdk/utils/math';
import * as i0 from "@angular/core";
const MAX_VALUE = 0x10000;
export class TuiRepeatTimesContext {
    constructor($implicit) {
        this.$implicit = $implicit;
    }
}
/**
 * Directive similar to ngFor but using a number of repetitions rather than an array
 *
 * {@link TuiRepeatTimesDirective.tuiRepeatTimesOf requested number of times}.
 * {@link TuiRepeatTimesContext context} for every instance of the template inherits outer context and stores
 * {@link TuiRepeatTimesContext.$implicit index} of a template instance.
 */
export class TuiRepeatTimesDirective {
    constructor(viewContainer, templateRef) {
        this.viewContainer = viewContainer;
        this.templateRef = templateRef;
    }
    set tuiRepeatTimesOf(count) {
        const safeCount = Math.floor(tuiClamp(count, 0, MAX_VALUE));
        const { length } = this.viewContainer;
        if (count < length) {
            this.removeContainers(length - count);
        }
        else {
            this.addContainers(safeCount);
        }
    }
    addContainers(count) {
        for (let index = this.viewContainer.length; index < count; index++) {
            this.viewContainer.createEmbeddedView(this.templateRef, new TuiRepeatTimesContext(index));
        }
    }
    removeContainers(amount) {
        for (let index = 0; index < amount; index++) {
            this.viewContainer.remove();
        }
    }
}
TuiRepeatTimesDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRepeatTimesDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiRepeatTimesDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiRepeatTimesDirective, selector: "[tuiRepeatTimes][tuiRepeatTimesOf]", inputs: { tuiRepeatTimesOf: "tuiRepeatTimesOf" }, ngImport: i0 });
__decorate([
    tuiRequiredSetter()
], TuiRepeatTimesDirective.prototype, "tuiRepeatTimesOf", null);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiRepeatTimesDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiRepeatTimes][tuiRepeatTimesOf]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{
                    type: Inject,
                    args: [ViewContainerRef]
                }] }, { type: i0.TemplateRef, decorators: [{
                    type: Inject,
                    args: [TemplateRef]
                }] }]; }, propDecorators: { tuiRepeatTimesOf: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwZWF0LXRpbWVzLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2Nkay9kaXJlY3RpdmVzL3JlcGVhdC10aW1lcy9yZXBlYXQtdGltZXMuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLGdCQUFnQixFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3RGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRTNELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7QUFFbEQsTUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDO0FBRTFCLE1BQU0sT0FBTyxxQkFBcUI7SUFDOUIsWUFBcUIsU0FBaUI7UUFBakIsY0FBUyxHQUFULFNBQVMsQ0FBUTtJQUFHLENBQUM7Q0FDN0M7QUFFRDs7Ozs7O0dBTUc7QUFJSCxNQUFNLE9BQU8sdUJBQXVCO0lBZWhDLFlBRXFCLGFBQStCLEVBRS9CLFdBQStDO1FBRi9DLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUUvQixnQkFBVyxHQUFYLFdBQVcsQ0FBb0M7SUFDakUsQ0FBQztJQWpCSixJQUFJLGdCQUFnQixDQUFDLEtBQWE7UUFDOUIsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO1FBRTVELE1BQU0sRUFBQyxNQUFNLEVBQUMsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO1FBRXBDLElBQUksS0FBSyxHQUFHLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxDQUFDO1NBQ3pDO2FBQU07WUFDSCxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ2pDO0lBQ0wsQ0FBQztJQVNPLGFBQWEsQ0FBQyxLQUFhO1FBQy9CLEtBQUssSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUNoRSxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUNqQyxJQUFJLENBQUMsV0FBVyxFQUNoQixJQUFJLHFCQUFxQixDQUFDLEtBQUssQ0FBQyxDQUNuQyxDQUFDO1NBQ0w7SUFDTCxDQUFDO0lBRU8sZ0JBQWdCLENBQUMsTUFBYztRQUNuQyxLQUFLLElBQUksS0FBSyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQ3pDLElBQUksQ0FBQyxhQUFhLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDL0I7SUFDTCxDQUFDOztxSEFuQ1EsdUJBQXVCLGtCQWdCcEIsZ0JBQWdCLGFBRWhCLFdBQVc7eUdBbEJkLHVCQUF1QjtBQUdoQztJQURDLGlCQUFpQixFQUFFOytEQVduQjs0RkFiUSx1QkFBdUI7a0JBSG5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9DQUFvQztpQkFDakQ7OzBCQWlCUSxNQUFNOzJCQUFDLGdCQUFnQjs7MEJBRXZCLE1BQU07MkJBQUMsV0FBVzs0Q0FmbkIsZ0JBQWdCO3NCQUZuQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdCwgSW5wdXQsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7dHVpUmVxdWlyZWRTZXR0ZXJ9IGZyb20gJ0B0YWlnYS11aS9jZGsvZGVjb3JhdG9ycyc7XG5pbXBvcnQge1R1aUNvbnRleHRXaXRoSW1wbGljaXR9IGZyb20gJ0B0YWlnYS11aS9jZGsvaW50ZXJmYWNlcyc7XG5pbXBvcnQge3R1aUNsYW1wfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL21hdGgnO1xuXG5jb25zdCBNQVhfVkFMVUUgPSAweDEwMDAwO1xuXG5leHBvcnQgY2xhc3MgVHVpUmVwZWF0VGltZXNDb250ZXh0IGltcGxlbWVudHMgVHVpQ29udGV4dFdpdGhJbXBsaWNpdDxudW1iZXI+IHtcbiAgICBjb25zdHJ1Y3RvcihyZWFkb25seSAkaW1wbGljaXQ6IG51bWJlcikge31cbn1cblxuLyoqXG4gKiBEaXJlY3RpdmUgc2ltaWxhciB0byBuZ0ZvciBidXQgdXNpbmcgYSBudW1iZXIgb2YgcmVwZXRpdGlvbnMgcmF0aGVyIHRoYW4gYW4gYXJyYXlcbiAqXG4gKiB7QGxpbmsgVHVpUmVwZWF0VGltZXNEaXJlY3RpdmUudHVpUmVwZWF0VGltZXNPZiByZXF1ZXN0ZWQgbnVtYmVyIG9mIHRpbWVzfS5cbiAqIHtAbGluayBUdWlSZXBlYXRUaW1lc0NvbnRleHQgY29udGV4dH0gZm9yIGV2ZXJ5IGluc3RhbmNlIG9mIHRoZSB0ZW1wbGF0ZSBpbmhlcml0cyBvdXRlciBjb250ZXh0IGFuZCBzdG9yZXNcbiAqIHtAbGluayBUdWlSZXBlYXRUaW1lc0NvbnRleHQuJGltcGxpY2l0IGluZGV4fSBvZiBhIHRlbXBsYXRlIGluc3RhbmNlLlxuICovXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1t0dWlSZXBlYXRUaW1lc11bdHVpUmVwZWF0VGltZXNPZl0nLFxufSlcbmV4cG9ydCBjbGFzcyBUdWlSZXBlYXRUaW1lc0RpcmVjdGl2ZSB7XG4gICAgQElucHV0KClcbiAgICBAdHVpUmVxdWlyZWRTZXR0ZXIoKVxuICAgIHNldCB0dWlSZXBlYXRUaW1lc09mKGNvdW50OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgc2FmZUNvdW50ID0gTWF0aC5mbG9vcih0dWlDbGFtcChjb3VudCwgMCwgTUFYX1ZBTFVFKSk7XG5cbiAgICAgICAgY29uc3Qge2xlbmd0aH0gPSB0aGlzLnZpZXdDb250YWluZXI7XG5cbiAgICAgICAgaWYgKGNvdW50IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLnJlbW92ZUNvbnRhaW5lcnMobGVuZ3RoIC0gY291bnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGRDb250YWluZXJzKHNhZmVDb3VudCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgQEluamVjdChWaWV3Q29udGFpbmVyUmVmKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHZpZXdDb250YWluZXI6IFZpZXdDb250YWluZXJSZWYsXG4gICAgICAgIEBJbmplY3QoVGVtcGxhdGVSZWYpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPFR1aVJlcGVhdFRpbWVzQ29udGV4dD4sXG4gICAgKSB7fVxuXG4gICAgcHJpdmF0ZSBhZGRDb250YWluZXJzKGNvdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSB0aGlzLnZpZXdDb250YWluZXIubGVuZ3RoOyBpbmRleCA8IGNvdW50OyBpbmRleCsrKSB7XG4gICAgICAgICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3PFR1aVJlcGVhdFRpbWVzQ29udGV4dD4oXG4gICAgICAgICAgICAgICAgdGhpcy50ZW1wbGF0ZVJlZixcbiAgICAgICAgICAgICAgICBuZXcgVHVpUmVwZWF0VGltZXNDb250ZXh0KGluZGV4KSxcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZUNvbnRhaW5lcnMoYW1vdW50OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IGFtb3VudDsgaW5kZXgrKykge1xuICAgICAgICAgICAgdGhpcy52aWV3Q29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19