import { Directive, ElementRef, EventEmitter, HostListener, Inject, Input, Output, Renderer2, } from '@angular/core';
import * as i0 from "@angular/core";
export class TuiCheckedDirective {
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.tuiCheckedChange = new EventEmitter();
        this.updateProperty('checked', false);
    }
    set tuiChecked(checked) {
        this.updateProperty('checked', checked || false);
        this.updateProperty('indeterminate', checked === null);
    }
    onChange({ checked }) {
        this.updateProperty('indeterminate', false);
        this.tuiCheckedChange.emit(checked);
    }
    updateProperty(property, value) {
        this.renderer.setProperty(this.el.nativeElement, property, value);
    }
}
TuiCheckedDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedDirective, deps: [{ token: ElementRef }, { token: Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
TuiCheckedDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiCheckedDirective, selector: "input[tuiChecked], input[tuiCheckedChange]", inputs: { tuiChecked: "tuiChecked" }, outputs: { tuiCheckedChange: "tuiCheckedChange" }, host: { listeners: { "change": "onChange($event.target)" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiCheckedDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: 'input[tuiChecked], input[tuiCheckedChange]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.Renderer2, decorators: [{
                    type: Inject,
                    args: [Renderer2]
                }] }]; }, propDecorators: { tuiChecked: [{
                type: Input
            }], tuiCheckedChange: [{
                type: Output
            }], onChange: [{
                type: HostListener,
                args: ['change', ['$event.target']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hlY2tlZC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9jaGVja2VkL2NoZWNrZWQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixZQUFZLEVBQ1osTUFBTSxFQUNOLEtBQUssRUFDTCxNQUFNLEVBQ04sU0FBUyxHQUNaLE1BQU0sZUFBZSxDQUFDOztBQUt2QixNQUFNLE9BQU8sbUJBQW1CO0lBVTVCLFlBQ3lDLEVBQWdDLEVBQ2pDLFFBQW1CO1FBRGxCLE9BQUUsR0FBRixFQUFFLENBQThCO1FBQ2pDLGFBQVEsR0FBUixRQUFRLENBQVc7UUFKbEQscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQVcsQ0FBQztRQU1wRCxJQUFJLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUMxQyxDQUFDO0lBZEQsSUFDSSxVQUFVLENBQUMsT0FBdUI7UUFDbEMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTLEVBQUUsT0FBTyxJQUFJLEtBQUssQ0FBQyxDQUFDO1FBQ2pELElBQUksQ0FBQyxjQUFjLENBQUMsZUFBZSxFQUFFLE9BQU8sS0FBSyxJQUFJLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBYUQsUUFBUSxDQUFDLEVBQUMsT0FBTyxFQUFtQjtRQUNoQyxJQUFJLENBQUMsY0FBYyxDQUFDLGVBQWUsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM1QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFTyxjQUFjLENBQUMsUUFBcUMsRUFBRSxLQUFjO1FBQ3hFLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN0RSxDQUFDOztpSEF6QlEsbUJBQW1CLGtCQVdoQixVQUFVLGFBQ1YsU0FBUztxR0FaWixtQkFBbUI7NEZBQW5CLG1CQUFtQjtrQkFIL0IsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsNENBQTRDO2lCQUN6RDs7MEJBWVEsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsTUFBTTsyQkFBQyxTQUFTOzRDQVZqQixVQUFVO3NCQURiLEtBQUs7Z0JBT0csZ0JBQWdCO3NCQUR4QixNQUFNO2dCQVdQLFFBQVE7c0JBRFAsWUFBWTt1QkFBQyxRQUFRLEVBQUUsQ0FBQyxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICAgIERpcmVjdGl2ZSxcbiAgICBFbGVtZW50UmVmLFxuICAgIEV2ZW50RW1pdHRlcixcbiAgICBIb3N0TGlzdGVuZXIsXG4gICAgSW5qZWN0LFxuICAgIElucHV0LFxuICAgIE91dHB1dCxcbiAgICBSZW5kZXJlcjIsXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ2lucHV0W3R1aUNoZWNrZWRdLCBpbnB1dFt0dWlDaGVja2VkQ2hhbmdlXScsXG59KVxuZXhwb3J0IGNsYXNzIFR1aUNoZWNrZWREaXJlY3RpdmUge1xuICAgIEBJbnB1dCgpXG4gICAgc2V0IHR1aUNoZWNrZWQoY2hlY2tlZDogYm9vbGVhbiB8IG51bGwpIHtcbiAgICAgICAgdGhpcy51cGRhdGVQcm9wZXJ0eSgnY2hlY2tlZCcsIGNoZWNrZWQgfHwgZmFsc2UpO1xuICAgICAgICB0aGlzLnVwZGF0ZVByb3BlcnR5KCdpbmRldGVybWluYXRlJywgY2hlY2tlZCA9PT0gbnVsbCk7XG4gICAgfVxuXG4gICAgQE91dHB1dCgpXG4gICAgcmVhZG9ubHkgdHVpQ2hlY2tlZENoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXI8Ym9vbGVhbj4oKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8SFRNTElucHV0RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoUmVuZGVyZXIyKSBwcml2YXRlIHJlYWRvbmx5IHJlbmRlcmVyOiBSZW5kZXJlcjIsXG4gICAgKSB7XG4gICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ2NoZWNrZWQnLCBmYWxzZSk7XG4gICAgfVxuXG4gICAgQEhvc3RMaXN0ZW5lcignY2hhbmdlJywgWyckZXZlbnQudGFyZ2V0J10pXG4gICAgb25DaGFuZ2Uoe2NoZWNrZWR9OiBIVE1MSW5wdXRFbGVtZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlUHJvcGVydHkoJ2luZGV0ZXJtaW5hdGUnLCBmYWxzZSk7XG4gICAgICAgIHRoaXMudHVpQ2hlY2tlZENoYW5nZS5lbWl0KGNoZWNrZWQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlUHJvcGVydHkocHJvcGVydHk6ICdjaGVja2VkJyB8ICdpbmRldGVybWluYXRlJywgdmFsdWU6IGJvb2xlYW4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zZXRQcm9wZXJ0eSh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIHByb3BlcnR5LCB2YWx1ZSk7XG4gICAgfVxufVxuIl19