import { Directive, ElementRef, Inject, Output } from '@angular/core';
import { tuiDragAndDropFrom } from '@taiga-ui/cdk/observables';
import { filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
/**
 * @deprecated not used anywhere
 */
export class TuiDragDirective {
    constructor(el) {
        this.el = el;
        this.dragAndDropFrom$ = tuiDragAndDropFrom(this.el.nativeElement);
        this.start = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 0 /* Start */), map(({ event }) => event));
        this.continues = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 1 /* Continues */), map(({ event }) => event));
        this.end = this.dragAndDropFrom$.pipe(filter(({ stage }) => stage === 2 /* End */), map(({ event }) => event));
    }
}
TuiDragDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDragDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
TuiDragDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: TuiDragDirective, selector: "[tuiDragStart], [tuiDragContinues], [tuiDragEnd]", outputs: { start: "tuiDragStart", continues: "tuiDragContinues", end: "tuiDragEnd" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiDragDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[tuiDragStart], [tuiDragContinues], [tuiDragEnd]',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }]; }, propDecorators: { start: [{
                type: Output,
                args: ['tuiDragStart']
            }], continues: [{
                type: Output,
                args: ['tuiDragContinues']
            }], end: [{
                type: Output,
                args: ['tuiDragEnd']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvZGlyZWN0aXZlcy9kcmFnL2RyYWcuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDcEUsT0FBTyxFQUFDLGtCQUFrQixFQUFlLE1BQU0sMkJBQTJCLENBQUM7QUFFM0UsT0FBTyxFQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFM0M7O0dBRUc7QUFJSCxNQUFNLE9BQU8sZ0JBQWdCO0lBdUJ6QixZQUFpRCxFQUF1QjtRQUF2QixPQUFFLEdBQUYsRUFBRSxDQUFxQjtRQXRCdkQscUJBQWdCLEdBQUcsa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUlyRSxVQUFLLEdBQTJCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQy9ELE1BQU0sQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssa0JBQXVCLENBQUMsRUFDakQsR0FBRyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQUM7UUFHTyxjQUFTLEdBQTJCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQ25FLE1BQU0sQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssc0JBQTJCLENBQUMsRUFDckQsR0FBRyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQUM7UUFJTyxRQUFHLEdBQTJCLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQzdELE1BQU0sQ0FBQyxDQUFDLEVBQUMsS0FBSyxFQUFDLEVBQUUsRUFBRSxDQUFDLEtBQUssZ0JBQXFCLENBQUMsRUFDL0MsR0FBRyxDQUFDLENBQUMsRUFBQyxLQUFLLEVBQUMsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLENBQzFCLENBQUM7SUFFeUUsQ0FBQzs7OEdBdkJuRSxnQkFBZ0Isa0JBdUJMLFVBQVU7a0dBdkJyQixnQkFBZ0I7NEZBQWhCLGdCQUFnQjtrQkFINUIsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsa0RBQWtEO2lCQUMvRDs7MEJBd0JnQixNQUFNOzJCQUFDLFVBQVU7NENBbEJyQixLQUFLO3NCQUZiLE1BQU07dUJBQUMsY0FBYztnQkFRYixTQUFTO3NCQURqQixNQUFNO3VCQUFDLGtCQUFrQjtnQkFRakIsR0FBRztzQkFGWCxNQUFNO3VCQUFDLFlBQVkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5qZWN0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHt0dWlEcmFnQW5kRHJvcEZyb20sIFR1aURyYWdTdGFnZX0gZnJvbSAnQHRhaWdhLXVpL2Nkay9vYnNlcnZhYmxlcyc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtmaWx0ZXIsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG4vKipcbiAqIEBkZXByZWNhdGVkIG5vdCB1c2VkIGFueXdoZXJlXG4gKi9cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW3R1aURyYWdTdGFydF0sIFt0dWlEcmFnQ29udGludWVzXSwgW3R1aURyYWdFbmRdJyxcbn0pXG5leHBvcnQgY2xhc3MgVHVpRHJhZ0RpcmVjdGl2ZSB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBkcmFnQW5kRHJvcEZyb20kID0gdHVpRHJhZ0FuZERyb3BGcm9tKHRoaXMuZWwubmF0aXZlRWxlbWVudCk7XG5cbiAgICBAT3V0cHV0KCd0dWlEcmFnU3RhcnQnKVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvbm8tb3V0cHV0LW5hdGl2ZVxuICAgIHJlYWRvbmx5IHN0YXJ0OiBPYnNlcnZhYmxlPE1vdXNlRXZlbnQ+ID0gdGhpcy5kcmFnQW5kRHJvcEZyb20kLnBpcGUoXG4gICAgICAgIGZpbHRlcigoe3N0YWdlfSkgPT4gc3RhZ2UgPT09IFR1aURyYWdTdGFnZS5TdGFydCksXG4gICAgICAgIG1hcCgoe2V2ZW50fSkgPT4gZXZlbnQpLFxuICAgICk7XG5cbiAgICBAT3V0cHV0KCd0dWlEcmFnQ29udGludWVzJylcbiAgICByZWFkb25seSBjb250aW51ZXM6IE9ic2VydmFibGU8TW91c2VFdmVudD4gPSB0aGlzLmRyYWdBbmREcm9wRnJvbSQucGlwZShcbiAgICAgICAgZmlsdGVyKCh7c3RhZ2V9KSA9PiBzdGFnZSA9PT0gVHVpRHJhZ1N0YWdlLkNvbnRpbnVlcyksXG4gICAgICAgIG1hcCgoe2V2ZW50fSkgPT4gZXZlbnQpLFxuICAgICk7XG5cbiAgICBAT3V0cHV0KCd0dWlEcmFnRW5kJylcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L25vLW91dHB1dC1uYXRpdmVcbiAgICByZWFkb25seSBlbmQ6IE9ic2VydmFibGU8TW91c2VFdmVudD4gPSB0aGlzLmRyYWdBbmREcm9wRnJvbSQucGlwZShcbiAgICAgICAgZmlsdGVyKCh7c3RhZ2V9KSA9PiBzdGFnZSA9PT0gVHVpRHJhZ1N0YWdlLkVuZCksXG4gICAgICAgIG1hcCgoe2V2ZW50fSkgPT4gZXZlbnQpLFxuICAgICk7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8RWxlbWVudD4pIHt9XG59XG4iXX0=