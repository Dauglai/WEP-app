import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { ALWAYS_FALSE_HANDLER, ALWAYS_TRUE_HANDLER } from '@taiga-ui/cdk/constants';
import { tuiTypedFromEvent, tuiZoneOptimized } from '@taiga-ui/cdk/observables';
import { tuiIsElement } from '@taiga-ui/cdk/utils';
import { merge, Observable } from 'rxjs';
import { distinctUntilChanged, filter, map } from 'rxjs/operators';
import * as i0 from "@angular/core";
function movedOut({ currentTarget, relatedTarget }) {
    return (!tuiIsElement(relatedTarget) ||
        !tuiIsElement(currentTarget) ||
        !currentTarget.contains(relatedTarget));
}
export class TuiHoveredService extends Observable {
    constructor(el, ngZone) {
        super(subscriber => this.stream$.subscribe(subscriber));
        this.el = el;
        this.ngZone = ngZone;
        this.stream$ = merge(tuiTypedFromEvent(this.el.nativeElement, `mouseenter`).pipe(map(ALWAYS_TRUE_HANDLER)), tuiTypedFromEvent(this.el.nativeElement, `mouseleave`).pipe(map(ALWAYS_FALSE_HANDLER)), 
        // Hello, Safari
        tuiTypedFromEvent(this.el.nativeElement, `mouseout`).pipe(filter(movedOut), map(ALWAYS_FALSE_HANDLER))).pipe(distinctUntilChanged(), tuiZoneOptimized(this.ngZone));
    }
}
TuiHoveredService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredService, deps: [{ token: ElementRef }, { token: NgZone }], target: i0.ɵɵFactoryTarget.Injectable });
TuiHoveredService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiHoveredService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaG92ZXJlZC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL2RpcmVjdGl2ZXMvaG92ZXJlZC9ob3ZlcmVkLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsbUJBQW1CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUNsRixPQUFPLEVBQUMsaUJBQWlCLEVBQUUsZ0JBQWdCLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUM5RSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDakQsT0FBTyxFQUFDLEtBQUssRUFBRSxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFDLG9CQUFvQixFQUFFLE1BQU0sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQzs7QUFFakUsU0FBUyxRQUFRLENBQUMsRUFBQyxhQUFhLEVBQUUsYUFBYSxFQUFhO0lBQ3hELE9BQU8sQ0FDSCxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUM7UUFDNUIsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDO1FBQzVCLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FDekMsQ0FBQztBQUNOLENBQUM7QUFHRCxNQUFNLE9BQU8saUJBQWtCLFNBQVEsVUFBbUI7SUFldEQsWUFDeUMsRUFBdUIsRUFDM0IsTUFBYztRQUUvQyxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBSG5CLE9BQUUsR0FBRixFQUFFLENBQXFCO1FBQzNCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFoQmxDLFlBQU8sR0FBRyxLQUFLLENBQzVCLGlCQUFpQixDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FDdkQsR0FBRyxDQUFDLG1CQUFtQixDQUFDLENBQzNCLEVBQ0QsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FDNUI7UUFDRCxnQkFBZ0I7UUFDaEIsaUJBQWlCLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUNyRCxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQ2hCLEdBQUcsQ0FBQyxvQkFBb0IsQ0FBQyxDQUM1QixDQUNKLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFPOUQsQ0FBQzs7K0dBcEJRLGlCQUFpQixrQkFnQmQsVUFBVSxhQUNWLE1BQU07bUhBakJULGlCQUFpQjs0RkFBakIsaUJBQWlCO2tCQUQ3QixVQUFVOzswQkFpQkYsTUFBTTsyQkFBQyxVQUFVOzswQkFDakIsTUFBTTsyQkFBQyxNQUFNIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUsIE5nWm9uZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0FMV0FZU19GQUxTRV9IQU5ETEVSLCBBTFdBWVNfVFJVRV9IQU5ETEVSfSBmcm9tICdAdGFpZ2EtdWkvY2RrL2NvbnN0YW50cyc7XG5pbXBvcnQge3R1aVR5cGVkRnJvbUV2ZW50LCB0dWlab25lT3B0aW1pemVkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL29ic2VydmFibGVzJztcbmltcG9ydCB7dHVpSXNFbGVtZW50fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzJztcbmltcG9ydCB7bWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZCwgZmlsdGVyLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuZnVuY3Rpb24gbW92ZWRPdXQoe2N1cnJlbnRUYXJnZXQsIHJlbGF0ZWRUYXJnZXR9OiBNb3VzZUV2ZW50KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgIXR1aUlzRWxlbWVudChyZWxhdGVkVGFyZ2V0KSB8fFxuICAgICAgICAhdHVpSXNFbGVtZW50KGN1cnJlbnRUYXJnZXQpIHx8XG4gICAgICAgICFjdXJyZW50VGFyZ2V0LmNvbnRhaW5zKHJlbGF0ZWRUYXJnZXQpXG4gICAgKTtcbn1cblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFR1aUhvdmVyZWRTZXJ2aWNlIGV4dGVuZHMgT2JzZXJ2YWJsZTxib29sZWFuPiB7XG4gICAgcHJpdmF0ZSByZWFkb25seSBzdHJlYW0kID0gbWVyZ2UoXG4gICAgICAgIHR1aVR5cGVkRnJvbUV2ZW50KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgYG1vdXNlZW50ZXJgKS5waXBlKFxuICAgICAgICAgICAgbWFwKEFMV0FZU19UUlVFX0hBTkRMRVIpLFxuICAgICAgICApLFxuICAgICAgICB0dWlUeXBlZEZyb21FdmVudCh0aGlzLmVsLm5hdGl2ZUVsZW1lbnQsIGBtb3VzZWxlYXZlYCkucGlwZShcbiAgICAgICAgICAgIG1hcChBTFdBWVNfRkFMU0VfSEFORExFUiksXG4gICAgICAgICksXG4gICAgICAgIC8vIEhlbGxvLCBTYWZhcmlcbiAgICAgICAgdHVpVHlwZWRGcm9tRXZlbnQodGhpcy5lbC5uYXRpdmVFbGVtZW50LCBgbW91c2VvdXRgKS5waXBlKFxuICAgICAgICAgICAgZmlsdGVyKG1vdmVkT3V0KSxcbiAgICAgICAgICAgIG1hcChBTFdBWVNfRkFMU0VfSEFORExFUiksXG4gICAgICAgICksXG4gICAgKS5waXBlKGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksIHR1aVpvbmVPcHRpbWl6ZWQodGhpcy5uZ1pvbmUpKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBASW5qZWN0KEVsZW1lbnRSZWYpIHByaXZhdGUgcmVhZG9ubHkgZWw6IEVsZW1lbnRSZWY8RWxlbWVudD4sXG4gICAgICAgIEBJbmplY3QoTmdab25lKSBwcml2YXRlIHJlYWRvbmx5IG5nWm9uZTogTmdab25lLFxuICAgICkge1xuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHRoaXMuc3RyZWFtJC5zdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgIH1cbn1cbiJdfQ==