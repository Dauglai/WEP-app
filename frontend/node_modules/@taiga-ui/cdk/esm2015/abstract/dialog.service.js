import { Inject, Injectable } from '@angular/core';
import { TuiIdService } from '@taiga-ui/cdk/services';
import { BehaviorSubject, Observable } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@taiga-ui/cdk/services";
export class AbstractTuiDialogService extends Observable {
    constructor(idService) {
        super(observer => this.dialogs$.subscribe(observer));
        this.idService = idService;
        this.dialogs$ = new BehaviorSubject([]);
    }
    open(content, options = {}) {
        return new Observable(observer => {
            const completeWith = (result) => {
                observer.next(result);
                observer.complete();
            };
            const dialog = Object.assign(Object.assign(Object.assign({}, this.defaultOptions), options), { content,
                completeWith, $implicit: observer, component: this.component, createdAt: Date.now(), id: this.idService.generate() });
            this.dialogs$.next([...this.dialogs$.value, dialog]);
            return () => {
                this.dialogs$.next(this.dialogs$.value.filter(item => item !== dialog));
            };
        });
    }
}
AbstractTuiDialogService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDialogService, deps: [{ token: TuiIdService }], target: i0.ɵɵFactoryTarget.Injectable });
AbstractTuiDialogService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDialogService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiDialogService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i1.TuiIdService, decorators: [{
                    type: Inject,
                    args: [TuiIdService]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlhbG9nLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvYWJzdHJhY3QvZGlhbG9nLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFakQsT0FBTyxFQUFDLFlBQVksRUFBQyxNQUFNLHdCQUF3QixDQUFDO0FBR3BELE9BQU8sRUFBQyxlQUFlLEVBQUUsVUFBVSxFQUFDLE1BQU0sTUFBTSxDQUFDOzs7QUFHakQsTUFBTSxPQUFnQix3QkFBc0MsU0FBUSxVQUVuRTtJQVNHLFlBQW1ELFNBQXVCO1FBQ3RFLEtBQUssQ0FBQyxRQUFRLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFETixjQUFTLEdBQVQsU0FBUyxDQUFjO1FBSnZELGFBQVEsR0FBRyxJQUFJLGVBQWUsQ0FDN0MsRUFBRSxDQUNMLENBQUM7SUFJRixDQUFDO0lBRUQsSUFBSSxDQUNBLE9BQThFLEVBQzlFLFVBQXNCLEVBQUU7UUFFeEIsT0FBTyxJQUFJLFVBQVUsQ0FBQyxRQUFRLENBQUMsRUFBRTtZQUM3QixNQUFNLFlBQVksR0FBRyxDQUFDLE1BQThCLEVBQVEsRUFBRTtnQkFDMUQsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFDdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBQ3hCLENBQUMsQ0FBQztZQUNGLE1BQU0sTUFBTSxpREFDTCxJQUFJLENBQUMsY0FBYyxHQUNuQixPQUFPLEtBQ1YsT0FBTztnQkFDUCxZQUFZLEVBQ1osU0FBUyxFQUFFLFFBQVEsRUFDbkIsU0FBUyxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQ3pCLFNBQVMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQ3JCLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsRUFBRSxHQUNoQyxDQUFDO1lBRUYsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFFckQsT0FBTyxHQUFHLEVBQUU7Z0JBQ1IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxLQUFLLE1BQU0sQ0FBQyxDQUFDLENBQUM7WUFDNUUsQ0FBQyxDQUFDO1FBQ04sQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDOztzSEF6Q2lCLHdCQUF3QixrQkFXdEIsWUFBWTswSEFYZCx3QkFBd0I7NEZBQXhCLHdCQUF3QjtrQkFEN0MsVUFBVTs7MEJBWU0sTUFBTTsyQkFBQyxZQUFZIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtUdWlCYXNlRGlhbG9nQ29udGV4dH0gZnJvbSAnQHRhaWdhLXVpL2Nkay9pbnRlcmZhY2VzJztcbmltcG9ydCB7VHVpSWRTZXJ2aWNlfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3NlcnZpY2VzJztcbmltcG9ydCB7VHVpRGlhbG9nfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3R5cGVzJztcbmltcG9ydCB7UG9seW1vcnBoZXVzQ29tcG9uZW50LCBQb2x5bW9ycGhldXNDb250ZW50fSBmcm9tICdAdGlua29mZi9uZy1wb2x5bW9ycGhldXMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQWJzdHJhY3RUdWlEaWFsb2dTZXJ2aWNlPFQsIEsgPSB2b2lkPiBleHRlbmRzIE9ic2VydmFibGU8XG4gICAgUmVhZG9ubHlBcnJheTxUdWlEaWFsb2c8VCwgYW55Pj5cbj4ge1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBjb21wb25lbnQ6IFBvbHltb3JwaGV1c0NvbXBvbmVudDxhbnksIFR1aURpYWxvZzxULCBhbnk+PjtcblxuICAgIHByb3RlY3RlZCBhYnN0cmFjdCByZWFkb25seSBkZWZhdWx0T3B0aW9uczogVDtcblxuICAgIHByb3RlY3RlZCByZWFkb25seSBkaWFsb2dzJCA9IG5ldyBCZWhhdmlvclN1YmplY3Q8UmVhZG9ubHlBcnJheTxUdWlEaWFsb2c8VCwgYW55Pj4+KFxuICAgICAgICBbXSxcbiAgICApO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChUdWlJZFNlcnZpY2UpIHByaXZhdGUgcmVhZG9ubHkgaWRTZXJ2aWNlOiBUdWlJZFNlcnZpY2UpIHtcbiAgICAgICAgc3VwZXIob2JzZXJ2ZXIgPT4gdGhpcy5kaWFsb2dzJC5zdWJzY3JpYmUob2JzZXJ2ZXIpKTtcbiAgICB9XG5cbiAgICBvcGVuPEcgPSB2b2lkPihcbiAgICAgICAgY29udGVudDogUG9seW1vcnBoZXVzQ29udGVudDxUICYgVHVpQmFzZURpYWxvZ0NvbnRleHQ8SyBleHRlbmRzIHZvaWQgPyBHIDogSz4+LFxuICAgICAgICBvcHRpb25zOiBQYXJ0aWFsPFQ+ID0ge30sXG4gICAgKTogT2JzZXJ2YWJsZTxLIGV4dGVuZHMgdm9pZCA/IEcgOiBLPiB7XG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShvYnNlcnZlciA9PiB7XG4gICAgICAgICAgICBjb25zdCBjb21wbGV0ZVdpdGggPSAocmVzdWx0OiBLIGV4dGVuZHMgdm9pZCA/IEcgOiBLKTogdm9pZCA9PiB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dChyZXN1bHQpO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgY29uc3QgZGlhbG9nID0ge1xuICAgICAgICAgICAgICAgIC4uLnRoaXMuZGVmYXVsdE9wdGlvbnMsXG4gICAgICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgICAgICAgIGNvbXBsZXRlV2l0aCxcbiAgICAgICAgICAgICAgICAkaW1wbGljaXQ6IG9ic2VydmVyLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogdGhpcy5jb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY3JlYXRlZEF0OiBEYXRlLm5vdygpLFxuICAgICAgICAgICAgICAgIGlkOiB0aGlzLmlkU2VydmljZS5nZW5lcmF0ZSgpLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdGhpcy5kaWFsb2dzJC5uZXh0KFsuLi50aGlzLmRpYWxvZ3MkLnZhbHVlLCBkaWFsb2ddKTtcblxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpYWxvZ3MkLm5leHQodGhpcy5kaWFsb2dzJC52YWx1ZS5maWx0ZXIoaXRlbSA9PiBpdGVtICE9PSBkaWFsb2cpKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==