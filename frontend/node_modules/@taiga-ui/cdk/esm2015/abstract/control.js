import { __decorate } from "tslib";
import { Directive, HostBinding, Inject, Input, Optional, } from '@angular/core';
import { NgModel } from '@angular/forms';
import { tuiAssert } from '@taiga-ui/cdk/classes';
import { EMPTY_FUNCTION } from '@taiga-ui/cdk/constants';
import { tuiDefaultProp } from '@taiga-ui/cdk/decorators';
import { merge, Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { AbstractTuiInteractive } from './interactive';
import { AbstractTuiValueTransformer } from './value-transformer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
/**
 * Basic ControlValueAccessor class to build form components upon
 */
export class AbstractTuiControl extends AbstractTuiInteractive {
    constructor(ngControl, cdr, valueTransformer) {
        super();
        this.ngControl = ngControl;
        this.cdr = cdr;
        this.valueTransformer = valueTransformer;
        this.onTouched = EMPTY_FUNCTION;
        this.onChange = EMPTY_FUNCTION;
        this.fallbackValue = this.getFallbackValue();
        this.destroy$ = new Subject();
        this.readOnly = false;
        this.pseudoInvalid = null;
        if (ngDevMode && this.ngControl === null) {
            tuiAssert.assert(false, `NgControl not injected in ${this.constructor.name}!\n`, `Use [(ngModel)] or [formControl] or formControlName for correct work.`);
        }
        if (this.ngControl) {
            this.ngControl.valueAccessor = this;
        }
    }
    get computedInvalid() {
        return (this.interactive &&
            (this.pseudoInvalid !== null
                ? this.pseudoInvalid
                : this.touched && this.invalid));
    }
    get value() {
        var _a;
        return (_a = this.previousInternalValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
    }
    set value(value) {
        this.updateValue(value);
    }
    get safeCurrentValue() {
        var _a;
        return (_a = this.rawValue) !== null && _a !== void 0 ? _a : this.fallbackValue;
    }
    get invalid() {
        return this.safeNgControlData(({ invalid }) => invalid, false);
    }
    get valid() {
        return this.safeNgControlData(({ valid }) => valid, false);
    }
    get touched() {
        return this.safeNgControlData(({ touched }) => touched, false);
    }
    get disabled() {
        return this.safeNgControlData(({ disabled }) => disabled, false);
    }
    get interactive() {
        return !this.readOnly && !this.computedDisabled;
    }
    get control() {
        return this.safeNgControlData(({ control }) => control, null);
    }
    get computedName() {
        var _a, _b;
        return (_b = (_a = this.controlName) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : null;
    }
    get controlName() {
        var _a, _b, _c;
        return (_c = (_b = (_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.name) === null || _b === void 0 ? void 0 : _b.toString()) !== null && _c !== void 0 ? _c : null;
    }
    get rawValue() {
        const { ngControl } = this;
        if (ngControl === null) {
            return undefined;
        }
        const controlValue = ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? ngControl.viewModel
            : ngControl.value;
        return this.fromControlValue(controlValue);
    }
    ngOnInit() {
        var _a, _b;
        if (!((_a = this.ngControl) === null || _a === void 0 ? void 0 : _a.valueChanges) || !((_b = this.ngControl) === null || _b === void 0 ? void 0 : _b.statusChanges)) {
            return;
        }
        merge(this.ngControl.valueChanges, this.ngControl.statusChanges)
            .pipe(takeUntil(this.destroy$))
            .subscribe(() => this.refreshLocalValue(this.safeCurrentValue));
    }
    ngOnDestroy() {
        this.destroy$.next();
        this.destroy$.complete();
    }
    checkControlUpdate() {
        this.cdr.markForCheck();
    }
    registerOnChange(onChange) {
        this.onChange = (componentValue) => {
            onChange(this.toControlValue(componentValue));
        };
    }
    registerOnTouched(onTouched) {
        this.onTouched = onTouched;
    }
    setDisabledState() {
        this.checkControlUpdate();
    }
    writeValue(value) {
        const controlValue = this.ngControl instanceof NgModel && this.previousInternalValue === undefined
            ? this.ngControl.model
            : value;
        this.refreshLocalValue(this.fromControlValue(controlValue));
    }
    updateFocused(focused) {
        if (!focused) {
            this.controlMarkAsTouched();
        }
        super.updateFocused(focused);
    }
    /**
     * @deprecated use `value` setter
     */
    updateValue(value) {
        if (this.disabled || this.valueIdenticalComparator(this.value, value)) {
            return;
        }
        this.previousInternalValue = value;
        this.controlSetValue(value);
    }
    valueIdenticalComparator(oldValue, newValue) {
        return oldValue === newValue;
    }
    safeNgControlData(extractor, defaultFieldValue) {
        var _a;
        return (_a = (this.ngControl && extractor(this.ngControl))) !== null && _a !== void 0 ? _a : defaultFieldValue;
    }
    controlMarkAsTouched() {
        this.onTouched();
        this.checkControlUpdate();
    }
    controlSetValue(value) {
        this.onChange(value);
        this.checkControlUpdate();
    }
    refreshLocalValue(value) {
        this.previousInternalValue = value;
        this.checkControlUpdate();
    }
    fromControlValue(controlValue) {
        return this.valueTransformer
            ? this.valueTransformer.fromControlValue(controlValue)
            : controlValue;
    }
    toControlValue(componentValue) {
        return this.valueTransformer
            ? this.valueTransformer.toControlValue(componentValue)
            : componentValue;
    }
}
AbstractTuiControl.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiControl, deps: [{ token: i1.NgControl, optional: true }, { token: i0.ChangeDetectorRef }, { token: AbstractTuiValueTransformer, optional: true }], target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiControl.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiControl, inputs: { readOnly: "readOnly", pseudoInvalid: "pseudoInvalid" }, host: { properties: { "class._readonly": "this.readOnly", "class._invalid": "this.computedInvalid" } }, usesInheritance: true, ngImport: i0 });
__decorate([
    tuiDefaultProp()
], AbstractTuiControl.prototype, "readOnly", void 0);
__decorate([
    tuiDefaultProp()
], AbstractTuiControl.prototype, "pseudoInvalid", void 0);
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiControl, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgControl, decorators: [{
                    type: Optional
                }] }, { type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [AbstractTuiValueTransformer]
                }] }]; }, propDecorators: { readOnly: [{
                type: Input
            }, {
                type: HostBinding,
                args: [`class._readonly`]
            }], pseudoInvalid: [{
                type: Input
            }], computedInvalid: [{
                type: HostBinding,
                args: [`class._invalid`]
            }] } });
export function tuiAsControl(useExisting) {
    return {
        provide: AbstractTuiControl,
        useExisting,
    };
}
//# sourceMappingURL=data:application/json;base64,