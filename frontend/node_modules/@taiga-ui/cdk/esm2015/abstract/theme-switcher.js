import { DOCUMENT } from '@angular/common';
import { Directive, Inject } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Use this abstract class to create your own toggleable themes.
 * A component extending this class must have CSS variables definitions
 * and have ViewEncapsulation set to NONE. A boolean input allows to
 * switch theme on or off.
 */
export class AbstractTuiThemeSwitcher {
    constructor(doc) {
        this.doc = doc;
        if (this.style !== null) {
            this.addTheme();
            return;
        }
        const styles = this.doc.head.querySelectorAll(`style`);
        this.constructor.style =
            styles[styles.length - 1];
    }
    get style() {
        return this.constructor.style;
    }
    ngOnDestroy() {
        this.removeTheme();
    }
    addTheme() {
        if (this.style) {
            this.doc.head.appendChild(this.style);
        }
    }
    removeTheme() {
        if (this.style && this.doc.head.contains(this.style)) {
            this.doc.head.removeChild(this.style);
        }
    }
}
AbstractTuiThemeSwitcher.style = null;
AbstractTuiThemeSwitcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiThemeSwitcher, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
AbstractTuiThemeSwitcher.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.17", type: AbstractTuiThemeSwitcher, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: AbstractTuiThemeSwitcher, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUtc3dpdGNoZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9jZGsvYWJzdHJhY3QvdGhlbWUtc3dpdGNoZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxTQUFTLEVBQUUsTUFBTSxFQUFZLE1BQU0sZUFBZSxDQUFDOztBQUUzRDs7Ozs7R0FLRztBQUVILE1BQU0sT0FBZ0Isd0JBQXdCO0lBRzFDLFlBQStDLEdBQWE7UUFBYixRQUFHLEdBQUgsR0FBRyxDQUFVO1FBQ3hELElBQUksSUFBSSxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDckIsSUFBSSxDQUFDLFFBQVEsRUFBRSxDQUFDO1lBRWhCLE9BQU87U0FDVjtRQUVELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBRXRELElBQUksQ0FBQyxXQUErQyxDQUFDLEtBQUs7WUFDdkQsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELElBQUksS0FBSztRQUNMLE9BQVEsSUFBSSxDQUFDLFdBQStDLENBQUMsS0FBSyxDQUFDO0lBQ3ZFLENBQUM7SUFFRCxXQUFXO1FBQ1AsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBQ3ZCLENBQUM7SUFFTyxRQUFRO1FBQ1osSUFBSSxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ1osSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7SUFFTyxXQUFXO1FBQ2YsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDbEQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUN6QztJQUNMLENBQUM7O0FBakNNLDhCQUFLLEdBQTRCLElBQUksQ0FBQztzSEFEM0Isd0JBQXdCLGtCQUd0QixRQUFROzBHQUhWLHdCQUF3Qjs0RkFBeEIsd0JBQXdCO2tCQUQ3QyxTQUFTOzBEQUk4QyxRQUFROzBCQUEvQyxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtEaXJlY3RpdmUsIEluamVjdCwgT25EZXN0cm95fSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBVc2UgdGhpcyBhYnN0cmFjdCBjbGFzcyB0byBjcmVhdGUgeW91ciBvd24gdG9nZ2xlYWJsZSB0aGVtZXMuXG4gKiBBIGNvbXBvbmVudCBleHRlbmRpbmcgdGhpcyBjbGFzcyBtdXN0IGhhdmUgQ1NTIHZhcmlhYmxlcyBkZWZpbml0aW9uc1xuICogYW5kIGhhdmUgVmlld0VuY2Fwc3VsYXRpb24gc2V0IHRvIE5PTkUuIEEgYm9vbGVhbiBpbnB1dCBhbGxvd3MgdG9cbiAqIHN3aXRjaCB0aGVtZSBvbiBvciBvZmYuXG4gKi9cbkBEaXJlY3RpdmUoKVxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0VHVpVGhlbWVTd2l0Y2hlciBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gICAgc3RhdGljIHN0eWxlOiBIVE1MU3R5bGVFbGVtZW50IHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvYzogRG9jdW1lbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkVGhlbWUoKTtcblxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3Qgc3R5bGVzID0gdGhpcy5kb2MuaGVhZC5xdWVyeVNlbGVjdG9yQWxsKGBzdHlsZWApO1xuXG4gICAgICAgICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBBYnN0cmFjdFR1aVRoZW1lU3dpdGNoZXIpLnN0eWxlID1cbiAgICAgICAgICAgIHN0eWxlc1tzdHlsZXMubGVuZ3RoIC0gMV07XG4gICAgfVxuXG4gICAgZ2V0IHN0eWxlKCk6IEhUTUxTdHlsZUVsZW1lbnQgfCBudWxsIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLmNvbnN0cnVjdG9yIGFzIHR5cGVvZiBBYnN0cmFjdFR1aVRoZW1lU3dpdGNoZXIpLnN0eWxlO1xuICAgIH1cblxuICAgIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlbW92ZVRoZW1lKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBhZGRUaGVtZSgpOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuc3R5bGUpIHtcbiAgICAgICAgICAgIHRoaXMuZG9jLmhlYWQuYXBwZW5kQ2hpbGQodGhpcy5zdHlsZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZVRoZW1lKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5zdHlsZSAmJiB0aGlzLmRvYy5oZWFkLmNvbnRhaW5zKHRoaXMuc3R5bGUpKSB7XG4gICAgICAgICAgICB0aGlzLmRvYy5oZWFkLnJlbW92ZUNoaWxkKHRoaXMuc3R5bGUpO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19