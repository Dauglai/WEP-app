import { ALWAYS_FALSE_HANDLER } from '@taiga-ui/cdk/constants';
import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { tuiIsFalsy } from '@taiga-ui/cdk/utils';
import { tuiIsNativeFocused } from '@taiga-ui/cdk/utils/focus';
import { concat, merge } from 'rxjs';
import { distinctUntilChanged, filter, ignoreElements, map, repeat, shareReplay, startWith, switchMap, take, withLatestFrom, } from 'rxjs/operators';
import { tuiIsAlive } from './is-alive';
import { tuiTypedFromEvent } from './typed-from-event';
let documentMouseUpIsAlive$;
let documentMouseDownIsAlive$;
export function tuiFocusVisibleObservable(element) {
    const elementBlur$ = tuiTypedFromEvent(element, `blur`);
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    if (!documentMouseDownIsAlive$ || !documentMouseUpIsAlive$) {
        documentMouseUpIsAlive$ = tuiTypedFromEvent(ownerDocument, `mouseup`, {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
        documentMouseDownIsAlive$ = tuiTypedFromEvent(ownerDocument, `mousedown`, {
            capture: true,
        }).pipe(tuiIsAlive(), startWith(false), shareReplay({ bufferSize: 1, refCount: true }));
    }
    return merge(
    // focus events excluding ones that came right after mouse action
    concat(tuiTypedFromEvent(element, `focus`).pipe(take(1)), 
    // filtering out blur events when element remains focused so that we ignore browser tab focus loss
    elementBlur$.pipe(filter(() => !tuiIsNativeFocused(element)), take(1), ignoreElements())).pipe(repeat(), withLatestFrom(documentMouseDownIsAlive$, documentMouseUpIsAlive$, (_event, elementActual, documentActual) => elementActual || documentActual), filter(tuiIsFalsy))).pipe(switchMap(() => elementBlur$.pipe(map(ALWAYS_FALSE_HANDLER), take(1), startWith(true))), distinctUntilChanged());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9jdXMtdmlzaWJsZS1vYnNlcnZhYmxlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL29ic2VydmFibGVzL2ZvY3VzLXZpc2libGUtb2JzZXJ2YWJsZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx5QkFBeUIsQ0FBQztBQUM3RCxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFDL0MsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDN0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUNILG9CQUFvQixFQUNwQixNQUFNLEVBQ04sY0FBYyxFQUNkLEdBQUcsRUFDSCxNQUFNLEVBQ04sV0FBVyxFQUNYLFNBQVMsRUFDVCxTQUFTLEVBQ1QsSUFBSSxFQUNKLGNBQWMsR0FDakIsTUFBTSxnQkFBZ0IsQ0FBQztBQUV4QixPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRXJELElBQUksdUJBQTRDLENBQUM7QUFDakQsSUFBSSx5QkFBOEMsQ0FBQztBQUVuRCxNQUFNLFVBQVUseUJBQXlCLENBQUMsT0FBZ0I7SUFDdEQsTUFBTSxZQUFZLEdBQUcsaUJBQWlCLENBQUMsT0FBTyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELE1BQU0sRUFBQyxhQUFhLEVBQUMsR0FBRyxPQUFPLENBQUM7SUFFaEMsSUFBSSxDQUFDLGFBQWEsRUFBRTtRQUNoQixNQUFNLElBQUkseUJBQXlCLEVBQUUsQ0FBQztLQUN6QztJQUVELElBQUksQ0FBQyx5QkFBeUIsSUFBSSxDQUFDLHVCQUF1QixFQUFFO1FBQ3hELHVCQUF1QixHQUFHLGlCQUFpQixDQUFDLGFBQWEsRUFBRSxTQUFTLEVBQUU7WUFDbEUsT0FBTyxFQUFFLElBQUk7U0FDaEIsQ0FBQyxDQUFDLElBQUksQ0FDSCxVQUFVLEVBQUUsRUFDWixTQUFTLENBQUMsS0FBSyxDQUFDLEVBQ2hCLFdBQVcsQ0FBQyxFQUFDLFVBQVUsRUFBRSxDQUFDLEVBQUUsUUFBUSxFQUFFLElBQUksRUFBQyxDQUFDLENBQy9DLENBQUM7UUFDRix5QkFBeUIsR0FBRyxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsV0FBVyxFQUFFO1lBQ3RFLE9BQU8sRUFBRSxJQUFJO1NBQ2hCLENBQUMsQ0FBQyxJQUFJLENBQ0gsVUFBVSxFQUFFLEVBQ1osU0FBUyxDQUFDLEtBQUssQ0FBQyxFQUNoQixXQUFXLENBQUMsRUFBQyxVQUFVLEVBQUUsQ0FBQyxFQUFFLFFBQVEsRUFBRSxJQUFJLEVBQUMsQ0FBQyxDQUMvQyxDQUFDO0tBQ0w7SUFFRCxPQUFPLEtBQUs7SUFDUixpRUFBaUU7SUFDakUsTUFBTSxDQUNGLGlCQUFpQixDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pELGtHQUFrRztJQUNsRyxZQUFZLENBQUMsSUFBSSxDQUNiLE1BQU0sQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDLEVBQzFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxjQUFjLEVBQUUsQ0FDbkIsQ0FDSixDQUFDLElBQUksQ0FDRixNQUFNLEVBQUUsRUFDUixjQUFjLENBQ1YseUJBQXlCLEVBQ3pCLHVCQUF1QixFQUN2QixDQUFDLE1BQU0sRUFBRSxhQUFhLEVBQUUsY0FBYyxFQUFFLEVBQUUsQ0FDdEMsYUFBYSxJQUFJLGNBQWMsQ0FDdEMsRUFDRCxNQUFNLENBQUMsVUFBVSxDQUFDLENBQ3JCLENBQ0osQ0FBQyxJQUFJLENBQ0YsU0FBUyxDQUFDLEdBQUcsRUFBRSxDQUNYLFlBQVksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUN6RSxFQUNELG9CQUFvQixFQUFFLENBQ3pCLENBQUM7QUFDTixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBTFdBWVNfRkFMU0VfSEFORExFUn0gZnJvbSAnQHRhaWdhLXVpL2Nkay9jb25zdGFudHMnO1xuaW1wb3J0IHtUdWlPd25lckRvY3VtZW50RXhjZXB0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY2RrL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHt0dWlJc0ZhbHN5fSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzJztcbmltcG9ydCB7dHVpSXNOYXRpdmVGb2N1c2VkfSBmcm9tICdAdGFpZ2EtdWkvY2RrL3V0aWxzL2ZvY3VzJztcbmltcG9ydCB7Y29uY2F0LCBtZXJnZSwgT2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkLFxuICAgIGZpbHRlcixcbiAgICBpZ25vcmVFbGVtZW50cyxcbiAgICBtYXAsXG4gICAgcmVwZWF0LFxuICAgIHNoYXJlUmVwbGF5LFxuICAgIHN0YXJ0V2l0aCxcbiAgICBzd2l0Y2hNYXAsXG4gICAgdGFrZSxcbiAgICB3aXRoTGF0ZXN0RnJvbSxcbn0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge3R1aUlzQWxpdmV9IGZyb20gJy4vaXMtYWxpdmUnO1xuaW1wb3J0IHt0dWlUeXBlZEZyb21FdmVudH0gZnJvbSAnLi90eXBlZC1mcm9tLWV2ZW50JztcblxubGV0IGRvY3VtZW50TW91c2VVcElzQWxpdmUkOiBPYnNlcnZhYmxlPGJvb2xlYW4+O1xubGV0IGRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQ6IE9ic2VydmFibGU8Ym9vbGVhbj47XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlGb2N1c1Zpc2libGVPYnNlcnZhYmxlKGVsZW1lbnQ6IEVsZW1lbnQpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcbiAgICBjb25zdCBlbGVtZW50Qmx1ciQgPSB0dWlUeXBlZEZyb21FdmVudChlbGVtZW50LCBgYmx1cmApO1xuICAgIGNvbnN0IHtvd25lckRvY3VtZW50fSA9IGVsZW1lbnQ7XG5cbiAgICBpZiAoIW93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR1aU93bmVyRG9jdW1lbnRFeGNlcHRpb24oKTtcbiAgICB9XG5cbiAgICBpZiAoIWRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQgfHwgIWRvY3VtZW50TW91c2VVcElzQWxpdmUkKSB7XG4gICAgICAgIGRvY3VtZW50TW91c2VVcElzQWxpdmUkID0gdHVpVHlwZWRGcm9tRXZlbnQob3duZXJEb2N1bWVudCwgYG1vdXNldXBgLCB7XG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICB9KS5waXBlKFxuICAgICAgICAgICAgdHVpSXNBbGl2ZSgpLFxuICAgICAgICAgICAgc3RhcnRXaXRoKGZhbHNlKSxcbiAgICAgICAgICAgIHNoYXJlUmVwbGF5KHtidWZmZXJTaXplOiAxLCByZWZDb3VudDogdHJ1ZX0pLFxuICAgICAgICApO1xuICAgICAgICBkb2N1bWVudE1vdXNlRG93bklzQWxpdmUkID0gdHVpVHlwZWRGcm9tRXZlbnQob3duZXJEb2N1bWVudCwgYG1vdXNlZG93bmAsIHtcbiAgICAgICAgICAgIGNhcHR1cmU6IHRydWUsXG4gICAgICAgIH0pLnBpcGUoXG4gICAgICAgICAgICB0dWlJc0FsaXZlKCksXG4gICAgICAgICAgICBzdGFydFdpdGgoZmFsc2UpLFxuICAgICAgICAgICAgc2hhcmVSZXBsYXkoe2J1ZmZlclNpemU6IDEsIHJlZkNvdW50OiB0cnVlfSksXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1lcmdlKFxuICAgICAgICAvLyBmb2N1cyBldmVudHMgZXhjbHVkaW5nIG9uZXMgdGhhdCBjYW1lIHJpZ2h0IGFmdGVyIG1vdXNlIGFjdGlvblxuICAgICAgICBjb25jYXQoXG4gICAgICAgICAgICB0dWlUeXBlZEZyb21FdmVudChlbGVtZW50LCBgZm9jdXNgKS5waXBlKHRha2UoMSkpLFxuICAgICAgICAgICAgLy8gZmlsdGVyaW5nIG91dCBibHVyIGV2ZW50cyB3aGVuIGVsZW1lbnQgcmVtYWlucyBmb2N1c2VkIHNvIHRoYXQgd2UgaWdub3JlIGJyb3dzZXIgdGFiIGZvY3VzIGxvc3NcbiAgICAgICAgICAgIGVsZW1lbnRCbHVyJC5waXBlKFxuICAgICAgICAgICAgICAgIGZpbHRlcigoKSA9PiAhdHVpSXNOYXRpdmVGb2N1c2VkKGVsZW1lbnQpKSxcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIGlnbm9yZUVsZW1lbnRzKCksXG4gICAgICAgICAgICApLFxuICAgICAgICApLnBpcGUoXG4gICAgICAgICAgICByZXBlYXQoKSxcbiAgICAgICAgICAgIHdpdGhMYXRlc3RGcm9tKFxuICAgICAgICAgICAgICAgIGRvY3VtZW50TW91c2VEb3duSXNBbGl2ZSQsXG4gICAgICAgICAgICAgICAgZG9jdW1lbnRNb3VzZVVwSXNBbGl2ZSQsXG4gICAgICAgICAgICAgICAgKF9ldmVudCwgZWxlbWVudEFjdHVhbCwgZG9jdW1lbnRBY3R1YWwpID0+XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRBY3R1YWwgfHwgZG9jdW1lbnRBY3R1YWwsXG4gICAgICAgICAgICApLFxuICAgICAgICAgICAgZmlsdGVyKHR1aUlzRmFsc3kpLFxuICAgICAgICApLFxuICAgICkucGlwZShcbiAgICAgICAgc3dpdGNoTWFwKCgpID0+XG4gICAgICAgICAgICBlbGVtZW50Qmx1ciQucGlwZShtYXAoQUxXQVlTX0ZBTFNFX0hBTkRMRVIpLCB0YWtlKDEpLCBzdGFydFdpdGgodHJ1ZSkpLFxuICAgICAgICApLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxuICAgICk7XG59XG4iXX0=