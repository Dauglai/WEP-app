import { TuiOwnerDocumentException } from '@taiga-ui/cdk/exceptions';
import { tuiIsPresent } from '@taiga-ui/cdk/utils/miscellaneous';
import { concat, merge } from 'rxjs';
import { endWith, map, repeat, take, takeWhile } from 'rxjs/operators';
import { tuiMouseDragFinishFrom } from './mouse-drag-finish-from';
import { tuiTypedFromEvent } from './typed-from-event';
export var TuiDragStage;
(function (TuiDragStage) {
    TuiDragStage[TuiDragStage["Start"] = 0] = "Start";
    TuiDragStage[TuiDragStage["Continues"] = 1] = "Continues";
    TuiDragStage[TuiDragStage["End"] = 2] = "End";
})(TuiDragStage || (TuiDragStage = {}));
export class TuiDragState {
    constructor(stage, event) {
        this.stage = stage;
        this.event = event;
    }
}
export function tuiDragAndDropFrom(element) {
    const { ownerDocument } = element;
    if (!ownerDocument) {
        throw new TuiOwnerDocumentException();
    }
    return concat(tuiTypedFromEvent(element, `mousedown`).pipe(take(1), map(event => new TuiDragState(0 /* Start */, event))), merge(tuiTypedFromEvent(ownerDocument, `mousemove`).pipe(map(event => new TuiDragState(1 /* Continues */, event))), tuiMouseDragFinishFrom(ownerDocument).pipe(take(1), map(event => new TuiDragState(2 /* End */, event)), endWith(null))).pipe(takeWhile(tuiIsPresent))).pipe(repeat());
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1hbmQtZHJvcC1mcm9tLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvY2RrL29ic2VydmFibGVzL2RyYWctYW5kLWRyb3AtZnJvbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUMseUJBQXlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuRSxPQUFPLEVBQUMsWUFBWSxFQUFDLE1BQU0sbUNBQW1DLENBQUM7QUFDL0QsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQWEsTUFBTSxNQUFNLENBQUM7QUFDL0MsT0FBTyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyRSxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCxNQUFNLENBQU4sSUFBa0IsWUFJakI7QUFKRCxXQUFrQixZQUFZO0lBQzFCLGlEQUFLLENBQUE7SUFDTCx5REFBUyxDQUFBO0lBQ1QsNkNBQUcsQ0FBQTtBQUNQLENBQUMsRUFKaUIsWUFBWSxLQUFaLFlBQVksUUFJN0I7QUFFRCxNQUFNLE9BQU8sWUFBWTtJQUNyQixZQUFxQixLQUFtQixFQUFXLEtBQWlCO1FBQS9DLFVBQUssR0FBTCxLQUFLLENBQWM7UUFBVyxVQUFLLEdBQUwsS0FBSyxDQUFZO0lBQUcsQ0FBQztDQUMzRTtBQUVELE1BQU0sVUFBVSxrQkFBa0IsQ0FBQyxPQUFnQjtJQUMvQyxNQUFNLEVBQUMsYUFBYSxFQUFDLEdBQUcsT0FBTyxDQUFDO0lBRWhDLElBQUksQ0FBQyxhQUFhLEVBQUU7UUFDaEIsTUFBTSxJQUFJLHlCQUF5QixFQUFFLENBQUM7S0FDekM7SUFFRCxPQUFPLE1BQU0sQ0FDVCxpQkFBaUIsQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUN4QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLGdCQUFxQixLQUFLLENBQUMsQ0FBQyxDQUM1RCxFQUNELEtBQUssQ0FDRCxpQkFBaUIsQ0FBQyxhQUFhLEVBQUUsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUM5QyxHQUFHLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFlBQVksb0JBQXlCLEtBQUssQ0FBQyxDQUFDLENBQ2hFLEVBQ0Qsc0JBQXNCLENBQUMsYUFBYSxDQUFDLENBQUMsSUFBSSxDQUN0QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsSUFBSSxZQUFZLGNBQW1CLEtBQUssQ0FBQyxDQUFDLEVBQ3ZELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FDaEIsQ0FDSixDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FDbEMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztBQUNyQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlPd25lckRvY3VtZW50RXhjZXB0aW9ufSBmcm9tICdAdGFpZ2EtdWkvY2RrL2V4Y2VwdGlvbnMnO1xuaW1wb3J0IHt0dWlJc1ByZXNlbnR9IGZyb20gJ0B0YWlnYS11aS9jZGsvdXRpbHMvbWlzY2VsbGFuZW91cyc7XG5pbXBvcnQge2NvbmNhdCwgbWVyZ2UsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtlbmRXaXRoLCBtYXAsIHJlcGVhdCwgdGFrZSwgdGFrZVdoaWxlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbmltcG9ydCB7dHVpTW91c2VEcmFnRmluaXNoRnJvbX0gZnJvbSAnLi9tb3VzZS1kcmFnLWZpbmlzaC1mcm9tJztcbmltcG9ydCB7dHVpVHlwZWRGcm9tRXZlbnR9IGZyb20gJy4vdHlwZWQtZnJvbS1ldmVudCc7XG5cbmV4cG9ydCBjb25zdCBlbnVtIFR1aURyYWdTdGFnZSB7XG4gICAgU3RhcnQsXG4gICAgQ29udGludWVzLFxuICAgIEVuZCxcbn1cblxuZXhwb3J0IGNsYXNzIFR1aURyYWdTdGF0ZSB7XG4gICAgY29uc3RydWN0b3IocmVhZG9ubHkgc3RhZ2U6IFR1aURyYWdTdGFnZSwgcmVhZG9ubHkgZXZlbnQ6IE1vdXNlRXZlbnQpIHt9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0dWlEcmFnQW5kRHJvcEZyb20oZWxlbWVudDogRWxlbWVudCk6IE9ic2VydmFibGU8VHVpRHJhZ1N0YXRlPiB7XG4gICAgY29uc3Qge293bmVyRG9jdW1lbnR9ID0gZWxlbWVudDtcblxuICAgIGlmICghb3duZXJEb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBuZXcgVHVpT3duZXJEb2N1bWVudEV4Y2VwdGlvbigpO1xuICAgIH1cblxuICAgIHJldHVybiBjb25jYXQoXG4gICAgICAgIHR1aVR5cGVkRnJvbUV2ZW50KGVsZW1lbnQsIGBtb3VzZWRvd25gKS5waXBlKFxuICAgICAgICAgICAgdGFrZSgxKSxcbiAgICAgICAgICAgIG1hcChldmVudCA9PiBuZXcgVHVpRHJhZ1N0YXRlKFR1aURyYWdTdGFnZS5TdGFydCwgZXZlbnQpKSxcbiAgICAgICAgKSxcbiAgICAgICAgbWVyZ2UoXG4gICAgICAgICAgICB0dWlUeXBlZEZyb21FdmVudChvd25lckRvY3VtZW50LCBgbW91c2Vtb3ZlYCkucGlwZShcbiAgICAgICAgICAgICAgICBtYXAoZXZlbnQgPT4gbmV3IFR1aURyYWdTdGF0ZShUdWlEcmFnU3RhZ2UuQ29udGludWVzLCBldmVudCkpLFxuICAgICAgICAgICAgKSxcbiAgICAgICAgICAgIHR1aU1vdXNlRHJhZ0ZpbmlzaEZyb20ob3duZXJEb2N1bWVudCkucGlwZShcbiAgICAgICAgICAgICAgICB0YWtlKDEpLFxuICAgICAgICAgICAgICAgIG1hcChldmVudCA9PiBuZXcgVHVpRHJhZ1N0YXRlKFR1aURyYWdTdGFnZS5FbmQsIGV2ZW50KSksXG4gICAgICAgICAgICAgICAgZW5kV2l0aChudWxsKSxcbiAgICAgICAgICAgICksXG4gICAgICAgICkucGlwZSh0YWtlV2hpbGUodHVpSXNQcmVzZW50KSksXG4gICAgKS5waXBlKHJlcGVhdCgpKTtcbn1cbiJdfQ==