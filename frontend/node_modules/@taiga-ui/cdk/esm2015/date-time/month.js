import { tuiAssert } from '@taiga-ui/cdk/classes';
import { tuiInRange, tuiNormalizeToIntNumber } from '@taiga-ui/cdk/utils/math';
import { MAX_MONTH, MIN_MONTH, MONTHS_IN_YEAR } from './date-time';
import { TuiYear } from './year';
/**
 * Immutable object consisting of year and month
 */
export class TuiMonth extends TuiYear {
    /**
     * @param year
     * @param month (starting with 0)
     */
    constructor(year, month) {
        super(year);
        this.month = month;
        ngDevMode && tuiAssert.assert(TuiMonth.isValidMonth(year, month));
    }
    /**
     * Tests month and year for validity
     */
    static isValidMonth(year, month) {
        return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);
    }
    /**
     * Returns number of days in a month
     */
    static getMonthDaysCount(month, isLeapYear) {
        ngDevMode && tuiAssert.assert(TuiMonth.isValidMonthPart(month));
        switch (month) {
            case 1 /* February */:
                return isLeapYear ? 29 : 28;
            case 3 /* April */:
            case 5 /* June */:
            case 8 /* September */:
            case 10 /* November */:
                return 30;
            default:
                return 31;
        }
    }
    /**
     * Returns current month and year based on local time zone
     * @nosideeffects
     */
    static currentLocal() {
        const nativeDate = new Date();
        return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());
    }
    /**
     * Returns current month and year based on UTC
     */
    static currentUtc() {
        const nativeDate = new Date();
        return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());
    }
    static lengthBetween(from, to) {
        const absoluteFrom = from.month + from.year * 12;
        const absoluteTo = to.month + to.year * 12;
        return absoluteTo - absoluteFrom;
    }
    /**
     * Normalizes number by clamping it between min and max month
     */
    static normalizeMonthPart(month) {
        return tuiNormalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);
    }
    /**
     * Tests month for validity
     */
    static isValidMonthPart(month) {
        return Number.isInteger(month) && tuiInRange(month, MIN_MONTH, MAX_MONTH + 1);
    }
    get formattedMonthPart() {
        return String(this.month + 1).padStart(2, `0`);
    }
    /**
     * Returns days in a month
     */
    get daysCount() {
        return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);
    }
    /**
     * Passed month and year are after current
     */
    monthBefore(another) {
        return (this.yearBefore(another) ||
            (this.yearSame(another) && this.month < another.month));
    }
    /**
     * Passed month and year are after or the same as current
     */
    monthSameOrBefore(another) {
        return (this.yearBefore(another) ||
            (this.yearSame(another) && this.month <= another.month));
    }
    /**
     * Passed month and year are the same as current
     */
    monthSame(another) {
        return this.yearSame(another) && this.month === another.month;
    }
    /**
     * Passed month and year are either before or equal to current
     */
    monthSameOrAfter(another) {
        return (this.yearAfter(another) ||
            (this.yearSame(another) && this.month >= another.month));
    }
    /**
     * Passed month and year are before current
     */
    monthAfter(another) {
        return (this.yearAfter(another) ||
            (this.yearSame(another) && this.month > another.month));
    }
    /**
     * Immutably alters current month and year by passed offset
     *
     * @param offset
     * @return new month and year object as a result of offsetting current
     */
    append({ year = 0, month = 0 }) {
        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;
        return new TuiMonth(Math.floor(totalMonths / MONTHS_IN_YEAR), totalMonths % MONTHS_IN_YEAR);
    }
    toString() {
        return `${this.formattedMonthPart}.${this.formattedYear}`;
    }
    valueOf() {
        return this.toLocalNativeDate().valueOf();
    }
    toJSON() {
        return `${super.toJSON()}-${this.formattedMonthPart}`;
    }
    /**
     * Returns native {@link Date} based on local time zone
     */
    toLocalNativeDate() {
        return new Date(this.year, this.month);
    }
    /**
     * Returns native {@link Date} based on UTC
     */
    toUtcNativeDate() {
        return new Date(Date.UTC(this.year, this.month));
    }
}
//# sourceMappingURL=data:application/json;base64,