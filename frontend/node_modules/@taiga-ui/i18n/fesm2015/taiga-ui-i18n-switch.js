import { TUI_DEFAULT_LANGUAGE, TUI_LANGUAGE_STORAGE_KEY, TUI_LANGUAGE_LOADER, TUI_LANGUAGE } from '@taiga-ui/i18n/tokens';
import * as i0 from '@angular/core';
import { Injectable, Inject, Optional } from '@angular/core';
import { LOCAL_STORAGE } from '@ng-web-apis/common';
import { of, from, BehaviorSubject } from 'rxjs';
import { __awaiter } from 'tslib';
import { map } from 'rxjs/operators';

function tuiAsyncLoadLanguage(language, loader, fallback) {
    return language && loader ? tuiLoadLanguage(language, loader) : of(fallback);
}
function tuiLoadLanguage(language, loader) {
    return from(normalizeCommonJSImport(loader(language))).pipe(map((module) => module === null || module === void 0 ? void 0 : module[`TUI_${language.toUpperCase()}_LANGUAGE`]));
}
// CommonJS `module.exports` is wrapped as `default` in ESModule.
function normalizeCommonJSImport(importPromise) {
    return __awaiter(this, void 0, void 0, function* () {
        return importPromise.then((m) => m.default || m);
    });
}

// @dynamic
class TuiLanguageSwitcher extends BehaviorSubject {
    constructor(fallback, key, storage, loader) {
        super(tuiAsyncLoadLanguage(storage.getItem(key), loader, fallback));
        this.fallback = fallback;
        this.key = key;
        this.storage = storage;
        this.loader = loader;
    }
    get language() {
        return this.storage.getItem(this.key) || this.fallback.name;
    }
    setLanguage(language) {
        this.storage.setItem(this.key, language);
        this.next(tuiAsyncLoadLanguage(language, this.loader, this.fallback));
    }
    clear() {
        this.storage.removeItem(this.key);
        this.next(of(this.fallback));
    }
}
TuiLanguageSwitcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcher, deps: [{ token: TUI_DEFAULT_LANGUAGE }, { token: TUI_LANGUAGE_STORAGE_KEY }, { token: LOCAL_STORAGE }, { token: TUI_LANGUAGE_LOADER, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TuiLanguageSwitcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcher, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcher, decorators: [{
            type: Injectable,
            args: [{ providedIn: `root` }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DEFAULT_LANGUAGE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_LANGUAGE_STORAGE_KEY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCAL_STORAGE]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_LANGUAGE_LOADER]
                }] }]; } });

function tuiLanguageSwitcher(loader) {
    return [
        {
            provide: TUI_LANGUAGE_LOADER,
            useFactory: () => loader,
        },
        {
            provide: TUI_LANGUAGE,
            useExisting: TuiLanguageSwitcher,
        },
    ];
}

/**
 * Generated bundle index. Do not edit.
 */

export { TuiLanguageSwitcher, tuiAsyncLoadLanguage, tuiLanguageSwitcher, tuiLoadLanguage };
//# sourceMappingURL=taiga-ui-i18n-switch.js.map
