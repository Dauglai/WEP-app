import { Inject, Injectable, Optional } from '@angular/core';
import { LOCAL_STORAGE } from '@ng-web-apis/common';
import { TUI_DEFAULT_LANGUAGE, TUI_LANGUAGE_LOADER, TUI_LANGUAGE_STORAGE_KEY, } from '@taiga-ui/i18n/tokens';
import { BehaviorSubject, of } from 'rxjs';
import { tuiAsyncLoadLanguage } from './utils';
import * as i0 from "@angular/core";
// @dynamic
export class TuiLanguageSwitcher extends BehaviorSubject {
    constructor(fallback, key, storage, loader) {
        super(tuiAsyncLoadLanguage(storage.getItem(key), loader, fallback));
        this.fallback = fallback;
        this.key = key;
        this.storage = storage;
        this.loader = loader;
    }
    get language() {
        return this.storage.getItem(this.key) || this.fallback.name;
    }
    setLanguage(language) {
        this.storage.setItem(this.key, language);
        this.next(tuiAsyncLoadLanguage(language, this.loader, this.fallback));
    }
    clear() {
        this.storage.removeItem(this.key);
        this.next(of(this.fallback));
    }
}
TuiLanguageSwitcher.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcher, deps: [{ token: TUI_DEFAULT_LANGUAGE }, { token: TUI_LANGUAGE_STORAGE_KEY }, { token: LOCAL_STORAGE }, { token: TUI_LANGUAGE_LOADER, optional: true }], target: i0.ɵɵFactoryTarget.Injectable });
TuiLanguageSwitcher.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcher, providedIn: `root` });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.17", ngImport: i0, type: TuiLanguageSwitcher, decorators: [{
            type: Injectable,
            args: [{ providedIn: `root` }]
        }], ctorParameters: function () { return [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_DEFAULT_LANGUAGE]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [TUI_LANGUAGE_STORAGE_KEY]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCAL_STORAGE]
                }] }, { type: undefined, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [TUI_LANGUAGE_LOADER]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGFuZ3VhZ2Utc3dpdGNoZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2kxOG4vc3dpdGNoL2xhbmd1YWdlLXN3aXRjaGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQU9sRCxPQUFPLEVBQ0gsb0JBQW9CLEVBQ3BCLG1CQUFtQixFQUNuQix3QkFBd0IsR0FDM0IsTUFBTSx1QkFBdUIsQ0FBQztBQUMvQixPQUFPLEVBQUMsZUFBZSxFQUFjLEVBQUUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUVyRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSxTQUFTLENBQUM7O0FBRTdDLFdBQVc7QUFFWCxNQUFNLE9BQU8sbUJBQW9CLFNBQVEsZUFBd0M7SUFDN0UsWUFFcUIsUUFBcUIsRUFFckIsR0FBVyxFQUVYLE9BQTJCLEVBRzNCLE1BQWdDO1FBRWpELEtBQUssQ0FBQyxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO1FBVG5ELGFBQVEsR0FBUixRQUFRLENBQWE7UUFFckIsUUFBRyxHQUFILEdBQUcsQ0FBUTtRQUVYLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBRzNCLFdBQU0sR0FBTixNQUFNLENBQTBCO0lBR3JELENBQUM7SUFFRCxJQUFJLFFBQVE7UUFDUixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQztJQUNoRSxDQUFDO0lBRUQsV0FBVyxDQUFDLFFBQXlCO1FBQ2pDLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFekMsSUFBSSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBRUQsS0FBSztRQUNELElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUVsQyxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUNqQyxDQUFDOztpSEE3QlEsbUJBQW1CLGtCQUVoQixvQkFBb0IsYUFFcEIsd0JBQXdCLGFBRXhCLGFBQWEsYUFHYixtQkFBbUI7cUhBVHRCLG1CQUFtQixjQURQLE1BQU07NEZBQ2xCLG1CQUFtQjtrQkFEL0IsVUFBVTttQkFBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7OzBCQUd2QixNQUFNOzJCQUFDLG9CQUFvQjs7MEJBRTNCLE1BQU07MkJBQUMsd0JBQXdCOzswQkFFL0IsTUFBTTsyQkFBQyxhQUFhOzswQkFFcEIsUUFBUTs7MEJBQ1IsTUFBTTsyQkFBQyxtQkFBbUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMT0NBTF9TVE9SQUdFfSBmcm9tICdAbmctd2ViLWFwaXMvY29tbW9uJztcbmltcG9ydCB7XG4gICAgVHVpTGFuZ3VhZ2UsXG4gICAgVHVpTGFuZ3VhZ2VMb2FkZXIsXG4gICAgVHVpTGFuZ3VhZ2VOYW1lLFxuICAgIFR1aUxhbmd1YWdlU3RvcmFnZSxcbn0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vaW50ZXJmYWNlcyc7XG5pbXBvcnQge1xuICAgIFRVSV9ERUZBVUxUX0xBTkdVQUdFLFxuICAgIFRVSV9MQU5HVUFHRV9MT0FERVIsXG4gICAgVFVJX0xBTkdVQUdFX1NUT1JBR0VfS0VZLFxufSBmcm9tICdAdGFpZ2EtdWkvaTE4bi90b2tlbnMnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcblxuaW1wb3J0IHt0dWlBc3luY0xvYWRMYW5ndWFnZX0gZnJvbSAnLi91dGlscyc7XG5cbi8vIEBkeW5hbWljXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogYHJvb3RgfSlcbmV4cG9ydCBjbGFzcyBUdWlMYW5ndWFnZVN3aXRjaGVyIGV4dGVuZHMgQmVoYXZpb3JTdWJqZWN0PE9ic2VydmFibGU8VHVpTGFuZ3VhZ2U+PiB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoVFVJX0RFRkFVTFRfTEFOR1VBR0UpXG4gICAgICAgIHByaXZhdGUgcmVhZG9ubHkgZmFsbGJhY2s6IFR1aUxhbmd1YWdlLFxuICAgICAgICBASW5qZWN0KFRVSV9MQU5HVUFHRV9TVE9SQUdFX0tFWSlcbiAgICAgICAgcHJpdmF0ZSByZWFkb25seSBrZXk6IHN0cmluZyxcbiAgICAgICAgQEluamVjdChMT0NBTF9TVE9SQUdFKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IHN0b3JhZ2U6IFR1aUxhbmd1YWdlU3RvcmFnZSxcbiAgICAgICAgQE9wdGlvbmFsKClcbiAgICAgICAgQEluamVjdChUVUlfTEFOR1VBR0VfTE9BREVSKVxuICAgICAgICBwcml2YXRlIHJlYWRvbmx5IGxvYWRlcjogVHVpTGFuZ3VhZ2VMb2FkZXIgfCBudWxsLFxuICAgICkge1xuICAgICAgICBzdXBlcih0dWlBc3luY0xvYWRMYW5ndWFnZShzdG9yYWdlLmdldEl0ZW0oa2V5KSwgbG9hZGVyLCBmYWxsYmFjaykpO1xuICAgIH1cblxuICAgIGdldCBsYW5ndWFnZSgpOiBUdWlMYW5ndWFnZU5hbWUge1xuICAgICAgICByZXR1cm4gdGhpcy5zdG9yYWdlLmdldEl0ZW0odGhpcy5rZXkpIHx8IHRoaXMuZmFsbGJhY2submFtZTtcbiAgICB9XG5cbiAgICBzZXRMYW5ndWFnZShsYW5ndWFnZTogVHVpTGFuZ3VhZ2VOYW1lKTogdm9pZCB7XG4gICAgICAgIHRoaXMuc3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LCBsYW5ndWFnZSk7XG5cbiAgICAgICAgdGhpcy5uZXh0KHR1aUFzeW5jTG9hZExhbmd1YWdlKGxhbmd1YWdlLCB0aGlzLmxvYWRlciwgdGhpcy5mYWxsYmFjaykpO1xuICAgIH1cblxuICAgIGNsZWFyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0b3JhZ2UucmVtb3ZlSXRlbSh0aGlzLmtleSk7XG5cbiAgICAgICAgdGhpcy5uZXh0KG9mKHRoaXMuZmFsbGJhY2spKTtcbiAgICB9XG59XG4iXX0=