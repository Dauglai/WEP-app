export const TUI_PORTUGUESE_LANGUAGE_ADDON_EDITOR = {
    colorSelectorModeNames: [`Cor sólida`, `Gradiente`],
    toolbarTools: {
        undo: `Desfazer`,
        redo: `Refazer`,
        font: `Fonte`,
        fontStyle: `Estilo da Fonte`,
        fontSize: `Tamanho da Fonte`,
        bold: `Negrito`,
        italic: `Itálico`,
        underline: `Sublinhado`,
        strikeThrough: `Riscado`,
        justify: `Justificado`,
        justifyLeft: `Justificado à esquerda`,
        justifyCenter: `Justificado ao centro`,
        justifyRight: `Justificado à direita`,
        justifyFull: `Totalmente justificado`,
        list: `Lista`,
        indent: `Recuo interno`,
        outdent: `Recuo externo`,
        unorderedList: `Lista desordenada`,
        orderedList: `Lista ordenada`,
        quote: `Frase`,
        foreColor: `Cor`,
        backColor: `Cor de fundo`,
        hiliteColor: `Cor destaque`,
        clear: `Limpar`,
        link: `Link`,
        attach: `Anexar arquivo`,
        tex: `Inserir TeX`,
        code: `Código`,
        image: `Inserir imagem`,
        insertHorizontalRule: `Inserir regra horizontal`,
        superscript: `Superscript`,
        subscript: `Subscript`,
        insertTable: `Insert table`,
        hiliteGroup: `Hilite group`,
        insertGroup: `Insert group`,
        removeGroup: `Remove group`,
        insertAnchor: `Insert anchor`,
        mergeCells: `Merge cells`,
        splitCells: `Split cells`,
        rowsColumnsManaging: `Managing rows and columns`,
        cellColor: `Cell color`,
        setDetails: `Details`,
        removeDetails: `Remove details`,
    },
    editorEditLink: {
        urlExample: `example.com`,
        anchorExample: `anchor`,
    },
    editorTableCommands: [
        [`Insert column before`, `Insert column after`],
        [`Insert row before`, `Insert row after`],
        [`Delete column`, `Delete row`],
    ],
    editorCodeOptions: [`Code in the text`, `Code in block`],
    editorFontOptions: {
        small: `Small`,
        normal: `Normal`,
        large: `Large`,
        title: `Title`,
        subtitle: `Subtitle`,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tZWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi9sYW5ndWFnZXMvcG9ydHVndWVzZS9hZGRvbi1lZGl0b3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsTUFBTSxDQUFDLE1BQU0sb0NBQW9DLEdBQXNCO0lBQ25FLHNCQUFzQixFQUFFLENBQUMsWUFBWSxFQUFFLFdBQVcsQ0FBQztJQUNuRCxZQUFZLEVBQUU7UUFDVixJQUFJLEVBQUUsVUFBVTtRQUNoQixJQUFJLEVBQUUsU0FBUztRQUNmLElBQUksRUFBRSxPQUFPO1FBQ2IsU0FBUyxFQUFFLGlCQUFpQjtRQUM1QixRQUFRLEVBQUUsa0JBQWtCO1FBQzVCLElBQUksRUFBRSxTQUFTO1FBQ2YsTUFBTSxFQUFFLFNBQVM7UUFDakIsU0FBUyxFQUFFLFlBQVk7UUFDdkIsYUFBYSxFQUFFLFNBQVM7UUFDeEIsT0FBTyxFQUFFLGFBQWE7UUFDdEIsV0FBVyxFQUFFLHdCQUF3QjtRQUNyQyxhQUFhLEVBQUUsdUJBQXVCO1FBQ3RDLFlBQVksRUFBRSx1QkFBdUI7UUFDckMsV0FBVyxFQUFFLHdCQUF3QjtRQUNyQyxJQUFJLEVBQUUsT0FBTztRQUNiLE1BQU0sRUFBRSxlQUFlO1FBQ3ZCLE9BQU8sRUFBRSxlQUFlO1FBQ3hCLGFBQWEsRUFBRSxtQkFBbUI7UUFDbEMsV0FBVyxFQUFFLGdCQUFnQjtRQUM3QixLQUFLLEVBQUUsT0FBTztRQUNkLFNBQVMsRUFBRSxLQUFLO1FBQ2hCLFNBQVMsRUFBRSxjQUFjO1FBQ3pCLFdBQVcsRUFBRSxjQUFjO1FBQzNCLEtBQUssRUFBRSxRQUFRO1FBQ2YsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLEdBQUcsRUFBRSxhQUFhO1FBQ2xCLElBQUksRUFBRSxRQUFRO1FBQ2QsS0FBSyxFQUFFLGdCQUFnQjtRQUN2QixvQkFBb0IsRUFBRSwwQkFBMEI7UUFDaEQsV0FBVyxFQUFFLGFBQWE7UUFDMUIsU0FBUyxFQUFFLFdBQVc7UUFDdEIsV0FBVyxFQUFFLGNBQWM7UUFDM0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsWUFBWSxFQUFFLGVBQWU7UUFDN0IsVUFBVSxFQUFFLGFBQWE7UUFDekIsVUFBVSxFQUFFLGFBQWE7UUFDekIsbUJBQW1CLEVBQUUsMkJBQTJCO1FBQ2hELFNBQVMsRUFBRSxZQUFZO1FBQ3ZCLFVBQVUsRUFBRSxTQUFTO1FBQ3JCLGFBQWEsRUFBRSxnQkFBZ0I7S0FDbEM7SUFDRCxjQUFjLEVBQUU7UUFDWixVQUFVLEVBQUUsYUFBYTtRQUN6QixhQUFhLEVBQUUsUUFBUTtLQUMxQjtJQUNELG1CQUFtQixFQUFFO1FBQ2pCLENBQUMsc0JBQXNCLEVBQUUscUJBQXFCLENBQUM7UUFDL0MsQ0FBQyxtQkFBbUIsRUFBRSxrQkFBa0IsQ0FBQztRQUN6QyxDQUFDLGVBQWUsRUFBRSxZQUFZLENBQUM7S0FDbEM7SUFDRCxpQkFBaUIsRUFBRSxDQUFDLGtCQUFrQixFQUFFLGVBQWUsQ0FBQztJQUN4RCxpQkFBaUIsRUFBRTtRQUNmLEtBQUssRUFBRSxPQUFPO1FBQ2QsTUFBTSxFQUFFLFFBQVE7UUFDaEIsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsT0FBTztRQUNkLFFBQVEsRUFBRSxVQUFVO0tBQ3ZCO0NBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7VHVpTGFuZ3VhZ2VFZGl0b3J9IGZyb20gJ0B0YWlnYS11aS9pMThuL2ludGVyZmFjZXMnO1xuXG5leHBvcnQgY29uc3QgVFVJX1BPUlRVR1VFU0VfTEFOR1VBR0VfQURET05fRURJVE9SOiBUdWlMYW5ndWFnZUVkaXRvciA9IHtcbiAgICBjb2xvclNlbGVjdG9yTW9kZU5hbWVzOiBbYENvciBzw7NsaWRhYCwgYEdyYWRpZW50ZWBdLFxuICAgIHRvb2xiYXJUb29sczoge1xuICAgICAgICB1bmRvOiBgRGVzZmF6ZXJgLFxuICAgICAgICByZWRvOiBgUmVmYXplcmAsXG4gICAgICAgIGZvbnQ6IGBGb250ZWAsXG4gICAgICAgIGZvbnRTdHlsZTogYEVzdGlsbyBkYSBGb250ZWAsXG4gICAgICAgIGZvbnRTaXplOiBgVGFtYW5obyBkYSBGb250ZWAsXG4gICAgICAgIGJvbGQ6IGBOZWdyaXRvYCxcbiAgICAgICAgaXRhbGljOiBgSXTDoWxpY29gLFxuICAgICAgICB1bmRlcmxpbmU6IGBTdWJsaW5oYWRvYCxcbiAgICAgICAgc3RyaWtlVGhyb3VnaDogYFJpc2NhZG9gLFxuICAgICAgICBqdXN0aWZ5OiBgSnVzdGlmaWNhZG9gLFxuICAgICAgICBqdXN0aWZ5TGVmdDogYEp1c3RpZmljYWRvIMOgIGVzcXVlcmRhYCxcbiAgICAgICAganVzdGlmeUNlbnRlcjogYEp1c3RpZmljYWRvIGFvIGNlbnRyb2AsXG4gICAgICAgIGp1c3RpZnlSaWdodDogYEp1c3RpZmljYWRvIMOgIGRpcmVpdGFgLFxuICAgICAgICBqdXN0aWZ5RnVsbDogYFRvdGFsbWVudGUganVzdGlmaWNhZG9gLFxuICAgICAgICBsaXN0OiBgTGlzdGFgLFxuICAgICAgICBpbmRlbnQ6IGBSZWN1byBpbnRlcm5vYCxcbiAgICAgICAgb3V0ZGVudDogYFJlY3VvIGV4dGVybm9gLFxuICAgICAgICB1bm9yZGVyZWRMaXN0OiBgTGlzdGEgZGVzb3JkZW5hZGFgLFxuICAgICAgICBvcmRlcmVkTGlzdDogYExpc3RhIG9yZGVuYWRhYCxcbiAgICAgICAgcXVvdGU6IGBGcmFzZWAsXG4gICAgICAgIGZvcmVDb2xvcjogYENvcmAsXG4gICAgICAgIGJhY2tDb2xvcjogYENvciBkZSBmdW5kb2AsXG4gICAgICAgIGhpbGl0ZUNvbG9yOiBgQ29yIGRlc3RhcXVlYCxcbiAgICAgICAgY2xlYXI6IGBMaW1wYXJgLFxuICAgICAgICBsaW5rOiBgTGlua2AsXG4gICAgICAgIGF0dGFjaDogYEFuZXhhciBhcnF1aXZvYCxcbiAgICAgICAgdGV4OiBgSW5zZXJpciBUZVhgLFxuICAgICAgICBjb2RlOiBgQ8OzZGlnb2AsXG4gICAgICAgIGltYWdlOiBgSW5zZXJpciBpbWFnZW1gLFxuICAgICAgICBpbnNlcnRIb3Jpem9udGFsUnVsZTogYEluc2VyaXIgcmVncmEgaG9yaXpvbnRhbGAsXG4gICAgICAgIHN1cGVyc2NyaXB0OiBgU3VwZXJzY3JpcHRgLFxuICAgICAgICBzdWJzY3JpcHQ6IGBTdWJzY3JpcHRgLFxuICAgICAgICBpbnNlcnRUYWJsZTogYEluc2VydCB0YWJsZWAsXG4gICAgICAgIGhpbGl0ZUdyb3VwOiBgSGlsaXRlIGdyb3VwYCxcbiAgICAgICAgaW5zZXJ0R3JvdXA6IGBJbnNlcnQgZ3JvdXBgLFxuICAgICAgICByZW1vdmVHcm91cDogYFJlbW92ZSBncm91cGAsXG4gICAgICAgIGluc2VydEFuY2hvcjogYEluc2VydCBhbmNob3JgLFxuICAgICAgICBtZXJnZUNlbGxzOiBgTWVyZ2UgY2VsbHNgLFxuICAgICAgICBzcGxpdENlbGxzOiBgU3BsaXQgY2VsbHNgLFxuICAgICAgICByb3dzQ29sdW1uc01hbmFnaW5nOiBgTWFuYWdpbmcgcm93cyBhbmQgY29sdW1uc2AsXG4gICAgICAgIGNlbGxDb2xvcjogYENlbGwgY29sb3JgLFxuICAgICAgICBzZXREZXRhaWxzOiBgRGV0YWlsc2AsXG4gICAgICAgIHJlbW92ZURldGFpbHM6IGBSZW1vdmUgZGV0YWlsc2AsXG4gICAgfSxcbiAgICBlZGl0b3JFZGl0TGluazoge1xuICAgICAgICB1cmxFeGFtcGxlOiBgZXhhbXBsZS5jb21gLFxuICAgICAgICBhbmNob3JFeGFtcGxlOiBgYW5jaG9yYCxcbiAgICB9LFxuICAgIGVkaXRvclRhYmxlQ29tbWFuZHM6IFtcbiAgICAgICAgW2BJbnNlcnQgY29sdW1uIGJlZm9yZWAsIGBJbnNlcnQgY29sdW1uIGFmdGVyYF0sXG4gICAgICAgIFtgSW5zZXJ0IHJvdyBiZWZvcmVgLCBgSW5zZXJ0IHJvdyBhZnRlcmBdLFxuICAgICAgICBbYERlbGV0ZSBjb2x1bW5gLCBgRGVsZXRlIHJvd2BdLFxuICAgIF0sXG4gICAgZWRpdG9yQ29kZU9wdGlvbnM6IFtgQ29kZSBpbiB0aGUgdGV4dGAsIGBDb2RlIGluIGJsb2NrYF0sXG4gICAgZWRpdG9yRm9udE9wdGlvbnM6IHtcbiAgICAgICAgc21hbGw6IGBTbWFsbGAsXG4gICAgICAgIG5vcm1hbDogYE5vcm1hbGAsXG4gICAgICAgIGxhcmdlOiBgTGFyZ2VgLFxuICAgICAgICB0aXRsZTogYFRpdGxlYCxcbiAgICAgICAgc3VidGl0bGU6IGBTdWJ0aXRsZWAsXG4gICAgfSxcbn07XG4iXX0=