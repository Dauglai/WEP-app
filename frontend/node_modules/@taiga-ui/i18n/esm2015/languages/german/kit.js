export const TUI_GERMAN_LANGUAGE_KIT = {
    cancel: `Abbrechen`,
    done: `Fertig`,
    more: `Mehr`,
    otherDate: `Anderes Datum...`,
    showAll: `Show all`,
    hide: `Hide`,
    mobileCalendarTexts: [`Tag auswählen`, `Zeitraum auswählen`],
    range: [`von`, `bis`],
    countTexts: [`Plus`, `Minus`],
    time: {
        'HH:MM': `HH:MM`,
        'HH:MM:SS': `HH:MM:SS`,
        'HH:MM:SS.MSS': `HH:MM:SS.MSS`,
    },
    dateTexts: {
        DMY: `dd.mm.yyyy`,
        MDY: `mm.dd.yyyy`,
        YMD: `yyyy.mm.dd`,
    },
    digitalInformationUnits: [`B`, `KB`, `MB`],
    passwordTexts: [`Passwort anzeigen`, `Passwort ausblenden`],
    copyTexts: [`Kopieren`, `Kopiert`],
    shortCalendarMonths: [
        `Jan`,
        `Feb`,
        `Mär`,
        `Apr`,
        `Mai`,
        `Jun`,
        `Jul`,
        `Aug`,
        `Sep`,
        `Okt`,
        `Nov`,
        `Dez`,
    ],
    pagination: [`Vorherige Seite`, `Nächste Seite`],
    fileTexts: {
        loadingError: `Fehler beim Laden`,
        preview: `Vorschau`,
        remove: `Entfernen`,
    },
    inputFileTexts: {
        defaultLabelSingle: `oder einzelne Datei hier ablegen`,
        defaultLabelMultiple: `oder mehrere Dateien hier ablegen`,
        defaultLinkSingle: `Datei auswählen`,
        defaultLinkMultiple: `Dateien auswählen`,
        maxSizeRejectionReason: `Die Dateigröße überschreitet die maximal zulässige Größe von `,
        formatRejectionReason: `Ungültiges Dateiformat`,
        drop: `Datei hier ablegen`,
        dropMultiple: `Dateien hier ablegen`,
    },
    multiSelectTexts: {
        all: `Alles auswählen`,
        none: `Keine auswählen`,
    },
    prompt: {
        yes: `Ja`,
        no: `Nein`,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2l0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi9sYW5ndWFnZXMvZ2VybWFuL2tpdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBbUI7SUFDbkQsTUFBTSxFQUFFLFdBQVc7SUFDbkIsSUFBSSxFQUFFLFFBQVE7SUFDZCxJQUFJLEVBQUUsTUFBTTtJQUNaLFNBQVMsRUFBRSxrQkFBa0I7SUFDN0IsT0FBTyxFQUFFLFVBQVU7SUFDbkIsSUFBSSxFQUFFLE1BQU07SUFDWixtQkFBbUIsRUFBRSxDQUFDLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQztJQUM1RCxLQUFLLEVBQUUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0lBQ3JCLFVBQVUsRUFBRSxDQUFDLE1BQU0sRUFBRSxPQUFPLENBQUM7SUFDN0IsSUFBSSxFQUFFO1FBQ0YsT0FBTyxFQUFFLE9BQU87UUFDaEIsVUFBVSxFQUFFLFVBQVU7UUFDdEIsY0FBYyxFQUFFLGNBQWM7S0FDakM7SUFDRCxTQUFTLEVBQUU7UUFDUCxHQUFHLEVBQUUsWUFBWTtRQUNqQixHQUFHLEVBQUUsWUFBWTtRQUNqQixHQUFHLEVBQUUsWUFBWTtLQUNwQjtJQUNELHVCQUF1QixFQUFFLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7SUFDMUMsYUFBYSxFQUFFLENBQUMsbUJBQW1CLEVBQUUscUJBQXFCLENBQUM7SUFDM0QsU0FBUyxFQUFFLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBQztJQUNsQyxtQkFBbUIsRUFBRTtRQUNqQixLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7UUFDTCxLQUFLO1FBQ0wsS0FBSztRQUNMLEtBQUs7S0FDUjtJQUNELFVBQVUsRUFBRSxDQUFDLGlCQUFpQixFQUFFLGVBQWUsQ0FBQztJQUNoRCxTQUFTLEVBQUU7UUFDUCxZQUFZLEVBQUUsbUJBQW1CO1FBQ2pDLE9BQU8sRUFBRSxVQUFVO1FBQ25CLE1BQU0sRUFBRSxXQUFXO0tBQ3RCO0lBQ0QsY0FBYyxFQUFFO1FBQ1osa0JBQWtCLEVBQUUsa0NBQWtDO1FBQ3RELG9CQUFvQixFQUFFLG1DQUFtQztRQUN6RCxpQkFBaUIsRUFBRSxpQkFBaUI7UUFDcEMsbUJBQW1CLEVBQUUsbUJBQW1CO1FBQ3hDLHNCQUFzQixFQUFFLCtEQUErRDtRQUN2RixxQkFBcUIsRUFBRSx3QkFBd0I7UUFDL0MsSUFBSSxFQUFFLG9CQUFvQjtRQUMxQixZQUFZLEVBQUUsc0JBQXNCO0tBQ3ZDO0lBQ0QsZ0JBQWdCLEVBQUU7UUFDZCxHQUFHLEVBQUUsaUJBQWlCO1FBQ3RCLElBQUksRUFBRSxpQkFBaUI7S0FDMUI7SUFDRCxNQUFNLEVBQUU7UUFDSixHQUFHLEVBQUUsSUFBSTtRQUNULEVBQUUsRUFBRSxNQUFNO0tBQ2I7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlMYW5ndWFnZUtpdH0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfR0VSTUFOX0xBTkdVQUdFX0tJVDogVHVpTGFuZ3VhZ2VLaXQgPSB7XG4gICAgY2FuY2VsOiBgQWJicmVjaGVuYCxcbiAgICBkb25lOiBgRmVydGlnYCxcbiAgICBtb3JlOiBgTWVocmAsXG4gICAgb3RoZXJEYXRlOiBgQW5kZXJlcyBEYXR1bS4uLmAsXG4gICAgc2hvd0FsbDogYFNob3cgYWxsYCxcbiAgICBoaWRlOiBgSGlkZWAsXG4gICAgbW9iaWxlQ2FsZW5kYXJUZXh0czogW2BUYWcgYXVzd8OkaGxlbmAsIGBaZWl0cmF1bSBhdXN3w6RobGVuYF0sXG4gICAgcmFuZ2U6IFtgdm9uYCwgYGJpc2BdLFxuICAgIGNvdW50VGV4dHM6IFtgUGx1c2AsIGBNaW51c2BdLFxuICAgIHRpbWU6IHtcbiAgICAgICAgJ0hIOk1NJzogYEhIOk1NYCxcbiAgICAgICAgJ0hIOk1NOlNTJzogYEhIOk1NOlNTYCxcbiAgICAgICAgJ0hIOk1NOlNTLk1TUyc6IGBISDpNTTpTUy5NU1NgLFxuICAgIH0sXG4gICAgZGF0ZVRleHRzOiB7XG4gICAgICAgIERNWTogYGRkLm1tLnl5eXlgLFxuICAgICAgICBNRFk6IGBtbS5kZC55eXl5YCxcbiAgICAgICAgWU1EOiBgeXl5eS5tbS5kZGAsXG4gICAgfSxcbiAgICBkaWdpdGFsSW5mb3JtYXRpb25Vbml0czogW2BCYCwgYEtCYCwgYE1CYF0sXG4gICAgcGFzc3dvcmRUZXh0czogW2BQYXNzd29ydCBhbnplaWdlbmAsIGBQYXNzd29ydCBhdXNibGVuZGVuYF0sXG4gICAgY29weVRleHRzOiBbYEtvcGllcmVuYCwgYEtvcGllcnRgXSxcbiAgICBzaG9ydENhbGVuZGFyTW9udGhzOiBbXG4gICAgICAgIGBKYW5gLFxuICAgICAgICBgRmViYCxcbiAgICAgICAgYE3DpHJgLFxuICAgICAgICBgQXByYCxcbiAgICAgICAgYE1haWAsXG4gICAgICAgIGBKdW5gLFxuICAgICAgICBgSnVsYCxcbiAgICAgICAgYEF1Z2AsXG4gICAgICAgIGBTZXBgLFxuICAgICAgICBgT2t0YCxcbiAgICAgICAgYE5vdmAsXG4gICAgICAgIGBEZXpgLFxuICAgIF0sXG4gICAgcGFnaW5hdGlvbjogW2BWb3JoZXJpZ2UgU2VpdGVgLCBgTsOkY2hzdGUgU2VpdGVgXSxcbiAgICBmaWxlVGV4dHM6IHtcbiAgICAgICAgbG9hZGluZ0Vycm9yOiBgRmVobGVyIGJlaW0gTGFkZW5gLFxuICAgICAgICBwcmV2aWV3OiBgVm9yc2NoYXVgLFxuICAgICAgICByZW1vdmU6IGBFbnRmZXJuZW5gLFxuICAgIH0sXG4gICAgaW5wdXRGaWxlVGV4dHM6IHtcbiAgICAgICAgZGVmYXVsdExhYmVsU2luZ2xlOiBgb2RlciBlaW56ZWxuZSBEYXRlaSBoaWVyIGFibGVnZW5gLFxuICAgICAgICBkZWZhdWx0TGFiZWxNdWx0aXBsZTogYG9kZXIgbWVocmVyZSBEYXRlaWVuIGhpZXIgYWJsZWdlbmAsXG4gICAgICAgIGRlZmF1bHRMaW5rU2luZ2xlOiBgRGF0ZWkgYXVzd8OkaGxlbmAsXG4gICAgICAgIGRlZmF1bHRMaW5rTXVsdGlwbGU6IGBEYXRlaWVuIGF1c3fDpGhsZW5gLFxuICAgICAgICBtYXhTaXplUmVqZWN0aW9uUmVhc29uOiBgRGllIERhdGVpZ3LDtsOfZSDDvGJlcnNjaHJlaXRldCBkaWUgbWF4aW1hbCB6dWzDpHNzaWdlIEdyw7bDn2Ugdm9uIGAsXG4gICAgICAgIGZvcm1hdFJlamVjdGlvblJlYXNvbjogYFVuZ8O8bHRpZ2VzIERhdGVpZm9ybWF0YCxcbiAgICAgICAgZHJvcDogYERhdGVpIGhpZXIgYWJsZWdlbmAsXG4gICAgICAgIGRyb3BNdWx0aXBsZTogYERhdGVpZW4gaGllciBhYmxlZ2VuYCxcbiAgICB9LFxuICAgIG11bHRpU2VsZWN0VGV4dHM6IHtcbiAgICAgICAgYWxsOiBgQWxsZXMgYXVzd8OkaGxlbmAsXG4gICAgICAgIG5vbmU6IGBLZWluZSBhdXN3w6RobGVuYCxcbiAgICB9LFxuICAgIHByb21wdDoge1xuICAgICAgICB5ZXM6IGBKYWAsXG4gICAgICAgIG5vOiBgTmVpbmAsXG4gICAgfSxcbn07XG4iXX0=