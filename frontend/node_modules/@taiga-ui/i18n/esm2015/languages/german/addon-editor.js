export const TUI_GERMAN_LANGUAGE_ADDON_EDITOR = {
    colorSelectorModeNames: [`Farbe`, `Verlauf`],
    toolbarTools: {
        undo: `Rückgängig machen`,
        redo: `Wiederholen`,
        font: `Schriftart`,
        fontStyle: `Schriftstil`,
        fontSize: `Schriftgröße`,
        bold: `Fett`,
        italic: `Kursiv`,
        underline: `Unterstrichen`,
        strikeThrough: `Durchgestrichen`,
        justify: `Blocksatz`,
        justifyLeft: `Blocksatz links`,
        justifyCenter: `Blocksatz mittig`,
        justifyRight: `Blocksatz rechts`,
        justifyFull: `Blocksatz`,
        list: `Liste`,
        indent: `Einrücken`,
        outdent: `Ausrücken`,
        unorderedList: `Ungeordnete Liste`,
        orderedList: `Geordnete Liste`,
        quote: `Blockquote`,
        foreColor: `Farbe`,
        backColor: `Hintergrundfarbe`,
        hiliteColor: `Hilite-Farbe`,
        clear: `Löschen`,
        link: `Link`,
        attach: `Datei anhängen`,
        tex: `TeX einfügen`,
        code: `Quelltext`,
        image: `Bild einfügen`,
        insertHorizontalRule: `Horizontale Linie einfügen`,
        superscript: `Hochgestellt`,
        subscript: `Tiefgestellt`,
        insertTable: `Insert table`,
        insertGroup: `Insert group`,
        hiliteGroup: `Hilite group`,
        removeGroup: `Remove group`,
        insertAnchor: `Insert anchor`,
        mergeCells: `Merge cells`,
        splitCells: `Split cells`,
        rowsColumnsManaging: `Managing rows and columns`,
        cellColor: `Cell color`,
        setDetails: `Details`,
        removeDetails: `Remove details`,
    },
    editorEditLink: {
        urlExample: `example.com`,
        anchorExample: `anchor`,
    },
    editorTableCommands: [
        [`Insert column before`, `Insert column after`],
        [`Insert row before`, `Insert row after`],
        [`Delete column`, `Delete row`],
    ],
    editorCodeOptions: [`Code in the text`, `Code in block`],
    editorFontOptions: {
        small: `Small`,
        large: `Large`,
        normal: `Normal`,
        title: `Title`,
        subtitle: `Subtitle`,
    },
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkb24tZWRpdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaTE4bi9sYW5ndWFnZXMvZ2VybWFuL2FkZG9uLWVkaXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLENBQUMsTUFBTSxnQ0FBZ0MsR0FBc0I7SUFDL0Qsc0JBQXNCLEVBQUUsQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDO0lBQzVDLFlBQVksRUFBRTtRQUNWLElBQUksRUFBRSxtQkFBbUI7UUFDekIsSUFBSSxFQUFFLGFBQWE7UUFDbkIsSUFBSSxFQUFFLFlBQVk7UUFDbEIsU0FBUyxFQUFFLGFBQWE7UUFDeEIsUUFBUSxFQUFFLGNBQWM7UUFDeEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsUUFBUTtRQUNoQixTQUFTLEVBQUUsZUFBZTtRQUMxQixhQUFhLEVBQUUsaUJBQWlCO1FBQ2hDLE9BQU8sRUFBRSxXQUFXO1FBQ3BCLFdBQVcsRUFBRSxpQkFBaUI7UUFDOUIsYUFBYSxFQUFFLGtCQUFrQjtRQUNqQyxZQUFZLEVBQUUsa0JBQWtCO1FBQ2hDLFdBQVcsRUFBRSxXQUFXO1FBQ3hCLElBQUksRUFBRSxPQUFPO1FBQ2IsTUFBTSxFQUFFLFdBQVc7UUFDbkIsT0FBTyxFQUFFLFdBQVc7UUFDcEIsYUFBYSxFQUFFLG1CQUFtQjtRQUNsQyxXQUFXLEVBQUUsaUJBQWlCO1FBQzlCLEtBQUssRUFBRSxZQUFZO1FBQ25CLFNBQVMsRUFBRSxPQUFPO1FBQ2xCLFNBQVMsRUFBRSxrQkFBa0I7UUFDN0IsV0FBVyxFQUFFLGNBQWM7UUFDM0IsS0FBSyxFQUFFLFNBQVM7UUFDaEIsSUFBSSxFQUFFLE1BQU07UUFDWixNQUFNLEVBQUUsZ0JBQWdCO1FBQ3hCLEdBQUcsRUFBRSxjQUFjO1FBQ25CLElBQUksRUFBRSxXQUFXO1FBQ2pCLEtBQUssRUFBRSxlQUFlO1FBQ3RCLG9CQUFvQixFQUFFLDRCQUE0QjtRQUNsRCxXQUFXLEVBQUUsY0FBYztRQUMzQixTQUFTLEVBQUUsY0FBYztRQUN6QixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixXQUFXLEVBQUUsY0FBYztRQUMzQixZQUFZLEVBQUUsZUFBZTtRQUM3QixVQUFVLEVBQUUsYUFBYTtRQUN6QixVQUFVLEVBQUUsYUFBYTtRQUN6QixtQkFBbUIsRUFBRSwyQkFBMkI7UUFDaEQsU0FBUyxFQUFFLFlBQVk7UUFDdkIsVUFBVSxFQUFFLFNBQVM7UUFDckIsYUFBYSxFQUFFLGdCQUFnQjtLQUNsQztJQUNELGNBQWMsRUFBRTtRQUNaLFVBQVUsRUFBRSxhQUFhO1FBQ3pCLGFBQWEsRUFBRSxRQUFRO0tBQzFCO0lBQ0QsbUJBQW1CLEVBQUU7UUFDakIsQ0FBQyxzQkFBc0IsRUFBRSxxQkFBcUIsQ0FBQztRQUMvQyxDQUFDLG1CQUFtQixFQUFFLGtCQUFrQixDQUFDO1FBQ3pDLENBQUMsZUFBZSxFQUFFLFlBQVksQ0FBQztLQUNsQztJQUNELGlCQUFpQixFQUFFLENBQUMsa0JBQWtCLEVBQUUsZUFBZSxDQUFDO0lBQ3hELGlCQUFpQixFQUFFO1FBQ2YsS0FBSyxFQUFFLE9BQU87UUFDZCxLQUFLLEVBQUUsT0FBTztRQUNkLE1BQU0sRUFBRSxRQUFRO1FBQ2hCLEtBQUssRUFBRSxPQUFPO1FBQ2QsUUFBUSxFQUFFLFVBQVU7S0FDdkI7Q0FDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtUdWlMYW5ndWFnZUVkaXRvcn0gZnJvbSAnQHRhaWdhLXVpL2kxOG4vaW50ZXJmYWNlcyc7XG5cbmV4cG9ydCBjb25zdCBUVUlfR0VSTUFOX0xBTkdVQUdFX0FERE9OX0VESVRPUjogVHVpTGFuZ3VhZ2VFZGl0b3IgPSB7XG4gICAgY29sb3JTZWxlY3Rvck1vZGVOYW1lczogW2BGYXJiZWAsIGBWZXJsYXVmYF0sXG4gICAgdG9vbGJhclRvb2xzOiB7XG4gICAgICAgIHVuZG86IGBSw7xja2fDpG5naWcgbWFjaGVuYCxcbiAgICAgICAgcmVkbzogYFdpZWRlcmhvbGVuYCxcbiAgICAgICAgZm9udDogYFNjaHJpZnRhcnRgLFxuICAgICAgICBmb250U3R5bGU6IGBTY2hyaWZ0c3RpbGAsXG4gICAgICAgIGZvbnRTaXplOiBgU2NocmlmdGdyw7bDn2VgLFxuICAgICAgICBib2xkOiBgRmV0dGAsXG4gICAgICAgIGl0YWxpYzogYEt1cnNpdmAsXG4gICAgICAgIHVuZGVybGluZTogYFVudGVyc3RyaWNoZW5gLFxuICAgICAgICBzdHJpa2VUaHJvdWdoOiBgRHVyY2hnZXN0cmljaGVuYCxcbiAgICAgICAganVzdGlmeTogYEJsb2Nrc2F0emAsXG4gICAgICAgIGp1c3RpZnlMZWZ0OiBgQmxvY2tzYXR6IGxpbmtzYCxcbiAgICAgICAganVzdGlmeUNlbnRlcjogYEJsb2Nrc2F0eiBtaXR0aWdgLFxuICAgICAgICBqdXN0aWZ5UmlnaHQ6IGBCbG9ja3NhdHogcmVjaHRzYCxcbiAgICAgICAganVzdGlmeUZ1bGw6IGBCbG9ja3NhdHpgLFxuICAgICAgICBsaXN0OiBgTGlzdGVgLFxuICAgICAgICBpbmRlbnQ6IGBFaW5yw7xja2VuYCxcbiAgICAgICAgb3V0ZGVudDogYEF1c3LDvGNrZW5gLFxuICAgICAgICB1bm9yZGVyZWRMaXN0OiBgVW5nZW9yZG5ldGUgTGlzdGVgLFxuICAgICAgICBvcmRlcmVkTGlzdDogYEdlb3JkbmV0ZSBMaXN0ZWAsXG4gICAgICAgIHF1b3RlOiBgQmxvY2txdW90ZWAsXG4gICAgICAgIGZvcmVDb2xvcjogYEZhcmJlYCxcbiAgICAgICAgYmFja0NvbG9yOiBgSGludGVyZ3J1bmRmYXJiZWAsXG4gICAgICAgIGhpbGl0ZUNvbG9yOiBgSGlsaXRlLUZhcmJlYCxcbiAgICAgICAgY2xlYXI6IGBMw7ZzY2hlbmAsXG4gICAgICAgIGxpbms6IGBMaW5rYCxcbiAgICAgICAgYXR0YWNoOiBgRGF0ZWkgYW5ow6RuZ2VuYCxcbiAgICAgICAgdGV4OiBgVGVYIGVpbmbDvGdlbmAsXG4gICAgICAgIGNvZGU6IGBRdWVsbHRleHRgLFxuICAgICAgICBpbWFnZTogYEJpbGQgZWluZsO8Z2VuYCxcbiAgICAgICAgaW5zZXJ0SG9yaXpvbnRhbFJ1bGU6IGBIb3Jpem9udGFsZSBMaW5pZSBlaW5mw7xnZW5gLFxuICAgICAgICBzdXBlcnNjcmlwdDogYEhvY2hnZXN0ZWxsdGAsXG4gICAgICAgIHN1YnNjcmlwdDogYFRpZWZnZXN0ZWxsdGAsXG4gICAgICAgIGluc2VydFRhYmxlOiBgSW5zZXJ0IHRhYmxlYCxcbiAgICAgICAgaW5zZXJ0R3JvdXA6IGBJbnNlcnQgZ3JvdXBgLFxuICAgICAgICBoaWxpdGVHcm91cDogYEhpbGl0ZSBncm91cGAsXG4gICAgICAgIHJlbW92ZUdyb3VwOiBgUmVtb3ZlIGdyb3VwYCxcbiAgICAgICAgaW5zZXJ0QW5jaG9yOiBgSW5zZXJ0IGFuY2hvcmAsXG4gICAgICAgIG1lcmdlQ2VsbHM6IGBNZXJnZSBjZWxsc2AsXG4gICAgICAgIHNwbGl0Q2VsbHM6IGBTcGxpdCBjZWxsc2AsXG4gICAgICAgIHJvd3NDb2x1bW5zTWFuYWdpbmc6IGBNYW5hZ2luZyByb3dzIGFuZCBjb2x1bW5zYCxcbiAgICAgICAgY2VsbENvbG9yOiBgQ2VsbCBjb2xvcmAsXG4gICAgICAgIHNldERldGFpbHM6IGBEZXRhaWxzYCxcbiAgICAgICAgcmVtb3ZlRGV0YWlsczogYFJlbW92ZSBkZXRhaWxzYCxcbiAgICB9LFxuICAgIGVkaXRvckVkaXRMaW5rOiB7XG4gICAgICAgIHVybEV4YW1wbGU6IGBleGFtcGxlLmNvbWAsXG4gICAgICAgIGFuY2hvckV4YW1wbGU6IGBhbmNob3JgLFxuICAgIH0sXG4gICAgZWRpdG9yVGFibGVDb21tYW5kczogW1xuICAgICAgICBbYEluc2VydCBjb2x1bW4gYmVmb3JlYCwgYEluc2VydCBjb2x1bW4gYWZ0ZXJgXSxcbiAgICAgICAgW2BJbnNlcnQgcm93IGJlZm9yZWAsIGBJbnNlcnQgcm93IGFmdGVyYF0sXG4gICAgICAgIFtgRGVsZXRlIGNvbHVtbmAsIGBEZWxldGUgcm93YF0sXG4gICAgXSxcbiAgICBlZGl0b3JDb2RlT3B0aW9uczogW2BDb2RlIGluIHRoZSB0ZXh0YCwgYENvZGUgaW4gYmxvY2tgXSxcbiAgICBlZGl0b3JGb250T3B0aW9uczoge1xuICAgICAgICBzbWFsbDogYFNtYWxsYCxcbiAgICAgICAgbGFyZ2U6IGBMYXJnZWAsXG4gICAgICAgIG5vcm1hbDogYE5vcm1hbGAsXG4gICAgICAgIHRpdGxlOiBgVGl0bGVgLFxuICAgICAgICBzdWJ0aXRsZTogYFN1YnRpdGxlYCxcbiAgICB9LFxufTtcbiJdfQ==