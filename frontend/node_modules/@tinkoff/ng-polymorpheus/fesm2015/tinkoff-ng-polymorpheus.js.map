{"version":3,"file":"tinkoff-ng-polymorpheus.js","sources":["../../../projects/ng-polymorpheus/src/tokens/context.ts","../../../projects/ng-polymorpheus/src/classes/component.ts","../../../projects/ng-polymorpheus/src/directives/template.ts","../../../projects/ng-polymorpheus/src/classes/context.ts","../../../projects/ng-polymorpheus/src/directives/outlet.ts","../../../projects/ng-polymorpheus/src/polymorpheus.module.ts","../../../projects/ng-polymorpheus/src/public-api.ts","../../../projects/ng-polymorpheus/src/tinkoff-ng-polymorpheus.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\r\n\r\n/**\r\n * Use this token to access context within your components when\r\n * instantiating them through {@link PolymorpheusOutletDirective}\r\n */\r\nexport const POLYMORPHEUS_CONTEXT = new InjectionToken<Record<any, any>>(\r\n    'POLYMORPHEUS_CONTEXT',\r\n);\r\n","import {Injector, Type} from '@angular/core';\r\nimport {POLYMORPHEUS_CONTEXT} from '../tokens/context';\r\n\r\n/**\r\n * Wrapper class for a component that will be used as content for {@link PolymorpheusOutletDirective}\r\n *\r\n * @param component — an Angular component to be dynamically created\r\n * @param injector — optional {@link Injector} for lazy loaded module case\r\n *\r\n * TODO: Remove second generic as it is irrelevant, remove `null` from injector type\r\n */\r\nexport class PolymorpheusComponent<T, _C = any> {\r\n    constructor(readonly component: Type<T>, private readonly i?: Injector | null) {}\r\n\r\n    createInjector<C>(injector: Injector, useValue?: C): Injector {\r\n        return Injector.create({\r\n            parent: this.i || injector,\r\n            providers: [\r\n                {\r\n                    provide: POLYMORPHEUS_CONTEXT,\r\n                    useValue,\r\n                },\r\n            ],\r\n        });\r\n    }\r\n}\r\n","import {ChangeDetectorRef, Directive, Self, TemplateRef} from '@angular/core';\r\n\r\n/**\r\n * ng-template wrapper directive also stores {@link ChangeDetectorRef} to properly handle change detection.\r\n */\r\n@Directive({\r\n    selector: 'ng-template[polymorpheus]',\r\n    exportAs: 'polymorpheus',\r\n    inputs: ['polymorpheus'],\r\n})\r\nexport class PolymorpheusTemplate<C = any> {\r\n    polymorpheus: C | '' = '';\r\n\r\n    constructor(\r\n        @Self() readonly template: TemplateRef<C>,\r\n        private readonly cdr: ChangeDetectorRef,\r\n    ) {}\r\n\r\n    check(): void {\r\n        this.cdr.markForCheck();\r\n    }\r\n\r\n    static ngTemplateContextGuard<T>(\r\n        _dir: PolymorpheusTemplate<T>,\r\n        _ctx: any,\r\n    ): _ctx is T extends '' ? any : T {\r\n        return true;\r\n    }\r\n}\r\n","export class PolymorpheusContext<T> {\r\n    constructor(readonly $implicit: T) {}\r\n\r\n    get polymorpheusOutlet(): T {\r\n        return this.$implicit;\r\n    }\r\n}\r\n\r\n/**\r\n * @deprecated: use {@link PolymorpheusContext} instead\r\n * Primitive types used as content by {@link PolymorpheusOutletDirective}\r\n */\r\nexport class PrimitiveContext<T> extends PolymorpheusContext<T> {}\r\n","import {\r\n    ChangeDetectorRef,\r\n    ComponentFactoryResolver,\r\n    ComponentRef,\r\n    Directive,\r\n    DoCheck,\r\n    EmbeddedViewRef,\r\n    Injector,\r\n    OnChanges,\r\n    SimpleChanges,\r\n    TemplateRef,\r\n    ViewContainerRef,\r\n} from '@angular/core';\r\nimport {PolymorpheusComponent} from '../classes/component';\r\nimport {PolymorpheusContext} from '../classes/context';\r\nimport {PolymorpheusContent} from '../types/content';\r\nimport {PolymorpheusPrimitive} from '../types/primitive';\r\nimport {PolymorpheusTemplate} from './template';\r\n\r\n@Directive({\r\n    selector: '[polymorpheusOutlet]',\r\n    inputs: ['content: polymorpheusOutlet', 'context: polymorpheusOutletContext'],\r\n})\r\nexport class PolymorpheusOutletDirective<C> implements OnChanges, DoCheck {\r\n    private v?: EmbeddedViewRef<unknown>;\r\n    private c?: ComponentRef<unknown>;\r\n\r\n    content: PolymorpheusContent<C> = '';\r\n    context?: C;\r\n\r\n    constructor(\r\n        private readonly vcr: ViewContainerRef,\r\n        private readonly i: Injector,\r\n        private readonly t: TemplateRef<PolymorpheusContext<PolymorpheusPrimitive>>,\r\n    ) {}\r\n\r\n    private get template(): TemplateRef<unknown> {\r\n        if (isDirective(this.content)) {\r\n            return this.content.template;\r\n        }\r\n\r\n        return this.content instanceof TemplateRef ? this.content : this.t;\r\n    }\r\n\r\n    ngOnChanges({content}: SimpleChanges): void {\r\n        const context = this.getContext();\r\n\r\n        if (this.v) {\r\n            this.v.context = context;\r\n        }\r\n\r\n        this.c?.injector.get(ChangeDetectorRef).markForCheck();\r\n\r\n        if (!content) {\r\n            return;\r\n        }\r\n\r\n        this.vcr.clear();\r\n\r\n        if (isComponent(this.content)) {\r\n            this.process(this.content);\r\n        } else if (\r\n            // tslint:disable-next-line:triple-equals\r\n            (context instanceof PolymorpheusContext && context.$implicit) != null\r\n        ) {\r\n            this.v = this.vcr.createEmbeddedView(this.template, context);\r\n        }\r\n    }\r\n\r\n    ngDoCheck() {\r\n        if (isDirective(this.content)) {\r\n            this.content.check();\r\n        }\r\n    }\r\n\r\n    static ngTemplateContextGuard<T>(\r\n        _dir: PolymorpheusOutletDirective<T>,\r\n        _ctx: any,\r\n    ): _ctx is PolymorpheusContext<string> {\r\n        return true;\r\n    }\r\n\r\n    private getContext(): unknown {\r\n        if (isTemplate(this.content) || isComponent(this.content)) {\r\n            return this.context;\r\n        }\r\n\r\n        return new PolymorpheusContext(\r\n            typeof this.content === 'function'\r\n                ? this.content(this.context!)\r\n                : this.content,\r\n        );\r\n    }\r\n\r\n    private process(content: PolymorpheusComponent<unknown>): void {\r\n        const injector = content.createInjector(\r\n            this.i,\r\n            this.context &&\r\n                ((new Proxy((this.context as unknown) as object, {\r\n                    get: (_, key) => this.context?.[key as keyof C],\r\n                }) as unknown) as C),\r\n        );\r\n\r\n        this.c = this.vcr.createComponent(\r\n            injector\r\n                .get(ComponentFactoryResolver)\r\n                .resolveComponentFactory(content.component),\r\n            0,\r\n            injector,\r\n        );\r\n    }\r\n}\r\n\r\nfunction isDirective<C>(\r\n    content: PolymorpheusContent<C>,\r\n): content is PolymorpheusTemplate<C> {\r\n    return content instanceof PolymorpheusTemplate;\r\n}\r\n\r\nfunction isComponent<C>(\r\n    content: PolymorpheusContent<C>,\r\n): content is PolymorpheusComponent<any, C> {\r\n    return content instanceof PolymorpheusComponent;\r\n}\r\n\r\nfunction isTemplate<C>(\r\n    content: PolymorpheusContent<C>,\r\n): content is PolymorpheusTemplate<C> | TemplateRef<C> {\r\n    return isDirective(content) || content instanceof TemplateRef;\r\n}\r\n","import {NgModule} from '@angular/core';\r\nimport {PolymorpheusOutletDirective} from './directives/outlet';\r\nimport {PolymorpheusTemplate} from './directives/template';\r\n\r\n@NgModule({\r\n    declarations: [PolymorpheusOutletDirective, PolymorpheusTemplate],\r\n    exports: [PolymorpheusOutletDirective, PolymorpheusTemplate],\r\n})\r\nexport class PolymorpheusModule {}\r\n","/**\r\n * Public API Surface of ng-polymorpheus\r\n */\r\nexport * from './classes/component';\r\nexport * from './directives/template';\r\nexport * from './directives/outlet';\r\nexport * from './tokens/context';\r\nexport * from './types/content';\r\nexport * from './types/handler';\r\nexport * from './types/primitive';\r\nexport * from './polymorpheus.module';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}