(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/common'), require('dompurify'), require('@angular/platform-browser'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('@tinkoff/ng-dompurify', ['exports', '@angular/common', 'dompurify', '@angular/platform-browser', '@angular/core'], factory) :
    (factory((global.tinkoff = global.tinkoff || {}, global.tinkoff['ng-dompurify'] = {}),global.ng.common,global.dompurify,global.ng.platformBrowser,global.ng.core));
}(this, (function (exports,i3,dompurify,platformBrowser,i0) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Token for {\@link NgDompurifyConfig}
     * @type {?}
     */
    var DOMPURIFY_CONFIG = new i0.InjectionToken('Config for DOMPurify', {
        factory: function () { return ({}); },
        providedIn: 'root',
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Token for adding hooks to DOMPurify, see {\@link addHook}
     * @type {?}
     */
    var DOMPURIFY_HOOKS = new i0.InjectionToken('Hooks for DOMPurify', {
        factory: function () { return []; },
        providedIn: 'root',
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * A function that takes style rule value as input and returns a sanitized string
     *
     * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing
     * @type {?}
     */
    var SANITIZE_STYLE = new i0.InjectionToken('A function that sanitizes value for a CSS rule', {
        factory: function () { return function (value) { return value; }; },
        providedIn: 'root',
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var createDOMPurify = dompurify;
    /**
     * Implementation of Angular {\@link Sanitizer} purifying via DOMPurify
     *
     * use {\@link DOMPURIFY_CONFIG} token to provide config ({\@link NgDompurifyConfig})
     * use {\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\@link SanitizeStyle})
     * use {\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\@link addHook})
     *
     * Ambient type cannot be used without \@dynamic https://github.com/angular/angular/issues/23395
     * \@dynamic
     */
    var NgDompurifySanitizer = /** @class */ (function () {
        function NgDompurifySanitizer(config, sanitizeStyle, _a, hooks) {
            var defaultView = _a.defaultView;
            var _this = this;
            this.config = config;
            this.sanitizeStyle = sanitizeStyle;
            this.domPurify = createDOMPurify(( /** @type {?} */(defaultView)));
            hooks.forEach(function (_a) {
                var name = _a.name, hook = _a.hook;
                _this.domPurify.addHook(name, hook);
            });
        }
        /**
         * @param {?} context
         * @param {?} value
         * @param {?=} config
         * @return {?}
         */
        NgDompurifySanitizer.prototype.sanitize = /**
         * @param {?} context
         * @param {?} value
         * @param {?=} config
         * @return {?}
         */
            function (context, value, config) {
                if (config === void 0) {
                    config = this.config;
                }
                if (context === i0.SecurityContext.SCRIPT) {
                    throw new Error('DOMPurify does not support SCRIPT context');
                }
                return context === i0.SecurityContext.STYLE
                    ? this.sanitizeStyle(String(value))
                    : this.domPurify.sanitize(String(value || ''), config);
            };
        NgDompurifySanitizer.decorators = [
            { type: i0.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        NgDompurifySanitizer.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [DOMPURIFY_CONFIG,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [SANITIZE_STYLE,] }] },
                { type: Document, decorators: [{ type: i0.Inject, args: [i3.DOCUMENT,] }] },
                { type: undefined, decorators: [{ type: i0.Inject, args: [DOMPURIFY_HOOKS,] }] }
            ];
        };
        /** @nocollapse */ NgDompurifySanitizer.ngInjectableDef = i0.defineInjectable({ factory: function NgDompurifySanitizer_Factory() { return new NgDompurifySanitizer(i0.inject(DOMPURIFY_CONFIG), i0.inject(SANITIZE_STYLE), i0.inject(i3.DOCUMENT), i0.inject(DOMPURIFY_HOOKS)); }, token: NgDompurifySanitizer, providedIn: "root" });
        return NgDompurifySanitizer;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Pipe that transforms dirty content to clean via {\@link NgDompurifySanitizer}
     */
    var NgDompurifyPipe = /** @class */ (function () {
        function NgDompurifyPipe(sanitizer, domSanitizer) {
            this.sanitizer = sanitizer;
            this.domSanitizer = domSanitizer;
        }
        /**
         * @param {?} value
         * @param {?=} context
         * @param {?=} config
         * @return {?}
         */
        NgDompurifyPipe.prototype.transform = /**
         * @param {?} value
         * @param {?=} context
         * @param {?=} config
         * @return {?}
         */
            function (value, context, config) {
                if (context === void 0) {
                    context = i0.SecurityContext.HTML;
                }
                return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));
            };
        /**
         * @private
         * @param {?} context
         * @param {?} purifiedValue
         * @return {?}
         */
        NgDompurifyPipe.prototype.bypassSecurityTrust = /**
         * @private
         * @param {?} context
         * @param {?} purifiedValue
         * @return {?}
         */
            function (context, purifiedValue) {
                switch (context) {
                    case i0.SecurityContext.HTML:
                        return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);
                    case i0.SecurityContext.STYLE:
                        return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);
                    case i0.SecurityContext.URL:
                        return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);
                    case i0.SecurityContext.RESOURCE_URL:
                        return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);
                    default:
                        return null;
                }
            };
        NgDompurifyPipe.decorators = [
            { type: i0.Pipe, args: [{ name: 'dompurify' },] }
        ];
        /** @nocollapse */
        NgDompurifyPipe.ctorParameters = function () {
            return [
                { type: NgDompurifySanitizer },
                { type: platformBrowser.DomSanitizer }
            ];
        };
        return NgDompurifyPipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgDompurifyModule = /** @class */ (function () {
        function NgDompurifyModule() {
        }
        NgDompurifyModule.decorators = [
            { type: i0.NgModule, args: [{
                        declarations: [NgDompurifyPipe],
                        exports: [NgDompurifyPipe],
                    },] }
        ];
        return NgDompurifyModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    exports.NgDompurifySanitizer = NgDompurifySanitizer;
    exports.NgDompurifyPipe = NgDompurifyPipe;
    exports.NgDompurifyModule = NgDompurifyModule;
    exports.DOMPURIFY_CONFIG = DOMPURIFY_CONFIG;
    exports.DOMPURIFY_HOOKS = DOMPURIFY_HOOKS;
    exports.SANITIZE_STYLE = SANITIZE_STYLE;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=tinkoff-ng-dompurify.umd.js.map