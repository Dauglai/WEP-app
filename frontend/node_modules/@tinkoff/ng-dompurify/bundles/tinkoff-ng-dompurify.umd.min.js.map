{"version":3,"sources":["ng://@tinkoff/ng-dompurify/lib/tokens/dompurify-config.ts","ng://@tinkoff/ng-dompurify/lib/tokens/dompurify-hooks.ts","ng://@tinkoff/ng-dompurify/lib/tokens/sanitize-style.ts","ng://@tinkoff/ng-dompurify/lib/ng-dompurify.service.ts","ng://@tinkoff/ng-dompurify/lib/ng-dompurify.pipe.ts","ng://@tinkoff/ng-dompurify/lib/ng-dompurify.module.ts"],"names":["DOMPURIFY_CONFIG","InjectionToken","factory","providedIn","DOMPURIFY_HOOKS","SANITIZE_STYLE","value","createDOMPurify","dompurify","NgDompurifySanitizer","prototype","sanitize","context","config","this","SecurityContext","SCRIPT","Error","STYLE","sanitizeStyle","String","domPurify","Injectable","args","Inject","Document","decorators","type","DOCUMENT","_a","hooks","defaultView","_this","forEach","name","hook","addHook","NgDompurifyPipe","transform","HTML","bypassSecurityTrust","sanitizer","purifiedValue","domSanitizer","bypassSecurityTrustHtml","bypassSecurityTrustStyle","URL","bypassSecurityTrustUrl","RESOURCE_URL","bypassSecurityTrustResourceUrl","Pipe","DomSanitizer","NgDompurifyModule","NgModule","declarations","exports"],"mappings":"mfAMA,IAAaA,EAAmB,IAAIC,EAAAA,eAChC,uBACA,CACIC,QAAS,WAAM,MAAA,IACfC,WAAY,SCJPC,EAAkB,IAAIH,EAAAA,eAC/B,sBACA,CACIC,QAAS,WAAM,MAAA,IACfC,WAAY,SCFPE,EAAiB,IAAIJ,EAAAA,eAC9B,iDACA,CACIC,QAAS,WAAM,OAAA,SAAAI,GAAS,OAAAA,IACxBH,WAAY,SCDdI,EAAkBC,EAYxBC,GAsBIA,EAAAC,UAAAC,SAAA,SACIC,EACAN,EACAO,GAEA,QAFA,IAAAA,IAAAA,EAA4BC,KAAKD,QAE7BD,IAAYG,EAAAA,gBAAgBC,OAC5B,MAAM,IAAIC,MAAM,6CAGpB,OAAOL,IAAYG,EAAAA,gBAAgBG,MAC7BJ,KAAKK,cAAcC,OAAOd,IAC1BQ,KAAKO,UAAUV,SAASS,OAAOd,GAAS,IAAKO,wBAjC1DS,EAAAA,WAAUC,KAAA,CAAC,CACRpB,WAAY,gFAMPqB,EAAAA,OAAMD,KAAA,CAACvB,wCAEPwB,EAAAA,OAAMD,KAAA,CAAClB,YAEyBoB,SAAQC,WAAA,CAAA,CAAAC,KAAxCH,EAAAA,OAAMD,KAAA,CAACK,EAAAA,+CACPJ,EAAAA,OAAMD,KAAA,CAACnB,wKANZ,SAAAK,EAEqBI,EAEAM,EACjBU,EAEAC,OAFmBC,EAAAF,EAAAE,YALvBC,EAAAlB,KAEqBA,KAAAD,OAAAA,EAEAC,KAAAK,cAAAA,EAKjBL,KAAKO,UAAYd,EAAe,GAEhCuB,EAAMG,QAAQ,SAACJ,OAACK,EAAAL,EAAAK,KAAMC,EAAAN,EAAAM,KAClBH,EAAKX,UAAUe,QAAQF,EAAMC,KCjCzC,IAAAE,GAOIA,EAAA3B,UAAA4B,UAAA,SACIhC,EACAM,EACAC,GAEA,YAHA,IAAAD,IAAAA,EAA2BG,EAAAA,gBAAgBwB,MAGpCzB,KAAK0B,oBACR5B,EACAE,KAAK2B,UAAU9B,SAASC,EAASN,EAAOO,KAIxCwB,EAAA3B,UAAA8B,oBAAR,SACI5B,EACA8B,GAEA,OAAQ9B,GACJ,KAAKG,EAAAA,gBAAgBwB,KACjB,OAAOzB,KAAK6B,aAAaC,wBAAwBF,GACrD,KAAK3B,EAAAA,gBAAgBG,MACjB,OAAOJ,KAAK6B,aAAaE,yBAAyBH,GACtD,KAAK3B,EAAAA,gBAAgB+B,IACjB,OAAOhC,KAAK6B,aAAaI,uBAAuBL,GACpD,KAAK3B,EAAAA,gBAAgBiC,aACjB,OAAOlC,KAAK6B,aAAaM,+BAA+BP,GAC5D,QACI,OAAO,2BAhCtBQ,EAAAA,KAAI3B,KAAA,CAAC,CAACW,KAAM,yDANLzB,SADA0C,EAAAA,gBA0CRd,GAjCI,SAAAA,EACqBI,EACAE,GADA7B,KAAA2B,UAAAA,EACA3B,KAAA6B,aAAAA,ECZzB,IAAAS,uBAGCC,EAAAA,SAAQ9B,KAAA,CAAC,CACN+B,aAAc,CAACjB,GACfkB,QAAS,CAAClB,OAEkBe,GAJhC,SAAAA","sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {NgDompurifyConfig} from '../types/ng-dompurify-config';\n\n/**\n * Token for {@link NgDompurifyConfig}\n */\nexport const DOMPURIFY_CONFIG = new InjectionToken<NgDompurifyConfig>(\n    'Config for DOMPurify',\n    {\n        factory: () => ({}),\n        providedIn: 'root',\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {NgDompurifyHook} from '../types/ng-dompurify-hook';\n\n/**\n * Token for adding hooks to DOMPurify, see {@link addHook}\n */\nexport const DOMPURIFY_HOOKS = new InjectionToken<ReadonlyArray<NgDompurifyHook>>(\n    'Hooks for DOMPurify',\n    {\n        factory: () => [],\n        providedIn: 'root',\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {SanitizeStyle} from '../types/sanitize-style';\n\n/**\n * A function that takes style rule value as input and returns a sanitized string\n *\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\n */\nexport const SANITIZE_STYLE = new InjectionToken<SanitizeStyle>(\n    'A function that sanitizes value for a CSS rule',\n    {\n        factory: () => value => value,\n        providedIn: 'root',\n    },\n);\n","import {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\nimport * as dompurify from 'dompurify';\nimport {DOMPurifyI} from 'dompurify';\nimport {DOMPURIFY_CONFIG} from './tokens/dompurify-config';\nimport {DOMPURIFY_HOOKS} from './tokens/dompurify-hooks';\nimport {SANITIZE_STYLE} from './tokens/sanitize-style';\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\nimport {NgDompurifyHook} from './types/ng-dompurify-hook';\nimport {SanitizeStyle} from './types/sanitize-style';\n\nconst createDOMPurify = dompurify;\n\n/**\n * Implementation of Angular {@link Sanitizer} purifying via DOMPurify\n *\n * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})\n * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})\n * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})\n *\n * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395\n * @dynamic\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgDompurifySanitizer implements Sanitizer {\n    private readonly domPurify: DOMPurifyI;\n\n    constructor(\n        @Inject(DOMPURIFY_CONFIG)\n        private readonly config: NgDompurifyConfig,\n        @Inject(SANITIZE_STYLE)\n        private readonly sanitizeStyle: SanitizeStyle,\n        @Inject(DOCUMENT) {defaultView}: Document,\n        @Inject(DOMPURIFY_HOOKS)\n        hooks: ReadonlyArray<NgDompurifyHook>,\n    ) {\n        this.domPurify = createDOMPurify(defaultView!);\n\n        hooks.forEach(({name, hook}) => {\n            this.domPurify.addHook(name, hook);\n        });\n    }\n\n    sanitize(\n        context: SecurityContext,\n        value: {} | string | null,\n        config: NgDompurifyConfig = this.config,\n    ): string {\n        if (context === SecurityContext.SCRIPT) {\n            throw new Error('DOMPurify does not support SCRIPT context');\n        }\n\n        return context === SecurityContext.STYLE\n            ? this.sanitizeStyle(String(value))\n            : this.domPurify.sanitize(String(value || ''), config);\n    }\n}\n","import {Pipe, PipeTransform, SecurityContext} from '@angular/core';\nimport {DomSanitizer, SafeValue} from '@angular/platform-browser';\nimport {NgDompurifySanitizer} from './ng-dompurify.service';\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\n\n/**\n * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}\n */\n@Pipe({name: 'dompurify'})\nexport class NgDompurifyPipe implements PipeTransform {\n    constructor(\n        private readonly sanitizer: NgDompurifySanitizer,\n        private readonly domSanitizer: DomSanitizer,\n    ) {}\n\n    transform(\n        value: {} | string | null,\n        context: SecurityContext = SecurityContext.HTML,\n        config?: NgDompurifyConfig,\n    ): SafeValue | null {\n        return this.bypassSecurityTrust(\n            context,\n            this.sanitizer.sanitize(context, value, config),\n        );\n    }\n\n    private bypassSecurityTrust(\n        context: SecurityContext,\n        purifiedValue: string,\n    ): SafeValue | null {\n        switch (context) {\n            case SecurityContext.HTML:\n                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\n            case SecurityContext.STYLE:\n                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\n            case SecurityContext.URL:\n                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\n            case SecurityContext.RESOURCE_URL:\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\n            default:\n                return null;\n        }\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {NgDompurifyPipe} from './ng-dompurify.pipe';\n\n@NgModule({\n    declarations: [NgDompurifyPipe],\n    exports: [NgDompurifyPipe],\n})\nexport class NgDompurifyModule {}\n"]}