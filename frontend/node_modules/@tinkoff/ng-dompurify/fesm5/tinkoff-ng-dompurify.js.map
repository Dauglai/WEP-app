{"version":3,"file":"tinkoff-ng-dompurify.js.map","sources":["ng://@tinkoff/ng-dompurify/lib/tokens/dompurify-config.ts","ng://@tinkoff/ng-dompurify/lib/tokens/dompurify-hooks.ts","ng://@tinkoff/ng-dompurify/lib/tokens/sanitize-style.ts","ng://@tinkoff/ng-dompurify/lib/ng-dompurify.service.ts","ng://@tinkoff/ng-dompurify/lib/ng-dompurify.pipe.ts","ng://@tinkoff/ng-dompurify/lib/ng-dompurify.module.ts"],"sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {NgDompurifyConfig} from '../types/ng-dompurify-config';\n\n/**\n * Token for {@link NgDompurifyConfig}\n */\nexport const DOMPURIFY_CONFIG = new InjectionToken<NgDompurifyConfig>(\n    'Config for DOMPurify',\n    {\n        factory: () => ({}),\n        providedIn: 'root',\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {NgDompurifyHook} from '../types/ng-dompurify-hook';\n\n/**\n * Token for adding hooks to DOMPurify, see {@link addHook}\n */\nexport const DOMPURIFY_HOOKS = new InjectionToken<ReadonlyArray<NgDompurifyHook>>(\n    'Hooks for DOMPurify',\n    {\n        factory: () => [],\n        providedIn: 'root',\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {SanitizeStyle} from '../types/sanitize-style';\n\n/**\n * A function that takes style rule value as input and returns a sanitized string\n *\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\n */\nexport const SANITIZE_STYLE = new InjectionToken<SanitizeStyle>(\n    'A function that sanitizes value for a CSS rule',\n    {\n        factory: () => value => value,\n        providedIn: 'root',\n    },\n);\n","import {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\nimport * as dompurify from 'dompurify';\nimport {DOMPurifyI} from 'dompurify';\nimport {DOMPURIFY_CONFIG} from './tokens/dompurify-config';\nimport {DOMPURIFY_HOOKS} from './tokens/dompurify-hooks';\nimport {SANITIZE_STYLE} from './tokens/sanitize-style';\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\nimport {NgDompurifyHook} from './types/ng-dompurify-hook';\nimport {SanitizeStyle} from './types/sanitize-style';\n\nconst createDOMPurify = dompurify;\n\n/**\n * Implementation of Angular {@link Sanitizer} purifying via DOMPurify\n *\n * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})\n * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})\n * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})\n *\n * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395\n * @dynamic\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgDompurifySanitizer implements Sanitizer {\n    private readonly domPurify: DOMPurifyI;\n\n    constructor(\n        @Inject(DOMPURIFY_CONFIG)\n        private readonly config: NgDompurifyConfig,\n        @Inject(SANITIZE_STYLE)\n        private readonly sanitizeStyle: SanitizeStyle,\n        @Inject(DOCUMENT) {defaultView}: Document,\n        @Inject(DOMPURIFY_HOOKS)\n        hooks: ReadonlyArray<NgDompurifyHook>,\n    ) {\n        this.domPurify = createDOMPurify(defaultView!);\n\n        hooks.forEach(({name, hook}) => {\n            this.domPurify.addHook(name, hook);\n        });\n    }\n\n    sanitize(\n        context: SecurityContext,\n        value: {} | string | null,\n        config: NgDompurifyConfig = this.config,\n    ): string {\n        if (context === SecurityContext.SCRIPT) {\n            throw new Error('DOMPurify does not support SCRIPT context');\n        }\n\n        return context === SecurityContext.STYLE\n            ? this.sanitizeStyle(String(value))\n            : this.domPurify.sanitize(String(value || ''), config);\n    }\n}\n","import {Pipe, PipeTransform, SecurityContext} from '@angular/core';\nimport {DomSanitizer, SafeValue} from '@angular/platform-browser';\nimport {NgDompurifySanitizer} from './ng-dompurify.service';\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\n\n/**\n * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}\n */\n@Pipe({name: 'dompurify'})\nexport class NgDompurifyPipe implements PipeTransform {\n    constructor(\n        private readonly sanitizer: NgDompurifySanitizer,\n        private readonly domSanitizer: DomSanitizer,\n    ) {}\n\n    transform(\n        value: {} | string | null,\n        context: SecurityContext = SecurityContext.HTML,\n        config?: NgDompurifyConfig,\n    ): SafeValue | null {\n        return this.bypassSecurityTrust(\n            context,\n            this.sanitizer.sanitize(context, value, config),\n        );\n    }\n\n    private bypassSecurityTrust(\n        context: SecurityContext,\n        purifiedValue: string,\n    ): SafeValue | null {\n        switch (context) {\n            case SecurityContext.HTML:\n                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\n            case SecurityContext.STYLE:\n                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\n            case SecurityContext.URL:\n                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\n            case SecurityContext.RESOURCE_URL:\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\n            default:\n                return null;\n        }\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {NgDompurifyPipe} from './ng-dompurify.pipe';\n\n@NgModule({\n    declarations: [NgDompurifyPipe],\n    exports: [NgDompurifyPipe],\n})\nexport class NgDompurifyModule {}\n"],"names":[],"mappings":"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"}
