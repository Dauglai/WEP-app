import { DOCUMENT } from '@angular/common';
import * as dompurify from 'dompurify';
import { DomSanitizer } from '@angular/platform-browser';
import { InjectionToken, Inject, Injectable, SecurityContext, Pipe, NgModule, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Token for {\@link NgDompurifyConfig}
 * @type {?}
 */
var DOMPURIFY_CONFIG = new InjectionToken('Config for DOMPurify', {
    factory: function () { return ({}); },
    providedIn: 'root',
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Token for adding hooks to DOMPurify, see {\@link addHook}
 * @type {?}
 */
var DOMPURIFY_HOOKS = new InjectionToken('Hooks for DOMPurify', {
    factory: function () { return []; },
    providedIn: 'root',
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A function that takes style rule value as input and returns a sanitized string
 *
 * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing
 * @type {?}
 */
var SANITIZE_STYLE = new InjectionToken('A function that sanitizes value for a CSS rule', {
    factory: function () { return function (value) { return value; }; },
    providedIn: 'root',
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var createDOMPurify = dompurify;
/**
 * Implementation of Angular {\@link Sanitizer} purifying via DOMPurify
 *
 * use {\@link DOMPURIFY_CONFIG} token to provide config ({\@link NgDompurifyConfig})
 * use {\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\@link SanitizeStyle})
 * use {\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\@link addHook})
 *
 * Ambient type cannot be used without \@dynamic https://github.com/angular/angular/issues/23395
 * \@dynamic
 */
var NgDompurifySanitizer = /** @class */ (function () {
    function NgDompurifySanitizer(config, sanitizeStyle, _a, hooks) {
        var defaultView = _a.defaultView;
        var _this = this;
        this.config = config;
        this.sanitizeStyle = sanitizeStyle;
        this.domPurify = createDOMPurify((/** @type {?} */ (defaultView)));
        hooks.forEach(function (_a) {
            var name = _a.name, hook = _a.hook;
            _this.domPurify.addHook(name, hook);
        });
    }
    /**
     * @param {?} context
     * @param {?} value
     * @param {?=} config
     * @return {?}
     */
    NgDompurifySanitizer.prototype.sanitize = /**
     * @param {?} context
     * @param {?} value
     * @param {?=} config
     * @return {?}
     */
    function (context, value, config) {
        if (config === void 0) { config = this.config; }
        if (context === SecurityContext.SCRIPT) {
            throw new Error('DOMPurify does not support SCRIPT context');
        }
        return context === SecurityContext.STYLE
            ? this.sanitizeStyle(String(value))
            : this.domPurify.sanitize(String(value || ''), config);
    };
    NgDompurifySanitizer.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    NgDompurifySanitizer.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_CONFIG,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [SANITIZE_STYLE,] }] },
        { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
        { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_HOOKS,] }] }
    ]; };
    /** @nocollapse */ NgDompurifySanitizer.ngInjectableDef = defineInjectable({ factory: function NgDompurifySanitizer_Factory() { return new NgDompurifySanitizer(inject(DOMPURIFY_CONFIG), inject(SANITIZE_STYLE), inject(DOCUMENT), inject(DOMPURIFY_HOOKS)); }, token: NgDompurifySanitizer, providedIn: "root" });
    return NgDompurifySanitizer;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Pipe that transforms dirty content to clean via {\@link NgDompurifySanitizer}
 */
var NgDompurifyPipe = /** @class */ (function () {
    function NgDompurifyPipe(sanitizer, domSanitizer) {
        this.sanitizer = sanitizer;
        this.domSanitizer = domSanitizer;
    }
    /**
     * @param {?} value
     * @param {?=} context
     * @param {?=} config
     * @return {?}
     */
    NgDompurifyPipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} context
     * @param {?=} config
     * @return {?}
     */
    function (value, context, config) {
        if (context === void 0) { context = SecurityContext.HTML; }
        return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));
    };
    /**
     * @private
     * @param {?} context
     * @param {?} purifiedValue
     * @return {?}
     */
    NgDompurifyPipe.prototype.bypassSecurityTrust = /**
     * @private
     * @param {?} context
     * @param {?} purifiedValue
     * @return {?}
     */
    function (context, purifiedValue) {
        switch (context) {
            case SecurityContext.HTML:
                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);
            case SecurityContext.STYLE:
                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);
            case SecurityContext.URL:
                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);
            case SecurityContext.RESOURCE_URL:
                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);
            default:
                return null;
        }
    };
    NgDompurifyPipe.decorators = [
        { type: Pipe, args: [{ name: 'dompurify' },] }
    ];
    /** @nocollapse */
    NgDompurifyPipe.ctorParameters = function () { return [
        { type: NgDompurifySanitizer },
        { type: DomSanitizer }
    ]; };
    return NgDompurifyPipe;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgDompurifyModule = /** @class */ (function () {
    function NgDompurifyModule() {
    }
    NgDompurifyModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [NgDompurifyPipe],
                    exports: [NgDompurifyPipe],
                },] }
    ];
    return NgDompurifyModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgDompurifySanitizer, NgDompurifyPipe, NgDompurifyModule, DOMPURIFY_CONFIG, DOMPURIFY_HOOKS, SANITIZE_STYLE };

//# sourceMappingURL=tinkoff-ng-dompurify.js.map