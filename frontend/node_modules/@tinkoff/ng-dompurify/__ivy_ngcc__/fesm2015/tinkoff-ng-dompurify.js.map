{"version":3,"file":"tinkoff-ng-dompurify.js","sources":["@tinkoff/ng-dompurify/lib/tokens/dompurify-config.ts","@tinkoff/ng-dompurify/lib/tokens/dompurify-hooks.ts","@tinkoff/ng-dompurify/lib/tokens/sanitize-style.ts","@tinkoff/ng-dompurify/lib/ng-dompurify.service.ts","@tinkoff/ng-dompurify/lib/ng-dompurify.pipe.ts","@tinkoff/ng-dompurify/lib/ng-dompurify.module.ts"],"names":[],"mappings":"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AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AACA,AAEA,AAAA,AACA,AAAA,AACA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAlCA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AACA,AAKA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAEA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,ACnlCA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AANA,AAAA,AADA,AAAA,ACDA,AAOA,AAAA,AAJA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA,AAAA,AAAA,AAAA,AAAA,AAAA,AACA","sourcesContent":["import {InjectionToken} from '@angular/core';\nimport {NgDompurifyConfig} from '../types/ng-dompurify-config';\n\n/**\n * Token for {@link NgDompurifyConfig}\n */\nexport const DOMPURIFY_CONFIG = new InjectionToken<NgDompurifyConfig>(\n    'Config for DOMPurify',\n    {\n        factory: () => ({}),\n        providedIn: 'root',\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {NgDompurifyHook} from '../types/ng-dompurify-hook';\n\n/**\n * Token for adding hooks to DOMPurify, see {@link addHook}\n */\nexport const DOMPURIFY_HOOKS = new InjectionToken<ReadonlyArray<NgDompurifyHook>>(\n    'Hooks for DOMPurify',\n    {\n        factory: () => [],\n        providedIn: 'root',\n    },\n);\n","import {InjectionToken} from '@angular/core';\nimport {SanitizeStyle} from '../types/sanitize-style';\n\n/**\n * A function that takes style rule value as input and returns a sanitized string\n *\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\n */\nexport const SANITIZE_STYLE = new InjectionToken<SanitizeStyle>(\n    'A function that sanitizes value for a CSS rule',\n    {\n        factory: () => value => value,\n        providedIn: 'root',\n    },\n);\n","import {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable, Sanitizer, SecurityContext} from '@angular/core';\nimport * as dompurify from 'dompurify';\nimport {DOMPurifyI} from 'dompurify';\nimport {DOMPURIFY_CONFIG} from './tokens/dompurify-config';\nimport {DOMPURIFY_HOOKS} from './tokens/dompurify-hooks';\nimport {SANITIZE_STYLE} from './tokens/sanitize-style';\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\nimport {NgDompurifyHook} from './types/ng-dompurify-hook';\nimport {SanitizeStyle} from './types/sanitize-style';\n\nconst createDOMPurify = dompurify;\n\n/**\n * Implementation of Angular {@link Sanitizer} purifying via DOMPurify\n *\n * use {@link DOMPURIFY_CONFIG} token to provide config ({@link NgDompurifyConfig})\n * use {@link SANITIZE_STYLE} token to provide a style sanitizing method ({@link SanitizeStyle})\n * use {@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({@link addHook})\n *\n * Ambient type cannot be used without @dynamic https://github.com/angular/angular/issues/23395\n * @dynamic\n */\n@Injectable({\n    providedIn: 'root',\n})\nexport class NgDompurifySanitizer implements Sanitizer {\n    private readonly domPurify: DOMPurifyI;\n\n    constructor(\n        @Inject(DOMPURIFY_CONFIG)\n        private readonly config: NgDompurifyConfig,\n        @Inject(SANITIZE_STYLE)\n        private readonly sanitizeStyle: SanitizeStyle,\n        @Inject(DOCUMENT) {defaultView}: Document,\n        @Inject(DOMPURIFY_HOOKS)\n        hooks: ReadonlyArray<NgDompurifyHook>,\n    ) {\n        this.domPurify = createDOMPurify(defaultView!);\n\n        hooks.forEach(({name, hook}) => {\n            this.domPurify.addHook(name, hook);\n        });\n    }\n\n    sanitize(\n        context: SecurityContext,\n        value: {} | string | null,\n        config: NgDompurifyConfig = this.config,\n    ): string {\n        if (context === SecurityContext.SCRIPT) {\n            throw new Error('DOMPurify does not support SCRIPT context');\n        }\n\n        return context === SecurityContext.STYLE\n            ? this.sanitizeStyle(String(value))\n            : this.domPurify.sanitize(String(value || ''), config);\n    }\n}\n","import {Pipe, PipeTransform, SecurityContext} from '@angular/core';\nimport {DomSanitizer, SafeValue} from '@angular/platform-browser';\nimport {NgDompurifySanitizer} from './ng-dompurify.service';\nimport {NgDompurifyConfig} from './types/ng-dompurify-config';\n\n/**\n * Pipe that transforms dirty content to clean via {@link NgDompurifySanitizer}\n */\n@Pipe({name: 'dompurify'})\nexport class NgDompurifyPipe implements PipeTransform {\n    constructor(\n        private readonly sanitizer: NgDompurifySanitizer,\n        private readonly domSanitizer: DomSanitizer,\n    ) {}\n\n    transform(\n        value: {} | string | null,\n        context: SecurityContext = SecurityContext.HTML,\n        config?: NgDompurifyConfig,\n    ): SafeValue | null {\n        return this.bypassSecurityTrust(\n            context,\n            this.sanitizer.sanitize(context, value, config),\n        );\n    }\n\n    private bypassSecurityTrust(\n        context: SecurityContext,\n        purifiedValue: string,\n    ): SafeValue | null {\n        switch (context) {\n            case SecurityContext.HTML:\n                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\n            case SecurityContext.STYLE:\n                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\n            case SecurityContext.URL:\n                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\n            case SecurityContext.RESOURCE_URL:\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\n            default:\n                return null;\n        }\n    }\n}\n","import {NgModule} from '@angular/core';\nimport {NgDompurifyPipe} from './ng-dompurify.pipe';\n\n@NgModule({\n    declarations: [NgDompurifyPipe],\n    exports: [NgDompurifyPipe],\n})\nexport class NgDompurifyModule {}\n"]}