import { DOCUMENT } from '@angular/common';
import * as dompurify from 'dompurify';
import { DomSanitizer } from '@angular/platform-browser';
import { InjectionToken, Inject, Injectable, SecurityContext, Pipe, NgModule, defineInjectable, inject } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Token for {\@link NgDompurifyConfig}
 * @type {?}
 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/platform-browser';
const DOMPURIFY_CONFIG = new InjectionToken('Config for DOMPurify', {
    factory: () => ({}),
    providedIn: 'root',
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Token for adding hooks to DOMPurify, see {\@link addHook}
 * @type {?}
 */
const DOMPURIFY_HOOKS = new InjectionToken('Hooks for DOMPurify', {
    factory: () => [],
    providedIn: 'root',
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * A function that takes style rule value as input and returns a sanitized string
 *
 * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing
 * @type {?}
 */
const SANITIZE_STYLE = new InjectionToken('A function that sanitizes value for a CSS rule', {
    factory: () => value => value,
    providedIn: 'root',
});

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const createDOMPurify = dompurify;
/**
 * Implementation of Angular {\@link Sanitizer} purifying via DOMPurify
 *
 * use {\@link DOMPURIFY_CONFIG} token to provide config ({\@link NgDompurifyConfig})
 * use {\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\@link SanitizeStyle})
 * use {\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\@link addHook})
 *
 * Ambient type cannot be used without \@dynamic https://github.com/angular/angular/issues/23395
 * \@dynamic
 */
class NgDompurifySanitizer {
    /**
     * @param {?} config
     * @param {?} sanitizeStyle
     * @param {?} __2
     * @param {?} hooks
     */
    constructor(config, sanitizeStyle, { defaultView }, hooks) {
        this.config = config;
        this.sanitizeStyle = sanitizeStyle;
        this.domPurify = createDOMPurify((/** @type {?} */ (defaultView)));
        hooks.forEach(({ name, hook }) => {
            this.domPurify.addHook(name, hook);
        });
    }
    /**
     * @param {?} context
     * @param {?} value
     * @param {?=} config
     * @return {?}
     */
    sanitize(context, value, config = this.config) {
        if (context === SecurityContext.SCRIPT) {
            throw new Error('DOMPurify does not support SCRIPT context');
        }
        return context === SecurityContext.STYLE
            ? this.sanitizeStyle(String(value))
            : this.domPurify.sanitize(String(value || ''), config);
    }
}
NgDompurifySanitizer.ɵfac = function NgDompurifySanitizer_Factory(t) { return new (t || NgDompurifySanitizer)(ɵngcc0.ɵɵinject(DOMPURIFY_CONFIG), ɵngcc0.ɵɵinject(SANITIZE_STYLE), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(DOMPURIFY_HOOKS)); };
NgDompurifySanitizer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgDompurifySanitizer, factory: NgDompurifySanitizer.ɵfac, providedIn: 'root' });
/** @nocollapse */
NgDompurifySanitizer.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_CONFIG,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [SANITIZE_STYLE,] }] },
    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },
    { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_HOOKS,] }] }
];
/** @nocollapse */ NgDompurifySanitizer.ngInjectableDef = defineInjectable({ factory: function NgDompurifySanitizer_Factory() { return new NgDompurifySanitizer(inject(DOMPURIFY_CONFIG), inject(SANITIZE_STYLE), inject(DOCUMENT), inject(DOMPURIFY_HOOKS)); }, token: NgDompurifySanitizer, providedIn: "root" });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifySanitizer, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [DOMPURIFY_CONFIG]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [SANITIZE_STYLE]
            }] }, { type: Document, decorators: [{
                type: Inject,
                args: [DOCUMENT]
            }] }, { type: undefined, decorators: [{
                type: Inject,
                args: [DOMPURIFY_HOOKS]
            }] }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Pipe that transforms dirty content to clean via {\@link NgDompurifySanitizer}
 */
class NgDompurifyPipe {
    /**
     * @param {?} sanitizer
     * @param {?} domSanitizer
     */
    constructor(sanitizer, domSanitizer) {
        this.sanitizer = sanitizer;
        this.domSanitizer = domSanitizer;
    }
    /**
     * @param {?} value
     * @param {?=} context
     * @param {?=} config
     * @return {?}
     */
    transform(value, context = SecurityContext.HTML, config) {
        return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));
    }
    /**
     * @private
     * @param {?} context
     * @param {?} purifiedValue
     * @return {?}
     */
    bypassSecurityTrust(context, purifiedValue) {
        switch (context) {
            case SecurityContext.HTML:
                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);
            case SecurityContext.STYLE:
                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);
            case SecurityContext.URL:
                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);
            case SecurityContext.RESOURCE_URL:
                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);
            default:
                return null;
        }
    }
}
NgDompurifyPipe.ɵfac = function NgDompurifyPipe_Factory(t) { return new (t || NgDompurifyPipe)(ɵngcc0.ɵɵdirectiveInject(NgDompurifySanitizer, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer, 16)); };
NgDompurifyPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: "dompurify", type: NgDompurifyPipe, pure: true });
/** @nocollapse */
NgDompurifyPipe.ctorParameters = () => [
    { type: NgDompurifySanitizer },
    { type: DomSanitizer }
];
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifyPipe, [{
        type: Pipe,
        args: [{ name: 'dompurify' }]
    }], function () { return [{ type: NgDompurifySanitizer }, { type: ɵngcc1.DomSanitizer }]; }, null); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgDompurifyModule {
}
NgDompurifyModule.ɵfac = function NgDompurifyModule_Factory(t) { return new (t || NgDompurifyModule)(); };
NgDompurifyModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgDompurifyModule });
NgDompurifyModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifyModule, [{
        type: NgModule,
        args: [{
                declarations: [NgDompurifyPipe],
                exports: [NgDompurifyPipe]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDompurifyModule, { declarations: [NgDompurifyPipe], exports: [NgDompurifyPipe] }); })();

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgDompurifySanitizer, NgDompurifyPipe, NgDompurifyModule, DOMPURIFY_CONFIG, DOMPURIFY_HOOKS, SANITIZE_STYLE };

//# sourceMappingURL=tinkoff-ng-dompurify.js.map