import { Injectable } from '@angular/core';
import { concat, defer, EMPTY } from 'rxjs';
import { takeWhile } from 'rxjs/operators';
import { dasharize } from '../utils/dasharize';
import { AbstractEventPlugin } from './abstract.plugin';
import * as i0 from "@angular/core";
export class BindEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = '$';
    }
    addEventListener(element, event) {
        element[event] = element[event] || EMPTY;
        const method = this.getMethod(element, event);
        const zone$ = this.manager.getZone().onStable;
        const sub = concat(zone$.pipe(takeWhile(() => element[event] === EMPTY)), defer(() => element[event])).subscribe(method);
        return () => sub.unsubscribe();
    }
    getMethod(element, event) {
        const [, key, value, unit = ''] = event.split('.');
        if (event.endsWith('.attr')) {
            return v => v === null
                ? element.removeAttribute(key)
                : element.setAttribute(key, String(v));
        }
        if (key === 'class') {
            return v => element.classList.toggle(value, !!v);
        }
        if (key === 'style') {
            return v => element.style.setProperty(dasharize(value), `${v}${unit}`);
        }
        return v => (element[key] = v);
    }
}
/** @nocollapse */ BindEventPlugin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BindEventPlugin, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ BindEventPlugin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BindEventPlugin });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: BindEventPlugin, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmluZC5wbHVnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1ldmVudC1wbHVnaW5zL3NyYy9wbHVnaW5zL2JpbmQucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQ3RELE9BQU8sRUFBQyxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN6QyxPQUFPLEVBQUMsU0FBUyxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFDN0MsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7O0FBR3RELE1BQU0sT0FBTyxlQUFnQixTQUFRLG1CQUFtQjtJQUR4RDs7UUFFdUIsYUFBUSxHQUFHLEdBQUcsQ0FBQztLQXlDckM7SUF2Q0csZ0JBQWdCLENBQ1osT0FBMEQsRUFDMUQsS0FBYTtRQUViLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDO1FBRXpDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO1FBQzlDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FDZCxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsRUFDckQsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUM5QixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVwQixPQUFPLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUNuQyxDQUFDO0lBRU8sU0FBUyxDQUNiLE9BQThDLEVBQzlDLEtBQWE7UUFFYixNQUFNLENBQUMsRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksR0FBRyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRW5ELElBQUksS0FBSyxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUN6QixPQUFPLENBQUMsQ0FBQyxFQUFFLENBQ1AsQ0FBQyxLQUFLLElBQUk7Z0JBQ04sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDO2dCQUM5QixDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDakIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLEdBQUcsS0FBSyxPQUFPLEVBQUU7WUFDakIsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzFFO1FBRUQsT0FBTyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7O2dJQXpDUSxlQUFlO29JQUFmLGVBQWU7NEZBQWYsZUFBZTtrQkFEM0IsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7Y29uY2F0LCBkZWZlciwgRU1QVFksIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge3Rha2VXaGlsZX0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQge2Rhc2hhcml6ZX0gZnJvbSAnLi4vdXRpbHMvZGFzaGFyaXplJztcclxuaW1wb3J0IHtBYnN0cmFjdEV2ZW50UGx1Z2lufSBmcm9tICcuL2Fic3RyYWN0LnBsdWdpbic7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBCaW5kRXZlbnRQbHVnaW4gZXh0ZW5kcyBBYnN0cmFjdEV2ZW50UGx1Z2luIHtcclxuICAgIHByb3RlY3RlZCByZWFkb25seSBtb2RpZmllciA9ICckJztcclxuXHJcbiAgICBhZGRFdmVudExpc3RlbmVyKFxyXG4gICAgICAgIGVsZW1lbnQ6IEhUTUxFbGVtZW50ICYgUmVjb3JkPHN0cmluZywgT2JzZXJ2YWJsZTx1bmtub3duPj4sXHJcbiAgICAgICAgZXZlbnQ6IHN0cmluZyxcclxuICAgICk6IEZ1bmN0aW9uIHtcclxuICAgICAgICBlbGVtZW50W2V2ZW50XSA9IGVsZW1lbnRbZXZlbnRdIHx8IEVNUFRZO1xyXG5cclxuICAgICAgICBjb25zdCBtZXRob2QgPSB0aGlzLmdldE1ldGhvZChlbGVtZW50LCBldmVudCk7XHJcbiAgICAgICAgY29uc3Qgem9uZSQgPSB0aGlzLm1hbmFnZXIuZ2V0Wm9uZSgpLm9uU3RhYmxlO1xyXG4gICAgICAgIGNvbnN0IHN1YiA9IGNvbmNhdChcclxuICAgICAgICAgICAgem9uZSQucGlwZSh0YWtlV2hpbGUoKCkgPT4gZWxlbWVudFtldmVudF0gPT09IEVNUFRZKSksXHJcbiAgICAgICAgICAgIGRlZmVyKCgpID0+IGVsZW1lbnRbZXZlbnRdKSxcclxuICAgICAgICApLnN1YnNjcmliZShtZXRob2QpO1xyXG5cclxuICAgICAgICByZXR1cm4gKCkgPT4gc3ViLnVuc3Vic2NyaWJlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXRNZXRob2QoXHJcbiAgICAgICAgZWxlbWVudDogSFRNTEVsZW1lbnQgJiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPixcclxuICAgICAgICBldmVudDogc3RyaW5nLFxyXG4gICAgKTogKHY6IHVua25vd24pID0+IHZvaWQge1xyXG4gICAgICAgIGNvbnN0IFssIGtleSwgdmFsdWUsIHVuaXQgPSAnJ10gPSBldmVudC5zcGxpdCgnLicpO1xyXG5cclxuICAgICAgICBpZiAoZXZlbnQuZW5kc1dpdGgoJy5hdHRyJykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHYgPT5cclxuICAgICAgICAgICAgICAgIHYgPT09IG51bGxcclxuICAgICAgICAgICAgICAgICAgICA/IGVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKGtleSlcclxuICAgICAgICAgICAgICAgICAgICA6IGVsZW1lbnQuc2V0QXR0cmlidXRlKGtleSwgU3RyaW5nKHYpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChrZXkgPT09ICdjbGFzcycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHYgPT4gZWxlbWVudC5jbGFzc0xpc3QudG9nZ2xlKHZhbHVlLCAhIXYpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGtleSA9PT0gJ3N0eWxlJykge1xyXG4gICAgICAgICAgICByZXR1cm4gdiA9PiBlbGVtZW50LnN0eWxlLnNldFByb3BlcnR5KGRhc2hhcml6ZSh2YWx1ZSksIGAke3Z9JHt1bml0fWApO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHYgPT4gKGVsZW1lbnRba2V5XSA9IHYpO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==