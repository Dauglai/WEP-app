import { Injectable } from '@angular/core';
import { AbstractEventPlugin } from './abstract.plugin';
import * as i0 from "@angular/core";
export class OptionsEventPlugin extends AbstractEventPlugin {
    constructor() {
        super(...arguments);
        this.modifier = 'capture.once.passive';
    }
    supports(event) {
        return event.includes('.') && !this.unwrap(event).includes('.');
    }
    addEventListener(element, event, handler) {
        element.addEventListener(this.unwrap(event), handler, {
            once: event.includes('.once'),
            passive: event.includes('.passive'),
            capture: event.includes('.capture'),
        });
        return () => element.removeEventListener(this.unwrap(event), handler);
    }
}
/** @nocollapse */ OptionsEventPlugin.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: OptionsEventPlugin, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ OptionsEventPlugin.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: OptionsEventPlugin });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: OptionsEventPlugin, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9ucy5wbHVnaW4uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9uZy1ldmVudC1wbHVnaW5zL3NyYy9wbHVnaW5zL29wdGlvbnMucGx1Z2luLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sbUJBQW1CLENBQUM7O0FBR3RELE1BQU0sT0FBTyxrQkFBbUIsU0FBUSxtQkFBbUI7SUFEM0Q7O1FBRXVCLGFBQVEsR0FBRyxzQkFBc0IsQ0FBQztLQW1CeEQ7SUFqQkcsUUFBUSxDQUFDLEtBQWE7UUFDbEIsT0FBTyxLQUFLLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDcEUsQ0FBQztJQUVELGdCQUFnQixDQUNaLE9BQW9CLEVBQ3BCLEtBQWEsRUFDYixPQUFzQjtRQUV0QixPQUFPLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLEVBQUU7WUFDbEQsSUFBSSxFQUFFLEtBQUssQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDO1lBQzdCLE9BQU8sRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQztZQUNuQyxPQUFPLEVBQUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUM7U0FDdEMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxHQUFHLEVBQUUsQ0FBQyxPQUFPLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUMxRSxDQUFDOzttSUFuQlEsa0JBQWtCO3VJQUFsQixrQkFBa0I7NEZBQWxCLGtCQUFrQjtrQkFEOUIsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7QWJzdHJhY3RFdmVudFBsdWdpbn0gZnJvbSAnLi9hYnN0cmFjdC5wbHVnaW4nO1xyXG5cclxuQEluamVjdGFibGUoKVxyXG5leHBvcnQgY2xhc3MgT3B0aW9uc0V2ZW50UGx1Z2luIGV4dGVuZHMgQWJzdHJhY3RFdmVudFBsdWdpbiB7XHJcbiAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgbW9kaWZpZXIgPSAnY2FwdHVyZS5vbmNlLnBhc3NpdmUnO1xyXG5cclxuICAgIHN1cHBvcnRzKGV2ZW50OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAgICAgICByZXR1cm4gZXZlbnQuaW5jbHVkZXMoJy4nKSAmJiAhdGhpcy51bndyYXAoZXZlbnQpLmluY2x1ZGVzKCcuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBlbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgICAgICBldmVudDogc3RyaW5nLFxyXG4gICAgICAgIGhhbmRsZXI6IEV2ZW50TGlzdGVuZXIsXHJcbiAgICApOiBGdW5jdGlvbiB7XHJcbiAgICAgICAgZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKHRoaXMudW53cmFwKGV2ZW50KSwgaGFuZGxlciwge1xyXG4gICAgICAgICAgICBvbmNlOiBldmVudC5pbmNsdWRlcygnLm9uY2UnKSxcclxuICAgICAgICAgICAgcGFzc2l2ZTogZXZlbnQuaW5jbHVkZXMoJy5wYXNzaXZlJyksXHJcbiAgICAgICAgICAgIGNhcHR1cmU6IGV2ZW50LmluY2x1ZGVzKCcuY2FwdHVyZScpLFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICByZXR1cm4gKCkgPT4gZWxlbWVudC5yZW1vdmVFdmVudExpc3RlbmVyKHRoaXMudW53cmFwKGV2ZW50KSwgaGFuZGxlcik7XHJcbiAgICB9XHJcbn1cclxuIl19