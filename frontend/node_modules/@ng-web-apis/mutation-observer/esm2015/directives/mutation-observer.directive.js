import { Attribute, Directive, ElementRef, EventEmitter, Inject, Output, } from '@angular/core';
import { MUTATION_OBSERVER_INIT } from '../tokens/mutation-observer-init';
import { mutationObserverInitFactory } from '../utils/mutation-observer-init-factory';
import * as i0 from "@angular/core";
export class MutationObserverDirective extends MutationObserver {
    constructor({ nativeElement }, config, _1, _2, _3, _4, _5, _6, _7) {
        super(records => {
            this.waMutationObserver.emit(records);
        });
        this.waMutationObserver = new EventEmitter();
        this.observe(nativeElement, config);
    }
    ngOnDestroy() {
        this.disconnect();
    }
}
/** @nocollapse */ MutationObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverDirective, deps: [{ token: ElementRef }, { token: MUTATION_OBSERVER_INIT }, { token: 'attributeFilter', attribute: true }, { token: 'attributeOldValue', attribute: true }, { token: 'attributes', attribute: true }, { token: 'characterData', attribute: true }, { token: 'characterDataOldValue', attribute: true }, { token: 'childList', attribute: true }, { token: 'subtree', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ MutationObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: MutationObserverDirective, selector: "[waMutationObserver]", outputs: { waMutationObserver: "waMutationObserver" }, providers: [
        {
            provide: MUTATION_OBSERVER_INIT,
            deps: [ElementRef],
            useFactory: mutationObserverInitFactory,
        },
    ], exportAs: ["MutationObserver"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waMutationObserver]',
                    exportAs: 'MutationObserver',
                    providers: [
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            deps: [ElementRef],
                            useFactory: mutationObserverInitFactory,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MUTATION_OBSERVER_INIT]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributeFilter']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributeOldValue']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributes']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['characterData']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['characterDataOldValue']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['childList']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['subtree']
                }] }]; }, propDecorators: { waMutationObserver: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibXV0YXRpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvbXV0YXRpb24tb2JzZXJ2ZXIvc3JjL2RpcmVjdGl2ZXMvbXV0YXRpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUNULFVBQVUsRUFDVixZQUFZLEVBQ1osTUFBTSxFQUVOLE1BQU0sR0FDVCxNQUFNLGVBQWUsQ0FBQztBQUV2QixPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUN4RSxPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSx5Q0FBeUMsQ0FBQzs7QUFhcEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGdCQUFnQjtJQUkzRCxZQUN3QixFQUFDLGFBQWEsRUFBbUIsRUFDckIsTUFBNEIsRUFDOUIsRUFBVyxFQUNULEVBQVcsRUFDbEIsRUFBVyxFQUNSLEVBQVcsRUFDSCxFQUFXLEVBQ3ZCLEVBQVcsRUFDYixFQUFXO1FBRWpDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRTtZQUNaLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDMUMsQ0FBQyxDQUFDLENBQUM7UUFmRSx1QkFBa0IsR0FBRyxJQUFJLFlBQVksRUFBb0IsQ0FBQztRQWlCL0QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEMsQ0FBQztJQUVELFdBQVc7UUFDUCxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDdEIsQ0FBQzs7MElBeEJRLHlCQUF5QixrQkFLdEIsVUFBVSxhQUNWLHNCQUFzQixhQUNuQixpQkFBaUIsOEJBQ2pCLG1CQUFtQiw4QkFDbkIsWUFBWSw4QkFDWixlQUFlLDhCQUNmLHVCQUF1Qiw4QkFDdkIsV0FBVyw4QkFDWCxTQUFTOzhIQWJmLHlCQUF5QixzR0FSdkI7UUFDUDtZQUNJLE9BQU8sRUFBRSxzQkFBc0I7WUFDL0IsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDO1lBQ2xCLFVBQVUsRUFBRSwyQkFBMkI7U0FDMUM7S0FDSjs0RkFFUSx5QkFBeUI7a0JBWHJDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHNCQUFzQjtvQkFDaEMsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsU0FBUyxFQUFFO3dCQUNQOzRCQUNJLE9BQU8sRUFBRSxzQkFBc0I7NEJBQy9CLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQzs0QkFDbEIsVUFBVSxFQUFFLDJCQUEyQjt5QkFDMUM7cUJBQ0o7aUJBQ0o7OzBCQU1RLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsc0JBQXNCOzswQkFDN0IsU0FBUzsyQkFBQyxpQkFBaUI7OzBCQUMzQixTQUFTOzJCQUFDLG1CQUFtQjs7MEJBQzdCLFNBQVM7MkJBQUMsWUFBWTs7MEJBQ3RCLFNBQVM7MkJBQUMsZUFBZTs7MEJBQ3pCLFNBQVM7MkJBQUMsdUJBQXVCOzswQkFDakMsU0FBUzsyQkFBQyxXQUFXOzswQkFDckIsU0FBUzsyQkFBQyxTQUFTOzRDQVhmLGtCQUFrQjtzQkFEMUIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XHJcbiAgICBBdHRyaWJ1dGUsXHJcbiAgICBEaXJlY3RpdmUsXHJcbiAgICBFbGVtZW50UmVmLFxyXG4gICAgRXZlbnRFbWl0dGVyLFxyXG4gICAgSW5qZWN0LFxyXG4gICAgT25EZXN0cm95LFxyXG4gICAgT3V0cHV0LFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5cclxuaW1wb3J0IHtNVVRBVElPTl9PQlNFUlZFUl9JTklUfSBmcm9tICcuLi90b2tlbnMvbXV0YXRpb24tb2JzZXJ2ZXItaW5pdCc7XHJcbmltcG9ydCB7bXV0YXRpb25PYnNlcnZlckluaXRGYWN0b3J5fSBmcm9tICcuLi91dGlscy9tdXRhdGlvbi1vYnNlcnZlci1pbml0LWZhY3RvcnknO1xyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1t3YU11dGF0aW9uT2JzZXJ2ZXJdJyxcclxuICAgIGV4cG9ydEFzOiAnTXV0YXRpb25PYnNlcnZlcicsXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIHByb3ZpZGU6IE1VVEFUSU9OX09CU0VSVkVSX0lOSVQsXHJcbiAgICAgICAgICAgIGRlcHM6IFtFbGVtZW50UmVmXSxcclxuICAgICAgICAgICAgdXNlRmFjdG9yeTogbXV0YXRpb25PYnNlcnZlckluaXRGYWN0b3J5LFxyXG4gICAgICAgIH0sXHJcbiAgICBdLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgTXV0YXRpb25PYnNlcnZlckRpcmVjdGl2ZSBleHRlbmRzIE11dGF0aW9uT2JzZXJ2ZXIgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgQE91dHB1dCgpXHJcbiAgICByZWFkb25seSB3YU11dGF0aW9uT2JzZXJ2ZXIgPSBuZXcgRXZlbnRFbWl0dGVyPE11dGF0aW9uUmVjb3JkW10+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8Tm9kZT4sXHJcbiAgICAgICAgQEluamVjdChNVVRBVElPTl9PQlNFUlZFUl9JTklUKSBjb25maWc6IE11dGF0aW9uT2JzZXJ2ZXJJbml0LFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2F0dHJpYnV0ZUZpbHRlcicpIF8xOiB1bmtub3duLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2F0dHJpYnV0ZU9sZFZhbHVlJykgXzI6IHVua25vd24sXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnYXR0cmlidXRlcycpIF8zOiB1bmtub3duLFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ2NoYXJhY3RlckRhdGEnKSBfNDogdW5rbm93bixcclxuICAgICAgICBAQXR0cmlidXRlKCdjaGFyYWN0ZXJEYXRhT2xkVmFsdWUnKSBfNTogdW5rbm93bixcclxuICAgICAgICBAQXR0cmlidXRlKCdjaGlsZExpc3QnKSBfNjogdW5rbm93bixcclxuICAgICAgICBAQXR0cmlidXRlKCdzdWJ0cmVlJykgXzc6IHVua25vd24sXHJcbiAgICApIHtcclxuICAgICAgICBzdXBlcihyZWNvcmRzID0+IHtcclxuICAgICAgICAgICAgdGhpcy53YU11dGF0aW9uT2JzZXJ2ZXIuZW1pdChyZWNvcmRzKTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5vYnNlcnZlKG5hdGl2ZUVsZW1lbnQsIGNvbmZpZyk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZCB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19