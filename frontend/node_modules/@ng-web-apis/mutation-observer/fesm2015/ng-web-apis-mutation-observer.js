import * as i0 from '@angular/core';
import { InjectionToken, EventEmitter, ElementRef, Directive, Inject, Attribute, Output, Injectable, NgModule } from '@angular/core';
import { Observable } from 'rxjs';

const MUTATION_OBSERVER_INIT = new InjectionToken('MutationObserver config');

function booleanAttribute(element, attribute) {
    return element.getAttribute(attribute) !== null || undefined;
}

function mutationObserverInitFactory({ nativeElement, }) {
    const attributeFilterAttr = nativeElement.getAttribute('attributeFilter');
    const attributeFilter = attributeFilterAttr
        ? attributeFilterAttr.split(',').map(attr => attr.trim())
        : undefined;
    return {
        attributeFilter,
        attributeOldValue: booleanAttribute(nativeElement, 'attributeOldValue'),
        attributes: booleanAttribute(nativeElement, 'attributes'),
        characterData: booleanAttribute(nativeElement, 'characterData'),
        characterDataOldValue: booleanAttribute(nativeElement, 'characterDataOldValue'),
        childList: booleanAttribute(nativeElement, 'childList'),
        subtree: booleanAttribute(nativeElement, 'subtree'),
    };
}

class MutationObserverDirective extends MutationObserver {
    constructor({ nativeElement }, config, _1, _2, _3, _4, _5, _6, _7) {
        super(records => {
            this.waMutationObserver.emit(records);
        });
        this.waMutationObserver = new EventEmitter();
        this.observe(nativeElement, config);
    }
    ngOnDestroy() {
        this.disconnect();
    }
}
/** @nocollapse */ MutationObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverDirective, deps: [{ token: ElementRef }, { token: MUTATION_OBSERVER_INIT }, { token: 'attributeFilter', attribute: true }, { token: 'attributeOldValue', attribute: true }, { token: 'attributes', attribute: true }, { token: 'characterData', attribute: true }, { token: 'characterDataOldValue', attribute: true }, { token: 'childList', attribute: true }, { token: 'subtree', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ MutationObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: MutationObserverDirective, selector: "[waMutationObserver]", outputs: { waMutationObserver: "waMutationObserver" }, providers: [
        {
            provide: MUTATION_OBSERVER_INIT,
            deps: [ElementRef],
            useFactory: mutationObserverInitFactory,
        },
    ], exportAs: ["MutationObserver"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waMutationObserver]',
                    exportAs: 'MutationObserver',
                    providers: [
                        {
                            provide: MUTATION_OBSERVER_INIT,
                            deps: [ElementRef],
                            useFactory: mutationObserverInitFactory,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MUTATION_OBSERVER_INIT]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributeFilter']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributeOldValue']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['attributes']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['characterData']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['characterDataOldValue']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['childList']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['subtree']
                }] }]; }, propDecorators: { waMutationObserver: [{
                type: Output
            }] } });

class MutationObserverService extends Observable {
    constructor({ nativeElement }, config) {
        super(subscriber => {
            const observer = new MutationObserver(records => {
                subscriber.next(records);
            });
            observer.observe(nativeElement, config);
            return () => {
                observer.disconnect();
            };
        });
    }
}
/** @nocollapse */ MutationObserverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverService, deps: [{ token: ElementRef }, { token: MUTATION_OBSERVER_INIT }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ MutationObserverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [MUTATION_OBSERVER_INIT]
                }] }]; } });

class MutationObserverModule {
}
/** @nocollapse */ MutationObserverModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });
/** @nocollapse */ MutationObserverModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverModule, declarations: [MutationObserverDirective], exports: [MutationObserverDirective] });
/** @nocollapse */ MutationObserverModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverModule });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: MutationObserverModule, decorators: [{
            type: NgModule,
            args: [{
                    declarations: [MutationObserverDirective],
                    exports: [MutationObserverDirective],
                }]
        }] });

/**
 * Public API Surface of @ng-web-apis/mutation-observer
 */

/**
 * Generated bundle index. Do not edit.
 */

export { MUTATION_OBSERVER_INIT, MutationObserverDirective, MutationObserverModule, MutationObserverService };
//# sourceMappingURL=ng-web-apis-mutation-observer.js.map
