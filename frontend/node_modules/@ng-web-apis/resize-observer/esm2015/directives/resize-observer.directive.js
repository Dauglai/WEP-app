import { Attribute, Directive, ElementRef, Inject, Output } from '@angular/core';
import { Observable } from 'rxjs';
import { ResizeObserverService } from '../services/resize-observer.service';
import { RESIZE_OPTION_BOX, RESIZE_OPTION_BOX_DEFAULT } from '../tokens/resize-option-box';
import * as i0 from "@angular/core";
import * as i1 from "rxjs";
// TODO switch to Attribute once https://github.com/angular/angular/issues/36479 is fixed
export function boxExtractor({ nativeElement, }) {
    const attribute = nativeElement.getAttribute('waResizeBox');
    return boxFactory(attribute);
}
export function boxFactory(box) {
    return box || RESIZE_OPTION_BOX_DEFAULT;
}
export class ResizeObserverDirective {
    constructor(entries$, _box) {
        this.waResizeObserver = entries$;
    }
}
/** @nocollapse */ ResizeObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ResizeObserverDirective, deps: [{ token: ResizeObserverService }, { token: 'waResizeBox', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ ResizeObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: ResizeObserverDirective, selector: "[waResizeObserver]", outputs: { waResizeObserver: "waResizeObserver" }, providers: [
        ResizeObserverService,
        {
            provide: RESIZE_OPTION_BOX,
            deps: [ElementRef],
            useFactory: boxExtractor,
        },
    ], ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ResizeObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waResizeObserver]',
                    providers: [
                        ResizeObserverService,
                        {
                            provide: RESIZE_OPTION_BOX,
                            deps: [ElementRef],
                            useFactory: boxExtractor,
                        },
                    ],
                }]
        }], ctorParameters: function () { return [{ type: i1.Observable, decorators: [{
                    type: Inject,
                    args: [ResizeObserverService]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waResizeBox']
                }] }]; }, propDecorators: { waResizeObserver: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL3Jlc2l6ZS1vYnNlcnZlci9zcmMvZGlyZWN0aXZlcy9yZXNpemUtb2JzZXJ2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQy9FLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFFaEMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0scUNBQXFDLENBQUM7QUFDMUUsT0FBTyxFQUFDLGlCQUFpQixFQUFFLHlCQUF5QixFQUFDLE1BQU0sNkJBQTZCLENBQUM7OztBQUV6Rix5RkFBeUY7QUFDekYsTUFBTSxVQUFVLFlBQVksQ0FBQyxFQUN6QixhQUFhLEdBQ0s7SUFDbEIsTUFBTSxTQUFTLEdBQUcsYUFBYSxDQUFDLFlBQVksQ0FDeEMsYUFBYSxDQUNZLENBQUM7SUFFOUIsT0FBTyxVQUFVLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakMsQ0FBQztBQUVELE1BQU0sVUFBVSxVQUFVLENBQ3RCLEdBQW9DO0lBRXBDLE9BQU8sR0FBRyxJQUFJLHlCQUF5QixDQUFDO0FBQzVDLENBQUM7QUFhRCxNQUFNLE9BQU8sdUJBQXVCO0lBSWhDLFlBRUksUUFBMkMsRUFDakIsSUFBOEI7UUFFeEQsSUFBSSxDQUFDLGdCQUFnQixHQUFHLFFBQVEsQ0FBQztJQUNyQyxDQUFDOzt3SUFWUSx1QkFBdUIsa0JBS3BCLHFCQUFxQixhQUVsQixhQUFhOzRIQVBuQix1QkFBdUIsZ0dBVHJCO1FBQ1AscUJBQXFCO1FBQ3JCO1lBQ0ksT0FBTyxFQUFFLGlCQUFpQjtZQUMxQixJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUM7WUFDbEIsVUFBVSxFQUFFLFlBQVk7U0FDM0I7S0FDSjs0RkFFUSx1QkFBdUI7a0JBWG5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLG9CQUFvQjtvQkFDOUIsU0FBUyxFQUFFO3dCQUNQLHFCQUFxQjt3QkFDckI7NEJBQ0ksT0FBTyxFQUFFLGlCQUFpQjs0QkFDMUIsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDOzRCQUNsQixVQUFVLEVBQUUsWUFBWTt5QkFDM0I7cUJBQ0o7aUJBQ0o7OzBCQU1RLE1BQU07MkJBQUMscUJBQXFCOzswQkFFNUIsU0FBUzsyQkFBQyxhQUFhOzRDQUxuQixnQkFBZ0I7c0JBRHhCLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0F0dHJpYnV0ZSwgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBJbmplY3QsIE91dHB1dH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQge1Jlc2l6ZU9ic2VydmVyU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvcmVzaXplLW9ic2VydmVyLnNlcnZpY2UnO1xyXG5pbXBvcnQge1JFU0laRV9PUFRJT05fQk9YLCBSRVNJWkVfT1BUSU9OX0JPWF9ERUZBVUxUfSBmcm9tICcuLi90b2tlbnMvcmVzaXplLW9wdGlvbi1ib3gnO1xyXG5cclxuLy8gVE9ETyBzd2l0Y2ggdG8gQXR0cmlidXRlIG9uY2UgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9pc3N1ZXMvMzY0NzkgaXMgZml4ZWRcclxuZXhwb3J0IGZ1bmN0aW9uIGJveEV4dHJhY3Rvcih7XHJcbiAgICBuYXRpdmVFbGVtZW50LFxyXG59OiBFbGVtZW50UmVmPEVsZW1lbnQ+KTogUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIHtcclxuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG5hdGl2ZUVsZW1lbnQuZ2V0QXR0cmlidXRlKFxyXG4gICAgICAgICd3YVJlc2l6ZUJveCcsXHJcbiAgICApIGFzIFJlc2l6ZU9ic2VydmVyQm94T3B0aW9ucztcclxuXHJcbiAgICByZXR1cm4gYm94RmFjdG9yeShhdHRyaWJ1dGUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYm94RmFjdG9yeShcclxuICAgIGJveDogUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIHwgbnVsbCxcclxuKTogUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zIHtcclxuICAgIHJldHVybiBib3ggfHwgUkVTSVpFX09QVElPTl9CT1hfREVGQVVMVDtcclxufVxyXG5cclxuQERpcmVjdGl2ZSh7XHJcbiAgICBzZWxlY3RvcjogJ1t3YVJlc2l6ZU9ic2VydmVyXScsXHJcbiAgICBwcm92aWRlcnM6IFtcclxuICAgICAgICBSZXNpemVPYnNlcnZlclNlcnZpY2UsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBwcm92aWRlOiBSRVNJWkVfT1BUSU9OX0JPWCxcclxuICAgICAgICAgICAgZGVwczogW0VsZW1lbnRSZWZdLFxyXG4gICAgICAgICAgICB1c2VGYWN0b3J5OiBib3hFeHRyYWN0b3IsXHJcbiAgICAgICAgfSxcclxuICAgIF0sXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBSZXNpemVPYnNlcnZlckRpcmVjdGl2ZSB7XHJcbiAgICBAT3V0cHV0KClcclxuICAgIHJlYWRvbmx5IHdhUmVzaXplT2JzZXJ2ZXI6IE9ic2VydmFibGU8UmVzaXplT2JzZXJ2ZXJFbnRyeVtdPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihcclxuICAgICAgICBASW5qZWN0KFJlc2l6ZU9ic2VydmVyU2VydmljZSlcclxuICAgICAgICBlbnRyaWVzJDogT2JzZXJ2YWJsZTxSZXNpemVPYnNlcnZlckVudHJ5W10+LFxyXG4gICAgICAgIEBBdHRyaWJ1dGUoJ3dhUmVzaXplQm94JykgX2JveDogUmVzaXplT2JzZXJ2ZXJCb3hPcHRpb25zLFxyXG4gICAgKSB7XHJcbiAgICAgICAgdGhpcy53YVJlc2l6ZU9ic2VydmVyID0gZW50cmllcyQ7XHJcbiAgICB9XHJcbn1cclxuIl19