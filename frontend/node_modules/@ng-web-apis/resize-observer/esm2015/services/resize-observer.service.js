import { ElementRef, Inject, Injectable, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { share } from 'rxjs/operators';
import { RESIZE_OPTION_BOX } from '../tokens/resize-option-box';
import { RESIZE_OBSERVER_SUPPORT } from '../tokens/support';
import * as i0 from "@angular/core";
export class ResizeObserverService extends Observable {
    constructor({ nativeElement }, ngZone, support, box) {
        let observer;
        super(subscriber => {
            if (!support) {
                subscriber.error('ResizeObserver is not supported in your browser');
                return;
            }
            observer = new ResizeObserver(entries => {
                ngZone.run(() => {
                    subscriber.next(entries);
                });
            });
            observer.observe(nativeElement, { box });
            return () => {
                observer.disconnect();
            };
        });
        return this.pipe(share());
    }
}
/** @nocollapse */ ResizeObserverService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ResizeObserverService, deps: [{ token: ElementRef }, { token: NgZone }, { token: RESIZE_OBSERVER_SUPPORT }, { token: RESIZE_OPTION_BOX }], target: i0.ɵɵFactoryTarget.Injectable });
/** @nocollapse */ ResizeObserverService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ResizeObserverService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: ResizeObserverService, decorators: [{
            type: Injectable
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Inject,
                    args: [ElementRef]
                }] }, { type: i0.NgZone, decorators: [{
                    type: Inject,
                    args: [NgZone]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [RESIZE_OBSERVER_SUPPORT]
                }] }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [RESIZE_OPTION_BOX]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplLW9ic2VydmVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9yZXNpemUtb2JzZXJ2ZXIvc3JjL3NlcnZpY2VzL3Jlc2l6ZS1vYnNlcnZlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDckUsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUNoQyxPQUFPLEVBQUMsS0FBSyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFckMsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7O0FBRzFELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUEwQztJQUNqRixZQUN3QixFQUFDLGFBQWEsRUFBc0IsRUFDeEMsTUFBYyxFQUNHLE9BQWdCLEVBQ3RCLEdBQTZCO1FBRXhELElBQUksUUFBd0IsQ0FBQztRQUU3QixLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDZixJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNWLFVBQVUsQ0FBQyxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztnQkFFcEUsT0FBTzthQUNWO1lBRUQsUUFBUSxHQUFHLElBQUksY0FBYyxDQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRTtvQkFDWixVQUFVLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUM3QixDQUFDLENBQUMsQ0FBQztZQUNQLENBQUMsQ0FBQyxDQUFDO1lBQ0gsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBQyxHQUFHLEVBQUMsQ0FBQyxDQUFDO1lBRXZDLE9BQU8sR0FBRyxFQUFFO2dCQUNSLFFBQVEsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUMxQixDQUFDLENBQUM7UUFDTixDQUFDLENBQUMsQ0FBQztRQUVILE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO0lBQzlCLENBQUM7O3NJQTdCUSxxQkFBcUIsa0JBRWxCLFVBQVUsYUFDVixNQUFNLGFBQ04sdUJBQXVCLGFBQ3ZCLGlCQUFpQjswSUFMcEIscUJBQXFCOzRGQUFyQixxQkFBcUI7a0JBRGpDLFVBQVU7OzBCQUdGLE1BQU07MkJBQUMsVUFBVTs7MEJBQ2pCLE1BQU07MkJBQUMsTUFBTTs7MEJBQ2IsTUFBTTsyQkFBQyx1QkFBdUI7OzBCQUM5QixNQUFNOzJCQUFDLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RWxlbWVudFJlZiwgSW5qZWN0LCBJbmplY3RhYmxlLCBOZ1pvbmV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge3NoYXJlfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5pbXBvcnQge1JFU0laRV9PUFRJT05fQk9YfSBmcm9tICcuLi90b2tlbnMvcmVzaXplLW9wdGlvbi1ib3gnO1xyXG5pbXBvcnQge1JFU0laRV9PQlNFUlZFUl9TVVBQT1JUfSBmcm9tICcuLi90b2tlbnMvc3VwcG9ydCc7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBSZXNpemVPYnNlcnZlclNlcnZpY2UgZXh0ZW5kcyBPYnNlcnZhYmxlPHJlYWRvbmx5IFJlc2l6ZU9ic2VydmVyRW50cnlbXT4ge1xyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQEluamVjdChFbGVtZW50UmVmKSB7bmF0aXZlRWxlbWVudH06IEVsZW1lbnRSZWY8RWxlbWVudD4sXHJcbiAgICAgICAgQEluamVjdChOZ1pvbmUpIG5nWm9uZTogTmdab25lLFxyXG4gICAgICAgIEBJbmplY3QoUkVTSVpFX09CU0VSVkVSX1NVUFBPUlQpIHN1cHBvcnQ6IGJvb2xlYW4sXHJcbiAgICAgICAgQEluamVjdChSRVNJWkVfT1BUSU9OX0JPWCkgYm94OiBSZXNpemVPYnNlcnZlckJveE9wdGlvbnMsXHJcbiAgICApIHtcclxuICAgICAgICBsZXQgb2JzZXJ2ZXI6IFJlc2l6ZU9ic2VydmVyO1xyXG5cclxuICAgICAgICBzdXBlcihzdWJzY3JpYmVyID0+IHtcclxuICAgICAgICAgICAgaWYgKCFzdXBwb3J0KSB7XHJcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmVycm9yKCdSZXNpemVPYnNlcnZlciBpcyBub3Qgc3VwcG9ydGVkIGluIHlvdXIgYnJvd3NlcicpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgUmVzaXplT2JzZXJ2ZXIoZW50cmllcyA9PiB7XHJcbiAgICAgICAgICAgICAgICBuZ1pvbmUucnVuKCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoZW50cmllcyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUobmF0aXZlRWxlbWVudCwge2JveH0pO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgICAgICAgICAgIG9ic2VydmVyLmRpc2Nvbm5lY3QoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGlwZShzaGFyZSgpKTtcclxuICAgIH1cclxufVxyXG4iXX0=