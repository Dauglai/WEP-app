import { Attribute, Directive, Inject, Optional, } from '@angular/core';
import { INTERSECTION_ROOT } from '../tokens/intersection-root';
import { rootMarginFactory } from '../utils/root-margin-factory';
import { thresholdFactory } from '../utils/threshold-factory';
import * as i0 from "@angular/core";
export class IntersectionObserverDirective extends IntersectionObserver {
    constructor(root, rootMargin, threshold) {
        super(entries => {
            this.callbacks.forEach((callback, element) => {
                const filtered = entries.filter(({ target }) => target === element);
                return filtered.length && callback(filtered, this);
            });
        }, {
            root: root && root.nativeElement,
            rootMargin: rootMarginFactory(rootMargin),
            threshold: thresholdFactory(threshold),
        });
        this.callbacks = new Map();
    }
    observe(target, callback = () => { }) {
        super.observe(target);
        this.callbacks.set(target, callback);
    }
    unobserve(target) {
        super.unobserve(target);
        this.callbacks.delete(target);
    }
    ngOnDestroy() {
        this.disconnect();
    }
}
/** @nocollapse */ IntersectionObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IntersectionObserverDirective, deps: [{ token: INTERSECTION_ROOT, optional: true }, { token: 'waIntersectionRootMargin', attribute: true }, { token: 'waIntersectionThreshold', attribute: true }], target: i0.ɵɵFactoryTarget.Directive });
/** @nocollapse */ IntersectionObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "12.2.16", type: IntersectionObserverDirective, selector: "[waIntersectionObserver]", exportAs: ["IntersectionObserver"], usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.2.16", ngImport: i0, type: IntersectionObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[waIntersectionObserver]',
                    exportAs: 'IntersectionObserver',
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [INTERSECTION_ROOT]
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waIntersectionRootMargin']
                }] }, { type: undefined, decorators: [{
                    type: Attribute,
                    args: ['waIntersectionThreshold']
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2ludGVyc2VjdGlvbi1vYnNlcnZlci9zcmMvZGlyZWN0aXZlcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDSCxTQUFTLEVBQ1QsU0FBUyxFQUVULE1BQU0sRUFFTixRQUFRLEdBQ1gsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sNkJBQTZCLENBQUM7QUFDOUQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0sNEJBQTRCLENBQUM7O0FBTTVELE1BQU0sT0FBTyw2QkFBOEIsU0FBUSxvQkFBb0I7SUFJbkUsWUFDMkMsSUFBZ0MsRUFDaEMsVUFBeUIsRUFDMUIsU0FBd0I7UUFFOUQsS0FBSyxDQUNELE9BQU8sQ0FBQyxFQUFFO1lBQ04sSUFBSSxDQUFDLFNBQVMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxRQUFRLEVBQUUsT0FBTyxFQUFFLEVBQUU7Z0JBQ3pDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFDLE1BQU0sRUFBQyxFQUFFLEVBQUUsQ0FBQyxNQUFNLEtBQUssT0FBTyxDQUFDLENBQUM7Z0JBRWxFLE9BQU8sUUFBUSxDQUFDLE1BQU0sSUFBSSxRQUFRLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxDQUFDO1lBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBQ1AsQ0FBQyxFQUNEO1lBQ0ksSUFBSSxFQUFFLElBQUksSUFBSSxJQUFJLENBQUMsYUFBYTtZQUNoQyxVQUFVLEVBQUUsaUJBQWlCLENBQUMsVUFBVSxDQUFDO1lBQ3pDLFNBQVMsRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7U0FDekMsQ0FDSixDQUFDO1FBcEJXLGNBQVMsR0FBRyxJQUFJLEdBQUcsRUFBeUMsQ0FBQztJQXFCOUUsQ0FBQztJQUVELE9BQU8sQ0FBQyxNQUFlLEVBQUUsV0FBeUMsR0FBRyxFQUFFLEdBQUUsQ0FBQztRQUN0RSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxRQUFRLENBQUMsQ0FBQztJQUN6QyxDQUFDO0lBRUQsU0FBUyxDQUFDLE1BQWU7UUFDckIsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsQyxDQUFDO0lBRUQsV0FBVztRQUNQLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUN0QixDQUFDOzs4SUFyQ1EsNkJBQTZCLGtCQUtkLGlCQUFpQiw2QkFDMUIsMEJBQTBCLDhCQUMxQix5QkFBeUI7a0lBUC9CLDZCQUE2Qjs0RkFBN0IsNkJBQTZCO2tCQUp6QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEI7b0JBQ3BDLFFBQVEsRUFBRSxzQkFBc0I7aUJBQ25DOzswQkFNUSxRQUFROzswQkFBSSxNQUFNOzJCQUFDLGlCQUFpQjs7MEJBQ3BDLFNBQVM7MkJBQUMsMEJBQTBCOzswQkFDcEMsU0FBUzsyQkFBQyx5QkFBeUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xyXG4gICAgQXR0cmlidXRlLFxyXG4gICAgRGlyZWN0aXZlLFxyXG4gICAgRWxlbWVudFJlZixcclxuICAgIEluamVjdCxcclxuICAgIE9uRGVzdHJveSxcclxuICAgIE9wdGlvbmFsLFxyXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0lOVEVSU0VDVElPTl9ST09UfSBmcm9tICcuLi90b2tlbnMvaW50ZXJzZWN0aW9uLXJvb3QnO1xyXG5pbXBvcnQge3Jvb3RNYXJnaW5GYWN0b3J5fSBmcm9tICcuLi91dGlscy9yb290LW1hcmdpbi1mYWN0b3J5JztcclxuaW1wb3J0IHt0aHJlc2hvbGRGYWN0b3J5fSBmcm9tICcuLi91dGlscy90aHJlc2hvbGQtZmFjdG9yeSc7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICAgIHNlbGVjdG9yOiAnW3dhSW50ZXJzZWN0aW9uT2JzZXJ2ZXJdJyxcclxuICAgIGV4cG9ydEFzOiAnSW50ZXJzZWN0aW9uT2JzZXJ2ZXInLFxyXG59KVxyXG5leHBvcnQgY2xhc3MgSW50ZXJzZWN0aW9uT2JzZXJ2ZXJEaXJlY3RpdmUgZXh0ZW5kcyBJbnRlcnNlY3Rpb25PYnNlcnZlclxyXG4gICAgaW1wbGVtZW50cyBPbkRlc3Ryb3kge1xyXG4gICAgcHJpdmF0ZSByZWFkb25seSBjYWxsYmFja3MgPSBuZXcgTWFwPEVsZW1lbnQsIEludGVyc2VjdGlvbk9ic2VydmVyQ2FsbGJhY2s+KCk7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChJTlRFUlNFQ1RJT05fUk9PVCkgcm9vdDogRWxlbWVudFJlZjxFbGVtZW50PiB8IG51bGwsXHJcbiAgICAgICAgQEF0dHJpYnV0ZSgnd2FJbnRlcnNlY3Rpb25Sb290TWFyZ2luJykgcm9vdE1hcmdpbjogc3RyaW5nIHwgbnVsbCxcclxuICAgICAgICBAQXR0cmlidXRlKCd3YUludGVyc2VjdGlvblRocmVzaG9sZCcpIHRocmVzaG9sZDogc3RyaW5nIHwgbnVsbCxcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKFxyXG4gICAgICAgICAgICBlbnRyaWVzID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FsbGJhY2tzLmZvckVhY2goKGNhbGxiYWNrLCBlbGVtZW50KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsdGVyZWQgPSBlbnRyaWVzLmZpbHRlcigoe3RhcmdldH0pID0+IHRhcmdldCA9PT0gZWxlbWVudCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWx0ZXJlZC5sZW5ndGggJiYgY2FsbGJhY2soZmlsdGVyZWQsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHJvb3Q6IHJvb3QgJiYgcm9vdC5uYXRpdmVFbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgcm9vdE1hcmdpbjogcm9vdE1hcmdpbkZhY3Rvcnkocm9vdE1hcmdpbiksXHJcbiAgICAgICAgICAgICAgICB0aHJlc2hvbGQ6IHRocmVzaG9sZEZhY3RvcnkodGhyZXNob2xkKSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIG9ic2VydmUodGFyZ2V0OiBFbGVtZW50LCBjYWxsYmFjazogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJDYWxsYmFjayA9ICgpID0+IHt9KSB7XHJcbiAgICAgICAgc3VwZXIub2JzZXJ2ZSh0YXJnZXQpO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2tzLnNldCh0YXJnZXQsIGNhbGxiYWNrKTtcclxuICAgIH1cclxuXHJcbiAgICB1bm9ic2VydmUodGFyZ2V0OiBFbGVtZW50KSB7XHJcbiAgICAgICAgc3VwZXIudW5vYnNlcnZlKHRhcmdldCk7XHJcbiAgICAgICAgdGhpcy5jYWxsYmFja3MuZGVsZXRlKHRhcmdldCk7XHJcbiAgICB9XHJcblxyXG4gICAgbmdPbkRlc3Ryb3koKSB7XHJcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XHJcbiAgICB9XHJcbn1cclxuIl19