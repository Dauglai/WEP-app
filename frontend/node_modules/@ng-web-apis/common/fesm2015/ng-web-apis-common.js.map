{"version":3,"file":"ng-web-apis-common.js","sources":["../../../projects/common/src/tokens/window.ts","../../../projects/common/src/tokens/animation-frame.ts","../../../projects/common/src/tokens/caches.ts","../../../projects/common/src/tokens/crypto.ts","../../../projects/common/src/tokens/css.ts","../../../projects/common/src/tokens/history.ts","../../../projects/common/src/tokens/local-storage.ts","../../../projects/common/src/tokens/location.ts","../../../projects/common/src/tokens/navigator.ts","../../../projects/common/src/tokens/media-devices.ts","../../../projects/common/src/tokens/network-information.ts","../../../projects/common/src/tokens/page-visibility.ts","../../../projects/common/src/tokens/performance.ts","../../../projects/common/src/tokens/screen.ts","../../../projects/common/src/tokens/session-storage.ts","../../../projects/common/src/tokens/speech-recognition.ts","../../../projects/common/src/tokens/speech-synthesis.ts","../../../projects/common/src/tokens/user-agent.ts","../../../projects/common/src/public-api.ts","../../../projects/common/src/ng-web-apis-common.ts"],"sourcesContent":["import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\n\r\nexport const WINDOW = new InjectionToken<Window>(\r\n    'An abstraction over global window object',\r\n    {\r\n        factory: () => {\r\n            const {defaultView} = inject(DOCUMENT);\r\n\r\n            if (!defaultView) {\r\n                throw new Error('Window is not available');\r\n            }\r\n\r\n            return defaultView;\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {share} from 'rxjs/operators';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const ANIMATION_FRAME = new InjectionToken<Observable<DOMHighResTimeStamp>>(\r\n    'Shared Observable based on `window.requestAnimationFrame`',\r\n    {\r\n        factory: () => {\r\n            const {requestAnimationFrame, cancelAnimationFrame} = inject(WINDOW);\r\n            const animationFrame$ = new Observable<DOMHighResTimeStamp>(subscriber => {\r\n                let id = NaN;\r\n                const callback = (timestamp: DOMHighResTimeStamp) => {\r\n                    subscriber.next(timestamp);\r\n                    id = requestAnimationFrame(callback);\r\n                };\r\n\r\n                id = requestAnimationFrame(callback);\r\n\r\n                return () => {\r\n                    cancelAnimationFrame(id);\r\n                };\r\n            });\r\n\r\n            return animationFrame$.pipe(share());\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const CACHES = new InjectionToken<CacheStorage>(\r\n    'An abstraction over window.caches object',\r\n    {\r\n        factory: () => inject(WINDOW).caches,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const CRYPTO = new InjectionToken<Crypto>(\r\n    'An abstraction over window.crypto object',\r\n    {\r\n        factory: () => inject(WINDOW).crypto,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\n/**\r\n * Use Window['CSS'], this is a workaround to support Angular 6+\r\n */\r\ninterface Css {\r\n    escape(ident: string): string;\r\n    supports(property: string, value: string): boolean;\r\n    supports(conditionText: string): boolean;\r\n}\r\n\r\nexport const CSS = new InjectionToken<Css>('An abstraction over window.CSS object', {\r\n    factory: () =>\r\n        (inject(WINDOW) as any).CSS || {\r\n            escape: v => v,\r\n            supports: () => false,\r\n        },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const HISTORY = new InjectionToken<History>(\r\n    'An abstraction over window.history object',\r\n    {\r\n        factory: () => inject(WINDOW).history,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCAL_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.localStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).localStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCATION = new InjectionToken<Location>(\r\n    'An abstraction over window.location object',\r\n    {\r\n        factory: () => inject(WINDOW).location,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const NAVIGATOR = new InjectionToken<Navigator>(\r\n    'An abstraction over window.navigator object',\r\n    {\r\n        factory: () => inject(WINDOW).navigator,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const MEDIA_DEVICES = new InjectionToken<MediaDevices>(\r\n    'An abstraction over window.navigator.mediaDevices object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).mediaDevices,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const NETWORK_INFORMATION = new InjectionToken<\r\n    // @ts-ignore\r\n    typeof navigator['connection'] | null\r\n>('An abstraction over window.navigator.connection object', {\r\n    // @ts-ignore\r\n    factory: () => inject(NAVIGATOR).connection || null,\r\n});\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {fromEvent, Observable} from 'rxjs';\r\nimport {distinctUntilChanged, map, shareReplay, startWith} from 'rxjs/operators';\r\n\r\nexport const PAGE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n    'Shared Observable based on `document visibility changed`',\r\n    {\r\n        factory: () => {\r\n            const documentRef = inject(DOCUMENT);\r\n\r\n            return fromEvent(documentRef, 'visibilitychange').pipe(\r\n                startWith(0),\r\n                map(() => documentRef.visibilityState !== 'hidden'),\r\n                distinctUntilChanged(),\r\n                shareReplay({refCount: false, bufferSize: 1}),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const PERFORMANCE = new InjectionToken<Performance>(\r\n    'An abstraction over window.performance object',\r\n    {\r\n        factory: () => inject(WINDOW).performance,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SCREEN = new InjectionToken<Screen>(\r\n    'An abstraction over window.screen object',\r\n    {\r\n        factory: () => inject(WINDOW).screen,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SESSION_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.sessionStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).sessionStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_RECOGNITION = new InjectionToken<\r\n    // @ts-ignore\r\n    typeof window['speechRecognition'] | null\r\n>('An abstraction over SpeechRecognition class', {\r\n    factory: () => {\r\n        const windowRef: any = inject(WINDOW);\r\n\r\n        return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\r\n    },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_SYNTHESIS = new InjectionToken<SpeechSynthesis>(\r\n    'An abstraction over window.speechSynthesis object',\r\n    {\r\n        factory: () => inject(WINDOW).speechSynthesis,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const USER_AGENT = new InjectionToken<string>(\r\n    'An abstraction over window.navigator.userAgent object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).userAgent,\r\n    },\r\n);\r\n","/**\r\n * Public API Surface of @ng-web-apis/common\r\n */\r\nexport * from './tokens/animation-frame';\r\nexport * from './tokens/caches';\r\nexport * from './tokens/crypto';\r\nexport * from './tokens/css';\r\nexport * from './tokens/history';\r\nexport * from './tokens/local-storage';\r\nexport * from './tokens/location';\r\nexport * from './tokens/media-devices';\r\nexport * from './tokens/navigator';\r\nexport * from './tokens/network-information';\r\nexport * from './tokens/page-visibility';\r\nexport * from './tokens/performance';\r\nexport * from './tokens/screen';\r\nexport * from './tokens/session-storage';\r\nexport * from './tokens/speech-recognition';\r\nexport * from './tokens/speech-synthesis';\r\nexport * from './tokens/user-agent';\r\nexport * from './tokens/window';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}