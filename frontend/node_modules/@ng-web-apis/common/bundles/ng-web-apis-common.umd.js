(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ng-web-apis/common', ['exports', '@angular/core', 'rxjs', 'rxjs/operators', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory((global["ng-web-apis"] = global["ng-web-apis"] || {}, global["ng-web-apis"].common = {}), global.ng.core, global.rxjs, global.rxjs.operators, global.ng.common));
})(this, (function (exports, core, rxjs, operators, common) { 'use strict';

    var WINDOW = new core.InjectionToken('An abstraction over global window object', {
        factory: function () {
            var defaultView = core.inject(common.DOCUMENT).defaultView;
            if (!defaultView) {
                throw new Error('Window is not available');
            }
            return defaultView;
        },
    });

    var ANIMATION_FRAME = new core.InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {
        factory: function () {
            var _a = core.inject(WINDOW), requestAnimationFrame = _a.requestAnimationFrame, cancelAnimationFrame = _a.cancelAnimationFrame;
            var animationFrame$ = new rxjs.Observable(function (subscriber) {
                var id = NaN;
                var callback = function (timestamp) {
                    subscriber.next(timestamp);
                    id = requestAnimationFrame(callback);
                };
                id = requestAnimationFrame(callback);
                return function () {
                    cancelAnimationFrame(id);
                };
            });
            return animationFrame$.pipe(operators.share());
        },
    });

    var CACHES = new core.InjectionToken('An abstraction over window.caches object', {
        factory: function () { return core.inject(WINDOW).caches; },
    });

    var CRYPTO = new core.InjectionToken('An abstraction over window.crypto object', {
        factory: function () { return core.inject(WINDOW).crypto; },
    });

    var CSS = new core.InjectionToken('An abstraction over window.CSS object', {
        factory: function () { return core.inject(WINDOW).CSS || {
            escape: function (v) { return v; },
            supports: function () { return false; },
        }; },
    });

    var HISTORY = new core.InjectionToken('An abstraction over window.history object', {
        factory: function () { return core.inject(WINDOW).history; },
    });

    var LOCAL_STORAGE = new core.InjectionToken('An abstraction over window.localStorage object', {
        factory: function () { return core.inject(WINDOW).localStorage; },
    });

    var LOCATION = new core.InjectionToken('An abstraction over window.location object', {
        factory: function () { return core.inject(WINDOW).location; },
    });

    var NAVIGATOR = new core.InjectionToken('An abstraction over window.navigator object', {
        factory: function () { return core.inject(WINDOW).navigator; },
    });

    var MEDIA_DEVICES = new core.InjectionToken('An abstraction over window.navigator.mediaDevices object', {
        factory: function () { return core.inject(NAVIGATOR).mediaDevices; },
    });

    var NETWORK_INFORMATION = new core.InjectionToken('An abstraction over window.navigator.connection object', {
        // @ts-ignore
        factory: function () { return core.inject(NAVIGATOR).connection || null; },
    });

    var PAGE_VISIBILITY = new core.InjectionToken('Shared Observable based on `document visibility changed`', {
        factory: function () {
            var documentRef = core.inject(common.DOCUMENT);
            return rxjs.fromEvent(documentRef, 'visibilitychange').pipe(operators.startWith(0), operators.map(function () { return documentRef.visibilityState !== 'hidden'; }), operators.distinctUntilChanged(), operators.shareReplay({ refCount: false, bufferSize: 1 }));
        },
    });

    var PERFORMANCE = new core.InjectionToken('An abstraction over window.performance object', {
        factory: function () { return core.inject(WINDOW).performance; },
    });

    var SCREEN = new core.InjectionToken('An abstraction over window.screen object', {
        factory: function () { return core.inject(WINDOW).screen; },
    });

    var SESSION_STORAGE = new core.InjectionToken('An abstraction over window.sessionStorage object', {
        factory: function () { return core.inject(WINDOW).sessionStorage; },
    });

    var SPEECH_RECOGNITION = new core.InjectionToken('An abstraction over SpeechRecognition class', {
        factory: function () {
            var windowRef = core.inject(WINDOW);
            return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;
        },
    });

    var SPEECH_SYNTHESIS = new core.InjectionToken('An abstraction over window.speechSynthesis object', {
        factory: function () { return core.inject(WINDOW).speechSynthesis; },
    });

    var USER_AGENT = new core.InjectionToken('An abstraction over window.navigator.userAgent object', {
        factory: function () { return core.inject(NAVIGATOR).userAgent; },
    });

    /**
     * Public API Surface of @ng-web-apis/common
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.ANIMATION_FRAME = ANIMATION_FRAME;
    exports.CACHES = CACHES;
    exports.CRYPTO = CRYPTO;
    exports.CSS = CSS;
    exports.HISTORY = HISTORY;
    exports.LOCAL_STORAGE = LOCAL_STORAGE;
    exports.LOCATION = LOCATION;
    exports.MEDIA_DEVICES = MEDIA_DEVICES;
    exports.NAVIGATOR = NAVIGATOR;
    exports.NETWORK_INFORMATION = NETWORK_INFORMATION;
    exports.PAGE_VISIBILITY = PAGE_VISIBILITY;
    exports.PERFORMANCE = PERFORMANCE;
    exports.SCREEN = SCREEN;
    exports.SESSION_STORAGE = SESSION_STORAGE;
    exports.SPEECH_RECOGNITION = SPEECH_RECOGNITION;
    exports.SPEECH_SYNTHESIS = SPEECH_SYNTHESIS;
    exports.USER_AGENT = USER_AGENT;
    exports.WINDOW = WINDOW;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=ng-web-apis-common.umd.js.map
