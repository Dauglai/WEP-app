{"version":3,"file":"ng-web-apis-common.umd.js","sources":["../../../projects/common/src/tokens/window.ts","../../../projects/common/src/tokens/animation-frame.ts","../../../projects/common/src/tokens/caches.ts","../../../projects/common/src/tokens/crypto.ts","../../../projects/common/src/tokens/css.ts","../../../projects/common/src/tokens/history.ts","../../../projects/common/src/tokens/local-storage.ts","../../../projects/common/src/tokens/location.ts","../../../projects/common/src/tokens/navigator.ts","../../../projects/common/src/tokens/media-devices.ts","../../../projects/common/src/tokens/network-information.ts","../../../projects/common/src/tokens/page-visibility.ts","../../../projects/common/src/tokens/performance.ts","../../../projects/common/src/tokens/screen.ts","../../../projects/common/src/tokens/session-storage.ts","../../../projects/common/src/tokens/speech-recognition.ts","../../../projects/common/src/tokens/speech-synthesis.ts","../../../projects/common/src/tokens/user-agent.ts","../../../projects/common/src/public-api.ts","../../../projects/common/src/ng-web-apis-common.ts"],"sourcesContent":["import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\n\r\nexport const WINDOW = new InjectionToken<Window>(\r\n    'An abstraction over global window object',\r\n    {\r\n        factory: () => {\r\n            const {defaultView} = inject(DOCUMENT);\r\n\r\n            if (!defaultView) {\r\n                throw new Error('Window is not available');\r\n            }\r\n\r\n            return defaultView;\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\nimport {Observable} from 'rxjs';\r\nimport {share} from 'rxjs/operators';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const ANIMATION_FRAME = new InjectionToken<Observable<DOMHighResTimeStamp>>(\r\n    'Shared Observable based on `window.requestAnimationFrame`',\r\n    {\r\n        factory: () => {\r\n            const {requestAnimationFrame, cancelAnimationFrame} = inject(WINDOW);\r\n            const animationFrame$ = new Observable<DOMHighResTimeStamp>(subscriber => {\r\n                let id = NaN;\r\n                const callback = (timestamp: DOMHighResTimeStamp) => {\r\n                    subscriber.next(timestamp);\r\n                    id = requestAnimationFrame(callback);\r\n                };\r\n\r\n                id = requestAnimationFrame(callback);\r\n\r\n                return () => {\r\n                    cancelAnimationFrame(id);\r\n                };\r\n            });\r\n\r\n            return animationFrame$.pipe(share());\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const CACHES = new InjectionToken<CacheStorage>(\r\n    'An abstraction over window.caches object',\r\n    {\r\n        factory: () => inject(WINDOW).caches,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const CRYPTO = new InjectionToken<Crypto>(\r\n    'An abstraction over window.crypto object',\r\n    {\r\n        factory: () => inject(WINDOW).crypto,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\n/**\r\n * Use Window['CSS'], this is a workaround to support Angular 6+\r\n */\r\ninterface Css {\r\n    escape(ident: string): string;\r\n    supports(property: string, value: string): boolean;\r\n    supports(conditionText: string): boolean;\r\n}\r\n\r\nexport const CSS = new InjectionToken<Css>('An abstraction over window.CSS object', {\r\n    factory: () =>\r\n        (inject(WINDOW) as any).CSS || {\r\n            escape: v => v,\r\n            supports: () => false,\r\n        },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const HISTORY = new InjectionToken<History>(\r\n    'An abstraction over window.history object',\r\n    {\r\n        factory: () => inject(WINDOW).history,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCAL_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.localStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).localStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const LOCATION = new InjectionToken<Location>(\r\n    'An abstraction over window.location object',\r\n    {\r\n        factory: () => inject(WINDOW).location,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const NAVIGATOR = new InjectionToken<Navigator>(\r\n    'An abstraction over window.navigator object',\r\n    {\r\n        factory: () => inject(WINDOW).navigator,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const MEDIA_DEVICES = new InjectionToken<MediaDevices>(\r\n    'An abstraction over window.navigator.mediaDevices object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).mediaDevices,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const NETWORK_INFORMATION = new InjectionToken<\r\n    // @ts-ignore\r\n    typeof navigator['connection'] | null\r\n>('An abstraction over window.navigator.connection object', {\r\n    // @ts-ignore\r\n    factory: () => inject(NAVIGATOR).connection || null,\r\n});\r\n","import {DOCUMENT} from '@angular/common';\r\nimport {inject, InjectionToken} from '@angular/core';\r\nimport {fromEvent, Observable} from 'rxjs';\r\nimport {distinctUntilChanged, map, shareReplay, startWith} from 'rxjs/operators';\r\n\r\nexport const PAGE_VISIBILITY = new InjectionToken<Observable<boolean>>(\r\n    'Shared Observable based on `document visibility changed`',\r\n    {\r\n        factory: () => {\r\n            const documentRef = inject(DOCUMENT);\r\n\r\n            return fromEvent(documentRef, 'visibilitychange').pipe(\r\n                startWith(0),\r\n                map(() => documentRef.visibilityState !== 'hidden'),\r\n                distinctUntilChanged(),\r\n                shareReplay({refCount: false, bufferSize: 1}),\r\n            );\r\n        },\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const PERFORMANCE = new InjectionToken<Performance>(\r\n    'An abstraction over window.performance object',\r\n    {\r\n        factory: () => inject(WINDOW).performance,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SCREEN = new InjectionToken<Screen>(\r\n    'An abstraction over window.screen object',\r\n    {\r\n        factory: () => inject(WINDOW).screen,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SESSION_STORAGE = new InjectionToken<Storage>(\r\n    'An abstraction over window.sessionStorage object',\r\n    {\r\n        factory: () => inject(WINDOW).sessionStorage,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_RECOGNITION = new InjectionToken<\r\n    // @ts-ignore\r\n    typeof window['speechRecognition'] | null\r\n>('An abstraction over SpeechRecognition class', {\r\n    factory: () => {\r\n        const windowRef: any = inject(WINDOW);\r\n\r\n        return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\r\n    },\r\n});\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {WINDOW} from './window';\r\n\r\nexport const SPEECH_SYNTHESIS = new InjectionToken<SpeechSynthesis>(\r\n    'An abstraction over window.speechSynthesis object',\r\n    {\r\n        factory: () => inject(WINDOW).speechSynthesis,\r\n    },\r\n);\r\n","import {inject, InjectionToken} from '@angular/core';\r\n\r\nimport {NAVIGATOR} from './navigator';\r\n\r\nexport const USER_AGENT = new InjectionToken<string>(\r\n    'An abstraction over window.navigator.userAgent object',\r\n    {\r\n        factory: () => inject(NAVIGATOR).userAgent,\r\n    },\r\n);\r\n","/**\r\n * Public API Surface of @ng-web-apis/common\r\n */\r\nexport * from './tokens/animation-frame';\r\nexport * from './tokens/caches';\r\nexport * from './tokens/crypto';\r\nexport * from './tokens/css';\r\nexport * from './tokens/history';\r\nexport * from './tokens/local-storage';\r\nexport * from './tokens/location';\r\nexport * from './tokens/media-devices';\r\nexport * from './tokens/navigator';\r\nexport * from './tokens/network-information';\r\nexport * from './tokens/page-visibility';\r\nexport * from './tokens/performance';\r\nexport * from './tokens/screen';\r\nexport * from './tokens/session-storage';\r\nexport * from './tokens/speech-recognition';\r\nexport * from './tokens/speech-synthesis';\r\nexport * from './tokens/user-agent';\r\nexport * from './tokens/window';\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["InjectionToken","inject","DOCUMENT","Observable","share","fromEvent","startWith","map","distinctUntilChanged","shareReplay"],"mappings":"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"}