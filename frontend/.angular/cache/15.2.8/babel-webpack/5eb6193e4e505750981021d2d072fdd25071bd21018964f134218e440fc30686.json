{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, ElementRef, Optional, Self, Inject, Renderer2, NgZone, InjectionToken, Input, NgModule } from '@angular/core';\nimport { tuiCoerceBooleanProperty } from '@taiga-ui/cdk/coercion';\nimport { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';\nimport { TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_IOS } from '@taiga-ui/cdk/tokens';\nimport { POLLING_TIME } from '@taiga-ui/cdk/constants';\nimport * as i1 from 'rxjs';\nimport { race, timer } from 'rxjs';\nimport { throttleTime, map, skipWhile, take } from 'rxjs/operators';\nimport { tuiPx, tuiIsPresent } from '@taiga-ui/cdk/utils';\nclass AbstractTuiAutofocusHandler {\n  constructor(focusable, el) {\n    this.focusable = focusable;\n    this.el = el;\n  }\n  get element() {\n    var _a;\n    return ((_a = this.focusable) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.el.nativeElement;\n  }\n  get isTextFieldElement() {\n    return this.element.matches(`input, textarea`);\n  }\n}\nAbstractTuiAutofocusHandler.ɵfac = function AbstractTuiAutofocusHandler_Factory(t) {\n  i0.ɵɵinvalidFactory();\n};\nAbstractTuiAutofocusHandler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: AbstractTuiAutofocusHandler\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(AbstractTuiAutofocusHandler, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined\n    }, {\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\nconst TIMEOUT = 1000;\nconst NG_ANIMATION_SELECTOR = `.ng-animating`;\nclass TuiDefaultAutofocusHandler extends AbstractTuiAutofocusHandler {\n  constructor(focusable, el, animationFrame$) {\n    super(focusable, el);\n    this.animationFrame$ = animationFrame$;\n  }\n  setFocus() {\n    if (this.isTextFieldElement) {\n      race(timer(TIMEOUT), this.animationFrame$.pipe(throttleTime(POLLING_TIME), map(() => this.element.closest(NG_ANIMATION_SELECTOR)), skipWhile(Boolean), take(1))).subscribe(() => this.element.focus());\n    } else {\n      this.element.focus();\n    }\n  }\n}\nTuiDefaultAutofocusHandler.ɵfac = function TuiDefaultAutofocusHandler_Factory(t) {\n  return new (t || TuiDefaultAutofocusHandler)(i0.ɵɵdirectiveInject(TUI_FOCUSABLE_ITEM_ACCESSOR, 10), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(ANIMATION_FRAME));\n};\nTuiDefaultAutofocusHandler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiDefaultAutofocusHandler,\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiDefaultAutofocusHandler, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [TUI_FOCUSABLE_ITEM_ACCESSOR]\n      }]\n    }, {\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: i1.Observable,\n      decorators: [{\n        type: Inject,\n        args: [ANIMATION_FRAME]\n      }]\n    }];\n  }, null);\n})();\nconst TEXTFIELD_ATTRS = [`type`, `inputMode`, `autocomplete`, `accept`, `min`, `max`, `step`, `pattern`, `size`, `maxlength`];\nclass TuiIosAutofocusHandler extends AbstractTuiAutofocusHandler {\n  constructor(focusable, el, renderer, ngZone, win) {\n    super(focusable, el);\n    this.renderer = renderer;\n    this.ngZone = ngZone;\n    this.win = win;\n    this.patchCssStyles();\n  }\n  setFocus() {\n    if (this.isTextFieldElement) {\n      this.ngZone.runOutsideAngular(() => this.iosWebkitAutofocus());\n    } else {\n      this.element.focus();\n    }\n  }\n  iosWebkitAutofocus() {\n    var _a;\n    const fakeInput = this.makeFakeInput();\n    const duration = this.getDurationTimeBeforeFocus();\n    let fakeFocusTimeoutId = 0;\n    let elementFocusTimeoutId = 0;\n    const blurHandler = () => fakeInput.focus({\n      preventScroll: true\n    });\n    const focusHandler = () => {\n      clearTimeout(fakeFocusTimeoutId);\n      fakeFocusTimeoutId = this.win.setTimeout(() => {\n        clearTimeout(elementFocusTimeoutId);\n        fakeInput.removeEventListener(`blur`, blurHandler);\n        fakeInput.removeEventListener(`focus`, focusHandler);\n        elementFocusTimeoutId = this.win.setTimeout(() => {\n          this.element.focus({\n            preventScroll: false\n          });\n          fakeInput.remove();\n        }, duration);\n      });\n    };\n    fakeInput.addEventListener(`blur`, blurHandler, {\n      once: true\n    });\n    fakeInput.addEventListener(`focus`, focusHandler);\n    if (this.insideDialog()) {\n      this.win.document.body.appendChild(fakeInput);\n    } else {\n      (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(fakeInput);\n    }\n    fakeInput.focus({\n      preventScroll: true\n    });\n  }\n  /**\n   * @note:\n   * emulate textfield position in layout with cursor\n   * before focus to real textfield element\n   *\n   * required note:\n   * [fakeInput.readOnly = true] ~\n   * don't use {readOnly: true} value, it's doesn't work for emulate autofill\n   *\n   * [fakeInput.style.opacity = 0] ~\n   * don't use {opacity: 0}, sometimes it's doesn't work for emulate real input\n   *\n   * [fakeInput.style.fontSize = 16px] ~\n   * disable possible auto zoom\n   *\n   * [fakeInput.style.top/left] ~\n   * emulate position cursor before focus to real textfield element\n   */\n  makeFakeInput() {\n    const fakeInput = this.renderer.createElement(`input`);\n    const rect = this.element.getBoundingClientRect();\n    this.patchFakeInputFromFocusableElement(fakeInput);\n    fakeInput.style.height = tuiPx(rect.height);\n    fakeInput.style.width = tuiPx(rect.width / 2);\n    fakeInput.style.position = `fixed`;\n    fakeInput.style.zIndex = `-99999999`;\n    fakeInput.style.caretColor = `transparent`;\n    fakeInput.style.color = `transparent`;\n    fakeInput.style.cursor = `none`;\n    fakeInput.style.fontSize = tuiPx(16);\n    fakeInput.style.top = tuiPx(rect.top);\n    fakeInput.style.left = tuiPx(rect.left);\n    return fakeInput;\n  }\n  getDurationTimeBeforeFocus() {\n    return parseFloat(this.win.getComputedStyle(this.element).getPropertyValue(`--tui-duration`)) || 0;\n  }\n  /**\n   * @note:\n   * unfortunately, in older versions of iOS\n   * there is a bug that the fake input cursor\n   * will move along with the dialog animation\n   * and then that dialog will be shaking\n   */\n  insideDialog() {\n    return !!this.element.closest(`tui-dialog`);\n  }\n  /**\n   * @note:\n   * This is necessary so that the viewport isn't recalculated\n   * and then the dialogs don't shake.\n   *\n   * Also, we need to fixed height viewport,\n   * so that when focusing the dialogs don't shake\n   */\n  patchCssStyles() {\n    const doc = this.win.document;\n    for (const element of [doc.documentElement, doc.body]) {\n      element.style.setProperty(`overflow`, `auto`);\n      element.style.setProperty(`height`, `100%`);\n    }\n  }\n  /**\n   * @note:\n   * inherit basic attributes values from real input\n   * for help iOS detect what do you want see on keyboard,\n   * for example [inputMode=numeric, autocomplete=cc-number]\n   */\n  patchFakeInputFromFocusableElement(fakeInput) {\n    TEXTFIELD_ATTRS.forEach(attr => {\n      const value = this.element.getAttribute(attr);\n      if (tuiIsPresent(value)) {\n        fakeInput.setAttribute(attr, value);\n      }\n    });\n  }\n}\nTuiIosAutofocusHandler.ɵfac = function TuiIosAutofocusHandler_Factory(t) {\n  return new (t || TuiIosAutofocusHandler)(i0.ɵɵdirectiveInject(TUI_FOCUSABLE_ITEM_ACCESSOR, 10), i0.ɵɵdirectiveInject(ElementRef), i0.ɵɵdirectiveInject(Renderer2), i0.ɵɵdirectiveInject(NgZone), i0.ɵɵdirectiveInject(WINDOW));\n};\nTuiIosAutofocusHandler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiIosAutofocusHandler,\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiIosAutofocusHandler, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [TUI_FOCUSABLE_ITEM_ACCESSOR]\n      }]\n    }, {\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }, {\n      type: i0.Renderer2,\n      decorators: [{\n        type: Inject,\n        args: [Renderer2]\n      }]\n    }, {\n      type: i0.NgZone,\n      decorators: [{\n        type: Inject,\n        args: [NgZone]\n      }]\n    }, {\n      type: Window,\n      decorators: [{\n        type: Inject,\n        args: [WINDOW]\n      }]\n    }];\n  }, null);\n})();\nconst TUI_AUTOFOCUS_HANDLER = new InjectionToken(`[TUI_AUTOFOCUS_HANDLER]`);\nconst TUI_AUTOFOCUS_PROVIDERS = [{\n  provide: TUI_AUTOFOCUS_HANDLER,\n  useFactory: (focusable, el, animationFrame$, renderer, ngZone, win, isIos) => isIos ? new TuiIosAutofocusHandler(focusable, el, renderer, ngZone, win) : new TuiDefaultAutofocusHandler(focusable, el, animationFrame$),\n  deps: [[new Optional(), new Self(), TUI_FOCUSABLE_ITEM_ACCESSOR], ElementRef, ANIMATION_FRAME, Renderer2, NgZone, WINDOW, TUI_IS_IOS]\n}];\nclass TuiAutoFocusDirective {\n  constructor(handler) {\n    this.handler = handler;\n    this.autoFocus = true;\n  }\n  ngAfterViewInit() {\n    if (tuiCoerceBooleanProperty(this.autoFocus)) {\n      this.focus();\n    }\n  }\n  focus() {\n    void Promise.resolve().then(() => this.handler.setFocus());\n  }\n}\nTuiAutoFocusDirective.ɵfac = function TuiAutoFocusDirective_Factory(t) {\n  return new (t || TuiAutoFocusDirective)(i0.ɵɵdirectiveInject(TUI_AUTOFOCUS_HANDLER));\n};\nTuiAutoFocusDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiAutoFocusDirective,\n  selectors: [[\"\", \"tuiAutoFocus\", \"\"]],\n  inputs: {\n    autoFocus: [\"tuiAutoFocus\", \"autoFocus\"]\n  },\n  features: [i0.ɵɵProvidersFeature(TUI_AUTOFOCUS_PROVIDERS)]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiAutoFocusDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[tuiAutoFocus]',\n      providers: TUI_AUTOFOCUS_PROVIDERS\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TUI_AUTOFOCUS_HANDLER]\n      }]\n    }];\n  }, {\n    autoFocus: [{\n      type: Input,\n      args: ['tuiAutoFocus']\n    }]\n  });\n})();\nclass TuiAutoFocusModule {}\nTuiAutoFocusModule.ɵfac = function TuiAutoFocusModule_Factory(t) {\n  return new (t || TuiAutoFocusModule)();\n};\nTuiAutoFocusModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TuiAutoFocusModule\n});\nTuiAutoFocusModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiAutoFocusModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TuiAutoFocusDirective],\n      exports: [TuiAutoFocusDirective]\n    }]\n  }], null, null);\n})();\nclass TuiSynchronousAutofocusHandler extends AbstractTuiAutofocusHandler {\n  constructor(focusable, el) {\n    super(focusable, el);\n  }\n  setFocus() {\n    this.element.focus();\n  }\n}\nTuiSynchronousAutofocusHandler.ɵfac = function TuiSynchronousAutofocusHandler_Factory(t) {\n  return new (t || TuiSynchronousAutofocusHandler)(i0.ɵɵdirectiveInject(TUI_FOCUSABLE_ITEM_ACCESSOR, 10), i0.ɵɵdirectiveInject(ElementRef));\n};\nTuiSynchronousAutofocusHandler.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiSynchronousAutofocusHandler,\n  features: [i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiSynchronousAutofocusHandler, [{\n    type: Directive\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [TUI_FOCUSABLE_ITEM_ACCESSOR]\n      }]\n    }, {\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTuiAutofocusHandler, TUI_AUTOFOCUS_HANDLER, TUI_AUTOFOCUS_PROVIDERS, TuiAutoFocusDirective, TuiAutoFocusModule, TuiDefaultAutofocusHandler, TuiIosAutofocusHandler, TuiSynchronousAutofocusHandler };","map":{"version":3,"names":["i0","Directive","ElementRef","Optional","Self","Inject","Renderer2","NgZone","InjectionToken","Input","NgModule","tuiCoerceBooleanProperty","ANIMATION_FRAME","WINDOW","TUI_FOCUSABLE_ITEM_ACCESSOR","TUI_IS_IOS","POLLING_TIME","i1","race","timer","throttleTime","map","skipWhile","take","tuiPx","tuiIsPresent","AbstractTuiAutofocusHandler","constructor","focusable","el","element","_a","nativeFocusableElement","nativeElement","isTextFieldElement","matches","ɵfac","ɵdir","type","undefined","TIMEOUT","NG_ANIMATION_SELECTOR","TuiDefaultAutofocusHandler","animationFrame$","setFocus","pipe","closest","Boolean","subscribe","focus","decorators","args","Observable","TEXTFIELD_ATTRS","TuiIosAutofocusHandler","renderer","ngZone","win","patchCssStyles","runOutsideAngular","iosWebkitAutofocus","fakeInput","makeFakeInput","duration","getDurationTimeBeforeFocus","fakeFocusTimeoutId","elementFocusTimeoutId","blurHandler","preventScroll","focusHandler","clearTimeout","setTimeout","removeEventListener","remove","addEventListener","once","insideDialog","document","body","appendChild","parentElement","createElement","rect","getBoundingClientRect","patchFakeInputFromFocusableElement","style","height","width","position","zIndex","caretColor","color","cursor","fontSize","top","left","parseFloat","getComputedStyle","getPropertyValue","doc","documentElement","setProperty","forEach","attr","value","getAttribute","setAttribute","Window","TUI_AUTOFOCUS_HANDLER","TUI_AUTOFOCUS_PROVIDERS","provide","useFactory","isIos","deps","TuiAutoFocusDirective","handler","autoFocus","ngAfterViewInit","Promise","resolve","then","selector","providers","TuiAutoFocusModule","ɵmod","ɵinj","declarations","exports","TuiSynchronousAutofocusHandler"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-auto-focus.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, ElementRef, Optional, Self, Inject, Renderer2, NgZone, InjectionToken, Input, NgModule } from '@angular/core';\nimport { tuiCoerceBooleanProperty } from '@taiga-ui/cdk/coercion';\nimport { ANIMATION_FRAME, WINDOW } from '@ng-web-apis/common';\nimport { TUI_FOCUSABLE_ITEM_ACCESSOR, TUI_IS_IOS } from '@taiga-ui/cdk/tokens';\nimport { POLLING_TIME } from '@taiga-ui/cdk/constants';\nimport * as i1 from 'rxjs';\nimport { race, timer } from 'rxjs';\nimport { throttleTime, map, skipWhile, take } from 'rxjs/operators';\nimport { tuiPx, tuiIsPresent } from '@taiga-ui/cdk/utils';\n\nclass AbstractTuiAutofocusHandler {\n    constructor(focusable, el) {\n        this.focusable = focusable;\n        this.el = el;\n    }\n    get element() {\n        var _a;\n        return ((_a = this.focusable) === null || _a === void 0 ? void 0 : _a.nativeFocusableElement) || this.el.nativeElement;\n    }\n    get isTextFieldElement() {\n        return this.element.matches(`input, textarea`);\n    }\n}\nAbstractTuiAutofocusHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: AbstractTuiAutofocusHandler, deps: \"invalid\", target: i0.ɵɵFactoryTarget.Directive });\nAbstractTuiAutofocusHandler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: AbstractTuiAutofocusHandler, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: AbstractTuiAutofocusHandler, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined }, { type: i0.ElementRef }]; } });\n\nconst TIMEOUT = 1000;\nconst NG_ANIMATION_SELECTOR = `.ng-animating`;\nclass TuiDefaultAutofocusHandler extends AbstractTuiAutofocusHandler {\n    constructor(focusable, el, animationFrame$) {\n        super(focusable, el);\n        this.animationFrame$ = animationFrame$;\n    }\n    setFocus() {\n        if (this.isTextFieldElement) {\n            race(timer(TIMEOUT), this.animationFrame$.pipe(throttleTime(POLLING_TIME), map(() => this.element.closest(NG_ANIMATION_SELECTOR)), skipWhile(Boolean), take(1))).subscribe(() => this.element.focus());\n        }\n        else {\n            this.element.focus();\n        }\n    }\n}\nTuiDefaultAutofocusHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiDefaultAutofocusHandler, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR, optional: true, self: true }, { token: ElementRef }, { token: ANIMATION_FRAME }], target: i0.ɵɵFactoryTarget.Directive });\nTuiDefaultAutofocusHandler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiDefaultAutofocusHandler, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiDefaultAutofocusHandler, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]\n                }] }, { type: i0.ElementRef, decorators: [{\n                    type: Inject,\n                    args: [ElementRef]\n                }] }, { type: i1.Observable, decorators: [{\n                    type: Inject,\n                    args: [ANIMATION_FRAME]\n                }] }]; } });\n\nconst TEXTFIELD_ATTRS = [\n    `type`,\n    `inputMode`,\n    `autocomplete`,\n    `accept`,\n    `min`,\n    `max`,\n    `step`,\n    `pattern`,\n    `size`,\n    `maxlength`,\n];\nclass TuiIosAutofocusHandler extends AbstractTuiAutofocusHandler {\n    constructor(focusable, el, renderer, ngZone, win) {\n        super(focusable, el);\n        this.renderer = renderer;\n        this.ngZone = ngZone;\n        this.win = win;\n        this.patchCssStyles();\n    }\n    setFocus() {\n        if (this.isTextFieldElement) {\n            this.ngZone.runOutsideAngular(() => this.iosWebkitAutofocus());\n        }\n        else {\n            this.element.focus();\n        }\n    }\n    iosWebkitAutofocus() {\n        var _a;\n        const fakeInput = this.makeFakeInput();\n        const duration = this.getDurationTimeBeforeFocus();\n        let fakeFocusTimeoutId = 0;\n        let elementFocusTimeoutId = 0;\n        const blurHandler = () => fakeInput.focus({ preventScroll: true });\n        const focusHandler = () => {\n            clearTimeout(fakeFocusTimeoutId);\n            fakeFocusTimeoutId = this.win.setTimeout(() => {\n                clearTimeout(elementFocusTimeoutId);\n                fakeInput.removeEventListener(`blur`, blurHandler);\n                fakeInput.removeEventListener(`focus`, focusHandler);\n                elementFocusTimeoutId = this.win.setTimeout(() => {\n                    this.element.focus({ preventScroll: false });\n                    fakeInput.remove();\n                }, duration);\n            });\n        };\n        fakeInput.addEventListener(`blur`, blurHandler, { once: true });\n        fakeInput.addEventListener(`focus`, focusHandler);\n        if (this.insideDialog()) {\n            this.win.document.body.appendChild(fakeInput);\n        }\n        else {\n            (_a = this.element.parentElement) === null || _a === void 0 ? void 0 : _a.appendChild(fakeInput);\n        }\n        fakeInput.focus({ preventScroll: true });\n    }\n    /**\n     * @note:\n     * emulate textfield position in layout with cursor\n     * before focus to real textfield element\n     *\n     * required note:\n     * [fakeInput.readOnly = true] ~\n     * don't use {readOnly: true} value, it's doesn't work for emulate autofill\n     *\n     * [fakeInput.style.opacity = 0] ~\n     * don't use {opacity: 0}, sometimes it's doesn't work for emulate real input\n     *\n     * [fakeInput.style.fontSize = 16px] ~\n     * disable possible auto zoom\n     *\n     * [fakeInput.style.top/left] ~\n     * emulate position cursor before focus to real textfield element\n     */\n    makeFakeInput() {\n        const fakeInput = this.renderer.createElement(`input`);\n        const rect = this.element.getBoundingClientRect();\n        this.patchFakeInputFromFocusableElement(fakeInput);\n        fakeInput.style.height = tuiPx(rect.height);\n        fakeInput.style.width = tuiPx(rect.width / 2);\n        fakeInput.style.position = `fixed`;\n        fakeInput.style.zIndex = `-99999999`;\n        fakeInput.style.caretColor = `transparent`;\n        fakeInput.style.color = `transparent`;\n        fakeInput.style.cursor = `none`;\n        fakeInput.style.fontSize = tuiPx(16);\n        fakeInput.style.top = tuiPx(rect.top);\n        fakeInput.style.left = tuiPx(rect.left);\n        return fakeInput;\n    }\n    getDurationTimeBeforeFocus() {\n        return (parseFloat(this.win\n            .getComputedStyle(this.element)\n            .getPropertyValue(`--tui-duration`)) || 0);\n    }\n    /**\n     * @note:\n     * unfortunately, in older versions of iOS\n     * there is a bug that the fake input cursor\n     * will move along with the dialog animation\n     * and then that dialog will be shaking\n     */\n    insideDialog() {\n        return !!this.element.closest(`tui-dialog`);\n    }\n    /**\n     * @note:\n     * This is necessary so that the viewport isn't recalculated\n     * and then the dialogs don't shake.\n     *\n     * Also, we need to fixed height viewport,\n     * so that when focusing the dialogs don't shake\n     */\n    patchCssStyles() {\n        const doc = this.win.document;\n        for (const element of [doc.documentElement, doc.body]) {\n            element.style.setProperty(`overflow`, `auto`);\n            element.style.setProperty(`height`, `100%`);\n        }\n    }\n    /**\n     * @note:\n     * inherit basic attributes values from real input\n     * for help iOS detect what do you want see on keyboard,\n     * for example [inputMode=numeric, autocomplete=cc-number]\n     */\n    patchFakeInputFromFocusableElement(fakeInput) {\n        TEXTFIELD_ATTRS.forEach(attr => {\n            const value = this.element.getAttribute(attr);\n            if (tuiIsPresent(value)) {\n                fakeInput.setAttribute(attr, value);\n            }\n        });\n    }\n}\nTuiIosAutofocusHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiIosAutofocusHandler, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR, optional: true, self: true }, { token: ElementRef }, { token: Renderer2 }, { token: NgZone }, { token: WINDOW }], target: i0.ɵɵFactoryTarget.Directive });\nTuiIosAutofocusHandler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiIosAutofocusHandler, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiIosAutofocusHandler, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]\n                }] }, { type: i0.ElementRef, decorators: [{\n                    type: Inject,\n                    args: [ElementRef]\n                }] }, { type: i0.Renderer2, decorators: [{\n                    type: Inject,\n                    args: [Renderer2]\n                }] }, { type: i0.NgZone, decorators: [{\n                    type: Inject,\n                    args: [NgZone]\n                }] }, { type: Window, decorators: [{\n                    type: Inject,\n                    args: [WINDOW]\n                }] }]; } });\n\nconst TUI_AUTOFOCUS_HANDLER = new InjectionToken(`[TUI_AUTOFOCUS_HANDLER]`);\nconst TUI_AUTOFOCUS_PROVIDERS = [\n    {\n        provide: TUI_AUTOFOCUS_HANDLER,\n        useFactory: (focusable, el, animationFrame$, renderer, ngZone, win, isIos) => isIos\n            ? new TuiIosAutofocusHandler(focusable, el, renderer, ngZone, win)\n            : new TuiDefaultAutofocusHandler(focusable, el, animationFrame$),\n        deps: [\n            [new Optional(), new Self(), TUI_FOCUSABLE_ITEM_ACCESSOR],\n            ElementRef,\n            ANIMATION_FRAME,\n            Renderer2,\n            NgZone,\n            WINDOW,\n            TUI_IS_IOS,\n        ],\n    },\n];\n\nclass TuiAutoFocusDirective {\n    constructor(handler) {\n        this.handler = handler;\n        this.autoFocus = true;\n    }\n    ngAfterViewInit() {\n        if (tuiCoerceBooleanProperty(this.autoFocus)) {\n            this.focus();\n        }\n    }\n    focus() {\n        void Promise.resolve().then(() => this.handler.setFocus());\n    }\n}\nTuiAutoFocusDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiAutoFocusDirective, deps: [{ token: TUI_AUTOFOCUS_HANDLER }], target: i0.ɵɵFactoryTarget.Directive });\nTuiAutoFocusDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiAutoFocusDirective, selector: \"[tuiAutoFocus]\", inputs: { autoFocus: [\"tuiAutoFocus\", \"autoFocus\"] }, providers: TUI_AUTOFOCUS_PROVIDERS, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiAutoFocusDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tuiAutoFocus]',\n                    providers: TUI_AUTOFOCUS_PROVIDERS,\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TUI_AUTOFOCUS_HANDLER]\n                }] }]; }, propDecorators: { autoFocus: [{\n                type: Input,\n                args: ['tuiAutoFocus']\n            }] } });\n\nclass TuiAutoFocusModule {\n}\nTuiAutoFocusModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiAutoFocusModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTuiAutoFocusModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiAutoFocusModule, declarations: [TuiAutoFocusDirective], exports: [TuiAutoFocusDirective] });\nTuiAutoFocusModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiAutoFocusModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiAutoFocusModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TuiAutoFocusDirective],\n                    exports: [TuiAutoFocusDirective],\n                }]\n        }] });\n\nclass TuiSynchronousAutofocusHandler extends AbstractTuiAutofocusHandler {\n    constructor(focusable, el) {\n        super(focusable, el);\n    }\n    setFocus() {\n        this.element.focus();\n    }\n}\nTuiSynchronousAutofocusHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiSynchronousAutofocusHandler, deps: [{ token: TUI_FOCUSABLE_ITEM_ACCESSOR, optional: true, self: true }, { token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nTuiSynchronousAutofocusHandler.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiSynchronousAutofocusHandler, usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiSynchronousAutofocusHandler, decorators: [{\n            type: Directive\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [TUI_FOCUSABLE_ITEM_ACCESSOR]\n                }] }, { type: i0.ElementRef, decorators: [{\n                    type: Inject,\n                    args: [ElementRef]\n                }] }]; } });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { AbstractTuiAutofocusHandler, TUI_AUTOFOCUS_HANDLER, TUI_AUTOFOCUS_PROVIDERS, TuiAutoFocusDirective, TuiAutoFocusModule, TuiDefaultAutofocusHandler, TuiIosAutofocusHandler, TuiSynchronousAutofocusHandler };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}