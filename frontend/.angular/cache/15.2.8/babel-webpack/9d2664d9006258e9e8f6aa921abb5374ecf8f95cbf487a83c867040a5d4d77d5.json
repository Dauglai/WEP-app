{"ast":null,"code":"import { InjectionToken, inject } from '@angular/core';\nimport { Observable, fromEvent } from 'rxjs';\nimport { share, startWith, map, distinctUntilChanged, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\nconst WINDOW = new InjectionToken('An abstraction over global window object', {\n  factory: () => {\n    const {\n      defaultView\n    } = inject(DOCUMENT);\n    if (!defaultView) {\n      throw new Error('Window is not available');\n    }\n    return defaultView;\n  }\n});\nconst ANIMATION_FRAME = new InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {\n  factory: () => {\n    const {\n      requestAnimationFrame,\n      cancelAnimationFrame\n    } = inject(WINDOW);\n    const animationFrame$ = new Observable(subscriber => {\n      let id = NaN;\n      const callback = timestamp => {\n        subscriber.next(timestamp);\n        id = requestAnimationFrame(callback);\n      };\n      id = requestAnimationFrame(callback);\n      return () => {\n        cancelAnimationFrame(id);\n      };\n    });\n    return animationFrame$.pipe(share());\n  }\n});\nconst CACHES = new InjectionToken('An abstraction over window.caches object', {\n  factory: () => inject(WINDOW).caches\n});\nconst CRYPTO = new InjectionToken('An abstraction over window.crypto object', {\n  factory: () => inject(WINDOW).crypto\n});\nconst CSS = new InjectionToken('An abstraction over window.CSS object', {\n  factory: () => inject(WINDOW).CSS || {\n    escape: v => v,\n    supports: () => false\n  }\n});\nconst HISTORY = new InjectionToken('An abstraction over window.history object', {\n  factory: () => inject(WINDOW).history\n});\nconst LOCAL_STORAGE = new InjectionToken('An abstraction over window.localStorage object', {\n  factory: () => inject(WINDOW).localStorage\n});\nconst LOCATION = new InjectionToken('An abstraction over window.location object', {\n  factory: () => inject(WINDOW).location\n});\nconst NAVIGATOR = new InjectionToken('An abstraction over window.navigator object', {\n  factory: () => inject(WINDOW).navigator\n});\nconst MEDIA_DEVICES = new InjectionToken('An abstraction over window.navigator.mediaDevices object', {\n  factory: () => inject(NAVIGATOR).mediaDevices\n});\nconst NETWORK_INFORMATION = new InjectionToken('An abstraction over window.navigator.connection object', {\n  // @ts-ignore\n  factory: () => inject(NAVIGATOR).connection || null\n});\nconst PAGE_VISIBILITY = new InjectionToken('Shared Observable based on `document visibility changed`', {\n  factory: () => {\n    const documentRef = inject(DOCUMENT);\n    return fromEvent(documentRef, 'visibilitychange').pipe(startWith(0), map(() => documentRef.visibilityState !== 'hidden'), distinctUntilChanged(), shareReplay({\n      refCount: false,\n      bufferSize: 1\n    }));\n  }\n});\nconst PERFORMANCE = new InjectionToken('An abstraction over window.performance object', {\n  factory: () => inject(WINDOW).performance\n});\nconst SCREEN = new InjectionToken('An abstraction over window.screen object', {\n  factory: () => inject(WINDOW).screen\n});\nconst SESSION_STORAGE = new InjectionToken('An abstraction over window.sessionStorage object', {\n  factory: () => inject(WINDOW).sessionStorage\n});\nconst SPEECH_RECOGNITION = new InjectionToken('An abstraction over SpeechRecognition class', {\n  factory: () => {\n    const windowRef = inject(WINDOW);\n    return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\n  }\n});\nconst SPEECH_SYNTHESIS = new InjectionToken('An abstraction over window.speechSynthesis object', {\n  factory: () => inject(WINDOW).speechSynthesis\n});\nconst USER_AGENT = new InjectionToken('An abstraction over window.navigator.userAgent object', {\n  factory: () => inject(NAVIGATOR).userAgent\n});\n\n/**\r\n * Public API Surface of @ng-web-apis/common\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ANIMATION_FRAME, CACHES, CRYPTO, CSS, HISTORY, LOCAL_STORAGE, LOCATION, MEDIA_DEVICES, NAVIGATOR, NETWORK_INFORMATION, PAGE_VISIBILITY, PERFORMANCE, SCREEN, SESSION_STORAGE, SPEECH_RECOGNITION, SPEECH_SYNTHESIS, USER_AGENT, WINDOW };","map":{"version":3,"names":["InjectionToken","inject","Observable","fromEvent","share","startWith","map","distinctUntilChanged","shareReplay","DOCUMENT","WINDOW","factory","defaultView","Error","ANIMATION_FRAME","requestAnimationFrame","cancelAnimationFrame","animationFrame$","subscriber","id","NaN","callback","timestamp","next","pipe","CACHES","caches","CRYPTO","crypto","CSS","escape","v","supports","HISTORY","history","LOCAL_STORAGE","localStorage","LOCATION","location","NAVIGATOR","navigator","MEDIA_DEVICES","mediaDevices","NETWORK_INFORMATION","connection","PAGE_VISIBILITY","documentRef","visibilityState","refCount","bufferSize","PERFORMANCE","performance","SCREEN","screen","SESSION_STORAGE","sessionStorage","SPEECH_RECOGNITION","windowRef","speechRecognition","webkitSpeechRecognition","SPEECH_SYNTHESIS","speechSynthesis","USER_AGENT","userAgent"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@ng-web-apis/common/fesm2015/ng-web-apis-common.js"],"sourcesContent":["import { InjectionToken, inject } from '@angular/core';\nimport { Observable, fromEvent } from 'rxjs';\nimport { share, startWith, map, distinctUntilChanged, shareReplay } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nconst WINDOW = new InjectionToken('An abstraction over global window object', {\r\n    factory: () => {\r\n        const { defaultView } = inject(DOCUMENT);\r\n        if (!defaultView) {\r\n            throw new Error('Window is not available');\r\n        }\r\n        return defaultView;\r\n    },\r\n});\n\nconst ANIMATION_FRAME = new InjectionToken('Shared Observable based on `window.requestAnimationFrame`', {\r\n    factory: () => {\r\n        const { requestAnimationFrame, cancelAnimationFrame } = inject(WINDOW);\r\n        const animationFrame$ = new Observable(subscriber => {\r\n            let id = NaN;\r\n            const callback = (timestamp) => {\r\n                subscriber.next(timestamp);\r\n                id = requestAnimationFrame(callback);\r\n            };\r\n            id = requestAnimationFrame(callback);\r\n            return () => {\r\n                cancelAnimationFrame(id);\r\n            };\r\n        });\r\n        return animationFrame$.pipe(share());\r\n    },\r\n});\n\nconst CACHES = new InjectionToken('An abstraction over window.caches object', {\r\n    factory: () => inject(WINDOW).caches,\r\n});\n\nconst CRYPTO = new InjectionToken('An abstraction over window.crypto object', {\r\n    factory: () => inject(WINDOW).crypto,\r\n});\n\nconst CSS = new InjectionToken('An abstraction over window.CSS object', {\r\n    factory: () => inject(WINDOW).CSS || {\r\n        escape: v => v,\r\n        supports: () => false,\r\n    },\r\n});\n\nconst HISTORY = new InjectionToken('An abstraction over window.history object', {\r\n    factory: () => inject(WINDOW).history,\r\n});\n\nconst LOCAL_STORAGE = new InjectionToken('An abstraction over window.localStorage object', {\r\n    factory: () => inject(WINDOW).localStorage,\r\n});\n\nconst LOCATION = new InjectionToken('An abstraction over window.location object', {\r\n    factory: () => inject(WINDOW).location,\r\n});\n\nconst NAVIGATOR = new InjectionToken('An abstraction over window.navigator object', {\r\n    factory: () => inject(WINDOW).navigator,\r\n});\n\nconst MEDIA_DEVICES = new InjectionToken('An abstraction over window.navigator.mediaDevices object', {\r\n    factory: () => inject(NAVIGATOR).mediaDevices,\r\n});\n\nconst NETWORK_INFORMATION = new InjectionToken('An abstraction over window.navigator.connection object', {\r\n    // @ts-ignore\r\n    factory: () => inject(NAVIGATOR).connection || null,\r\n});\n\nconst PAGE_VISIBILITY = new InjectionToken('Shared Observable based on `document visibility changed`', {\r\n    factory: () => {\r\n        const documentRef = inject(DOCUMENT);\r\n        return fromEvent(documentRef, 'visibilitychange').pipe(startWith(0), map(() => documentRef.visibilityState !== 'hidden'), distinctUntilChanged(), shareReplay({ refCount: false, bufferSize: 1 }));\r\n    },\r\n});\n\nconst PERFORMANCE = new InjectionToken('An abstraction over window.performance object', {\r\n    factory: () => inject(WINDOW).performance,\r\n});\n\nconst SCREEN = new InjectionToken('An abstraction over window.screen object', {\r\n    factory: () => inject(WINDOW).screen,\r\n});\n\nconst SESSION_STORAGE = new InjectionToken('An abstraction over window.sessionStorage object', {\r\n    factory: () => inject(WINDOW).sessionStorage,\r\n});\n\nconst SPEECH_RECOGNITION = new InjectionToken('An abstraction over SpeechRecognition class', {\r\n    factory: () => {\r\n        const windowRef = inject(WINDOW);\r\n        return windowRef.speechRecognition || windowRef.webkitSpeechRecognition || null;\r\n    },\r\n});\n\nconst SPEECH_SYNTHESIS = new InjectionToken('An abstraction over window.speechSynthesis object', {\r\n    factory: () => inject(WINDOW).speechSynthesis,\r\n});\n\nconst USER_AGENT = new InjectionToken('An abstraction over window.navigator.userAgent object', {\r\n    factory: () => inject(NAVIGATOR).userAgent,\r\n});\n\n/**\r\n * Public API Surface of @ng-web-apis/common\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { ANIMATION_FRAME, CACHES, CRYPTO, CSS, HISTORY, LOCAL_STORAGE, LOCATION, MEDIA_DEVICES, NAVIGATOR, NETWORK_INFORMATION, PAGE_VISIBILITY, PERFORMANCE, SCREEN, SESSION_STORAGE, SPEECH_RECOGNITION, SPEECH_SYNTHESIS, USER_AGENT, WINDOW };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}