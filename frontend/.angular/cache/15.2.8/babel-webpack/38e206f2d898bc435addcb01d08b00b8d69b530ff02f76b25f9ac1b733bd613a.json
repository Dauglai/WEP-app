{"ast":null,"code":"import { DOCUMENT } from '@angular/common';\nimport * as dompurify from 'dompurify';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { InjectionToken, Inject, Injectable, SecurityContext, Pipe, NgModule, defineInjectable, inject } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token for {\\@link NgDompurifyConfig}\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nconst DOMPURIFY_CONFIG = new InjectionToken('Config for DOMPurify', {\n  factory: () => ({}),\n  providedIn: 'root'\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token for adding hooks to DOMPurify, see {\\@link addHook}\n * @type {?}\n */\nconst DOMPURIFY_HOOKS = new InjectionToken('Hooks for DOMPurify', {\n  factory: () => [],\n  providedIn: 'root'\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that takes style rule value as input and returns a sanitized string\n *\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\n * @type {?}\n */\nconst SANITIZE_STYLE = new InjectionToken('A function that sanitizes value for a CSS rule', {\n  factory: () => value => value,\n  providedIn: 'root'\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst createDOMPurify = dompurify;\n/**\n * Implementation of Angular {\\@link Sanitizer} purifying via DOMPurify\n *\n * use {\\@link DOMPURIFY_CONFIG} token to provide config ({\\@link NgDompurifyConfig})\n * use {\\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\\@link SanitizeStyle})\n * use {\\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\\@link addHook})\n *\n * Ambient type cannot be used without \\@dynamic https://github.com/angular/angular/issues/23395\n * \\@dynamic\n */\nclass NgDompurifySanitizer {\n  /**\n   * @param {?} config\n   * @param {?} sanitizeStyle\n   * @param {?} __2\n   * @param {?} hooks\n   */\n  constructor(config, sanitizeStyle, {\n    defaultView\n  }, hooks) {\n    this.config = config;\n    this.sanitizeStyle = sanitizeStyle;\n    this.domPurify = createDOMPurify( /** @type {?} */defaultView);\n    hooks.forEach(({\n      name,\n      hook\n    }) => {\n      this.domPurify.addHook(name, hook);\n    });\n  }\n  /**\n   * @param {?} context\n   * @param {?} value\n   * @param {?=} config\n   * @return {?}\n   */\n  sanitize(context, value, config = this.config) {\n    if (context === SecurityContext.SCRIPT) {\n      throw new Error('DOMPurify does not support SCRIPT context');\n    }\n    return context === SecurityContext.STYLE ? this.sanitizeStyle(String(value)) : this.domPurify.sanitize(String(value || ''), config);\n  }\n}\nNgDompurifySanitizer.ɵfac = function NgDompurifySanitizer_Factory(t) {\n  return new (t || NgDompurifySanitizer)(ɵngcc0.ɵɵinject(DOMPURIFY_CONFIG), ɵngcc0.ɵɵinject(SANITIZE_STYLE), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(DOMPURIFY_HOOKS));\n};\nNgDompurifySanitizer.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n  token: NgDompurifySanitizer,\n  factory: NgDompurifySanitizer.ɵfac,\n  providedIn: 'root'\n});\n/** @nocollapse */\nNgDompurifySanitizer.ctorParameters = () => [{\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOMPURIFY_CONFIG]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [SANITIZE_STYLE]\n  }]\n}, {\n  type: Document,\n  decorators: [{\n    type: Inject,\n    args: [DOCUMENT]\n  }]\n}, {\n  type: undefined,\n  decorators: [{\n    type: Inject,\n    args: [DOMPURIFY_HOOKS]\n  }]\n}];\n/** @nocollapse */\nNgDompurifySanitizer.ngInjectableDef = defineInjectable({\n  factory: function NgDompurifySanitizer_Factory() {\n    return new NgDompurifySanitizer(inject(DOMPURIFY_CONFIG), inject(SANITIZE_STYLE), inject(DOCUMENT), inject(DOMPURIFY_HOOKS));\n  },\n  token: NgDompurifySanitizer,\n  providedIn: \"root\"\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifySanitizer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOMPURIFY_CONFIG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [SANITIZE_STYLE]\n      }]\n    }, {\n      type: Document,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOMPURIFY_HOOKS]\n      }]\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe that transforms dirty content to clean via {\\@link NgDompurifySanitizer}\n */\nclass NgDompurifyPipe {\n  /**\n   * @param {?} sanitizer\n   * @param {?} domSanitizer\n   */\n  constructor(sanitizer, domSanitizer) {\n    this.sanitizer = sanitizer;\n    this.domSanitizer = domSanitizer;\n  }\n  /**\n   * @param {?} value\n   * @param {?=} context\n   * @param {?=} config\n   * @return {?}\n   */\n  transform(value, context = SecurityContext.HTML, config) {\n    return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));\n  }\n  /**\n   * @private\n   * @param {?} context\n   * @param {?} purifiedValue\n   * @return {?}\n   */\n  bypassSecurityTrust(context, purifiedValue) {\n    switch (context) {\n      case SecurityContext.HTML:\n        return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\n      case SecurityContext.STYLE:\n        return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\n      case SecurityContext.URL:\n        return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\n      case SecurityContext.RESOURCE_URL:\n        return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\n      default:\n        return null;\n    }\n  }\n}\nNgDompurifyPipe.ɵfac = function NgDompurifyPipe_Factory(t) {\n  return new (t || NgDompurifyPipe)(ɵngcc0.ɵɵdirectiveInject(NgDompurifySanitizer, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer, 16));\n};\nNgDompurifyPipe.ɵpipe = /*@__PURE__*/ɵngcc0.ɵɵdefinePipe({\n  name: \"dompurify\",\n  type: NgDompurifyPipe,\n  pure: true\n});\n/** @nocollapse */\nNgDompurifyPipe.ctorParameters = () => [{\n  type: NgDompurifySanitizer\n}, {\n  type: DomSanitizer\n}];\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifyPipe, [{\n    type: Pipe,\n    args: [{\n      name: 'dompurify'\n    }]\n  }], function () {\n    return [{\n      type: NgDompurifySanitizer\n    }, {\n      type: ɵngcc1.DomSanitizer\n    }];\n  }, null);\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgDompurifyModule {}\nNgDompurifyModule.ɵfac = function NgDompurifyModule_Factory(t) {\n  return new (t || NgDompurifyModule)();\n};\nNgDompurifyModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n  type: NgDompurifyModule\n});\nNgDompurifyModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifyModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgDompurifyPipe],\n      exports: [NgDompurifyPipe]\n    }]\n  }], null, null);\n})();\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDompurifyModule, {\n    declarations: [NgDompurifyPipe],\n    exports: [NgDompurifyPipe]\n  });\n})();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgDompurifySanitizer, NgDompurifyPipe, NgDompurifyModule, DOMPURIFY_CONFIG, DOMPURIFY_HOOKS, SANITIZE_STYLE };","map":{"version":3,"names":["DOCUMENT","dompurify","DomSanitizer","InjectionToken","Inject","Injectable","SecurityContext","Pipe","NgModule","defineInjectable","inject","ɵngcc0","ɵngcc1","DOMPURIFY_CONFIG","factory","providedIn","DOMPURIFY_HOOKS","SANITIZE_STYLE","value","createDOMPurify","NgDompurifySanitizer","constructor","config","sanitizeStyle","defaultView","hooks","domPurify","forEach","name","hook","addHook","sanitize","context","SCRIPT","Error","STYLE","String","ɵfac","NgDompurifySanitizer_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","ctorParameters","type","undefined","decorators","args","Document","ngInjectableDef","ngDevMode","ɵsetClassMetadata","NgDompurifyPipe","sanitizer","domSanitizer","transform","HTML","bypassSecurityTrust","purifiedValue","bypassSecurityTrustHtml","bypassSecurityTrustStyle","URL","bypassSecurityTrustUrl","RESOURCE_URL","bypassSecurityTrustResourceUrl","NgDompurifyPipe_Factory","ɵɵdirectiveInject","ɵpipe","ɵɵdefinePipe","pure","NgDompurifyModule","NgDompurifyModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","declarations","exports","ngJitMode","ɵɵsetNgModuleScope"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@tinkoff/ng-dompurify/__ivy_ngcc__/fesm2015/tinkoff-ng-dompurify.js"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as dompurify from 'dompurify';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { InjectionToken, Inject, Injectable, SecurityContext, Pipe, NgModule, defineInjectable, inject } from '@angular/core';\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token for {\\@link NgDompurifyConfig}\n * @type {?}\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/platform-browser';\nconst DOMPURIFY_CONFIG = new InjectionToken('Config for DOMPurify', {\n    factory: () => ({}),\n    providedIn: 'root',\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Token for adding hooks to DOMPurify, see {\\@link addHook}\n * @type {?}\n */\nconst DOMPURIFY_HOOKS = new InjectionToken('Hooks for DOMPurify', {\n    factory: () => [],\n    providedIn: 'root',\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * A function that takes style rule value as input and returns a sanitized string\n *\n * NOTE: Angular 10 removed CSS sanitation so by default this method does nothing\n * @type {?}\n */\nconst SANITIZE_STYLE = new InjectionToken('A function that sanitizes value for a CSS rule', {\n    factory: () => value => value,\n    providedIn: 'root',\n});\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @type {?} */\nconst createDOMPurify = dompurify;\n/**\n * Implementation of Angular {\\@link Sanitizer} purifying via DOMPurify\n *\n * use {\\@link DOMPURIFY_CONFIG} token to provide config ({\\@link NgDompurifyConfig})\n * use {\\@link SANITIZE_STYLE} token to provide a style sanitizing method ({\\@link SanitizeStyle})\n * use {\\@link DOMPURIFY_HOOKS} token to provide a hooks for DOMPurify ({\\@link addHook})\n *\n * Ambient type cannot be used without \\@dynamic https://github.com/angular/angular/issues/23395\n * \\@dynamic\n */\nclass NgDompurifySanitizer {\n    /**\n     * @param {?} config\n     * @param {?} sanitizeStyle\n     * @param {?} __2\n     * @param {?} hooks\n     */\n    constructor(config, sanitizeStyle, { defaultView }, hooks) {\n        this.config = config;\n        this.sanitizeStyle = sanitizeStyle;\n        this.domPurify = createDOMPurify((/** @type {?} */ (defaultView)));\n        hooks.forEach(({ name, hook }) => {\n            this.domPurify.addHook(name, hook);\n        });\n    }\n    /**\n     * @param {?} context\n     * @param {?} value\n     * @param {?=} config\n     * @return {?}\n     */\n    sanitize(context, value, config = this.config) {\n        if (context === SecurityContext.SCRIPT) {\n            throw new Error('DOMPurify does not support SCRIPT context');\n        }\n        return context === SecurityContext.STYLE\n            ? this.sanitizeStyle(String(value))\n            : this.domPurify.sanitize(String(value || ''), config);\n    }\n}\nNgDompurifySanitizer.ɵfac = function NgDompurifySanitizer_Factory(t) { return new (t || NgDompurifySanitizer)(ɵngcc0.ɵɵinject(DOMPURIFY_CONFIG), ɵngcc0.ɵɵinject(SANITIZE_STYLE), ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(DOMPURIFY_HOOKS)); };\nNgDompurifySanitizer.ɵprov = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjectable({ token: NgDompurifySanitizer, factory: NgDompurifySanitizer.ɵfac, providedIn: 'root' });\n/** @nocollapse */\nNgDompurifySanitizer.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_CONFIG,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [SANITIZE_STYLE,] }] },\n    { type: Document, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOMPURIFY_HOOKS,] }] }\n];\n/** @nocollapse */ NgDompurifySanitizer.ngInjectableDef = defineInjectable({ factory: function NgDompurifySanitizer_Factory() { return new NgDompurifySanitizer(inject(DOMPURIFY_CONFIG), inject(SANITIZE_STYLE), inject(DOCUMENT), inject(DOMPURIFY_HOOKS)); }, token: NgDompurifySanitizer, providedIn: \"root\" });\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifySanitizer, [{\n        type: Injectable,\n        args: [{\n                providedIn: 'root'\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOMPURIFY_CONFIG]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [SANITIZE_STYLE]\n            }] }, { type: Document, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOMPURIFY_HOOKS]\n            }] }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * Pipe that transforms dirty content to clean via {\\@link NgDompurifySanitizer}\n */\nclass NgDompurifyPipe {\n    /**\n     * @param {?} sanitizer\n     * @param {?} domSanitizer\n     */\n    constructor(sanitizer, domSanitizer) {\n        this.sanitizer = sanitizer;\n        this.domSanitizer = domSanitizer;\n    }\n    /**\n     * @param {?} value\n     * @param {?=} context\n     * @param {?=} config\n     * @return {?}\n     */\n    transform(value, context = SecurityContext.HTML, config) {\n        return this.bypassSecurityTrust(context, this.sanitizer.sanitize(context, value, config));\n    }\n    /**\n     * @private\n     * @param {?} context\n     * @param {?} purifiedValue\n     * @return {?}\n     */\n    bypassSecurityTrust(context, purifiedValue) {\n        switch (context) {\n            case SecurityContext.HTML:\n                return this.domSanitizer.bypassSecurityTrustHtml(purifiedValue);\n            case SecurityContext.STYLE:\n                return this.domSanitizer.bypassSecurityTrustStyle(purifiedValue);\n            case SecurityContext.URL:\n                return this.domSanitizer.bypassSecurityTrustUrl(purifiedValue);\n            case SecurityContext.RESOURCE_URL:\n                return this.domSanitizer.bypassSecurityTrustResourceUrl(purifiedValue);\n            default:\n                return null;\n        }\n    }\n}\nNgDompurifyPipe.ɵfac = function NgDompurifyPipe_Factory(t) { return new (t || NgDompurifyPipe)(ɵngcc0.ɵɵdirectiveInject(NgDompurifySanitizer, 16), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DomSanitizer, 16)); };\nNgDompurifyPipe.ɵpipe = /*@__PURE__*/ ɵngcc0.ɵɵdefinePipe({ name: \"dompurify\", type: NgDompurifyPipe, pure: true });\n/** @nocollapse */\nNgDompurifyPipe.ctorParameters = () => [\n    { type: NgDompurifySanitizer },\n    { type: DomSanitizer }\n];\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifyPipe, [{\n        type: Pipe,\n        args: [{ name: 'dompurify' }]\n    }], function () { return [{ type: NgDompurifySanitizer }, { type: ɵngcc1.DomSanitizer }]; }, null); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nclass NgDompurifyModule {\n}\nNgDompurifyModule.ɵfac = function NgDompurifyModule_Factory(t) { return new (t || NgDompurifyModule)(); };\nNgDompurifyModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: NgDompurifyModule });\nNgDompurifyModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({});\n(function () { (typeof ngDevMode === \"undefined\" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(NgDompurifyModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [NgDompurifyPipe],\n                exports: [NgDompurifyPipe]\n            }]\n    }], null, null); })();\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NgDompurifyModule, { declarations: [NgDompurifyPipe], exports: [NgDompurifyPipe] }); })();\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n\nexport { NgDompurifySanitizer, NgDompurifyPipe, NgDompurifyModule, DOMPURIFY_CONFIG, DOMPURIFY_HOOKS, SANITIZE_STYLE };\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}