{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { ViewContainerRef, TemplateRef, Directive, Inject, Input, NgModule } from '@angular/core';\n\n/**\n * @internal\n */\nclass TuiLetContext {\n  constructor(internalDirectiveInstance) {\n    this.internalDirectiveInstance = internalDirectiveInstance;\n  }\n  get $implicit() {\n    return this.internalDirectiveInstance.tuiLet;\n  }\n  get tuiLet() {\n    return this.internalDirectiveInstance.tuiLet;\n  }\n}\n\n/**\n * Works like *ngIf but does not have a condition — use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\nclass TuiLetDirective {\n  constructor(viewContainer, templateRef) {\n    viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));\n  }\n  /**\n   * Asserts the correct type of the context for the template that `TuiLet` will render.\n   *\n   * The presence of this method is a signal to the Ivy template type-check compiler that the\n   * `TuiLet` structural directive renders its template with a specific context type.\n   */\n  static ngTemplateContextGuard(_dir, _ctx) {\n    return true;\n  }\n}\nTuiLetDirective.ɵfac = function TuiLetDirective_Factory(t) {\n  return new (t || TuiLetDirective)(i0.ɵɵdirectiveInject(ViewContainerRef), i0.ɵɵdirectiveInject(TemplateRef));\n};\nTuiLetDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiLetDirective,\n  selectors: [[\"\", \"tuiLet\", \"\"]],\n  inputs: {\n    tuiLet: \"tuiLet\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiLetDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[tuiLet]'\n    }]\n  }], function () {\n    return [{\n      type: i0.ViewContainerRef,\n      decorators: [{\n        type: Inject,\n        args: [ViewContainerRef]\n      }]\n    }, {\n      type: i0.TemplateRef,\n      decorators: [{\n        type: Inject,\n        args: [TemplateRef]\n      }]\n    }];\n  }, {\n    tuiLet: [{\n      type: Input\n    }]\n  });\n})();\nclass TuiLetModule {}\nTuiLetModule.ɵfac = function TuiLetModule_Factory(t) {\n  return new (t || TuiLetModule)();\n};\nTuiLetModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TuiLetModule\n});\nTuiLetModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiLetModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TuiLetDirective],\n      exports: [TuiLetDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiLetContext, TuiLetDirective, TuiLetModule };","map":{"version":3,"names":["i0","ViewContainerRef","TemplateRef","Directive","Inject","Input","NgModule","TuiLetContext","constructor","internalDirectiveInstance","$implicit","tuiLet","TuiLetDirective","viewContainer","templateRef","createEmbeddedView","ngTemplateContextGuard","_dir","_ctx","ɵfac","ɵdir","type","args","selector","decorators","TuiLetModule","ɵmod","ɵinj","declarations","exports"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-let.js"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { ViewContainerRef, TemplateRef, Directive, Inject, Input, NgModule } from '@angular/core';\n\n/**\n * @internal\n */\nclass TuiLetContext {\n    constructor(internalDirectiveInstance) {\n        this.internalDirectiveInstance = internalDirectiveInstance;\n    }\n    get $implicit() {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n    get tuiLet() {\n        return this.internalDirectiveInstance.tuiLet;\n    }\n}\n\n/**\n * Works like *ngIf but does not have a condition — use it to declare\n * the result of pipes calculation (i.e. async pipe)\n */\nclass TuiLetDirective {\n    constructor(viewContainer, templateRef) {\n        viewContainer.createEmbeddedView(templateRef, new TuiLetContext(this));\n    }\n    /**\n     * Asserts the correct type of the context for the template that `TuiLet` will render.\n     *\n     * The presence of this method is a signal to the Ivy template type-check compiler that the\n     * `TuiLet` structural directive renders its template with a specific context type.\n     */\n    static ngTemplateContextGuard(_dir, _ctx) {\n        return true;\n    }\n}\nTuiLetDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiLetDirective, deps: [{ token: ViewContainerRef }, { token: TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nTuiLetDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiLetDirective, selector: \"[tuiLet]\", inputs: { tuiLet: \"tuiLet\" }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiLetDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[tuiLet]',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef, decorators: [{\n                    type: Inject,\n                    args: [ViewContainerRef]\n                }] }, { type: i0.TemplateRef, decorators: [{\n                    type: Inject,\n                    args: [TemplateRef]\n                }] }]; }, propDecorators: { tuiLet: [{\n                type: Input\n            }] } });\n\nclass TuiLetModule {\n}\nTuiLetModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiLetModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTuiLetModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiLetModule, declarations: [TuiLetDirective], exports: [TuiLetDirective] });\nTuiLetModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiLetModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiLetModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TuiLetDirective],\n                    exports: [TuiLetDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiLetContext, TuiLetDirective, TuiLetModule };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,gBAAgB,EAAEC,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,KAAK,EAAEC,QAAQ,QAAQ,eAAe;;AAEjG;AACA;AACA;AACA,MAAMC,aAAa,CAAC;EAChBC,WAAW,CAACC,yBAAyB,EAAE;IACnC,IAAI,CAACA,yBAAyB,GAAGA,yBAAyB;EAC9D;EACA,IAAIC,SAAS,GAAG;IACZ,OAAO,IAAI,CAACD,yBAAyB,CAACE,MAAM;EAChD;EACA,IAAIA,MAAM,GAAG;IACT,OAAO,IAAI,CAACF,yBAAyB,CAACE,MAAM;EAChD;AACJ;;AAEA;AACA;AACA;AACA;AACA,MAAMC,eAAe,CAAC;EAClBJ,WAAW,CAACK,aAAa,EAAEC,WAAW,EAAE;IACpCD,aAAa,CAACE,kBAAkB,CAACD,WAAW,EAAE,IAAIP,aAAa,CAAC,IAAI,CAAC,CAAC;EAC1E;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,OAAOS,sBAAsB,CAACC,IAAI,EAAEC,IAAI,EAAE;IACtC,OAAO,IAAI;EACf;AACJ;AACAN,eAAe,CAACO,IAAI;EAAA,iBAAyFP,eAAe,EAAzBZ,EAAE,mBAAyCC,gBAAgB,GAA3DD,EAAE,mBAAsEE,WAAW;AAAA,CAA4C;AAClOU,eAAe,CAACQ,IAAI,kBAD+EpB,EAAE;EAAA,MACJY,eAAe;EAAA;EAAA;IAAA;EAAA;AAAA,EAAqE;AACrL;EAAA,mDAFmGZ,EAAE,mBAETY,eAAe,EAAc,CAAC;IAC9GS,IAAI,EAAElB,SAAS;IACfmB,IAAI,EAAE,CAAC;MACCC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEF,IAAI,EAAErB,EAAE,CAACC,gBAAgB;MAAEuB,UAAU,EAAE,CAAC;QACxEH,IAAI,EAAEjB,MAAM;QACZkB,IAAI,EAAE,CAACrB,gBAAgB;MAC3B,CAAC;IAAE,CAAC,EAAE;MAAEoB,IAAI,EAAErB,EAAE,CAACE,WAAW;MAAEsB,UAAU,EAAE,CAAC;QACvCH,IAAI,EAAEjB,MAAM;QACZkB,IAAI,EAAE,CAACpB,WAAW;MACtB,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAES,MAAM,EAAE,CAAC;MACrCU,IAAI,EAAEhB;IACV,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAMoB,YAAY,CAAC;AAEnBA,YAAY,CAACN,IAAI;EAAA,iBAAyFM,YAAY;AAAA,CAAkD;AACxKA,YAAY,CAACC,IAAI,kBApBkF1B,EAAE;EAAA,MAoBMyB;AAAY,EAAgE;AACvLA,YAAY,CAACE,IAAI,kBArBkF3B,EAAE,qBAqBqB;AAC1H;EAAA,mDAtBmGA,EAAE,mBAsBTyB,YAAY,EAAc,CAAC;IAC3GJ,IAAI,EAAEf,QAAQ;IACdgB,IAAI,EAAE,CAAC;MACCM,YAAY,EAAE,CAAChB,eAAe,CAAC;MAC/BiB,OAAO,EAAE,CAACjB,eAAe;IAC7B,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASL,aAAa,EAAEK,eAAe,EAAEa,YAAY"},"metadata":{},"sourceType":"module","externalDependencies":[]}