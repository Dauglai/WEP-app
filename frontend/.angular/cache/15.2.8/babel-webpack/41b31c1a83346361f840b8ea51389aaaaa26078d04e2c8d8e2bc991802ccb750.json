{"ast":null,"code":"import { tuiIsHTMLElement } from '@taiga-ui/cdk/utils/dom';\nimport { svgNodeFilter } from '@taiga-ui/cdk/constants';\n\n/**\n * Returns current active element, including shadow dom\n *\n * @return element or null\n */\nfunction tuiGetNativeFocused(doc) {\n  var _a;\n  if (!((_a = doc.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot)) {\n    return doc.activeElement;\n  }\n  let element = doc.activeElement.shadowRoot.activeElement;\n  while (element === null || element === void 0 ? void 0 : element.shadowRoot) {\n    element = element.shadowRoot.activeElement;\n  }\n  return element;\n}\n\n/**\n * Finds and blurs current active element, including shadow DOM\n */\nfunction tuiBlurNativeFocused(doc) {\n  const activeElement = tuiGetNativeFocused(doc);\n  if (tuiIsHTMLElement(activeElement)) {\n    activeElement.blur();\n  }\n}\n\n/**\n * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to\n * only target natural focus order. Not checking the possibility of an element to\n * be focused, for example element can have display: none applied to it or any other\n * circumstances could prevent actual focus.\n */\nfunction tuiIsNativeKeyboardFocusable(element) {\n  if (element.hasAttribute(`disabled`) || element.getAttribute(`tabIndex`) === `-1`) {\n    return false;\n  }\n  if (tuiIsHTMLElement(element) && element.isContentEditable || element.getAttribute(`tabIndex`) === `0`) {\n    return true;\n  }\n  switch (element.tagName) {\n    case `BUTTON`:\n    case `SELECT`:\n    case `TEXTAREA`:\n      return true;\n    case `VIDEO`:\n    case `AUDIO`:\n      return element.hasAttribute(`controls`);\n    case `INPUT`:\n      return element.getAttribute(`type`) !== `hidden`;\n    case `A`:\n    case `LINK`:\n      return element.hasAttribute(`href`);\n    default:\n      return false;\n  }\n}\nfunction tuiIsNativeMouseFocusable(element) {\n  return !element.hasAttribute(`disabled`) && (element.getAttribute(`tabIndex`) === `-1` || tuiIsNativeKeyboardFocusable(element));\n}\n\n/**\n * @description:\n * Finds the closest element that can be focused with a keyboard or mouse in theory\n */\nfunction tuiGetClosestFocusable({\n  initial,\n  root,\n  previous = false,\n  keyboard = true\n}) {\n  if (!root.ownerDocument) {\n    return null;\n  }\n  const check = keyboard ? tuiIsNativeKeyboardFocusable : tuiIsNativeMouseFocusable;\n  const treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, svgNodeFilter);\n  treeWalker.currentNode = initial;\n  while (previous ? treeWalker.previousNode() : treeWalker.nextNode()) {\n    if (tuiIsHTMLElement(treeWalker.currentNode)) {\n      initial = treeWalker.currentNode;\n    }\n    if (tuiIsHTMLElement(initial) && check(initial)) {\n      return initial;\n    }\n  }\n  return null;\n}\n\n/**\n * Checks if element is focused.\n *\n * Could return true even after blur since element remains focused if you switch away from a browser tab.\n *\n * @param node or null (as a common return value of DOM nodes walking)\n * @return true if focused\n */\nfunction tuiIsNativeFocused(node) {\n  return !!(node === null || node === void 0 ? void 0 : node.ownerDocument) && tuiGetNativeFocused(node.ownerDocument) === node;\n}\n\n/**\n * Checks if focused element is within given element.\n *\n * @param node\n * @return true if focused node is contained within element\n */\nfunction tuiIsNativeFocusedIn(node) {\n  // !node.contains - check for IE11\n  if (!node.ownerDocument || !node.contains) {\n    return false;\n  }\n  const nativeFocused = tuiGetNativeFocused(node.ownerDocument);\n  return nativeFocused !== null && node.contains(nativeFocused);\n}\n\n/**\n * Utility method for moving focus in a list of elements\n *\n * @param currentIndex currently focused index\n * @param elements array of focusable elements\n * @param step a step to move focus by, typically -1 or 1\n */\nfunction tuiMoveFocus(currentIndex, elements, step) {\n  currentIndex += step;\n  while (currentIndex >= 0 && currentIndex < elements.length) {\n    elements[currentIndex].focus();\n    if (tuiIsNativeFocused(elements[currentIndex])) {\n      return;\n    }\n    currentIndex += step;\n  }\n}\n\n/**\n * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})\n *\n * @param element\n * @param focused desired focused state\n * @param preventScroll optionally prevent native browser scroll after focus\n */\nfunction tuiSetNativeMouseFocused(element, focused = true, preventScroll = false) {\n  if (!element.ownerDocument) {\n    return;\n  }\n  if (typeof Event === `function`) {\n    element.dispatchEvent(new Event(`mousedown`, {\n      bubbles: true,\n      cancelable: true\n    }));\n  } else {\n    const event = element.ownerDocument.createEvent(`Event`);\n    event.initEvent(`mousedown`, true, true);\n    element.dispatchEvent(event);\n  }\n  if (focused) {\n    element.focus({\n      preventScroll\n    });\n  } else {\n    element.blur();\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiBlurNativeFocused, tuiGetClosestFocusable, tuiGetNativeFocused, tuiIsNativeFocused, tuiIsNativeFocusedIn, tuiIsNativeKeyboardFocusable, tuiIsNativeMouseFocusable, tuiMoveFocus, tuiSetNativeMouseFocused };","map":{"version":3,"names":["tuiIsHTMLElement","svgNodeFilter","tuiGetNativeFocused","doc","_a","activeElement","shadowRoot","element","tuiBlurNativeFocused","blur","tuiIsNativeKeyboardFocusable","hasAttribute","getAttribute","isContentEditable","tagName","tuiIsNativeMouseFocusable","tuiGetClosestFocusable","initial","root","previous","keyboard","ownerDocument","check","treeWalker","createTreeWalker","NodeFilter","SHOW_ELEMENT","currentNode","previousNode","nextNode","tuiIsNativeFocused","node","tuiIsNativeFocusedIn","contains","nativeFocused","tuiMoveFocus","currentIndex","elements","step","length","focus","tuiSetNativeMouseFocused","focused","preventScroll","Event","dispatchEvent","bubbles","cancelable","event","createEvent","initEvent"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-focus.js"],"sourcesContent":["import { tuiIsHTMLElement } from '@taiga-ui/cdk/utils/dom';\nimport { svgNodeFilter } from '@taiga-ui/cdk/constants';\n\n/**\n * Returns current active element, including shadow dom\n *\n * @return element or null\n */\nfunction tuiGetNativeFocused(doc) {\n    var _a;\n    if (!((_a = doc.activeElement) === null || _a === void 0 ? void 0 : _a.shadowRoot)) {\n        return doc.activeElement;\n    }\n    let element = doc.activeElement.shadowRoot.activeElement;\n    while (element === null || element === void 0 ? void 0 : element.shadowRoot) {\n        element = element.shadowRoot.activeElement;\n    }\n    return element;\n}\n\n/**\n * Finds and blurs current active element, including shadow DOM\n */\nfunction tuiBlurNativeFocused(doc) {\n    const activeElement = tuiGetNativeFocused(doc);\n    if (tuiIsHTMLElement(activeElement)) {\n        activeElement.blur();\n    }\n}\n\n/**\n * Checks for signs that element can be focused with keyboard. tabIndex above 0 is ignored to\n * only target natural focus order. Not checking the possibility of an element to\n * be focused, for example element can have display: none applied to it or any other\n * circumstances could prevent actual focus.\n */\nfunction tuiIsNativeKeyboardFocusable(element) {\n    if (element.hasAttribute(`disabled`) || element.getAttribute(`tabIndex`) === `-1`) {\n        return false;\n    }\n    if ((tuiIsHTMLElement(element) && element.isContentEditable) ||\n        element.getAttribute(`tabIndex`) === `0`) {\n        return true;\n    }\n    switch (element.tagName) {\n        case `BUTTON`:\n        case `SELECT`:\n        case `TEXTAREA`:\n            return true;\n        case `VIDEO`:\n        case `AUDIO`:\n            return element.hasAttribute(`controls`);\n        case `INPUT`:\n            return element.getAttribute(`type`) !== `hidden`;\n        case `A`:\n        case `LINK`:\n            return element.hasAttribute(`href`);\n        default:\n            return false;\n    }\n}\n\nfunction tuiIsNativeMouseFocusable(element) {\n    return (!element.hasAttribute(`disabled`) &&\n        (element.getAttribute(`tabIndex`) === `-1` ||\n            tuiIsNativeKeyboardFocusable(element)));\n}\n\n/**\n * @description:\n * Finds the closest element that can be focused with a keyboard or mouse in theory\n */\nfunction tuiGetClosestFocusable({ initial, root, previous = false, keyboard = true, }) {\n    if (!root.ownerDocument) {\n        return null;\n    }\n    const check = keyboard ? tuiIsNativeKeyboardFocusable : tuiIsNativeMouseFocusable;\n    const treeWalker = root.ownerDocument.createTreeWalker(root, NodeFilter.SHOW_ELEMENT, svgNodeFilter);\n    treeWalker.currentNode = initial;\n    while (previous ? treeWalker.previousNode() : treeWalker.nextNode()) {\n        if (tuiIsHTMLElement(treeWalker.currentNode)) {\n            initial = treeWalker.currentNode;\n        }\n        if (tuiIsHTMLElement(initial) && check(initial)) {\n            return initial;\n        }\n    }\n    return null;\n}\n\n/**\n * Checks if element is focused.\n *\n * Could return true even after blur since element remains focused if you switch away from a browser tab.\n *\n * @param node or null (as a common return value of DOM nodes walking)\n * @return true if focused\n */\nfunction tuiIsNativeFocused(node) {\n    return !!(node === null || node === void 0 ? void 0 : node.ownerDocument) && tuiGetNativeFocused(node.ownerDocument) === node;\n}\n\n/**\n * Checks if focused element is within given element.\n *\n * @param node\n * @return true if focused node is contained within element\n */\nfunction tuiIsNativeFocusedIn(node) {\n    // !node.contains - check for IE11\n    if (!node.ownerDocument || !node.contains) {\n        return false;\n    }\n    const nativeFocused = tuiGetNativeFocused(node.ownerDocument);\n    return nativeFocused !== null && node.contains(nativeFocused);\n}\n\n/**\n * Utility method for moving focus in a list of elements\n *\n * @param currentIndex currently focused index\n * @param elements array of focusable elements\n * @param step a step to move focus by, typically -1 or 1\n */\nfunction tuiMoveFocus(currentIndex, elements, step) {\n    currentIndex += step;\n    while (currentIndex >= 0 && currentIndex < elements.length) {\n        elements[currentIndex].focus();\n        if (tuiIsNativeFocused(elements[currentIndex])) {\n            return;\n        }\n        currentIndex += step;\n    }\n}\n\n/**\n * Focuses or blurs element with mouse action imitation (to spoof {@link TuiFocusVisibleService})\n *\n * @param element\n * @param focused desired focused state\n * @param preventScroll optionally prevent native browser scroll after focus\n */\nfunction tuiSetNativeMouseFocused(element, focused = true, preventScroll = false) {\n    if (!element.ownerDocument) {\n        return;\n    }\n    if (typeof Event === `function`) {\n        element.dispatchEvent(new Event(`mousedown`, { bubbles: true, cancelable: true }));\n    }\n    else {\n        const event = element.ownerDocument.createEvent(`Event`);\n        event.initEvent(`mousedown`, true, true);\n        element.dispatchEvent(event);\n    }\n    if (focused) {\n        element.focus({ preventScroll });\n    }\n    else {\n        element.blur();\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiBlurNativeFocused, tuiGetClosestFocusable, tuiGetNativeFocused, tuiIsNativeFocused, tuiIsNativeFocusedIn, tuiIsNativeKeyboardFocusable, tuiIsNativeMouseFocusable, tuiMoveFocus, tuiSetNativeMouseFocused };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}