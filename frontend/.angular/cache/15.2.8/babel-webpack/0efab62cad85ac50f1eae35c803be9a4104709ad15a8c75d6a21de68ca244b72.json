{"ast":null,"code":"import { InjectionToken, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { tuiControlValueFactory } from '@taiga-ui/kit/utils';\nimport { tuiExtractI18n } from '@taiga-ui/i18n';\nimport { TUI_FIRST_DAY, TUI_LAST_DAY, TUI_DEFAULT_STRINGIFY, TUI_DEFAULT_IDENTITY_MATCHER, ALWAYS_FALSE_HANDLER } from '@taiga-ui/cdk';\n\n/**\n * Stream that emits calendar data change\n */\nconst TUI_CALENDAR_DATE_STREAM = new InjectionToken(`[TUI_CALENDAR_DATE_STREAM]`);\nfunction tuiDateStreamWithTransformer(transformer) {\n  return {\n    provide: TUI_CALENDAR_DATE_STREAM,\n    deps: [[new Optional(), new Self(), NgControl], [new Optional(), transformer]],\n    useFactory: tuiControlValueFactory\n  };\n}\n\n// TODO: Refactor to use `AbstractTuiValueTransformer` and add ability to provide it for all controls\n/**\n * Control value transformer of TuiDay to custom value format for InputDate* components\n */\nconst TUI_DATE_VALUE_TRANSFORMER = new InjectionToken(`[TUI_DATE_VALUE_TRANSFORMER]`);\n/**\n * Control value transformer for InputDateRange component\n */\nconst TUI_DATE_RANGE_VALUE_TRANSFORMER = new InjectionToken(`[TUI_DATE_RANGE_VALUE_TRANSFORMER]`);\n/**\n * Control value transformer for InputDateTime component\n */\nconst TUI_DATE_TIME_VALUE_TRANSFORMER = new InjectionToken(`[TUI_DATE_TIME_VALUE_TRANSFORMER]`);\nconst TUI_PROMPT_WORDS = new InjectionToken(`[TUI_PROMPT_WORDS]`, {\n  factory: tuiExtractI18n(`prompt`)\n});\nconst TUI_CANCEL_WORD = new InjectionToken(`[TUI_CANCEL_WORD]`, {\n  factory: tuiExtractI18n(`cancel`)\n});\nconst TUI_DONE_WORD = new InjectionToken(`[TUI_DONE_WORD]`, {\n  factory: tuiExtractI18n(`done`)\n});\nconst TUI_MORE_WORD = new InjectionToken(`[TUI_MORE_WORD]`, {\n  factory: tuiExtractI18n(`more`)\n});\nconst TUI_HIDE_TEXT = new InjectionToken(`[TUI_HIDE_TEXT]`, {\n  factory: tuiExtractI18n(`hide`)\n});\nconst TUI_SHOW_ALL_TEXT = new InjectionToken(`[TUI_SHOW_ALL_TEXT]`, {\n  factory: tuiExtractI18n(`showAll`)\n});\nconst TUI_OTHER_DATE_TEXT = new InjectionToken(`[TUI_OTHER_DATE_TEXT]`, {\n  factory: tuiExtractI18n(`otherDate`)\n});\nconst TUI_CHOOSE_DAY_OR_RANGE_TEXTS = new InjectionToken(`[TUI_CHOOSE_DAY_OR_RANGE_TEXTS]`, {\n  factory: tuiExtractI18n(`mobileCalendarTexts`)\n});\nconst TUI_FROM_TO_TEXTS = new InjectionToken(`[TUI_FROM_TO_TEXTS]`, {\n  factory: tuiExtractI18n(`range`)\n});\nconst TUI_PLUS_MINUS_TEXTS = new InjectionToken(`[TUI_PLUS_MINUS_TEXTS]`, {\n  factory: tuiExtractI18n(`countTexts`)\n});\nconst TUI_TIME_TEXTS = new InjectionToken(`[TUI_TIME_TEXTS]`, {\n  factory: tuiExtractI18n(`time`)\n});\nconst TUI_DATE_TEXTS = new InjectionToken(`[TUI_DATE_TEXTS]`, {\n  factory: tuiExtractI18n(`dateTexts`)\n});\nconst TUI_DIGITAL_INFORMATION_UNITS = new InjectionToken(`[TUI_DIGITAL_INFORMATION_UNITS]`, {\n  factory: tuiExtractI18n(`digitalInformationUnits`)\n});\nconst TUI_COPY_TEXTS = new InjectionToken(`[TUI_COPY_TEXTS]`, {\n  factory: tuiExtractI18n(`copyTexts`)\n});\nconst TUI_PASSWORD_TEXTS = new InjectionToken(`[TUI_PASSWORD_TEXTS]`, {\n  factory: tuiExtractI18n(`passwordTexts`)\n});\nconst TUI_CALENDAR_MONTHS = new InjectionToken(`[TUI_CALENDAR_MONTHS]`, {\n  factory: tuiExtractI18n(`shortCalendarMonths`)\n});\nconst TUI_FILE_TEXTS = new InjectionToken(`[TUI_FILE_TEXTS]`, {\n  factory: tuiExtractI18n(`fileTexts`)\n});\nconst TUI_PAGINATION_TEXTS = new InjectionToken(`[TUI_PAGINATION_TEXTS]`, {\n  factory: tuiExtractI18n(`pagination`)\n});\nconst TUI_INPUT_FILE_TEXTS = new InjectionToken(`[TUI_INPUT_FILE_TEXTS]`, {\n  factory: tuiExtractI18n(`inputFileTexts`)\n});\nconst TUI_MULTI_SELECT_TEXTS = new InjectionToken(`[TUI_MULTI_SELECT_TEXTS]`, {\n  factory: tuiExtractI18n(`multiSelectTexts`)\n});\nconst TUI_COUNTRIES = new InjectionToken(`[TUI_COUNTRIES]`, {\n  factory: tuiExtractI18n(`countries`)\n});\nconst TUI_INPUT_DATE_DEFAULT_OPTIONS = {\n  icon: ({\n    $implicit\n  }) => $implicit === `s` ? `tuiIconCalendar` : `tuiIconCalendarLarge`,\n  min: TUI_FIRST_DAY,\n  max: TUI_LAST_DAY,\n  nativePicker: false\n};\n/**\n * Default parameters for InputDate component\n */\nconst TUI_INPUT_DATE_OPTIONS = new InjectionToken(`[TUI_INPUT_DATE_OPTIONS]`, {\n  factory: () => TUI_INPUT_DATE_DEFAULT_OPTIONS\n});\nconst tuiInputDateOptionsProvider = options => ({\n  provide: TUI_INPUT_DATE_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_INPUT_DATE_DEFAULT_OPTIONS), options)\n});\nconst TUI_DEFAULT_ITEMS_HANDLERS = {\n  stringify: TUI_DEFAULT_STRINGIFY,\n  identityMatcher: TUI_DEFAULT_IDENTITY_MATCHER,\n  disabledItemHandler: ALWAYS_FALSE_HANDLER\n};\n/**\n * Default items handlers for components\n */\nconst TUI_ITEMS_HANDLERS = new InjectionToken(`[TUI_ITEMS_HANDLERS]`, {\n  factory: () => TUI_DEFAULT_ITEMS_HANDLERS\n});\nconst tuiItemsHandlersProvider = options => ({\n  provide: TUI_ITEMS_HANDLERS,\n  useValue: Object.assign(Object.assign({}, TUI_DEFAULT_ITEMS_HANDLERS), options)\n});\n\n/**\n * A component for mobile data picker\n */\nconst TUI_MOBILE_CALENDAR = new InjectionToken(`[TUI_MOBILE_CALENDAR]`);\n\n/**\n * A function to get localized formatted month\n */\nconst TUI_MONTH_FORMATTER = new InjectionToken(`[TUI_MONTH_FORMATTER]`);\n\n/**\n * Margin between tabs\n */\nconst TUI_TAB_MARGIN = new InjectionToken(`[TUI_TAB_MARGIN]`, {\n  factory: () => 24\n});\n\n/**\n * Validation errors\n */\nconst TUI_VALIDATION_ERRORS = new InjectionToken(`[TUI_VALIDATION_ERRORS]`, {\n  factory: () => ({})\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_CALENDAR_DATE_STREAM, TUI_CALENDAR_MONTHS, TUI_CANCEL_WORD, TUI_CHOOSE_DAY_OR_RANGE_TEXTS, TUI_COPY_TEXTS, TUI_COUNTRIES, TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_DATE_VALUE_TRANSFORMER, TUI_DEFAULT_ITEMS_HANDLERS, TUI_DIGITAL_INFORMATION_UNITS, TUI_DONE_WORD, TUI_FILE_TEXTS, TUI_FROM_TO_TEXTS, TUI_HIDE_TEXT, TUI_INPUT_DATE_DEFAULT_OPTIONS, TUI_INPUT_DATE_OPTIONS, TUI_INPUT_FILE_TEXTS, TUI_ITEMS_HANDLERS, TUI_MOBILE_CALENDAR, TUI_MONTH_FORMATTER, TUI_MORE_WORD, TUI_MULTI_SELECT_TEXTS, TUI_OTHER_DATE_TEXT, TUI_PAGINATION_TEXTS, TUI_PASSWORD_TEXTS, TUI_PLUS_MINUS_TEXTS, TUI_PROMPT_WORDS, TUI_SHOW_ALL_TEXT, TUI_TAB_MARGIN, TUI_TIME_TEXTS, TUI_VALIDATION_ERRORS, tuiDateStreamWithTransformer, tuiInputDateOptionsProvider, tuiItemsHandlersProvider };","map":{"version":3,"names":["InjectionToken","Optional","Self","NgControl","tuiControlValueFactory","tuiExtractI18n","TUI_FIRST_DAY","TUI_LAST_DAY","TUI_DEFAULT_STRINGIFY","TUI_DEFAULT_IDENTITY_MATCHER","ALWAYS_FALSE_HANDLER","TUI_CALENDAR_DATE_STREAM","tuiDateStreamWithTransformer","transformer","provide","deps","useFactory","TUI_DATE_VALUE_TRANSFORMER","TUI_DATE_RANGE_VALUE_TRANSFORMER","TUI_DATE_TIME_VALUE_TRANSFORMER","TUI_PROMPT_WORDS","factory","TUI_CANCEL_WORD","TUI_DONE_WORD","TUI_MORE_WORD","TUI_HIDE_TEXT","TUI_SHOW_ALL_TEXT","TUI_OTHER_DATE_TEXT","TUI_CHOOSE_DAY_OR_RANGE_TEXTS","TUI_FROM_TO_TEXTS","TUI_PLUS_MINUS_TEXTS","TUI_TIME_TEXTS","TUI_DATE_TEXTS","TUI_DIGITAL_INFORMATION_UNITS","TUI_COPY_TEXTS","TUI_PASSWORD_TEXTS","TUI_CALENDAR_MONTHS","TUI_FILE_TEXTS","TUI_PAGINATION_TEXTS","TUI_INPUT_FILE_TEXTS","TUI_MULTI_SELECT_TEXTS","TUI_COUNTRIES","TUI_INPUT_DATE_DEFAULT_OPTIONS","icon","$implicit","min","max","nativePicker","TUI_INPUT_DATE_OPTIONS","tuiInputDateOptionsProvider","options","useValue","Object","assign","TUI_DEFAULT_ITEMS_HANDLERS","stringify","identityMatcher","disabledItemHandler","TUI_ITEMS_HANDLERS","tuiItemsHandlersProvider","TUI_MOBILE_CALENDAR","TUI_MONTH_FORMATTER","TUI_TAB_MARGIN","TUI_VALIDATION_ERRORS"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-tokens.js"],"sourcesContent":["import { InjectionToken, Optional, Self } from '@angular/core';\nimport { NgControl } from '@angular/forms';\nimport { tuiControlValueFactory } from '@taiga-ui/kit/utils';\nimport { tuiExtractI18n } from '@taiga-ui/i18n';\nimport { TUI_FIRST_DAY, TUI_LAST_DAY, TUI_DEFAULT_STRINGIFY, TUI_DEFAULT_IDENTITY_MATCHER, ALWAYS_FALSE_HANDLER } from '@taiga-ui/cdk';\n\n/**\n * Stream that emits calendar data change\n */\nconst TUI_CALENDAR_DATE_STREAM = new InjectionToken(`[TUI_CALENDAR_DATE_STREAM]`);\nfunction tuiDateStreamWithTransformer(transformer) {\n    return {\n        provide: TUI_CALENDAR_DATE_STREAM,\n        deps: [\n            [new Optional(), new Self(), NgControl],\n            [new Optional(), transformer],\n        ],\n        useFactory: tuiControlValueFactory,\n    };\n}\n\n// TODO: Refactor to use `AbstractTuiValueTransformer` and add ability to provide it for all controls\n/**\n * Control value transformer of TuiDay to custom value format for InputDate* components\n */\nconst TUI_DATE_VALUE_TRANSFORMER = new InjectionToken(`[TUI_DATE_VALUE_TRANSFORMER]`);\n/**\n * Control value transformer for InputDateRange component\n */\nconst TUI_DATE_RANGE_VALUE_TRANSFORMER = new InjectionToken(`[TUI_DATE_RANGE_VALUE_TRANSFORMER]`);\n/**\n * Control value transformer for InputDateTime component\n */\nconst TUI_DATE_TIME_VALUE_TRANSFORMER = new InjectionToken(`[TUI_DATE_TIME_VALUE_TRANSFORMER]`);\n\nconst TUI_PROMPT_WORDS = new InjectionToken(`[TUI_PROMPT_WORDS]`, {\n    factory: tuiExtractI18n(`prompt`),\n});\nconst TUI_CANCEL_WORD = new InjectionToken(`[TUI_CANCEL_WORD]`, {\n    factory: tuiExtractI18n(`cancel`),\n});\nconst TUI_DONE_WORD = new InjectionToken(`[TUI_DONE_WORD]`, {\n    factory: tuiExtractI18n(`done`),\n});\nconst TUI_MORE_WORD = new InjectionToken(`[TUI_MORE_WORD]`, {\n    factory: tuiExtractI18n(`more`),\n});\nconst TUI_HIDE_TEXT = new InjectionToken(`[TUI_HIDE_TEXT]`, {\n    factory: tuiExtractI18n(`hide`),\n});\nconst TUI_SHOW_ALL_TEXT = new InjectionToken(`[TUI_SHOW_ALL_TEXT]`, {\n    factory: tuiExtractI18n(`showAll`),\n});\nconst TUI_OTHER_DATE_TEXT = new InjectionToken(`[TUI_OTHER_DATE_TEXT]`, {\n    factory: tuiExtractI18n(`otherDate`),\n});\nconst TUI_CHOOSE_DAY_OR_RANGE_TEXTS = new InjectionToken(`[TUI_CHOOSE_DAY_OR_RANGE_TEXTS]`, {\n    factory: tuiExtractI18n(`mobileCalendarTexts`),\n});\nconst TUI_FROM_TO_TEXTS = new InjectionToken(`[TUI_FROM_TO_TEXTS]`, {\n    factory: tuiExtractI18n(`range`),\n});\nconst TUI_PLUS_MINUS_TEXTS = new InjectionToken(`[TUI_PLUS_MINUS_TEXTS]`, {\n    factory: tuiExtractI18n(`countTexts`),\n});\nconst TUI_TIME_TEXTS = new InjectionToken(`[TUI_TIME_TEXTS]`, {\n    factory: tuiExtractI18n(`time`),\n});\nconst TUI_DATE_TEXTS = new InjectionToken(`[TUI_DATE_TEXTS]`, {\n    factory: tuiExtractI18n(`dateTexts`),\n});\nconst TUI_DIGITAL_INFORMATION_UNITS = new InjectionToken(`[TUI_DIGITAL_INFORMATION_UNITS]`, {\n    factory: tuiExtractI18n(`digitalInformationUnits`),\n});\nconst TUI_COPY_TEXTS = new InjectionToken(`[TUI_COPY_TEXTS]`, {\n    factory: tuiExtractI18n(`copyTexts`),\n});\nconst TUI_PASSWORD_TEXTS = new InjectionToken(`[TUI_PASSWORD_TEXTS]`, {\n    factory: tuiExtractI18n(`passwordTexts`),\n});\nconst TUI_CALENDAR_MONTHS = new InjectionToken(`[TUI_CALENDAR_MONTHS]`, {\n    factory: tuiExtractI18n(`shortCalendarMonths`),\n});\nconst TUI_FILE_TEXTS = new InjectionToken(`[TUI_FILE_TEXTS]`, {\n    factory: tuiExtractI18n(`fileTexts`),\n});\nconst TUI_PAGINATION_TEXTS = new InjectionToken(`[TUI_PAGINATION_TEXTS]`, {\n    factory: tuiExtractI18n(`pagination`),\n});\nconst TUI_INPUT_FILE_TEXTS = new InjectionToken(`[TUI_INPUT_FILE_TEXTS]`, {\n    factory: tuiExtractI18n(`inputFileTexts`),\n});\nconst TUI_MULTI_SELECT_TEXTS = new InjectionToken(`[TUI_MULTI_SELECT_TEXTS]`, {\n    factory: tuiExtractI18n(`multiSelectTexts`),\n});\nconst TUI_COUNTRIES = new InjectionToken(`[TUI_COUNTRIES]`, {\n    factory: tuiExtractI18n(`countries`),\n});\n\nconst TUI_INPUT_DATE_DEFAULT_OPTIONS = {\n    icon: ({ $implicit }) => $implicit === `s` ? `tuiIconCalendar` : `tuiIconCalendarLarge`,\n    min: TUI_FIRST_DAY,\n    max: TUI_LAST_DAY,\n    nativePicker: false,\n};\n/**\n * Default parameters for InputDate component\n */\nconst TUI_INPUT_DATE_OPTIONS = new InjectionToken(`[TUI_INPUT_DATE_OPTIONS]`, {\n    factory: () => TUI_INPUT_DATE_DEFAULT_OPTIONS,\n});\nconst tuiInputDateOptionsProvider = (options) => ({\n    provide: TUI_INPUT_DATE_OPTIONS,\n    useValue: Object.assign(Object.assign({}, TUI_INPUT_DATE_DEFAULT_OPTIONS), options),\n});\n\nconst TUI_DEFAULT_ITEMS_HANDLERS = {\n    stringify: TUI_DEFAULT_STRINGIFY,\n    identityMatcher: TUI_DEFAULT_IDENTITY_MATCHER,\n    disabledItemHandler: ALWAYS_FALSE_HANDLER,\n};\n/**\n * Default items handlers for components\n */\nconst TUI_ITEMS_HANDLERS = new InjectionToken(`[TUI_ITEMS_HANDLERS]`, {\n    factory: () => TUI_DEFAULT_ITEMS_HANDLERS,\n});\nconst tuiItemsHandlersProvider = (options) => ({\n    provide: TUI_ITEMS_HANDLERS,\n    useValue: Object.assign(Object.assign({}, TUI_DEFAULT_ITEMS_HANDLERS), options),\n});\n\n/**\n * A component for mobile data picker\n */\nconst TUI_MOBILE_CALENDAR = new InjectionToken(`[TUI_MOBILE_CALENDAR]`);\n\n/**\n * A function to get localized formatted month\n */\nconst TUI_MONTH_FORMATTER = new InjectionToken(`[TUI_MONTH_FORMATTER]`);\n\n/**\n * Margin between tabs\n */\nconst TUI_TAB_MARGIN = new InjectionToken(`[TUI_TAB_MARGIN]`, {\n    factory: () => 24,\n});\n\n/**\n * Validation errors\n */\nconst TUI_VALIDATION_ERRORS = new InjectionToken(`[TUI_VALIDATION_ERRORS]`, {\n    factory: () => ({}),\n});\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_CALENDAR_DATE_STREAM, TUI_CALENDAR_MONTHS, TUI_CANCEL_WORD, TUI_CHOOSE_DAY_OR_RANGE_TEXTS, TUI_COPY_TEXTS, TUI_COUNTRIES, TUI_DATE_RANGE_VALUE_TRANSFORMER, TUI_DATE_TEXTS, TUI_DATE_TIME_VALUE_TRANSFORMER, TUI_DATE_VALUE_TRANSFORMER, TUI_DEFAULT_ITEMS_HANDLERS, TUI_DIGITAL_INFORMATION_UNITS, TUI_DONE_WORD, TUI_FILE_TEXTS, TUI_FROM_TO_TEXTS, TUI_HIDE_TEXT, TUI_INPUT_DATE_DEFAULT_OPTIONS, TUI_INPUT_DATE_OPTIONS, TUI_INPUT_FILE_TEXTS, TUI_ITEMS_HANDLERS, TUI_MOBILE_CALENDAR, TUI_MONTH_FORMATTER, TUI_MORE_WORD, TUI_MULTI_SELECT_TEXTS, TUI_OTHER_DATE_TEXT, TUI_PAGINATION_TEXTS, TUI_PASSWORD_TEXTS, TUI_PLUS_MINUS_TEXTS, TUI_PROMPT_WORDS, TUI_SHOW_ALL_TEXT, TUI_TAB_MARGIN, TUI_TIME_TEXTS, TUI_VALIDATION_ERRORS, tuiDateStreamWithTransformer, tuiInputDateOptionsProvider, tuiItemsHandlersProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}