{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, ChangeDetectorRef, TemplateRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, Output, ContentChild, Directive, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport * as i2 from '@taiga-ui/cdk';\nimport { AbstractTuiControl, tuiIsNativeFocused, tuiGetClipboardDataText, TuiDestroyService, tuiAsFocusableItemAccessor, tuiAsControl, tuiRequiredSetter, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { tuiFormatPhone, TUI_MASK_SYMBOLS_REGEXP, TUI_SELECTION_STREAM, TUI_TEXTFIELD_CLEANER, tuiAsDataListHost, TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i3 from '@taiga-ui/kit/directives';\nimport { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i5 from 'rxjs';\nconst _c0 = [\"*\", [[\"input\"]]];\nconst _c1 = [\"*\", \"input\"];\nconst TUI_INPUT_PHONE_DEFAULT_OPTIONS = {\n  phoneMaskAfterCountryCode: `### ###-##-##`,\n  allowText: false,\n  countryCode: `+7`\n};\n/**\n * Default parameters for input phone component\n */\nconst TUI_INPUT_PHONE_OPTIONS = new InjectionToken(`[TUI_INPUT_PHONE_OPTIONS]`, {\n  factory: () => TUI_INPUT_PHONE_DEFAULT_OPTIONS\n});\nconst tuiInputPhoneOptionsProvider = options => ({\n  provide: TUI_INPUT_PHONE_OPTIONS,\n  useValue: Object.assign(Object.assign({}, TUI_INPUT_PHONE_DEFAULT_OPTIONS), options)\n});\nclass TuiInputPhoneComponent extends AbstractTuiControl {\n  constructor(control, destroy$, cdr, selection$, textfieldCleaner, options) {\n    super(control, cdr);\n    this.textfieldCleaner = textfieldCleaner;\n    this.options = options;\n    this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;\n    this.allowText = this.options.allowText;\n    this.search = '';\n    this.searchChange = new EventEmitter();\n    this.textMaskOptions = {\n      mask: value => this.allowText && !this.value && isText(value) && value !== '+' ? false : [...this.countryCode.split(''), ' ', ...this.phoneMaskAfterCountryCode.replace(/[^#\\- ()]+/g, '').split('').map(item => item === '#' ? /\\d/ : item)],\n      pipe: value => {\n        if (this.allowText) {\n          return value;\n        }\n        return value === '' && this.focused && !this.readOnly ? `${this.countryCode} ` : value.replace(/-$/, '');\n      },\n      guide: false\n    };\n    this.countryCode = this.options.countryCode;\n    this.open = false;\n    selection$.pipe(takeUntil(destroy$)).subscribe(() => {\n      this.setCaretPosition();\n    });\n  }\n  set countryCodeSetter(countryCode) {\n    this.updateValueWithNewCountryCode(countryCode);\n    this.countryCode = countryCode;\n  }\n  get nativeFocusableElement() {\n    return !this.textfield || this.computedDisabled ? null : this.textfield.nativeFocusableElement;\n  }\n  get focused() {\n    return tuiIsNativeFocused(this.nativeFocusableElement) || !!this.dropdown && this.dropdown.focused;\n  }\n  get computedValue() {\n    return this.value ? tuiFormatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode) : this.search || '';\n  }\n  get inputMode() {\n    return this.allowText ? 'text' : 'numeric';\n  }\n  get canOpen() {\n    return this.interactive && !!this.datalist;\n  }\n  get canClean() {\n    return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;\n  }\n  onDrop(event) {\n    if (!event.dataTransfer) {\n      return;\n    }\n    this.setValueWithoutPrefix(event.dataTransfer.getData('text'));\n    event.preventDefault();\n  }\n  onPaste(event) {\n    this.setValueWithoutPrefix(tuiGetClipboardDataText(event));\n  }\n  onActiveZone(active) {\n    this.updateFocused(active);\n    if (active && !this.computedValue && !this.readOnly && !this.allowText) {\n      this.updateSearch(this.countryCode);\n      return;\n    }\n    if (this.computedValue === this.countryCode || this.search !== null && Number.isNaN(parseInt(this.search.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10))) {\n      this.updateSearch('');\n    }\n  }\n  onBackspace(event) {\n    const target = event.target;\n    if ((target.selectionStart || 0) <= this.nonRemovableLength && target.selectionStart === target.selectionEnd) {\n      event.preventDefault();\n    }\n  }\n  onValueChange(value) {\n    value = value === '' ? this.countryCode : value;\n    const parsed = isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, '').slice(0, this.maxPhoneLength);\n    this.updateSearch(parsed);\n    this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;\n    this.open = true;\n  }\n  handleOption(item) {\n    this.focusInput();\n    this.value = item;\n    this.updateSearch('');\n    this.open = false;\n  }\n  setDisabledState() {\n    super.setDisabledState();\n    this.open = false;\n  }\n  writeValue(value) {\n    super.writeValue(value);\n    this.updateSearch('');\n  }\n  getFallbackValue() {\n    return '';\n  }\n  get caretIsInForbiddenArea() {\n    const {\n      nativeFocusableElement\n    } = this;\n    if (!nativeFocusableElement) {\n      return false;\n    }\n    const {\n      selectionStart,\n      selectionEnd\n    } = nativeFocusableElement;\n    return tuiIsNativeFocused(nativeFocusableElement) && selectionStart !== null && selectionStart < this.nonRemovableLength && selectionStart === selectionEnd;\n  }\n  get nonRemovableLength() {\n    return this.isTextValue ? 0 : this.countryCode.length + 1;\n  }\n  get maxPhoneLength() {\n    return this.countryCode.length + this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length;\n  }\n  get isTextValue() {\n    return !!this.search && isText(this.search);\n  }\n  setCaretPosition() {\n    if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {\n      this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);\n    }\n  }\n  setValueWithoutPrefix(value) {\n    if (this.readOnly) {\n      return;\n    }\n    this.open = true;\n    this.value = this.cleanValue(value);\n    this.updateSearch(this.allowText && isText(value) ? value : value.replace(TUI_MASK_SYMBOLS_REGEXP, ''));\n  }\n  cleanValue(value) {\n    const reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.slice(1));\n    const oldValueExist = this.value.length > this.countryCode.length && this.value.length < this.maxPhoneLength;\n    const newValueLength = value.replace(TUI_MASK_SYMBOLS_REGEXP, '').length;\n    const cleanNewValue = value.replace(/[^0-9]+/g, '');\n    const selectionLength = String(getSelection()).length;\n    if (oldValueExist && selectionLength === 0) {\n      return `${this.value}${cleanNewValue}`.slice(0, this.maxPhoneLength);\n    }\n    if (newValueLength < this.maxPhoneLength - 1) {\n      return `${this.countryCode}${cleanNewValue}`.slice(0, this.maxPhoneLength);\n    }\n    return `${this.countryCode}${cleanNewValue.replace(reg, '')}`.slice(0, this.maxPhoneLength);\n  }\n  focusInput() {\n    if (this.nativeFocusableElement) {\n      this.nativeFocusableElement.focus({\n        preventScroll: true\n      });\n    }\n  }\n  updateSearch(search) {\n    if (this.search === search) {\n      return;\n    }\n    this.search = search;\n    this.searchChange.emit(search);\n  }\n  updateValueWithNewCountryCode(newCountryCode) {\n    if (!this.isTextValue) {\n      this.value = this.value.replace(this.countryCode, newCountryCode);\n    }\n  }\n}\nTuiInputPhoneComponent.ɵfac = function TuiInputPhoneComponent_Factory(t) {\n  return new (t || TuiInputPhoneComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(TuiDestroyService, 2), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_SELECTION_STREAM), i0.ɵɵdirectiveInject(TUI_TEXTFIELD_CLEANER), i0.ɵɵdirectiveInject(TUI_INPUT_PHONE_OPTIONS));\n};\nTuiInputPhoneComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TuiInputPhoneComponent,\n  selectors: [[\"tui-input-phone\"]],\n  contentQueries: function TuiInputPhoneComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, TuiDataListDirective, 5, TemplateRef);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.datalist = _t.first);\n    }\n  },\n  viewQuery: function TuiInputPhoneComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TuiHostedDropdownComponent, 5);\n      i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.dropdown = _t.first);\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.textfield = _t.first);\n    }\n  },\n  inputs: {\n    countryCodeSetter: [\"countryCode\", \"countryCodeSetter\"],\n    phoneMaskAfterCountryCode: \"phoneMaskAfterCountryCode\",\n    allowText: \"allowText\",\n    search: \"search\"\n  },\n  outputs: {\n    searchChange: \"searchChange\"\n  },\n  features: [i0.ɵɵProvidersFeature([TuiDestroyService, tuiAsFocusableItemAccessor(TuiInputPhoneComponent), tuiAsControl(TuiInputPhoneComponent), tuiAsDataListHost(TuiInputPhoneComponent)], [FIXED_DROPDOWN_CONTROLLER_PROVIDER]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c1,\n  decls: 4,\n  vars: 13,\n  consts: [[1, \"t-hosted\", 3, \"canOpen\", \"content\", \"open\", \"openChange\", \"tuiActiveZoneChange\"], [\"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"pseudoHover\", \"pseudoFocus\", \"invalid\", \"nativeId\", \"readOnly\", \"disabled\", \"focusable\", \"textMask\", \"value\", \"tuiTextfieldCleaner\", \"valueChange\", \"drop\", \"keydown.backspace\", \"paste.prevent\"]],\n  template: function TuiInputPhoneComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵelementStart(0, \"tui-hosted-dropdown\", 0);\n      i0.ɵɵlistener(\"openChange\", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_openChange_0_listener($event) {\n        return ctx.open = $event;\n      })(\"tuiActiveZoneChange\", function TuiInputPhoneComponent_Template_tui_hosted_dropdown_tuiActiveZoneChange_0_listener($event) {\n        return ctx.onActiveZone($event);\n      });\n      i0.ɵɵelementStart(1, \"tui-primitive-textfield\", 1);\n      i0.ɵɵlistener(\"valueChange\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_valueChange_1_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"drop\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_drop_1_listener($event) {\n        return ctx.onDrop($event);\n      })(\"keydown.backspace\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_keydown_backspace_1_listener($event) {\n        return ctx.onBackspace($event);\n      })(\"paste.prevent\", function TuiInputPhoneComponent_Template_tui_primitive_textfield_paste_prevent_1_listener($event) {\n        return ctx.onPaste($event);\n      });\n      i0.ɵɵprojection(2);\n      i0.ɵɵprojection(3, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"canOpen\", ctx.canOpen)(\"content\", ctx.datalist || \"\")(\"open\", ctx.open);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"pseudoHover\", ctx.pseudoHover)(\"pseudoFocus\", ctx.computedFocused)(\"invalid\", ctx.computedInvalid)(\"nativeId\", ctx.nativeId)(\"readOnly\", ctx.readOnly)(\"disabled\", ctx.computedDisabled)(\"focusable\", ctx.focusable)(\"textMask\", ctx.textMaskOptions)(\"value\", ctx.computedValue)(\"tuiTextfieldCleaner\", ctx.canClean);\n    }\n  },\n  dependencies: [i1.TuiHostedDropdownComponent, i1.TuiPrimitiveTextfieldComponent, i2.TuiActiveZoneDirective, i1.TuiPrimitiveTextfieldDirective, i3.TuiValueAccessorDirective, i3.MaskedInputDirective, i1.TuiTextfieldCleanerDirective],\n  styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}._disabled[_nghost-%COMP%]{pointer-events:none}.t-hosted[_ngcontent-%COMP%]{display:block;border-radius:inherit}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}\"],\n  changeDetection: 0\n});\n__decorate([tuiRequiredSetter()], TuiInputPhoneComponent.prototype, \"countryCodeSetter\", null);\n__decorate([tuiDefaultProp()], TuiInputPhoneComponent.prototype, \"phoneMaskAfterCountryCode\", void 0);\n__decorate([tuiDefaultProp()], TuiInputPhoneComponent.prototype, \"allowText\", void 0);\n__decorate([tuiDefaultProp()], TuiInputPhoneComponent.prototype, \"search\", void 0);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputPhoneComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tui-input-phone',\n      templateUrl: './input-phone.template.html',\n      styleUrls: ['./input-phone.style.less'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [TuiDestroyService, tuiAsFocusableItemAccessor(TuiInputPhoneComponent), tuiAsControl(TuiInputPhoneComponent), tuiAsDataListHost(TuiInputPhoneComponent)],\n      viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER]\n    }]\n  }], function () {\n    return [{\n      type: i4.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [NgControl]\n      }]\n    }, {\n      type: i5.Observable,\n      decorators: [{\n        type: Self\n      }, {\n        type: Inject,\n        args: [TuiDestroyService]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef,\n      decorators: [{\n        type: Inject,\n        args: [ChangeDetectorRef]\n      }]\n    }, {\n      type: i5.Observable,\n      decorators: [{\n        type: Inject,\n        args: [TUI_SELECTION_STREAM]\n      }]\n    }, {\n      type: i1.TuiTextfieldCleanerDirective,\n      decorators: [{\n        type: Inject,\n        args: [TUI_TEXTFIELD_CLEANER]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TUI_INPUT_PHONE_OPTIONS]\n      }]\n    }];\n  }, {\n    dropdown: [{\n      type: ViewChild,\n      args: [TuiHostedDropdownComponent]\n    }],\n    textfield: [{\n      type: ViewChild,\n      args: [TuiPrimitiveTextfieldComponent]\n    }],\n    countryCodeSetter: [{\n      type: Input,\n      args: ['countryCode']\n    }],\n    phoneMaskAfterCountryCode: [{\n      type: Input\n    }],\n    allowText: [{\n      type: Input\n    }],\n    search: [{\n      type: Input\n    }],\n    searchChange: [{\n      type: Output\n    }],\n    datalist: [{\n      type: ContentChild,\n      args: [TuiDataListDirective, {\n        read: TemplateRef\n      }]\n    }]\n  });\n})();\nfunction isText(value) {\n  return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));\n}\nclass TuiInputPhoneDirective extends AbstractTuiTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n  process(input) {\n    this.input = input;\n  }\n  ngDoCheck() {\n    if (!this.input) {\n      return;\n    }\n    this.input.type = 'tel';\n    this.input.inputMode = this.host.inputMode;\n  }\n}\nTuiInputPhoneDirective.ɵfac = /* @__PURE__ */function () {\n  let ɵTuiInputPhoneDirective_BaseFactory;\n  return function TuiInputPhoneDirective_Factory(t) {\n    return (ɵTuiInputPhoneDirective_BaseFactory || (ɵTuiInputPhoneDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputPhoneDirective)))(t || TuiInputPhoneDirective);\n  };\n}();\nTuiInputPhoneDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiInputPhoneDirective,\n  selectors: [[\"tui-input-phone\"]],\n  features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputPhoneDirective)]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputPhoneDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'tui-input-phone',\n      providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)]\n    }]\n  }], null, null);\n})();\nclass TuiInputPhoneModule {}\nTuiInputPhoneModule.ɵfac = function TuiInputPhoneModule_Factory(t) {\n  return new (t || TuiInputPhoneModule)();\n};\nTuiInputPhoneModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TuiInputPhoneModule\n});\nTuiInputPhoneModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[TextMaskModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputPhoneModule, [{\n    type: NgModule,\n    args: [{\n      imports: [TextMaskModule, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiActiveZoneModule, TuiValueAccessorModule],\n      declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],\n      exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_DEFAULT_OPTIONS, TUI_INPUT_PHONE_OPTIONS, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, tuiInputPhoneOptionsProvider };","map":{"version":3,"names":["__decorate","i0","InjectionToken","EventEmitter","ChangeDetectorRef","TemplateRef","Component","ChangeDetectionStrategy","Optional","Self","Inject","ViewChild","Input","Output","ContentChild","Directive","NgModule","i4","NgControl","i2","AbstractTuiControl","tuiIsNativeFocused","tuiGetClipboardDataText","TuiDestroyService","tuiAsFocusableItemAccessor","tuiAsControl","tuiRequiredSetter","tuiDefaultProp","TuiActiveZoneModule","i1","tuiFormatPhone","TUI_MASK_SYMBOLS_REGEXP","TUI_SELECTION_STREAM","TUI_TEXTFIELD_CLEANER","tuiAsDataListHost","TuiDataListDirective","TuiHostedDropdownComponent","TuiPrimitiveTextfieldComponent","AbstractTuiTextfieldHost","tuiAsTextfieldHost","TuiPrimitiveTextfieldModule","TuiHostedDropdownModule","TuiTextfieldControllerModule","TuiTextfieldComponent","FIXED_DROPDOWN_CONTROLLER_PROVIDER","takeUntil","i3","TextMaskModule","TuiValueAccessorModule","i5","TUI_INPUT_PHONE_DEFAULT_OPTIONS","phoneMaskAfterCountryCode","allowText","countryCode","TUI_INPUT_PHONE_OPTIONS","factory","tuiInputPhoneOptionsProvider","options","provide","useValue","Object","assign","TuiInputPhoneComponent","constructor","control","destroy$","cdr","selection$","textfieldCleaner","search","searchChange","textMaskOptions","mask","value","isText","split","replace","map","item","pipe","focused","readOnly","guide","open","subscribe","setCaretPosition","countryCodeSetter","updateValueWithNewCountryCode","nativeFocusableElement","textfield","computedDisabled","dropdown","computedValue","inputMode","canOpen","interactive","datalist","canClean","cleaner","onDrop","event","dataTransfer","setValueWithoutPrefix","getData","preventDefault","onPaste","onActiveZone","active","updateFocused","updateSearch","Number","isNaN","parseInt","onBackspace","target","selectionStart","nonRemovableLength","selectionEnd","onValueChange","parsed","slice","maxPhoneLength","handleOption","focusInput","setDisabledState","writeValue","getFallbackValue","caretIsInForbiddenArea","isTextValue","length","setSelectionRange","cleanValue","reg","RegExp","oldValueExist","newValueLength","cleanNewValue","selectionLength","String","getSelection","focus","preventScroll","emit","newCountryCode","ɵfac","ɵcmp","TuiActiveZoneDirective","TuiPrimitiveTextfieldDirective","TuiValueAccessorDirective","MaskedInputDirective","TuiTextfieldCleanerDirective","prototype","type","args","selector","templateUrl","styleUrls","changeDetection","OnPush","providers","viewProviders","decorators","Observable","undefined","read","TuiInputPhoneDirective","host","process","input","ngDoCheck","ɵdir","TuiInputPhoneModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-phone.js"],"sourcesContent":["import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { InjectionToken, EventEmitter, ChangeDetectorRef, TemplateRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, Output, ContentChild, Directive, NgModule } from '@angular/core';\nimport * as i4 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport * as i2 from '@taiga-ui/cdk';\nimport { AbstractTuiControl, tuiIsNativeFocused, tuiGetClipboardDataText, TuiDestroyService, tuiAsFocusableItemAccessor, tuiAsControl, tuiRequiredSetter, tuiDefaultProp, TuiActiveZoneModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { tuiFormatPhone, TUI_MASK_SYMBOLS_REGEXP, TUI_SELECTION_STREAM, TUI_TEXTFIELD_CLEANER, tuiAsDataListHost, TuiDataListDirective, TuiHostedDropdownComponent, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiHostedDropdownModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport { FIXED_DROPDOWN_CONTROLLER_PROVIDER } from '@taiga-ui/kit/providers';\nimport { takeUntil } from 'rxjs/operators';\nimport * as i3 from '@taiga-ui/kit/directives';\nimport { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i5 from 'rxjs';\n\nconst TUI_INPUT_PHONE_DEFAULT_OPTIONS = {\n    phoneMaskAfterCountryCode: `### ###-##-##`,\n    allowText: false,\n    countryCode: `+7`,\n};\n/**\n * Default parameters for input phone component\n */\nconst TUI_INPUT_PHONE_OPTIONS = new InjectionToken(`[TUI_INPUT_PHONE_OPTIONS]`, {\n    factory: () => TUI_INPUT_PHONE_DEFAULT_OPTIONS,\n});\nconst tuiInputPhoneOptionsProvider = (options) => ({\n    provide: TUI_INPUT_PHONE_OPTIONS,\n    useValue: Object.assign(Object.assign({}, TUI_INPUT_PHONE_DEFAULT_OPTIONS), options),\n});\n\nclass TuiInputPhoneComponent extends AbstractTuiControl {\n    constructor(control, destroy$, cdr, selection$, textfieldCleaner, options) {\n        super(control, cdr);\n        this.textfieldCleaner = textfieldCleaner;\n        this.options = options;\n        this.phoneMaskAfterCountryCode = this.options.phoneMaskAfterCountryCode;\n        this.allowText = this.options.allowText;\n        this.search = '';\n        this.searchChange = new EventEmitter();\n        this.textMaskOptions = {\n            mask: value => this.allowText && !this.value && isText(value) && value !== '+'\n                ? false\n                : [\n                    ...this.countryCode.split(''),\n                    ' ',\n                    ...this.phoneMaskAfterCountryCode\n                        .replace(/[^#\\- ()]+/g, '')\n                        .split('')\n                        .map(item => (item === '#' ? /\\d/ : item)),\n                ],\n            pipe: value => {\n                if (this.allowText) {\n                    return value;\n                }\n                return value === '' && this.focused && !this.readOnly\n                    ? `${this.countryCode} `\n                    : value.replace(/-$/, '');\n            },\n            guide: false,\n        };\n        this.countryCode = this.options.countryCode;\n        this.open = false;\n        selection$.pipe(takeUntil(destroy$)).subscribe(() => {\n            this.setCaretPosition();\n        });\n    }\n    set countryCodeSetter(countryCode) {\n        this.updateValueWithNewCountryCode(countryCode);\n        this.countryCode = countryCode;\n    }\n    get nativeFocusableElement() {\n        return !this.textfield || this.computedDisabled\n            ? null\n            : this.textfield.nativeFocusableElement;\n    }\n    get focused() {\n        return (tuiIsNativeFocused(this.nativeFocusableElement) ||\n            (!!this.dropdown && this.dropdown.focused));\n    }\n    get computedValue() {\n        return this.value\n            ? tuiFormatPhone(this.value, this.countryCode, this.phoneMaskAfterCountryCode)\n            : this.search || '';\n    }\n    get inputMode() {\n        return this.allowText ? 'text' : 'numeric';\n    }\n    get canOpen() {\n        return this.interactive && !!this.datalist;\n    }\n    get canClean() {\n        return this.computedValue !== this.countryCode && this.textfieldCleaner.cleaner;\n    }\n    onDrop(event) {\n        if (!event.dataTransfer) {\n            return;\n        }\n        this.setValueWithoutPrefix(event.dataTransfer.getData('text'));\n        event.preventDefault();\n    }\n    onPaste(event) {\n        this.setValueWithoutPrefix(tuiGetClipboardDataText(event));\n    }\n    onActiveZone(active) {\n        this.updateFocused(active);\n        if (active && !this.computedValue && !this.readOnly && !this.allowText) {\n            this.updateSearch(this.countryCode);\n            return;\n        }\n        if (this.computedValue === this.countryCode ||\n            (this.search !== null &&\n                Number.isNaN(parseInt(this.search.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10)))) {\n            this.updateSearch('');\n        }\n    }\n    onBackspace(event) {\n        const target = event.target;\n        if ((target.selectionStart || 0) <= this.nonRemovableLength &&\n            target.selectionStart === target.selectionEnd) {\n            event.preventDefault();\n        }\n    }\n    onValueChange(value) {\n        value = value === '' ? this.countryCode : value;\n        const parsed = isText(value)\n            ? value\n            : value.replace(TUI_MASK_SYMBOLS_REGEXP, '').slice(0, this.maxPhoneLength);\n        this.updateSearch(parsed);\n        this.value = parsed === this.countryCode || isText(parsed) ? '' : parsed;\n        this.open = true;\n    }\n    handleOption(item) {\n        this.focusInput();\n        this.value = item;\n        this.updateSearch('');\n        this.open = false;\n    }\n    setDisabledState() {\n        super.setDisabledState();\n        this.open = false;\n    }\n    writeValue(value) {\n        super.writeValue(value);\n        this.updateSearch('');\n    }\n    getFallbackValue() {\n        return '';\n    }\n    get caretIsInForbiddenArea() {\n        const { nativeFocusableElement } = this;\n        if (!nativeFocusableElement) {\n            return false;\n        }\n        const { selectionStart, selectionEnd } = nativeFocusableElement;\n        return (tuiIsNativeFocused(nativeFocusableElement) &&\n            selectionStart !== null &&\n            selectionStart < this.nonRemovableLength &&\n            selectionStart === selectionEnd);\n    }\n    get nonRemovableLength() {\n        return this.isTextValue ? 0 : this.countryCode.length + 1;\n    }\n    get maxPhoneLength() {\n        return (this.countryCode.length +\n            this.phoneMaskAfterCountryCode.replace(/[^#]+/g, '').length);\n    }\n    get isTextValue() {\n        return !!this.search && isText(this.search);\n    }\n    setCaretPosition() {\n        if (this.caretIsInForbiddenArea && !!this.nativeFocusableElement) {\n            this.nativeFocusableElement.setSelectionRange(this.nonRemovableLength, this.nonRemovableLength);\n        }\n    }\n    setValueWithoutPrefix(value) {\n        if (this.readOnly) {\n            return;\n        }\n        this.open = true;\n        this.value = this.cleanValue(value);\n        this.updateSearch(this.allowText && isText(value)\n            ? value\n            : value.replace(TUI_MASK_SYMBOLS_REGEXP, ''));\n    }\n    cleanValue(value) {\n        const reg = this.countryCode === '+7' ? /^7|^8/ : new RegExp(this.countryCode.slice(1));\n        const oldValueExist = this.value.length > this.countryCode.length &&\n            this.value.length < this.maxPhoneLength;\n        const newValueLength = value.replace(TUI_MASK_SYMBOLS_REGEXP, '').length;\n        const cleanNewValue = value.replace(/[^0-9]+/g, '');\n        const selectionLength = String(getSelection()).length;\n        if (oldValueExist && selectionLength === 0) {\n            return `${this.value}${cleanNewValue}`.slice(0, this.maxPhoneLength);\n        }\n        if (newValueLength < this.maxPhoneLength - 1) {\n            return `${this.countryCode}${cleanNewValue}`.slice(0, this.maxPhoneLength);\n        }\n        return `${this.countryCode}${cleanNewValue.replace(reg, '')}`.slice(0, this.maxPhoneLength);\n    }\n    focusInput() {\n        if (this.nativeFocusableElement) {\n            this.nativeFocusableElement.focus({ preventScroll: true });\n        }\n    }\n    updateSearch(search) {\n        if (this.search === search) {\n            return;\n        }\n        this.search = search;\n        this.searchChange.emit(search);\n    }\n    updateValueWithNewCountryCode(newCountryCode) {\n        if (!this.isTextValue) {\n            this.value = this.value.replace(this.countryCode, newCountryCode);\n        }\n    }\n}\nTuiInputPhoneComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: TuiDestroyService, self: true }, { token: ChangeDetectorRef }, { token: TUI_SELECTION_STREAM }, { token: TUI_TEXTFIELD_CLEANER }, { token: TUI_INPUT_PHONE_OPTIONS }], target: i0.ɵɵFactoryTarget.Component });\nTuiInputPhoneComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiInputPhoneComponent, selector: \"tui-input-phone\", inputs: { countryCodeSetter: [\"countryCode\", \"countryCodeSetter\"], phoneMaskAfterCountryCode: \"phoneMaskAfterCountryCode\", allowText: \"allowText\", search: \"search\" }, outputs: { searchChange: \"searchChange\" }, providers: [\n        TuiDestroyService,\n        tuiAsFocusableItemAccessor(TuiInputPhoneComponent),\n        tuiAsControl(TuiInputPhoneComponent),\n        tuiAsDataListHost(TuiInputPhoneComponent),\n    ], queries: [{ propertyName: \"datalist\", first: true, predicate: TuiDataListDirective, descendants: true, read: TemplateRef }], viewQueries: [{ propertyName: \"dropdown\", first: true, predicate: TuiHostedDropdownComponent, descendants: true }, { propertyName: \"textfield\", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: \"<tui-hosted-dropdown\\n    class=\\\"t-hosted\\\"\\n    [canOpen]=\\\"canOpen\\\"\\n    [content]=\\\"datalist || ''\\\"\\n    [(open)]=\\\"open\\\"\\n    (tuiActiveZoneChange)=\\\"onActiveZone($event)\\\"\\n>\\n    <tui-primitive-textfield\\n        tuiValueAccessor\\n        class=\\\"t-textfield\\\"\\n        [pseudoHover]=\\\"pseudoHover\\\"\\n        [pseudoFocus]=\\\"computedFocused\\\"\\n        [invalid]=\\\"computedInvalid\\\"\\n        [nativeId]=\\\"nativeId\\\"\\n        [readOnly]=\\\"readOnly\\\"\\n        [disabled]=\\\"computedDisabled\\\"\\n        [focusable]=\\\"focusable\\\"\\n        [textMask]=\\\"textMaskOptions\\\"\\n        [value]=\\\"computedValue\\\"\\n        [tuiTextfieldCleaner]=\\\"canClean\\\"\\n        (valueChange)=\\\"onValueChange($event)\\\"\\n        (drop)=\\\"onDrop($event)\\\"\\n        (keydown.backspace)=\\\"onBackspace($event)\\\"\\n        (paste.prevent)=\\\"onPaste($event)\\\"\\n    >\\n        <ng-content></ng-content>\\n        <ng-content\\n            select=\\\"input\\\"\\n            ngProjectAs=\\\"input\\\"\\n        ></ng-content>\\n    </tui-primitive-textfield>\\n</tui-hosted-dropdown>\\n\", styles: [\":host{display:block;border-radius:var(--tui-radius-m);text-align:left}:host._disabled{pointer-events:none}.t-hosted{display:block;border-radius:inherit}.t-textfield{border-radius:inherit;text-align:inherit}\\n\"], components: [{ type: i1.TuiHostedDropdownComponent, selector: \"tui-hosted-dropdown\", inputs: [\"content\", \"sided\", \"canOpen\", \"open\"], outputs: [\"openChange\", \"focusedChange\"] }, { type: i1.TuiPrimitiveTextfieldComponent, selector: \"tui-primitive-textfield\", inputs: [\"editable\", \"filler\", \"iconCleaner\", \"readOnly\", \"invalid\", \"disabled\", \"prefix\", \"postfix\", \"value\"], outputs: [\"valueChange\"] }], directives: [{ type: i2.TuiActiveZoneDirective, selector: \"[tuiActiveZone]:not(ng-container), [tuiActiveZoneChange]:not(ng-container), [tuiActiveZoneParent]:not(ng-container)\", inputs: [\"tuiActiveZoneParent\"], outputs: [\"tuiActiveZoneChange\"], exportAs: [\"tuiActiveZone\"] }, { type: i1.TuiPrimitiveTextfieldDirective, selector: \"tui-primitive-textfield\" }, { type: i3.TuiValueAccessorDirective, selector: \"[tuiValueAccessor]\" }, { type: i3.MaskedInputDirective, selector: \"[textMask]\", inputs: [\"textMask\"], exportAs: [\"textMask\"] }, { type: i1.TuiTextfieldCleanerDirective, selector: \"[tuiTextfieldCleaner]\", inputs: [\"tuiTextfieldCleaner\"] }], viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER], changeDetection: i0.ChangeDetectionStrategy.OnPush });\n__decorate([\n    tuiRequiredSetter()\n], TuiInputPhoneComponent.prototype, \"countryCodeSetter\", null);\n__decorate([\n    tuiDefaultProp()\n], TuiInputPhoneComponent.prototype, \"phoneMaskAfterCountryCode\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputPhoneComponent.prototype, \"allowText\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputPhoneComponent.prototype, \"search\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'tui-input-phone',\n                    templateUrl: './input-phone.template.html',\n                    styleUrls: ['./input-phone.style.less'],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        TuiDestroyService,\n                        tuiAsFocusableItemAccessor(TuiInputPhoneComponent),\n                        tuiAsControl(TuiInputPhoneComponent),\n                        tuiAsDataListHost(TuiInputPhoneComponent),\n                    ],\n                    viewProviders: [FIXED_DROPDOWN_CONTROLLER_PROVIDER],\n                }]\n        }], ctorParameters: function () { return [{ type: i4.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NgControl]\n                }] }, { type: i5.Observable, decorators: [{\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [TuiDestroyService]\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\n                    type: Inject,\n                    args: [ChangeDetectorRef]\n                }] }, { type: i5.Observable, decorators: [{\n                    type: Inject,\n                    args: [TUI_SELECTION_STREAM]\n                }] }, { type: i1.TuiTextfieldCleanerDirective, decorators: [{\n                    type: Inject,\n                    args: [TUI_TEXTFIELD_CLEANER]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TUI_INPUT_PHONE_OPTIONS]\n                }] }]; }, propDecorators: { dropdown: [{\n                type: ViewChild,\n                args: [TuiHostedDropdownComponent]\n            }], textfield: [{\n                type: ViewChild,\n                args: [TuiPrimitiveTextfieldComponent]\n            }], countryCodeSetter: [{\n                type: Input,\n                args: ['countryCode']\n            }], phoneMaskAfterCountryCode: [{\n                type: Input\n            }], allowText: [{\n                type: Input\n            }], search: [{\n                type: Input\n            }], searchChange: [{\n                type: Output\n            }], datalist: [{\n                type: ContentChild,\n                args: [TuiDataListDirective, { read: TemplateRef }]\n            }] } });\nfunction isText(value) {\n    return Number.isNaN(parseInt(value.replace(TUI_MASK_SYMBOLS_REGEXP, ''), 10));\n}\n\nclass TuiInputPhoneDirective extends AbstractTuiTextfieldHost {\n    get value() {\n        return this.host.computedValue;\n    }\n    onValueChange(value) {\n        this.host.onValueChange(value);\n    }\n    process(input) {\n        this.input = input;\n    }\n    ngDoCheck() {\n        if (!this.input) {\n            return;\n        }\n        this.input.type = 'tel';\n        this.input.inputMode = this.host.inputMode;\n    }\n}\nTuiInputPhoneDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTuiInputPhoneDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiInputPhoneDirective, selector: \"tui-input-phone\", providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'tui-input-phone',\n                    providers: [tuiAsTextfieldHost(TuiInputPhoneDirective)],\n                }]\n        }] });\n\nclass TuiInputPhoneModule {\n}\nTuiInputPhoneModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTuiInputPhoneModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneModule, declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective], imports: [TextMaskModule,\n        TuiPrimitiveTextfieldModule,\n        TuiHostedDropdownModule,\n        TuiTextfieldControllerModule,\n        TuiActiveZoneModule,\n        TuiValueAccessorModule], exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent] });\nTuiInputPhoneModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneModule, imports: [[\n            TextMaskModule,\n            TuiPrimitiveTextfieldModule,\n            TuiHostedDropdownModule,\n            TuiTextfieldControllerModule,\n            TuiActiveZoneModule,\n            TuiValueAccessorModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputPhoneModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        TextMaskModule,\n                        TuiPrimitiveTextfieldModule,\n                        TuiHostedDropdownModule,\n                        TuiTextfieldControllerModule,\n                        TuiActiveZoneModule,\n                        TuiValueAccessorModule,\n                    ],\n                    declarations: [TuiInputPhoneComponent, TuiInputPhoneDirective],\n                    exports: [TuiInputPhoneComponent, TuiInputPhoneDirective, TuiTextfieldComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TUI_INPUT_PHONE_DEFAULT_OPTIONS, TUI_INPUT_PHONE_OPTIONS, TuiInputPhoneComponent, TuiInputPhoneDirective, TuiInputPhoneModule, tuiInputPhoneOptionsProvider };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}