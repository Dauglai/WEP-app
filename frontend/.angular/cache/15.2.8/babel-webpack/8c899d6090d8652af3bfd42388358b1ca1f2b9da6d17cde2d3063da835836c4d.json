{"ast":null,"code":"import { tuiIsNumber, CHAR_HYPHEN, CHAR_PLUS } from '@taiga-ui/cdk';\nimport { TUI_DEFAULT_NUMBER_FORMAT } from '@taiga-ui/core/constants';\n\n/**\n * Capitalizes a given string, replacing it with a lowercase string and making\n * the first letter of each word uppercase.\n *\n * @param value the input string\n * @return the capitalized string\n */\nfunction tuiCapitalize(value) {\n  return value.toLowerCase().replace(/(?:^|\\s)\\S/g, char => char.toUpperCase());\n}\nfunction tuiCapitalizeFirstLetter(value) {\n  return `${value.charAt(0).toUpperCase()}${value.slice(1)}`;\n}\n\n/**\n * Convert number to string with replacing exponent part on decimals\n *\n * @param value the number\n * @return string representation of a number\n */\nfunction tuiNumberToStringWithoutExp(value) {\n  const valueAsString = String(value);\n  const [numberPart, expPart] = valueAsString.split(`e-`);\n  let valueWithoutExp = valueAsString;\n  if (expPart) {\n    const [, fractionalPart] = numberPart.split(`.`);\n    const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);\n    valueWithoutExp = value.toFixed(decimalDigits);\n  }\n  return valueWithoutExp;\n}\n\n/**\n * Return fractional part of number\n *\n * @param value the number\n * @param precision number of digits of decimal part, null to keep untouched\n * @return the fractional part of number\n */\nfunction tuiGetFractionPartPadded(value, precision) {\n  const [, fractionPartPadded = ``] = tuiNumberToStringWithoutExp(value).split(`.`);\n  return tuiIsNumber(precision) ? fractionPartPadded.slice(0, Math.max(0, precision)) : fractionPartPadded;\n}\n\n/**\n * Formats number adding a thousand separators and correct decimal separator\n * padding decimal part with zeroes to given length\n *\n * @param value the input number\n * @param settings See {@link TuiNumberFormatSettings}\n * @return the formatted string\n */\nfunction tuiFormatNumber(value, settings = {}) {\n  const {\n    decimalLimit,\n    decimalSeparator,\n    thousandSeparator,\n    zeroPadding\n  } = Object.assign(Object.assign({}, TUI_DEFAULT_NUMBER_FORMAT), settings);\n  const integerPartString = String(Math.floor(Math.abs(value)));\n  let fractionPartPadded = tuiGetFractionPartPadded(value, decimalLimit);\n  if (Number.isFinite(decimalLimit)) {\n    if (zeroPadding) {\n      const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);\n      const zeroPartString = `0`.repeat(zeroPaddingSize);\n      fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;\n    } else {\n      fractionPartPadded = fractionPartPadded.replace(/0*$/, ``);\n    }\n  }\n  const remainder = integerPartString.length % 3;\n  const sign = value < 0 ? CHAR_HYPHEN : ``;\n  let result = sign + integerPartString.charAt(0);\n  for (let i = 1; i < integerPartString.length; i++) {\n    if (i % 3 === remainder && integerPartString.length > 3) {\n      result += thousandSeparator;\n    }\n    result += integerPartString.charAt(i);\n  }\n  return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;\n}\n\n/**\n * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,\n * adding parentheses and hyphens.\n *\n * @param value the input string\n * @param countryCode a country code\n * @param phoneMask a phone number mask\n * @return the formatted phone string of the form +7 XXX XXX-XX-XX\n */\nfunction tuiFormatPhone(value, countryCode, phoneMask) {\n  if (!value) {\n    return ``;\n  }\n  let result = countryCode;\n  countryCode = countryCode.replace(/[()]/g, ``);\n  if (!value.startsWith(countryCode)) {\n    value = countryCode + value.replace(CHAR_PLUS, ``);\n  }\n  const splitPhoneMask = phoneMask.split(``);\n  const splitValue = value.slice(countryCode.length).split(``);\n  result += ` `;\n  if (splitValue.length === 0) {\n    return result;\n  }\n  for (const mask of splitPhoneMask) {\n    if (splitValue.length === 0) {\n      break;\n    }\n    if (mask === `#`) {\n      result += splitValue[0] || ``;\n      splitValue.splice(0, 1);\n    } else {\n      result += mask;\n    }\n  }\n  return result;\n}\nfunction tuiOtherDecimalSymbol(symbol) {\n  return symbol === `.` ? `,` : `.`;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCapitalize, tuiCapitalizeFirstLetter, tuiFormatNumber, tuiFormatPhone, tuiGetFractionPartPadded, tuiNumberToStringWithoutExp, tuiOtherDecimalSymbol };","map":{"version":3,"names":["tuiIsNumber","CHAR_HYPHEN","CHAR_PLUS","TUI_DEFAULT_NUMBER_FORMAT","tuiCapitalize","value","toLowerCase","replace","char","toUpperCase","tuiCapitalizeFirstLetter","charAt","slice","tuiNumberToStringWithoutExp","valueAsString","String","numberPart","expPart","split","valueWithoutExp","fractionalPart","decimalDigits","Number","length","toFixed","tuiGetFractionPartPadded","precision","fractionPartPadded","Math","max","tuiFormatNumber","settings","decimalLimit","decimalSeparator","thousandSeparator","zeroPadding","Object","assign","integerPartString","floor","abs","isFinite","zeroPaddingSize","zeroPartString","repeat","remainder","sign","result","i","tuiFormatPhone","countryCode","phoneMask","startsWith","splitPhoneMask","splitValue","mask","splice","tuiOtherDecimalSymbol","symbol"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/core/fesm2015/taiga-ui-core-utils-format.js"],"sourcesContent":["import { tuiIsNumber, CHAR_HYPHEN, CHAR_PLUS } from '@taiga-ui/cdk';\nimport { TUI_DEFAULT_NUMBER_FORMAT } from '@taiga-ui/core/constants';\n\n/**\n * Capitalizes a given string, replacing it with a lowercase string and making\n * the first letter of each word uppercase.\n *\n * @param value the input string\n * @return the capitalized string\n */\nfunction tuiCapitalize(value) {\n    return value.toLowerCase().replace(/(?:^|\\s)\\S/g, char => char.toUpperCase());\n}\n\nfunction tuiCapitalizeFirstLetter(value) {\n    return `${value.charAt(0).toUpperCase()}${value.slice(1)}`;\n}\n\n/**\n * Convert number to string with replacing exponent part on decimals\n *\n * @param value the number\n * @return string representation of a number\n */\nfunction tuiNumberToStringWithoutExp(value) {\n    const valueAsString = String(value);\n    const [numberPart, expPart] = valueAsString.split(`e-`);\n    let valueWithoutExp = valueAsString;\n    if (expPart) {\n        const [, fractionalPart] = numberPart.split(`.`);\n        const decimalDigits = Number(expPart) + ((fractionalPart === null || fractionalPart === void 0 ? void 0 : fractionalPart.length) || 0);\n        valueWithoutExp = value.toFixed(decimalDigits);\n    }\n    return valueWithoutExp;\n}\n\n/**\n * Return fractional part of number\n *\n * @param value the number\n * @param precision number of digits of decimal part, null to keep untouched\n * @return the fractional part of number\n */\nfunction tuiGetFractionPartPadded(value, precision) {\n    const [, fractionPartPadded = ``] = tuiNumberToStringWithoutExp(value).split(`.`);\n    return tuiIsNumber(precision)\n        ? fractionPartPadded.slice(0, Math.max(0, precision))\n        : fractionPartPadded;\n}\n\n/**\n * Formats number adding a thousand separators and correct decimal separator\n * padding decimal part with zeroes to given length\n *\n * @param value the input number\n * @param settings See {@link TuiNumberFormatSettings}\n * @return the formatted string\n */\nfunction tuiFormatNumber(value, settings = {}) {\n    const { decimalLimit, decimalSeparator, thousandSeparator, zeroPadding } = Object.assign(Object.assign({}, TUI_DEFAULT_NUMBER_FORMAT), settings);\n    const integerPartString = String(Math.floor(Math.abs(value)));\n    let fractionPartPadded = tuiGetFractionPartPadded(value, decimalLimit);\n    if (Number.isFinite(decimalLimit)) {\n        if (zeroPadding) {\n            const zeroPaddingSize = Math.max(decimalLimit - fractionPartPadded.length, 0);\n            const zeroPartString = `0`.repeat(zeroPaddingSize);\n            fractionPartPadded = `${fractionPartPadded}${zeroPartString}`;\n        }\n        else {\n            fractionPartPadded = fractionPartPadded.replace(/0*$/, ``);\n        }\n    }\n    const remainder = integerPartString.length % 3;\n    const sign = value < 0 ? CHAR_HYPHEN : ``;\n    let result = sign + integerPartString.charAt(0);\n    for (let i = 1; i < integerPartString.length; i++) {\n        if (i % 3 === remainder && integerPartString.length > 3) {\n            result += thousandSeparator;\n        }\n        result += integerPartString.charAt(i);\n    }\n    return fractionPartPadded ? result + decimalSeparator + fractionPartPadded : result;\n}\n\n/**\n * Formats a string with the phone format +7XXXXXXXXXXXX or XXXXXXXXXXXX,\n * adding parentheses and hyphens.\n *\n * @param value the input string\n * @param countryCode a country code\n * @param phoneMask a phone number mask\n * @return the formatted phone string of the form +7 XXX XXX-XX-XX\n */\nfunction tuiFormatPhone(value, countryCode, phoneMask) {\n    if (!value) {\n        return ``;\n    }\n    let result = countryCode;\n    countryCode = countryCode.replace(/[()]/g, ``);\n    if (!value.startsWith(countryCode)) {\n        value = countryCode + value.replace(CHAR_PLUS, ``);\n    }\n    const splitPhoneMask = phoneMask.split(``);\n    const splitValue = value.slice(countryCode.length).split(``);\n    result += ` `;\n    if (splitValue.length === 0) {\n        return result;\n    }\n    for (const mask of splitPhoneMask) {\n        if (splitValue.length === 0) {\n            break;\n        }\n        if (mask === `#`) {\n            result += splitValue[0] || ``;\n            splitValue.splice(0, 1);\n        }\n        else {\n            result += mask;\n        }\n    }\n    return result;\n}\n\nfunction tuiOtherDecimalSymbol(symbol) {\n    return symbol === `.` ? `,` : `.`;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCapitalize, tuiCapitalizeFirstLetter, tuiFormatNumber, tuiFormatPhone, tuiGetFractionPartPadded, tuiNumberToStringWithoutExp, tuiOtherDecimalSymbol };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}