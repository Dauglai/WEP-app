{"ast":null,"code":"import { tuiAssert } from '@taiga-ui/cdk/classes';\n\n/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nfunction tuiClamp(value, min, max) {\n  ngDevMode && tuiAssert.assert(!Number.isNaN(value));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(min));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(max));\n  ngDevMode && tuiAssert.assert(max >= min);\n  return Math.min(max, Math.max(min, value));\n}\nfunction tuiInRange(value, fromInclude, toExclude) {\n  ngDevMode && tuiAssert.assert(!Number.isNaN(value));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(fromInclude));\n  ngDevMode && tuiAssert.assert(!Number.isNaN(toExclude));\n  ngDevMode && tuiAssert.assert(fromInclude < toExclude);\n  return value >= fromInclude && value < toExclude;\n}\n\n/**\n * Normalizes any number to an integer within inclusive range\n *\n * @param value\n * @param min lower inclusive integer\n * @param max upper inclusive integer\n * @return an integer between min and max inclusive\n */\nfunction tuiNormalizeToIntNumber(value, min, max) {\n  ngDevMode && tuiAssert.assert(Number.isInteger(min));\n  ngDevMode && tuiAssert.assert(Number.isInteger(max));\n  ngDevMode && tuiAssert.assert(min <= max);\n  if (Number.isNaN(value) || value <= min) {\n    return min;\n  }\n  if (value >= max) {\n    return max;\n  }\n  return Math.round(value);\n}\n\n/**\n * Rounds a number to the closest value in a fixed discrete series\n *\n * @param value\n * @param quantum series step\n */\nfunction tuiQuantize(value, quantum) {\n  ngDevMode && tuiAssert.assert(Number.isFinite(value));\n  ngDevMode && tuiAssert.assert(Number.isFinite(quantum));\n  ngDevMode && tuiAssert.assert(quantum > 0);\n  const remainder = value % quantum;\n  return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;\n}\nconst MAX_PRECISION = 292;\nfunction tuiRound(value, precision = 0) {\n  return calculate(value, precision, Math.round);\n}\nfunction tuiCeil(value, precision = 0) {\n  return calculate(value, precision, Math.ceil);\n}\nfunction tuiFloor(value, precision = 0) {\n  return calculate(value, precision, Math.floor);\n}\n/**\n * Rounding number to the set precision\n *\n * @param value\n * @param precision number of digits in a float part\n * @param func rounding function (round, floor, ceil)\n */\nfunction calculate(value, precision, func) {\n  if (value === Infinity) {\n    return value;\n  }\n  ngDevMode && tuiAssert.assert(!Number.isNaN(value), `Value must be number`);\n  ngDevMode && tuiAssert.assert(Number.isInteger(precision), `Precision must be integer`);\n  precision = Math.min(precision, MAX_PRECISION);\n  const pair = `${value}e`.split(`e`);\n  const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n  const processedPair = `${tempValue}e`.split(`e`);\n  return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);\n}\n\n/**\n * Calculates sum of any number of passed arguments\n */\nfunction tuiSum(...args) {\n  return args.reduce((a, b) => a + b, 0);\n}\nfunction tuiToInt(bool) {\n  return bool ? 1 : 0;\n}\nfunction tuiToInteger(value) {\n  return parseInt(value, 10);\n}\n\n/**\n * Converts angle in degrees to radians\n */\nfunction tuiToRadians(deg) {\n  return deg * Math.PI / 180;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCeil, tuiClamp, tuiFloor, tuiInRange, tuiNormalizeToIntNumber, tuiQuantize, tuiRound, tuiSum, tuiToInt, tuiToInteger, tuiToRadians };","map":{"version":3,"names":["tuiAssert","tuiClamp","value","min","max","ngDevMode","assert","Number","isNaN","Math","tuiInRange","fromInclude","toExclude","tuiNormalizeToIntNumber","isInteger","round","tuiQuantize","quantum","isFinite","remainder","MAX_PRECISION","tuiRound","precision","calculate","tuiCeil","ceil","tuiFloor","floor","func","Infinity","pair","split","tempValue","processedPair","tuiSum","args","reduce","a","b","tuiToInt","bool","tuiToInteger","parseInt","tuiToRadians","deg","PI"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-utils-math.js"],"sourcesContent":["import { tuiAssert } from '@taiga-ui/cdk/classes';\n\n/**\n * Clamps a value between two inclusive limits\n *\n * @param value\n * @param min lower limit\n * @param max upper limit\n */\nfunction tuiClamp(value, min, max) {\n    ngDevMode && tuiAssert.assert(!Number.isNaN(value));\n    ngDevMode && tuiAssert.assert(!Number.isNaN(min));\n    ngDevMode && tuiAssert.assert(!Number.isNaN(max));\n    ngDevMode && tuiAssert.assert(max >= min);\n    return Math.min(max, Math.max(min, value));\n}\n\nfunction tuiInRange(value, fromInclude, toExclude) {\n    ngDevMode && tuiAssert.assert(!Number.isNaN(value));\n    ngDevMode && tuiAssert.assert(!Number.isNaN(fromInclude));\n    ngDevMode && tuiAssert.assert(!Number.isNaN(toExclude));\n    ngDevMode && tuiAssert.assert(fromInclude < toExclude);\n    return value >= fromInclude && value < toExclude;\n}\n\n/**\n * Normalizes any number to an integer within inclusive range\n *\n * @param value\n * @param min lower inclusive integer\n * @param max upper inclusive integer\n * @return an integer between min and max inclusive\n */\nfunction tuiNormalizeToIntNumber(value, min, max) {\n    ngDevMode && tuiAssert.assert(Number.isInteger(min));\n    ngDevMode && tuiAssert.assert(Number.isInteger(max));\n    ngDevMode && tuiAssert.assert(min <= max);\n    if (Number.isNaN(value) || value <= min) {\n        return min;\n    }\n    if (value >= max) {\n        return max;\n    }\n    return Math.round(value);\n}\n\n/**\n * Rounds a number to the closest value in a fixed discrete series\n *\n * @param value\n * @param quantum series step\n */\nfunction tuiQuantize(value, quantum) {\n    ngDevMode && tuiAssert.assert(Number.isFinite(value));\n    ngDevMode && tuiAssert.assert(Number.isFinite(quantum));\n    ngDevMode && tuiAssert.assert(quantum > 0);\n    const remainder = value % quantum;\n    return remainder < quantum / 2 ? value - remainder : value + quantum - remainder;\n}\n\nconst MAX_PRECISION = 292;\nfunction tuiRound(value, precision = 0) {\n    return calculate(value, precision, Math.round);\n}\nfunction tuiCeil(value, precision = 0) {\n    return calculate(value, precision, Math.ceil);\n}\nfunction tuiFloor(value, precision = 0) {\n    return calculate(value, precision, Math.floor);\n}\n/**\n * Rounding number to the set precision\n *\n * @param value\n * @param precision number of digits in a float part\n * @param func rounding function (round, floor, ceil)\n */\nfunction calculate(value, precision, func) {\n    if (value === Infinity) {\n        return value;\n    }\n    ngDevMode && tuiAssert.assert(!Number.isNaN(value), `Value must be number`);\n    ngDevMode &&\n        tuiAssert.assert(Number.isInteger(precision), `Precision must be integer`);\n    precision = Math.min(precision, MAX_PRECISION);\n    const pair = `${value}e`.split(`e`);\n    const tempValue = func(Number(`${pair[0]}e${Number(pair[1]) + precision}`));\n    const processedPair = `${tempValue}e`.split(`e`);\n    return Number(`${processedPair[0]}e${Number(processedPair[1]) - precision}`);\n}\n\n/**\n * Calculates sum of any number of passed arguments\n */\nfunction tuiSum(...args) {\n    return args.reduce((a, b) => a + b, 0);\n}\n\nfunction tuiToInt(bool) {\n    return bool ? 1 : 0;\n}\n\nfunction tuiToInteger(value) {\n    return parseInt(value, 10);\n}\n\n/**\n * Converts angle in degrees to radians\n */\nfunction tuiToRadians(deg) {\n    return (deg * Math.PI) / 180;\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { tuiCeil, tuiClamp, tuiFloor, tuiInRange, tuiNormalizeToIntNumber, tuiQuantize, tuiRound, tuiSum, tuiToInt, tuiToInteger, tuiToRadians };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}