{"ast":null,"code":"import { CHAR_NO_BREAK_SPACE, CHAR_EN_DASH } from '@taiga-ui/cdk/constants';\nimport { InjectionToken } from '@angular/core';\nimport { tuiAssert } from '@taiga-ui/cdk/classes';\nimport { TuiInvalidYearException, TuiInvalidMonthException, TuiInvalidDayException } from '@taiga-ui/cdk/exceptions';\nimport { tuiInRange, tuiNormalizeToIntNumber } from '@taiga-ui/cdk/utils/math';\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_NORMAL_YEAR = 365;\nconst DAYS_IN_LEAP_YEAR = 366;\nconst MONTHS_IN_YEAR = 12;\nconst MIN_DAY = 1;\nconst MIN_MONTH = 0;\nconst MAX_MONTH = 11;\nconst MIN_YEAR = 0;\nconst MAX_YEAR = 9999;\nconst RANGE_SEPARATOR_CHAR = `${CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${CHAR_NO_BREAK_SPACE}`;\nconst MILLISECONDS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\nconst MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * MINUTES_IN_HOUR;\nconst MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * @internal 'dd.mm.yyyy'.length\n * Used in:\n * - {@link TuiInputDateComponent}\n * - {@link TuiInputDateRangeComponent}\n * - {@link TuiInputDateTimeComponent}\n */\nconst DATE_FILLER_LENGTH = 10;\n/**\n * @internal\n * Used in {@link TuiInputDateRangeComponent}\n */\nconst DATE_RANGE_FILLER_LENGTH = 2 * DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length;\n\n/**\n * Active date format for Taiga UI\n */\nconst TUI_DATE_FORMAT = new InjectionToken(`[TUI_DATE_FORMAT]`, {\n  factory: () => `DMY`\n});\n\n/**\n * Date separator for Taiga UI components\n */\nconst TUI_DATE_SEPARATOR = new InjectionToken(`[TUI_DATE_SEPARATOR]`, {\n  factory: () => `.`\n});\nconst changeDateSeparator = (dateString, newDateSeparator) => dateString.replace(/[^0-9A-Za-zА-Яа-я]/gi, newDateSeparator);\n\n/**\n * Immutable year object\n * @nosideeffects\n */\nclass TuiYear {\n  constructor(year) {\n    this.year = year;\n    ngDevMode && tuiAssert.assert(TuiYear.isValidYear(year));\n  }\n  /**\n   * Checks year for validity\n   */\n  static isValidYear(year) {\n    return Number.isInteger(year) && tuiInRange(year, MIN_YEAR, MAX_YEAR + 1);\n  }\n  /**\n   * Check if passed year is a leap year\n   */\n  static isLeapYear(year) {\n    ngDevMode && tuiAssert.assert(TuiYear.isValidYear(year));\n    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;\n  }\n  /**\n   * Returns amount of leap years from year 0 to the passed one\n   */\n  static getAbsoluteLeapYears(year) {\n    ngDevMode && tuiAssert.assert(TuiYear.isValidYear(year));\n    return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));\n  }\n  static lengthBetween(from, to) {\n    return to.year - from.year;\n  }\n  /**\n   * Normalizes year by clamping it between min and max years\n   */\n  static normalizeYearPart(year) {\n    return tuiNormalizeToIntNumber(year, MIN_YEAR, MAX_YEAR);\n  }\n  get formattedYear() {\n    return String(this.year).padStart(4, `0`);\n  }\n  get isLeapYear() {\n    return TuiYear.isLeapYear(this.year);\n  }\n  /**\n   * Returns amount of leap years from year 0 to current\n   */\n  get absoluteLeapYears() {\n    return TuiYear.getAbsoluteLeapYears(this.year);\n  }\n  /**\n   * Passed year is after current\n   */\n  yearBefore({\n    year\n  }) {\n    return this.year < year;\n  }\n  /**\n   * Passed year is the same or after current\n   */\n  yearSameOrBefore({\n    year\n  }) {\n    return this.year <= year;\n  }\n  /**\n   * Passed year is the same as current\n   */\n  yearSame({\n    year\n  }) {\n    return this.year === year;\n  }\n  /**\n   * Passed year is either the same of before the current\n   */\n  yearSameOrAfter({\n    year\n  }) {\n    return this.year >= year;\n  }\n  /**\n   * Passed year is before current\n   */\n  yearAfter({\n    year\n  }) {\n    return this.year > year;\n  }\n  /**\n   * Immutably offsets year\n   */\n  append({\n    year = 0\n  }) {\n    ngDevMode && tuiAssert.assert(Number.isInteger(year));\n    const resultYear = this.year + year;\n    ngDevMode && tuiAssert.assert(TuiYear.isValidYear(resultYear));\n    return new TuiYear(resultYear);\n  }\n  toString() {\n    return this.formattedYear;\n  }\n  valueOf() {\n    return this.year;\n  }\n  /**\n   * Returns the primitive value of the given Date object.\n   * Depending on the argument, the method can return either a string or a number.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n   */\n  [Symbol.toPrimitive](hint) {\n    return Date.prototype[Symbol.toPrimitive].call(this, hint);\n  }\n  toJSON() {\n    return this.formattedYear;\n  }\n}\n\n/**\n * Immutable object consisting of year and month\n */\nclass TuiMonth extends TuiYear {\n  /**\n   * @param year\n   * @param month (starting with 0)\n   */\n  constructor(year, month) {\n    super(year);\n    this.month = month;\n    ngDevMode && tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n  }\n  /**\n   * Tests month and year for validity\n   */\n  static isValidMonth(year, month) {\n    return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);\n  }\n  /**\n   * Returns number of days in a month\n   */\n  static getMonthDaysCount(month, isLeapYear) {\n    ngDevMode && tuiAssert.assert(TuiMonth.isValidMonthPart(month));\n    switch (month) {\n      case 1 /* February */:\n        return isLeapYear ? 29 : 28;\n      case 3 /* April */:\n      case 5 /* June */:\n      case 8 /* September */:\n      case 10 /* November */:\n        return 30;\n      default:\n        return 31;\n    }\n  }\n  /**\n   * Returns current month and year based on local time zone\n   * @nosideeffects\n   */\n  static currentLocal() {\n    const nativeDate = new Date();\n    return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());\n  }\n  /**\n   * Returns current month and year based on UTC\n   */\n  static currentUtc() {\n    const nativeDate = new Date();\n    return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());\n  }\n  static lengthBetween(from, to) {\n    const absoluteFrom = from.month + from.year * 12;\n    const absoluteTo = to.month + to.year * 12;\n    return absoluteTo - absoluteFrom;\n  }\n  /**\n   * Normalizes number by clamping it between min and max month\n   */\n  static normalizeMonthPart(month) {\n    return tuiNormalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);\n  }\n  /**\n   * Tests month for validity\n   */\n  static isValidMonthPart(month) {\n    return Number.isInteger(month) && tuiInRange(month, MIN_MONTH, MAX_MONTH + 1);\n  }\n  get formattedMonthPart() {\n    return String(this.month + 1).padStart(2, `0`);\n  }\n  /**\n   * Returns days in a month\n   */\n  get daysCount() {\n    return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);\n  }\n  /**\n   * Passed month and year are after current\n   */\n  monthBefore(another) {\n    return this.yearBefore(another) || this.yearSame(another) && this.month < another.month;\n  }\n  /**\n   * Passed month and year are after or the same as current\n   */\n  monthSameOrBefore(another) {\n    return this.yearBefore(another) || this.yearSame(another) && this.month <= another.month;\n  }\n  /**\n   * Passed month and year are the same as current\n   */\n  monthSame(another) {\n    return this.yearSame(another) && this.month === another.month;\n  }\n  /**\n   * Passed month and year are either before or equal to current\n   */\n  monthSameOrAfter(another) {\n    return this.yearAfter(another) || this.yearSame(another) && this.month >= another.month;\n  }\n  /**\n   * Passed month and year are before current\n   */\n  monthAfter(another) {\n    return this.yearAfter(another) || this.yearSame(another) && this.month > another.month;\n  }\n  /**\n   * Immutably alters current month and year by passed offset\n   *\n   * @param offset\n   * @return new month and year object as a result of offsetting current\n   */\n  append({\n    year = 0,\n    month = 0\n  }) {\n    const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n    return new TuiMonth(Math.floor(totalMonths / MONTHS_IN_YEAR), totalMonths % MONTHS_IN_YEAR);\n  }\n  toString() {\n    return `${this.formattedMonthPart}.${this.formattedYear}`;\n  }\n  valueOf() {\n    return this.toLocalNativeDate().valueOf();\n  }\n  toJSON() {\n    return `${super.toJSON()}-${this.formattedMonthPart}`;\n  }\n  /**\n   * Returns native {@link Date} based on local time zone\n   */\n  toLocalNativeDate() {\n    return new Date(this.year, this.month);\n  }\n  /**\n   * Returns native {@link Date} based on UTC\n   */\n  toUtcNativeDate() {\n    return new Date(Date.UTC(this.year, this.month));\n  }\n}\n\n// TODO: Localized formatting\n/**\n * Immutable date object, consisting of day, month and year\n */\nclass TuiDay extends TuiMonth {\n  constructor(year, month, day) {\n    super(year, month);\n    this.day = day;\n    ngDevMode && tuiAssert.assert(TuiDay.isValidDay(year, month, day));\n  }\n  /**\n   * Creates {@link TuiDay} from native {@link Date} based on local time zone\n   */\n  static fromLocalNativeDate(date) {\n    return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());\n  }\n  /**\n   * Creates {@link TuiDay} from native {@link Date} using UTC\n   */\n  static fromUtcNativeDate(date) {\n    return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n  }\n  /**\n   * Check validity of year, month and day\n   *\n   * @param year\n   * @param month\n   * @param day\n   * @return boolean validity\n   */\n  static isValidDay(year, month, day) {\n    return TuiMonth.isValidMonth(year, month) && Number.isInteger(day) && tuiInRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1);\n  }\n  /**\n   * Current day based on local time zone\n   */\n  static currentLocal() {\n    const nativeDate = new Date();\n    const year = nativeDate.getFullYear();\n    const month = nativeDate.getMonth();\n    const day = nativeDate.getDate();\n    return new TuiDay(year, month, day);\n  }\n  /**\n   * Returns current day based on UTC\n   */\n  static currentUtc() {\n    const nativeDate = new Date();\n    const year = nativeDate.getUTCFullYear();\n    const month = nativeDate.getUTCMonth();\n    const day = nativeDate.getUTCDate();\n    return new TuiDay(year, month, day);\n  }\n  /**\n   * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.\n   *\n   * @param year any year value, including invalid\n   * @param month any month value, including invalid (months start with 0)\n   * @param day any day value, including invalid\n   * @return normalized date\n   */\n  static normalizeOf(year, month, day) {\n    const normalizedYear = TuiYear.normalizeYearPart(year);\n    const normalizedMonth = TuiMonth.normalizeMonthPart(month);\n    const normalizedDay = TuiDay.normalizeDayPart(day, normalizedMonth, normalizedYear);\n    return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);\n  }\n  static lengthBetween(from, to) {\n    return Math.round((to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) / (1000 * 60 * 60 * 24));\n  }\n  static parseRawDateString(date, dateMode = `DMY`) {\n    ngDevMode && tuiAssert.assert(date.length === DATE_FILLER_LENGTH, `[parseRawDateString]: wrong date string length`);\n    switch (dateMode) {\n      case `YMD`:\n        return {\n          day: parseInt(date.slice(8, 10), 10),\n          month: parseInt(date.slice(5, 7), 10) - 1,\n          year: parseInt(date.slice(0, 4), 10)\n        };\n      case `MDY`:\n        return {\n          day: parseInt(date.slice(3, 5), 10),\n          month: parseInt(date.slice(0, 2), 10) - 1,\n          year: parseInt(date.slice(6, 10), 10)\n        };\n      default:\n      case `DMY`:\n        return {\n          day: parseInt(date.slice(0, 2), 10),\n          month: parseInt(date.slice(3, 5), 10) - 1,\n          year: parseInt(date.slice(6, 10), 10)\n        };\n    }\n  }\n  // TODO: Move month and year related code corresponding classes\n  /**\n   * Parsing a string with date with normalization\n   *\n   * @param rawDate date string\n   * @param dateMode date format of the date string (DMY | MDY | YMD)\n   * @return normalized date\n   */\n  static normalizeParse(rawDate, dateMode = `DMY`) {\n    const {\n      day,\n      month,\n      year\n    } = this.parseRawDateString(rawDate, dateMode);\n    return TuiDay.normalizeOf(year, month, day);\n  }\n  /**\n   * Parsing a date stringified in a toJSON format\n   * @param yearMonthDayString date string in format of YYYY-MM-DD\n   * @return date\n   * @throws exceptions if any part of the date is invalid\n   */\n  static jsonParse(yearMonthDayString) {\n    const {\n      day,\n      month,\n      year\n    } = this.parseRawDateString(yearMonthDayString, `YMD`);\n    if (!TuiYear.isValidYear(year)) {\n      throw new TuiInvalidYearException(year);\n    }\n    if (!TuiMonth.isValidMonth(year, month)) {\n      throw new TuiInvalidMonthException(month);\n    }\n    if (!Number.isInteger(day) || !tuiInRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1)) {\n      throw new TuiInvalidDayException(day);\n    }\n    return new TuiDay(year, month, day);\n  }\n  static normalizeDayPart(day, month, year) {\n    ngDevMode && tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n    const monthDaysCount = TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year));\n    return tuiNormalizeToIntNumber(day, 1, monthDaysCount);\n  }\n  get formattedDayPart() {\n    return String(this.day).padStart(2, `0`);\n  }\n  get isWeekend() {\n    const dayOfWeek = this.dayOfWeek(false);\n    return dayOfWeek === 6 /* Saturday */ || dayOfWeek === 0 /* Sunday */;\n  }\n  /**\n   * Returns day of week\n   *\n   * @param startFromMonday whether week starts from Monday and not from Sunday\n   * @return day of week (from 0 to 6)\n   */\n  dayOfWeek(startFromMonday = true) {\n    const dayOfWeek = startFromMonday ? this.toLocalNativeDate().getDay() - 1 : this.toLocalNativeDate().getDay();\n    return dayOfWeek < 0 ? 6 : dayOfWeek;\n  }\n  /**\n   * Passed date is after current\n   */\n  dayBefore(another) {\n    return this.monthBefore(another) || this.monthSame(another) && this.day < another.day;\n  }\n  /**\n   * Passed date is after or equals to current\n   */\n  daySameOrBefore(another) {\n    return this.monthBefore(another) || this.monthSame(another) && this.day <= another.day;\n  }\n  /**\n   * Passed date is the same as current\n   */\n  daySame(another) {\n    return this.monthSame(another) && this.day === another.day;\n  }\n  /**\n   * Passed date is either before or the same as current\n   */\n  daySameOrAfter(another) {\n    return this.monthAfter(another) || this.monthSame(another) && this.day >= another.day;\n  }\n  /**\n   * Passed date is before current\n   */\n  dayAfter(another) {\n    return this.monthAfter(another) || this.monthSame(another) && this.day > another.day;\n  }\n  /**\n   * Clamping date between two limits\n   *\n   * @param min\n   * @param max\n   * @return clamped date\n   */\n  dayLimit(min, max) {\n    if (min !== null && this.dayBefore(min)) {\n      return min;\n    }\n    if (max !== null && this.dayAfter(max)) {\n      return max;\n    }\n    return this;\n  }\n  /**\n   * Immutably alters current day by passed offset\n   *\n   * If resulting month has more days than original one, date is rounded to the maximum day\n   * in the resulting month. Offset of days will be calculated based on the resulted year and month\n   * to not interfere with parent classes methods\n   *\n   * @param offset\n   * @return new date object as a result of offsetting current\n   */\n  append({\n    year = 0,\n    month = 0,\n    day = 0\n  }) {\n    const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n    let years = Math.floor(totalMonths / MONTHS_IN_YEAR);\n    let months = totalMonths % MONTHS_IN_YEAR;\n    let days = Math.min(this.day, TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) + day;\n    while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {\n      days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n      if (months === 11 /* December */) {\n        years++;\n        months = 0 /* January */;\n      } else {\n        months++;\n      }\n    }\n    while (days < MIN_DAY) {\n      if (months === 0 /* January */) {\n        years--;\n        months = 11 /* December */;\n      } else {\n        months--;\n      }\n      days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n    }\n    return new TuiDay(years, months, days);\n  }\n  /**\n   * Returns formatted whole date\n   */\n  getFormattedDay(dateFormat, separator) {\n    ngDevMode && tuiAssert.assert(separator.length === 1, `Separator should consist of only 1 symbol`);\n    const dd = this.formattedDayPart;\n    const mm = this.formattedMonthPart;\n    const yyyy = this.formattedYear;\n    switch (dateFormat) {\n      case `YMD`:\n        return `${yyyy}${separator}${mm}${separator}${dd}`;\n      case `MDY`:\n        return `${mm}${separator}${dd}${separator}${yyyy}`;\n      case `DMY`:\n      default:\n        return `${dd}${separator}${mm}${separator}${yyyy}`;\n    }\n  }\n  toString(dateFormat = `DMY`, separator = `.`) {\n    return this.getFormattedDay(dateFormat, separator);\n  }\n  toJSON() {\n    return `${super.toJSON()}-${this.formattedDayPart}`;\n  }\n  /**\n   * Returns native {@link Date} based on local time zone\n   */\n  toLocalNativeDate() {\n    return new Date(this.year, this.month, this.day);\n  }\n  /**\n   * Returns native {@link Date} based on UTC\n   */\n  toUtcNativeDate() {\n    return new Date(Date.UTC(this.year, this.month, this.day));\n  }\n}\n\n/**\n * An immutable range of two {@link TuiMonth} objects\n */\nclass TuiMonthRange {\n  constructor(from, to) {\n    this.from = from;\n    this.to = to;\n    ngDevMode && tuiAssert.assert(from.monthSameOrBefore(to));\n  }\n  static sort(month1, month2) {\n    return month1.monthSameOrBefore(month2) ? new TuiMonthRange(month1, month2) : new TuiMonthRange(month2, month1);\n  }\n  get isSingleMonth() {\n    return this.from.monthSame(this.to);\n  }\n  monthSame(another) {\n    return this.from.monthSame(another.from) && this.to.monthSame(another.to);\n  }\n  toString() {\n    return `${this.from}${RANGE_SEPARATOR_CHAR}${this.to}`;\n  }\n}\n\n/**\n * An immutable range of two {@link TuiDay} objects\n */\nclass TuiDayRange extends TuiMonthRange {\n  constructor(from, to) {\n    super(from, to);\n    this.from = from;\n    this.to = to;\n    ngDevMode && tuiAssert.assert(from.daySameOrBefore(to));\n  }\n  /**\n   * Creates range from two days after sorting them\n   *\n   * @param day1\n   * @param day2\n   * @return new range with sorted days\n   */\n  static sort(day1, day2) {\n    return day1.daySameOrBefore(day2) ? new TuiDayRange(day1, day2) : new TuiDayRange(day2, day1);\n  }\n  /**\n   * Parse and correct a day range in string format\n   *\n   * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy\n   * @param dateMode {@link TuiDateMode}\n   * @return normalized day range object\n   */\n  static normalizeParse(rangeString, dateMode = `DMY`) {\n    const leftDay = TuiDay.normalizeParse(rangeString.slice(0, DATE_FILLER_LENGTH), dateMode);\n    if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {\n      return new TuiDayRange(leftDay, leftDay);\n    }\n    return TuiDayRange.sort(leftDay, TuiDay.normalizeParse(rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), dateMode));\n  }\n  get isSingleDay() {\n    return this.from.daySame(this.to);\n  }\n  /**\n   * Tests ranges for identity\n   *\n   * @param another second range to test against current\n   * @return `true` if days are identical\n   */\n  daySame(another) {\n    return this.from.daySame(another.from) && this.to.daySame(another.to);\n  }\n  /**\n   * Locks range between two days included, or limits from one side if the other is null\n   *\n   * @param min\n   * @param max\n   * @return range — clamped range\n   */\n  dayLimit(min, max) {\n    return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));\n  }\n  /**\n   * Human readable format.\n   */\n  getFormattedDayRange(dateFormat, dateSeparator) {\n    const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n    const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n    return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n  }\n  toString(dateFormat = `DMY`, dateSeparator = `.`) {\n    const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n    const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n    return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n  }\n}\nconst TUI_FIRST_DAY = new TuiDay(MIN_YEAR, MIN_MONTH, MIN_DAY);\nconst TUI_LAST_DAY = new TuiDay(MAX_YEAR, MAX_MONTH, 31);\n\n/**\n * Immutable time object with hours, minutes, seconds and ms\n */\nclass TuiTime {\n  constructor(hours, minutes, seconds = 0, ms = 0) {\n    this.hours = hours;\n    this.minutes = minutes;\n    this.seconds = seconds;\n    this.ms = ms;\n    ngDevMode && tuiAssert.assert(TuiTime.isValidTime(hours, minutes, seconds, ms), `Time must be real, but got:`, hours, minutes, seconds, ms);\n  }\n  /**\n   * Checks if time is valid\n   */\n  static isValidTime(hours, minutes, seconds = 0, ms = 0) {\n    return Number.isInteger(hours) && tuiInRange(hours, 0, HOURS_IN_DAY) && Number.isInteger(minutes) && tuiInRange(minutes, 0, MINUTES_IN_HOUR) && Number.isInteger(seconds) && tuiInRange(seconds, 0, SECONDS_IN_MINUTE) && Number.isInteger(ms) && tuiInRange(ms, 0, 1000);\n  }\n  /**\n   * Current UTC time.\n   */\n  static current() {\n    return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);\n  }\n  /**\n   * Current time in local timezone\n   */\n  static currentLocal() {\n    const date = new Date();\n    return TuiTime.fromAbsoluteMilliseconds((Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) % MILLISECONDS_IN_DAY);\n  }\n  /**\n   * Calculates TuiTime from milliseconds\n   */\n  static fromAbsoluteMilliseconds(milliseconds) {\n    ngDevMode && tuiAssert.assert(Number.isInteger(milliseconds));\n    ngDevMode && tuiAssert.assert(tuiInRange(milliseconds, 0, MILLISECONDS_IN_DAY), `Milliseconds must be below ${MILLISECONDS_IN_DAY} (milliseconds in a day).`);\n    const hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);\n    const minutes = Math.floor(milliseconds % MILLISECONDS_IN_HOUR / MILLISECONDS_IN_MINUTE);\n    const seconds = Math.floor(milliseconds % MILLISECONDS_IN_HOUR % MILLISECONDS_IN_MINUTE / 1000) || 0;\n    const ms = Math.floor(milliseconds % MILLISECONDS_IN_HOUR % MILLISECONDS_IN_MINUTE % 1000) || 0;\n    return new TuiTime(hours, minutes, seconds, ms);\n  }\n  /**\n   * Parses string into TuiTime object\n   */\n  static fromString(time) {\n    const hours = Number(time.slice(0, 2));\n    const minutes = Number(time.slice(3, 5));\n    const seconds = Number(time.slice(6, 8)) || 0;\n    const ms = Number(time.slice(9, 12)) || 0;\n    return new TuiTime(hours, minutes, seconds, ms);\n  }\n  /**\n   * Converts Date object into TuiTime\n   * @param date\n   */\n  static fromLocalNativeDate(date) {\n    return new TuiTime(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n  }\n  /**\n   * Shifts time by hours and minutes\n   */\n  shift({\n    hours = 0,\n    minutes = 0,\n    seconds = 0,\n    ms = 0\n  }) {\n    const newMs = (1000 + this.ms + ms % 1000) % 1000;\n    const secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);\n    const secondsToAdd = secondsInMs + seconds;\n    const newSeconds = (60 + this.seconds + secondsToAdd % 60) % 60;\n    const minutesInSeconds = secondsToAdd < 0 ? Math.ceil(secondsToAdd / 60) : Math.floor(secondsToAdd / 60);\n    const minutesToAdd = minutesInSeconds + minutes;\n    const newMinutes = (60 + this.minutes + minutesToAdd % 60) % 60;\n    const hoursInMinutes = minutesToAdd < 0 ? Math.ceil(minutesToAdd / 60) : Math.floor(minutesToAdd / 60);\n    const hoursToAdd = hoursInMinutes + hours;\n    const newHours = (24 + this.hours + hoursToAdd % 24) % 24;\n    return new TuiTime(newHours, newMinutes, newSeconds, newMs);\n  }\n  /**\n   * Converts TuiTime to string\n   */\n  toString(mode) {\n    const needAddMs = mode === `HH:MM:SS.MSS` || !mode && this.ms > 0;\n    const needAddSeconds = needAddMs || mode === `HH:MM:SS` || !mode && this.seconds > 0;\n    return `${this.formatTime(this.hours)}:${this.formatTime(this.minutes)}` + `${needAddSeconds ? `:${this.formatTime(this.seconds)}` : ``}` + `${needAddMs ? `.${this.formatTime(this.ms, 3)}` : ``}`;\n  }\n  valueOf() {\n    return this.toAbsoluteMilliseconds();\n  }\n  /**\n   * Returns the primitive value of the given Date object.\n   * Depending on the argument, the method can return either a string or a number.\n   * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n   */\n  [Symbol.toPrimitive](hint) {\n    return Date.prototype[Symbol.toPrimitive].call(this, hint);\n  }\n  /**\n   * Converts TuiTime to milliseconds\n   */\n  toAbsoluteMilliseconds() {\n    return this.hours * MILLISECONDS_IN_HOUR + this.minutes * MILLISECONDS_IN_MINUTE + this.seconds * 1000 + this.ms;\n  }\n  formatTime(time, digits = 2) {\n    return String(time).padStart(digits, `0`);\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, DAYS_IN_LEAP_YEAR, DAYS_IN_NORMAL_YEAR, DAYS_IN_WEEK, HOURS_IN_DAY, MAX_MONTH, MAX_YEAR, MILLISECONDS_IN_DAY, MILLISECONDS_IN_HOUR, MILLISECONDS_IN_MINUTE, MILLISECONDS_IN_SECOND, MINUTES_IN_HOUR, MIN_DAY, MIN_MONTH, MIN_YEAR, MONTHS_IN_YEAR, RANGE_SEPARATOR_CHAR, SECONDS_IN_MINUTE, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, TuiDayRange, TuiMonth, TuiMonthRange, TuiTime, TuiYear, changeDateSeparator };","map":{"version":3,"names":["CHAR_NO_BREAK_SPACE","CHAR_EN_DASH","InjectionToken","tuiAssert","TuiInvalidYearException","TuiInvalidMonthException","TuiInvalidDayException","tuiInRange","tuiNormalizeToIntNumber","DAYS_IN_WEEK","DAYS_IN_NORMAL_YEAR","DAYS_IN_LEAP_YEAR","MONTHS_IN_YEAR","MIN_DAY","MIN_MONTH","MAX_MONTH","MIN_YEAR","MAX_YEAR","RANGE_SEPARATOR_CHAR","MILLISECONDS_IN_SECOND","SECONDS_IN_MINUTE","MINUTES_IN_HOUR","HOURS_IN_DAY","MILLISECONDS_IN_MINUTE","MILLISECONDS_IN_HOUR","MILLISECONDS_IN_DAY","DATE_FILLER_LENGTH","DATE_RANGE_FILLER_LENGTH","length","TUI_DATE_FORMAT","factory","TUI_DATE_SEPARATOR","changeDateSeparator","dateString","newDateSeparator","replace","TuiYear","constructor","year","ngDevMode","assert","isValidYear","Number","isInteger","isLeapYear","getAbsoluteLeapYears","Math","ceil","lengthBetween","from","to","normalizeYearPart","formattedYear","String","padStart","absoluteLeapYears","yearBefore","yearSameOrBefore","yearSame","yearSameOrAfter","yearAfter","append","resultYear","toString","valueOf","Symbol","toPrimitive","hint","Date","prototype","call","toJSON","TuiMonth","month","isValidMonth","isValidMonthPart","getMonthDaysCount","currentLocal","nativeDate","getFullYear","getMonth","currentUtc","getUTCFullYear","getUTCMonth","absoluteFrom","absoluteTo","normalizeMonthPart","formattedMonthPart","daysCount","monthBefore","another","monthSameOrBefore","monthSame","monthSameOrAfter","monthAfter","totalMonths","floor","toLocalNativeDate","toUtcNativeDate","UTC","TuiDay","day","isValidDay","fromLocalNativeDate","date","getDate","fromUtcNativeDate","getUTCDate","normalizeOf","normalizedYear","normalizedMonth","normalizedDay","normalizeDayPart","round","getTime","parseRawDateString","dateMode","parseInt","slice","normalizeParse","rawDate","jsonParse","yearMonthDayString","monthDaysCount","formattedDayPart","isWeekend","dayOfWeek","startFromMonday","getDay","dayBefore","daySameOrBefore","daySame","daySameOrAfter","dayAfter","dayLimit","min","max","years","months","days","getFormattedDay","dateFormat","separator","dd","mm","yyyy","TuiMonthRange","sort","month1","month2","isSingleMonth","TuiDayRange","day1","day2","rangeString","leftDay","isSingleDay","getFormattedDayRange","dateSeparator","TUI_FIRST_DAY","TUI_LAST_DAY","TuiTime","hours","minutes","seconds","ms","isValidTime","current","fromAbsoluteMilliseconds","now","getTimezoneOffset","milliseconds","fromString","time","getHours","getMinutes","getSeconds","getMilliseconds","shift","newMs","secondsInMs","secondsToAdd","newSeconds","minutesInSeconds","minutesToAdd","newMinutes","hoursInMinutes","hoursToAdd","newHours","mode","needAddMs","needAddSeconds","formatTime","toAbsoluteMilliseconds","digits"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-date-time.js"],"sourcesContent":["import { CHAR_NO_BREAK_SPACE, CHAR_EN_DASH } from '@taiga-ui/cdk/constants';\nimport { InjectionToken } from '@angular/core';\nimport { tuiAssert } from '@taiga-ui/cdk/classes';\nimport { TuiInvalidYearException, TuiInvalidMonthException, TuiInvalidDayException } from '@taiga-ui/cdk/exceptions';\nimport { tuiInRange, tuiNormalizeToIntNumber } from '@taiga-ui/cdk/utils/math';\n\nconst DAYS_IN_WEEK = 7;\nconst DAYS_IN_NORMAL_YEAR = 365;\nconst DAYS_IN_LEAP_YEAR = 366;\nconst MONTHS_IN_YEAR = 12;\nconst MIN_DAY = 1;\nconst MIN_MONTH = 0;\nconst MAX_MONTH = 11;\nconst MIN_YEAR = 0;\nconst MAX_YEAR = 9999;\nconst RANGE_SEPARATOR_CHAR = `${CHAR_NO_BREAK_SPACE}${CHAR_EN_DASH}${CHAR_NO_BREAK_SPACE}`;\nconst MILLISECONDS_IN_SECOND = 1000;\nconst SECONDS_IN_MINUTE = 60;\nconst MINUTES_IN_HOUR = 60;\nconst HOURS_IN_DAY = 24;\nconst MILLISECONDS_IN_MINUTE = MILLISECONDS_IN_SECOND * SECONDS_IN_MINUTE;\nconst MILLISECONDS_IN_HOUR = MILLISECONDS_IN_MINUTE * MINUTES_IN_HOUR;\nconst MILLISECONDS_IN_DAY = MILLISECONDS_IN_HOUR * HOURS_IN_DAY;\n\n/**\n * @internal 'dd.mm.yyyy'.length\n * Used in:\n * - {@link TuiInputDateComponent}\n * - {@link TuiInputDateRangeComponent}\n * - {@link TuiInputDateTimeComponent}\n */\nconst DATE_FILLER_LENGTH = 10;\n/**\n * @internal\n * Used in {@link TuiInputDateRangeComponent}\n */\nconst DATE_RANGE_FILLER_LENGTH = 2 * DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length;\n\n/**\n * Active date format for Taiga UI\n */\nconst TUI_DATE_FORMAT = new InjectionToken(`[TUI_DATE_FORMAT]`, {\n    factory: () => `DMY`,\n});\n\n/**\n * Date separator for Taiga UI components\n */\nconst TUI_DATE_SEPARATOR = new InjectionToken(`[TUI_DATE_SEPARATOR]`, {\n    factory: () => `.`,\n});\nconst changeDateSeparator = (dateString, newDateSeparator) => dateString.replace(/[^0-9A-Za-zА-Яа-я]/gi, newDateSeparator);\n\n/**\n * Immutable year object\n * @nosideeffects\n */\nclass TuiYear {\n    constructor(year) {\n        this.year = year;\n        ngDevMode && tuiAssert.assert(TuiYear.isValidYear(year));\n    }\n    /**\n     * Checks year for validity\n     */\n    static isValidYear(year) {\n        return Number.isInteger(year) && tuiInRange(year, MIN_YEAR, MAX_YEAR + 1);\n    }\n    /**\n     * Check if passed year is a leap year\n     */\n    static isLeapYear(year) {\n        ngDevMode && tuiAssert.assert(TuiYear.isValidYear(year));\n        return year % 400 === 0 || (year % 4 === 0 && year % 100 !== 0);\n    }\n    /**\n     * Returns amount of leap years from year 0 to the passed one\n     */\n    static getAbsoluteLeapYears(year) {\n        ngDevMode && tuiAssert.assert(TuiYear.isValidYear(year));\n        return Math.ceil(year / 400) + (Math.ceil(year / 4) - Math.ceil(year / 100));\n    }\n    static lengthBetween(from, to) {\n        return to.year - from.year;\n    }\n    /**\n     * Normalizes year by clamping it between min and max years\n     */\n    static normalizeYearPart(year) {\n        return tuiNormalizeToIntNumber(year, MIN_YEAR, MAX_YEAR);\n    }\n    get formattedYear() {\n        return String(this.year).padStart(4, `0`);\n    }\n    get isLeapYear() {\n        return TuiYear.isLeapYear(this.year);\n    }\n    /**\n     * Returns amount of leap years from year 0 to current\n     */\n    get absoluteLeapYears() {\n        return TuiYear.getAbsoluteLeapYears(this.year);\n    }\n    /**\n     * Passed year is after current\n     */\n    yearBefore({ year }) {\n        return this.year < year;\n    }\n    /**\n     * Passed year is the same or after current\n     */\n    yearSameOrBefore({ year }) {\n        return this.year <= year;\n    }\n    /**\n     * Passed year is the same as current\n     */\n    yearSame({ year }) {\n        return this.year === year;\n    }\n    /**\n     * Passed year is either the same of before the current\n     */\n    yearSameOrAfter({ year }) {\n        return this.year >= year;\n    }\n    /**\n     * Passed year is before current\n     */\n    yearAfter({ year }) {\n        return this.year > year;\n    }\n    /**\n     * Immutably offsets year\n     */\n    append({ year = 0 }) {\n        ngDevMode && tuiAssert.assert(Number.isInteger(year));\n        const resultYear = this.year + year;\n        ngDevMode && tuiAssert.assert(TuiYear.isValidYear(resultYear));\n        return new TuiYear(resultYear);\n    }\n    toString() {\n        return this.formattedYear;\n    }\n    valueOf() {\n        return this.year;\n    }\n    /**\n     * Returns the primitive value of the given Date object.\n     * Depending on the argument, the method can return either a string or a number.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n     */\n    [Symbol.toPrimitive](hint) {\n        return Date.prototype[Symbol.toPrimitive].call(this, hint);\n    }\n    toJSON() {\n        return this.formattedYear;\n    }\n}\n\n/**\n * Immutable object consisting of year and month\n */\nclass TuiMonth extends TuiYear {\n    /**\n     * @param year\n     * @param month (starting with 0)\n     */\n    constructor(year, month) {\n        super(year);\n        this.month = month;\n        ngDevMode && tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n    }\n    /**\n     * Tests month and year for validity\n     */\n    static isValidMonth(year, month) {\n        return TuiYear.isValidYear(year) && TuiMonth.isValidMonthPart(month);\n    }\n    /**\n     * Returns number of days in a month\n     */\n    static getMonthDaysCount(month, isLeapYear) {\n        ngDevMode && tuiAssert.assert(TuiMonth.isValidMonthPart(month));\n        switch (month) {\n            case 1 /* February */:\n                return isLeapYear ? 29 : 28;\n            case 3 /* April */:\n            case 5 /* June */:\n            case 8 /* September */:\n            case 10 /* November */:\n                return 30;\n            default:\n                return 31;\n        }\n    }\n    /**\n     * Returns current month and year based on local time zone\n     * @nosideeffects\n     */\n    static currentLocal() {\n        const nativeDate = new Date();\n        return new TuiMonth(nativeDate.getFullYear(), nativeDate.getMonth());\n    }\n    /**\n     * Returns current month and year based on UTC\n     */\n    static currentUtc() {\n        const nativeDate = new Date();\n        return new TuiMonth(nativeDate.getUTCFullYear(), nativeDate.getUTCMonth());\n    }\n    static lengthBetween(from, to) {\n        const absoluteFrom = from.month + from.year * 12;\n        const absoluteTo = to.month + to.year * 12;\n        return absoluteTo - absoluteFrom;\n    }\n    /**\n     * Normalizes number by clamping it between min and max month\n     */\n    static normalizeMonthPart(month) {\n        return tuiNormalizeToIntNumber(month, MIN_MONTH, MAX_MONTH);\n    }\n    /**\n     * Tests month for validity\n     */\n    static isValidMonthPart(month) {\n        return Number.isInteger(month) && tuiInRange(month, MIN_MONTH, MAX_MONTH + 1);\n    }\n    get formattedMonthPart() {\n        return String(this.month + 1).padStart(2, `0`);\n    }\n    /**\n     * Returns days in a month\n     */\n    get daysCount() {\n        return TuiMonth.getMonthDaysCount(this.month, this.isLeapYear);\n    }\n    /**\n     * Passed month and year are after current\n     */\n    monthBefore(another) {\n        return (this.yearBefore(another) ||\n            (this.yearSame(another) && this.month < another.month));\n    }\n    /**\n     * Passed month and year are after or the same as current\n     */\n    monthSameOrBefore(another) {\n        return (this.yearBefore(another) ||\n            (this.yearSame(another) && this.month <= another.month));\n    }\n    /**\n     * Passed month and year are the same as current\n     */\n    monthSame(another) {\n        return this.yearSame(another) && this.month === another.month;\n    }\n    /**\n     * Passed month and year are either before or equal to current\n     */\n    monthSameOrAfter(another) {\n        return (this.yearAfter(another) ||\n            (this.yearSame(another) && this.month >= another.month));\n    }\n    /**\n     * Passed month and year are before current\n     */\n    monthAfter(another) {\n        return (this.yearAfter(another) ||\n            (this.yearSame(another) && this.month > another.month));\n    }\n    /**\n     * Immutably alters current month and year by passed offset\n     *\n     * @param offset\n     * @return new month and year object as a result of offsetting current\n     */\n    append({ year = 0, month = 0 }) {\n        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n        return new TuiMonth(Math.floor(totalMonths / MONTHS_IN_YEAR), totalMonths % MONTHS_IN_YEAR);\n    }\n    toString() {\n        return `${this.formattedMonthPart}.${this.formattedYear}`;\n    }\n    valueOf() {\n        return this.toLocalNativeDate().valueOf();\n    }\n    toJSON() {\n        return `${super.toJSON()}-${this.formattedMonthPart}`;\n    }\n    /**\n     * Returns native {@link Date} based on local time zone\n     */\n    toLocalNativeDate() {\n        return new Date(this.year, this.month);\n    }\n    /**\n     * Returns native {@link Date} based on UTC\n     */\n    toUtcNativeDate() {\n        return new Date(Date.UTC(this.year, this.month));\n    }\n}\n\n// TODO: Localized formatting\n/**\n * Immutable date object, consisting of day, month and year\n */\nclass TuiDay extends TuiMonth {\n    constructor(year, month, day) {\n        super(year, month);\n        this.day = day;\n        ngDevMode && tuiAssert.assert(TuiDay.isValidDay(year, month, day));\n    }\n    /**\n     * Creates {@link TuiDay} from native {@link Date} based on local time zone\n     */\n    static fromLocalNativeDate(date) {\n        return new TuiDay(date.getFullYear(), date.getMonth(), date.getDate());\n    }\n    /**\n     * Creates {@link TuiDay} from native {@link Date} using UTC\n     */\n    static fromUtcNativeDate(date) {\n        return new TuiDay(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate());\n    }\n    /**\n     * Check validity of year, month and day\n     *\n     * @param year\n     * @param month\n     * @param day\n     * @return boolean validity\n     */\n    static isValidDay(year, month, day) {\n        return (TuiMonth.isValidMonth(year, month) &&\n            Number.isInteger(day) &&\n            tuiInRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1));\n    }\n    /**\n     * Current day based on local time zone\n     */\n    static currentLocal() {\n        const nativeDate = new Date();\n        const year = nativeDate.getFullYear();\n        const month = nativeDate.getMonth();\n        const day = nativeDate.getDate();\n        return new TuiDay(year, month, day);\n    }\n    /**\n     * Returns current day based on UTC\n     */\n    static currentUtc() {\n        const nativeDate = new Date();\n        const year = nativeDate.getUTCFullYear();\n        const month = nativeDate.getUTCMonth();\n        const day = nativeDate.getUTCDate();\n        return new TuiDay(year, month, day);\n    }\n    /**\n     * Calculates {@link TuiDay} normalizing year, month and day. {@link NaN} is turned into minimal value.\n     *\n     * @param year any year value, including invalid\n     * @param month any month value, including invalid (months start with 0)\n     * @param day any day value, including invalid\n     * @return normalized date\n     */\n    static normalizeOf(year, month, day) {\n        const normalizedYear = TuiYear.normalizeYearPart(year);\n        const normalizedMonth = TuiMonth.normalizeMonthPart(month);\n        const normalizedDay = TuiDay.normalizeDayPart(day, normalizedMonth, normalizedYear);\n        return new TuiDay(normalizedYear, normalizedMonth, normalizedDay);\n    }\n    static lengthBetween(from, to) {\n        return Math.round((to.toLocalNativeDate().getTime() - from.toLocalNativeDate().getTime()) /\n            (1000 * 60 * 60 * 24));\n    }\n    static parseRawDateString(date, dateMode = `DMY`) {\n        ngDevMode &&\n            tuiAssert.assert(date.length === DATE_FILLER_LENGTH, `[parseRawDateString]: wrong date string length`);\n        switch (dateMode) {\n            case `YMD`:\n                return {\n                    day: parseInt(date.slice(8, 10), 10),\n                    month: parseInt(date.slice(5, 7), 10) - 1,\n                    year: parseInt(date.slice(0, 4), 10),\n                };\n            case `MDY`:\n                return {\n                    day: parseInt(date.slice(3, 5), 10),\n                    month: parseInt(date.slice(0, 2), 10) - 1,\n                    year: parseInt(date.slice(6, 10), 10),\n                };\n            default:\n            case `DMY`:\n                return {\n                    day: parseInt(date.slice(0, 2), 10),\n                    month: parseInt(date.slice(3, 5), 10) - 1,\n                    year: parseInt(date.slice(6, 10), 10),\n                };\n        }\n    }\n    // TODO: Move month and year related code corresponding classes\n    /**\n     * Parsing a string with date with normalization\n     *\n     * @param rawDate date string\n     * @param dateMode date format of the date string (DMY | MDY | YMD)\n     * @return normalized date\n     */\n    static normalizeParse(rawDate, dateMode = `DMY`) {\n        const { day, month, year } = this.parseRawDateString(rawDate, dateMode);\n        return TuiDay.normalizeOf(year, month, day);\n    }\n    /**\n     * Parsing a date stringified in a toJSON format\n     * @param yearMonthDayString date string in format of YYYY-MM-DD\n     * @return date\n     * @throws exceptions if any part of the date is invalid\n     */\n    static jsonParse(yearMonthDayString) {\n        const { day, month, year } = this.parseRawDateString(yearMonthDayString, `YMD`);\n        if (!TuiYear.isValidYear(year)) {\n            throw new TuiInvalidYearException(year);\n        }\n        if (!TuiMonth.isValidMonth(year, month)) {\n            throw new TuiInvalidMonthException(month);\n        }\n        if (!Number.isInteger(day) ||\n            !tuiInRange(day, MIN_DAY, TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year)) + 1)) {\n            throw new TuiInvalidDayException(day);\n        }\n        return new TuiDay(year, month, day);\n    }\n    static normalizeDayPart(day, month, year) {\n        ngDevMode && tuiAssert.assert(TuiMonth.isValidMonth(year, month));\n        const monthDaysCount = TuiMonth.getMonthDaysCount(month, TuiYear.isLeapYear(year));\n        return tuiNormalizeToIntNumber(day, 1, monthDaysCount);\n    }\n    get formattedDayPart() {\n        return String(this.day).padStart(2, `0`);\n    }\n    get isWeekend() {\n        const dayOfWeek = this.dayOfWeek(false);\n        return dayOfWeek === 6 /* Saturday */ || dayOfWeek === 0 /* Sunday */;\n    }\n    /**\n     * Returns day of week\n     *\n     * @param startFromMonday whether week starts from Monday and not from Sunday\n     * @return day of week (from 0 to 6)\n     */\n    dayOfWeek(startFromMonday = true) {\n        const dayOfWeek = startFromMonday\n            ? this.toLocalNativeDate().getDay() - 1\n            : this.toLocalNativeDate().getDay();\n        return dayOfWeek < 0 ? 6 : dayOfWeek;\n    }\n    /**\n     * Passed date is after current\n     */\n    dayBefore(another) {\n        return (this.monthBefore(another) ||\n            (this.monthSame(another) && this.day < another.day));\n    }\n    /**\n     * Passed date is after or equals to current\n     */\n    daySameOrBefore(another) {\n        return (this.monthBefore(another) ||\n            (this.monthSame(another) && this.day <= another.day));\n    }\n    /**\n     * Passed date is the same as current\n     */\n    daySame(another) {\n        return this.monthSame(another) && this.day === another.day;\n    }\n    /**\n     * Passed date is either before or the same as current\n     */\n    daySameOrAfter(another) {\n        return (this.monthAfter(another) ||\n            (this.monthSame(another) && this.day >= another.day));\n    }\n    /**\n     * Passed date is before current\n     */\n    dayAfter(another) {\n        return (this.monthAfter(another) ||\n            (this.monthSame(another) && this.day > another.day));\n    }\n    /**\n     * Clamping date between two limits\n     *\n     * @param min\n     * @param max\n     * @return clamped date\n     */\n    dayLimit(min, max) {\n        if (min !== null && this.dayBefore(min)) {\n            return min;\n        }\n        if (max !== null && this.dayAfter(max)) {\n            return max;\n        }\n        return this;\n    }\n    /**\n     * Immutably alters current day by passed offset\n     *\n     * If resulting month has more days than original one, date is rounded to the maximum day\n     * in the resulting month. Offset of days will be calculated based on the resulted year and month\n     * to not interfere with parent classes methods\n     *\n     * @param offset\n     * @return new date object as a result of offsetting current\n     */\n    append({ year = 0, month = 0, day = 0 }) {\n        const totalMonths = (this.year + year) * MONTHS_IN_YEAR + this.month + month;\n        let years = Math.floor(totalMonths / MONTHS_IN_YEAR);\n        let months = totalMonths % MONTHS_IN_YEAR;\n        let days = Math.min(this.day, TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) + day;\n        while (days > TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years))) {\n            days -= TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n            if (months === 11 /* December */) {\n                years++;\n                months = 0 /* January */;\n            }\n            else {\n                months++;\n            }\n        }\n        while (days < MIN_DAY) {\n            if (months === 0 /* January */) {\n                years--;\n                months = 11 /* December */;\n            }\n            else {\n                months--;\n            }\n            days += TuiMonth.getMonthDaysCount(months, TuiYear.isLeapYear(years));\n        }\n        return new TuiDay(years, months, days);\n    }\n    /**\n     * Returns formatted whole date\n     */\n    getFormattedDay(dateFormat, separator) {\n        ngDevMode &&\n            tuiAssert.assert(separator.length === 1, `Separator should consist of only 1 symbol`);\n        const dd = this.formattedDayPart;\n        const mm = this.formattedMonthPart;\n        const yyyy = this.formattedYear;\n        switch (dateFormat) {\n            case `YMD`:\n                return `${yyyy}${separator}${mm}${separator}${dd}`;\n            case `MDY`:\n                return `${mm}${separator}${dd}${separator}${yyyy}`;\n            case `DMY`:\n            default:\n                return `${dd}${separator}${mm}${separator}${yyyy}`;\n        }\n    }\n    toString(dateFormat = `DMY`, separator = `.`) {\n        return this.getFormattedDay(dateFormat, separator);\n    }\n    toJSON() {\n        return `${super.toJSON()}-${this.formattedDayPart}`;\n    }\n    /**\n     * Returns native {@link Date} based on local time zone\n     */\n    toLocalNativeDate() {\n        return new Date(this.year, this.month, this.day);\n    }\n    /**\n     * Returns native {@link Date} based on UTC\n     */\n    toUtcNativeDate() {\n        return new Date(Date.UTC(this.year, this.month, this.day));\n    }\n}\n\n/**\n * An immutable range of two {@link TuiMonth} objects\n */\nclass TuiMonthRange {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n        ngDevMode && tuiAssert.assert(from.monthSameOrBefore(to));\n    }\n    static sort(month1, month2) {\n        return month1.monthSameOrBefore(month2)\n            ? new TuiMonthRange(month1, month2)\n            : new TuiMonthRange(month2, month1);\n    }\n    get isSingleMonth() {\n        return this.from.monthSame(this.to);\n    }\n    monthSame(another) {\n        return this.from.monthSame(another.from) && this.to.monthSame(another.to);\n    }\n    toString() {\n        return `${this.from}${RANGE_SEPARATOR_CHAR}${this.to}`;\n    }\n}\n\n/**\n * An immutable range of two {@link TuiDay} objects\n */\nclass TuiDayRange extends TuiMonthRange {\n    constructor(from, to) {\n        super(from, to);\n        this.from = from;\n        this.to = to;\n        ngDevMode && tuiAssert.assert(from.daySameOrBefore(to));\n    }\n    /**\n     * Creates range from two days after sorting them\n     *\n     * @param day1\n     * @param day2\n     * @return new range with sorted days\n     */\n    static sort(day1, day2) {\n        return day1.daySameOrBefore(day2)\n            ? new TuiDayRange(day1, day2)\n            : new TuiDayRange(day2, day1);\n    }\n    /**\n     * Parse and correct a day range in string format\n     *\n     * @param rangeString a string of dates in a format dd.mm.yyyy - dd.mm.yyyy\n     * @param dateMode {@link TuiDateMode}\n     * @return normalized day range object\n     */\n    static normalizeParse(rangeString, dateMode = `DMY`) {\n        const leftDay = TuiDay.normalizeParse(rangeString.slice(0, DATE_FILLER_LENGTH), dateMode);\n        if (rangeString.length < DATE_RANGE_FILLER_LENGTH) {\n            return new TuiDayRange(leftDay, leftDay);\n        }\n        return TuiDayRange.sort(leftDay, TuiDay.normalizeParse(rangeString.slice(DATE_FILLER_LENGTH + RANGE_SEPARATOR_CHAR.length), dateMode));\n    }\n    get isSingleDay() {\n        return this.from.daySame(this.to);\n    }\n    /**\n     * Tests ranges for identity\n     *\n     * @param another second range to test against current\n     * @return `true` if days are identical\n     */\n    daySame(another) {\n        return this.from.daySame(another.from) && this.to.daySame(another.to);\n    }\n    /**\n     * Locks range between two days included, or limits from one side if the other is null\n     *\n     * @param min\n     * @param max\n     * @return range — clamped range\n     */\n    dayLimit(min, max) {\n        return new TuiDayRange(this.from.dayLimit(min, max), this.to.dayLimit(min, max));\n    }\n    /**\n     * Human readable format.\n     */\n    getFormattedDayRange(dateFormat, dateSeparator) {\n        const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n        const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n    toString(dateFormat = `DMY`, dateSeparator = `.`) {\n        const from = this.from.getFormattedDay(dateFormat, dateSeparator);\n        const to = this.to.getFormattedDay(dateFormat, dateSeparator);\n        return `${from}${RANGE_SEPARATOR_CHAR}${to}`;\n    }\n}\n\nconst TUI_FIRST_DAY = new TuiDay(MIN_YEAR, MIN_MONTH, MIN_DAY);\nconst TUI_LAST_DAY = new TuiDay(MAX_YEAR, MAX_MONTH, 31);\n\n/**\n * Immutable time object with hours, minutes, seconds and ms\n */\nclass TuiTime {\n    constructor(hours, minutes, seconds = 0, ms = 0) {\n        this.hours = hours;\n        this.minutes = minutes;\n        this.seconds = seconds;\n        this.ms = ms;\n        ngDevMode &&\n            tuiAssert.assert(TuiTime.isValidTime(hours, minutes, seconds, ms), `Time must be real, but got:`, hours, minutes, seconds, ms);\n    }\n    /**\n     * Checks if time is valid\n     */\n    static isValidTime(hours, minutes, seconds = 0, ms = 0) {\n        return (Number.isInteger(hours) &&\n            tuiInRange(hours, 0, HOURS_IN_DAY) &&\n            Number.isInteger(minutes) &&\n            tuiInRange(minutes, 0, MINUTES_IN_HOUR) &&\n            Number.isInteger(seconds) &&\n            tuiInRange(seconds, 0, SECONDS_IN_MINUTE) &&\n            Number.isInteger(ms) &&\n            tuiInRange(ms, 0, 1000));\n    }\n    /**\n     * Current UTC time.\n     */\n    static current() {\n        return TuiTime.fromAbsoluteMilliseconds(Date.now() % MILLISECONDS_IN_DAY);\n    }\n    /**\n     * Current time in local timezone\n     */\n    static currentLocal() {\n        const date = new Date();\n        return TuiTime.fromAbsoluteMilliseconds((Date.now() - date.getTimezoneOffset() * MILLISECONDS_IN_MINUTE) %\n            MILLISECONDS_IN_DAY);\n    }\n    /**\n     * Calculates TuiTime from milliseconds\n     */\n    static fromAbsoluteMilliseconds(milliseconds) {\n        ngDevMode && tuiAssert.assert(Number.isInteger(milliseconds));\n        ngDevMode &&\n            tuiAssert.assert(tuiInRange(milliseconds, 0, MILLISECONDS_IN_DAY), `Milliseconds must be below ${MILLISECONDS_IN_DAY} (milliseconds in a day).`);\n        const hours = Math.floor(milliseconds / MILLISECONDS_IN_HOUR);\n        const minutes = Math.floor((milliseconds % MILLISECONDS_IN_HOUR) / MILLISECONDS_IN_MINUTE);\n        const seconds = Math.floor(((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) / 1000) || 0;\n        const ms = Math.floor(((milliseconds % MILLISECONDS_IN_HOUR) % MILLISECONDS_IN_MINUTE) % 1000) || 0;\n        return new TuiTime(hours, minutes, seconds, ms);\n    }\n    /**\n     * Parses string into TuiTime object\n     */\n    static fromString(time) {\n        const hours = Number(time.slice(0, 2));\n        const minutes = Number(time.slice(3, 5));\n        const seconds = Number(time.slice(6, 8)) || 0;\n        const ms = Number(time.slice(9, 12)) || 0;\n        return new TuiTime(hours, minutes, seconds, ms);\n    }\n    /**\n     * Converts Date object into TuiTime\n     * @param date\n     */\n    static fromLocalNativeDate(date) {\n        return new TuiTime(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());\n    }\n    /**\n     * Shifts time by hours and minutes\n     */\n    shift({ hours = 0, minutes = 0, seconds = 0, ms = 0 }) {\n        const newMs = (1000 + this.ms + (ms % 1000)) % 1000;\n        const secondsInMs = ms < 0 ? Math.ceil(ms / 1000) : Math.floor(ms / 1000);\n        const secondsToAdd = secondsInMs + seconds;\n        const newSeconds = (60 + this.seconds + (secondsToAdd % 60)) % 60;\n        const minutesInSeconds = secondsToAdd < 0\n            ? Math.ceil(secondsToAdd / 60)\n            : Math.floor(secondsToAdd / 60);\n        const minutesToAdd = minutesInSeconds + minutes;\n        const newMinutes = (60 + this.minutes + (minutesToAdd % 60)) % 60;\n        const hoursInMinutes = minutesToAdd < 0\n            ? Math.ceil(minutesToAdd / 60)\n            : Math.floor(minutesToAdd / 60);\n        const hoursToAdd = hoursInMinutes + hours;\n        const newHours = (24 + this.hours + (hoursToAdd % 24)) % 24;\n        return new TuiTime(newHours, newMinutes, newSeconds, newMs);\n    }\n    /**\n     * Converts TuiTime to string\n     */\n    toString(mode) {\n        const needAddMs = mode === `HH:MM:SS.MSS` || (!mode && this.ms > 0);\n        const needAddSeconds = needAddMs || mode === `HH:MM:SS` || (!mode && this.seconds > 0);\n        return (`${this.formatTime(this.hours)}:${this.formatTime(this.minutes)}` +\n            `${needAddSeconds ? `:${this.formatTime(this.seconds)}` : ``}` +\n            `${needAddMs ? `.${this.formatTime(this.ms, 3)}` : ``}`);\n    }\n    valueOf() {\n        return this.toAbsoluteMilliseconds();\n    }\n    /**\n     * Returns the primitive value of the given Date object.\n     * Depending on the argument, the method can return either a string or a number.\n     * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/@@toPrimitive\n     */\n    [Symbol.toPrimitive](hint) {\n        return Date.prototype[Symbol.toPrimitive].call(this, hint);\n    }\n    /**\n     * Converts TuiTime to milliseconds\n     */\n    toAbsoluteMilliseconds() {\n        return (this.hours * MILLISECONDS_IN_HOUR +\n            this.minutes * MILLISECONDS_IN_MINUTE +\n            this.seconds * 1000 +\n            this.ms);\n    }\n    formatTime(time, digits = 2) {\n        return String(time).padStart(digits, `0`);\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DATE_FILLER_LENGTH, DATE_RANGE_FILLER_LENGTH, DAYS_IN_LEAP_YEAR, DAYS_IN_NORMAL_YEAR, DAYS_IN_WEEK, HOURS_IN_DAY, MAX_MONTH, MAX_YEAR, MILLISECONDS_IN_DAY, MILLISECONDS_IN_HOUR, MILLISECONDS_IN_MINUTE, MILLISECONDS_IN_SECOND, MINUTES_IN_HOUR, MIN_DAY, MIN_MONTH, MIN_YEAR, MONTHS_IN_YEAR, RANGE_SEPARATOR_CHAR, SECONDS_IN_MINUTE, TUI_DATE_FORMAT, TUI_DATE_SEPARATOR, TUI_FIRST_DAY, TUI_LAST_DAY, TuiDay, TuiDayRange, TuiMonth, TuiMonthRange, TuiTime, TuiYear, changeDateSeparator };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}