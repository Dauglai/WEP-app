{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, ContentChildren, HostListener, Directive, NgModule } from '@angular/core';\nimport * as i6 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport * as i5 from '@taiga-ui/cdk';\nimport { AbstractTuiNullableControl, EMPTY_QUERY, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, TuiMapperPipeModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { tuiCreateNumberMask, tuiEnableAutoCorrectDecimalSymbol, tuiCreateAutoCorrectedNumberPipe, tuiMaskedMoneyValueIsEmpty, tuiMaskedNumberStringToNumber, TUI_DECIMAL_SYMBOLS, tuiGetFractionPartPadded, tuiFormatNumber, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport * as i4 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusOutletDirective, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i2 from '@taiga-ui/kit/directives';\nimport { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nfunction TuiInputNumberComponent_div_4_ng_container_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const text_r5 = ctx.polymorpheusOutlet;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", text_r5, \" \");\n  }\n}\nfunction TuiInputNumberComponent_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵtemplate(1, TuiInputNumberComponent_div_4_ng_container_1_Template, 2, 1, \"ng-container\", 5);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(8);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"polymorpheusOutlet\", _r2);\n  }\n}\nfunction TuiInputNumberComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainer(0);\n  }\n}\nfunction TuiInputNumberComponent_ng_template_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵprojection(0, 2);\n  }\n}\nconst _c0 = [\"*\", [[\"input\"]], [[\"tuiContent\"]]];\nconst _c1 = function (a0, a1, a2, a3, a4) {\n  return [a0, a1, a2, a3, a4];\n};\nconst _c2 = [\"*\", \"input\", \"tuiContent\"];\nconst DEFAULT_MAX_LENGTH = 18;\nclass TuiInputNumberComponent extends AbstractTuiNullableControl {\n  constructor(control, cdr, numberFormat, isIOS) {\n    super(control, cdr);\n    this.numberFormat = numberFormat;\n    this.isIOS = isIOS;\n    this.unfinishedValue = '';\n    this.min = Number.MIN_SAFE_INTEGER;\n    this.max = Number.MAX_SAFE_INTEGER;\n    this.decimal = 'not-zero';\n    this.precision = 2;\n    /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */\n    this.prefix = '';\n    /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */\n    this.postfix = '';\n    this.polymorpheusValueContent = EMPTY_QUERY;\n    this.mask = (allowNegative, decimal, decimalLimit, nativeFocusableElement) => ({\n      mask: tuiCreateNumberMask({\n        allowNegative,\n        decimalLimit,\n        allowDecimal: decimal !== 'never',\n        requireDecimal: decimal === 'always',\n        decimalSymbol: this.numberFormat.decimalSeparator,\n        thousandSymbol: this.numberFormat.thousandSeparator,\n        autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(this.numberFormat)\n      }),\n      pipe: tuiCreateAutoCorrectedNumberPipe(decimal === 'always' ? decimalLimit : 0, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, nativeFocusableElement, allowNegative, this.isIOS),\n      guide: false\n    });\n  }\n  get nativeFocusableElement() {\n    return !this.primitiveTextfield || this.computedDisabled ? null : this.primitiveTextfield.nativeFocusableElement;\n  }\n  get focused() {\n    return !!this.primitiveTextfield && this.primitiveTextfield.focused;\n  }\n  get isNegativeAllowed() {\n    return this.min < 0;\n  }\n  get inputMode() {\n    if (this.isIOS && this.isNegativeAllowed) {\n      // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'\n      return 'text';\n    }\n    return this.decimal === 'never' ? 'numeric' : 'decimal';\n  }\n  get calculatedMaxLength() {\n    const decimalPart = this.decimal !== 'never' && this.nativeValue.includes(this.numberFormat.decimalSeparator);\n    const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;\n    const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;\n    return DEFAULT_MAX_LENGTH + precision + takeThousand;\n  }\n  get formattedValue() {\n    return this.getFormattedValue(this.value || 0);\n  }\n  get computedValue() {\n    if (this.focused) {\n      return this.nativeValue;\n    }\n    return this.value === null ? '' : this.formattedValue;\n  }\n  onZero(event) {\n    const decimal = this.nativeValue.split(this.numberFormat.decimalSeparator)[1] || '';\n    const {\n      nativeFocusableElement\n    } = this;\n    if (decimal.length < this.precision || !nativeFocusableElement || !nativeFocusableElement.selectionStart || this.nativeValue[nativeFocusableElement.selectionStart] !== '0') {\n      return;\n    }\n    event.preventDefault();\n    nativeFocusableElement.selectionStart++;\n  }\n  onValueChange(value) {\n    if (tuiMaskedMoneyValueIsEmpty(value)) {\n      this.value = null;\n      return;\n    }\n    if (this.isNativeValueNotFinished) {\n      this.unfinishedValue = value;\n      return;\n    }\n    this.unfinishedValue = null;\n    const capped = this.absoluteCapInputValue(value);\n    if (capped === null || Number.isNaN(capped)) {\n      return;\n    }\n    this.value = capped;\n    if (capped !== tuiMaskedNumberStringToNumber(value, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)) {\n      this.nativeValue = this.formattedValue;\n    }\n  }\n  onKeyDown(event) {\n    if (!TUI_DECIMAL_SYMBOLS.includes(event.key)) {\n      return;\n    }\n    if (this.decimal === 'never') {\n      event.preventDefault();\n      return;\n    }\n    if (this.nativeValue.includes(this.numberFormat.decimalSeparator)) {\n      event.preventDefault();\n      this.setCaretAfterComma();\n    }\n  }\n  onFocused(focused) {\n    this.updateFocused(focused);\n    if (focused) {\n      return;\n    }\n    const nativeNumberValue = this.unfinishedValue ? tuiMaskedNumberStringToNumber(this.unfinishedValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator) : this.nativeNumberValue;\n    this.unfinishedValue = null;\n    if (Number.isNaN(nativeNumberValue)) {\n      this.clear();\n      return;\n    }\n    this.value = Math.min(this.max, Math.max(this.min, nativeNumberValue));\n    this.nativeValue = this.formattedValue;\n  }\n  getFormattedValue(value) {\n    const absValue = Math.abs(value);\n    const hasFraction = absValue % 1 > 0;\n    let decimalLimit = this.decimal === 'always' || hasFraction && this.decimal !== 'never' ? this.precision : 0;\n    const fraction = hasFraction ? tuiGetFractionPartPadded(value, this.precision) : '';\n    if (this.focused && this.decimal !== 'always') {\n      decimalLimit = fraction.length;\n    }\n    return tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), {\n      decimalLimit\n    }));\n  }\n  get isNativeValueNotFinished() {\n    const nativeNumberValue = this.nativeNumberValue;\n    return nativeNumberValue < 0 ? nativeNumberValue > this.max : nativeNumberValue < this.min;\n  }\n  get nativeValue() {\n    return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n  }\n  set nativeValue(value) {\n    if (!this.primitiveTextfield || !this.nativeFocusableElement) {\n      return;\n    }\n    this.primitiveTextfield.value = value;\n    this.nativeFocusableElement.value = value;\n  }\n  get nativeNumberValue() {\n    return tuiMaskedNumberStringToNumber(this.nativeValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n  }\n  clear() {\n    this.nativeValue = '';\n    this.value = null;\n  }\n  absoluteCapInputValue(inputValue) {\n    const value = tuiMaskedNumberStringToNumber(inputValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n    const capped = value < 0 ? Math.max(Math.max(this.min, Number.MIN_SAFE_INTEGER), value) : Math.min(value, Math.min(this.max, Number.MAX_SAFE_INTEGER));\n    const ineligibleValue = Number.isNaN(capped) || capped < this.min || capped > this.max;\n    return ineligibleValue ? null : capped;\n  }\n  setCaretAfterComma() {\n    if (!this.nativeFocusableElement) {\n      return;\n    }\n    const afterCommaPosition = this.nativeValue.length - this.precision;\n    this.nativeFocusableElement.setSelectionRange(afterCommaPosition, afterCommaPosition);\n  }\n}\nTuiInputNumberComponent.ɵfac = function TuiInputNumberComponent_Factory(t) {\n  return new (t || TuiInputNumberComponent)(i0.ɵɵdirectiveInject(NgControl, 10), i0.ɵɵdirectiveInject(ChangeDetectorRef), i0.ɵɵdirectiveInject(TUI_NUMBER_FORMAT), i0.ɵɵdirectiveInject(TUI_IS_IOS));\n};\nTuiInputNumberComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: TuiInputNumberComponent,\n  selectors: [[\"tui-input-number\"]],\n  contentQueries: function TuiInputNumberComponent_ContentQueries(rf, ctx, dirIndex) {\n    if (rf & 1) {\n      i0.ɵɵcontentQuery(dirIndex, PolymorpheusOutletDirective, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.polymorpheusValueContent = _t);\n    }\n  },\n  viewQuery: function TuiInputNumberComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(TuiPrimitiveTextfieldComponent, 5);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.primitiveTextfield = _t.first);\n    }\n  },\n  hostBindings: function TuiInputNumberComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown.0\", function TuiInputNumberComponent_keydown_0_HostBindingHandler($event) {\n        return ctx.onZero($event);\n      });\n    }\n  },\n  inputs: {\n    min: \"min\",\n    max: \"max\",\n    decimal: \"decimal\",\n    precision: \"precision\",\n    prefix: \"prefix\",\n    postfix: \"postfix\"\n  },\n  features: [i0.ɵɵProvidersFeature([tuiAsFocusableItemAccessor(TuiInputNumberComponent), tuiAsControl(TuiInputNumberComponent)]), i0.ɵɵInheritDefinitionFeature],\n  ngContentSelectors: _c2,\n  decls: 9,\n  vars: 27,\n  consts: [[\"tuiValueAccessor\", \"\", 1, \"t-textfield\", 3, \"pseudoHover\", \"pseudoFocus\", \"pseudoActive\", \"invalid\", \"readOnly\", \"disabled\", \"textMask\", \"value\", \"prefix\", \"postfix\", \"focusable\", \"valueChange\", \"focusedChange\", \"keydown\"], [\"ngProjectAs\", \"tuiContent\", \"class\", \"t-value-content\", 5, [\"tuiContent\"], 4, \"ngIf\"], [4, \"ngIf\"], [\"valueContent\", \"\"], [\"ngProjectAs\", \"tuiContent\", 5, [\"tuiContent\"], 1, \"t-value-content\"], [4, \"polymorpheusOutlet\"]],\n  template: function TuiInputNumberComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵprojectionDef(_c0);\n      i0.ɵɵelementStart(0, \"tui-primitive-textfield\", 0);\n      i0.ɵɵlistener(\"valueChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_valueChange_0_listener($event) {\n        return ctx.onValueChange($event);\n      })(\"focusedChange\", function TuiInputNumberComponent_Template_tui_primitive_textfield_focusedChange_0_listener($event) {\n        return ctx.onFocused($event);\n      })(\"keydown\", function TuiInputNumberComponent_Template_tui_primitive_textfield_keydown_0_listener($event) {\n        return ctx.onKeyDown($event);\n      });\n      i0.ɵɵpipe(1, \"tuiMapper\");\n      i0.ɵɵprojection(2);\n      i0.ɵɵprojection(3, 1, [\"ngProjectAs\", \"input\", 5, [\"input\"]]);\n      i0.ɵɵtemplate(4, TuiInputNumberComponent_div_4_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, TuiInputNumberComponent_ng_container_5_Template, 1, 0, \"ng-container\", 2);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵtemplate(7, TuiInputNumberComponent_ng_template_7_Template, 1, 0, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"pseudoHover\", ctx.pseudoHover)(\"pseudoFocus\", ctx.computedFocused)(\"pseudoActive\", ctx.pseudoActive)(\"invalid\", ctx.computedInvalid)(\"readOnly\", ctx.readOnly)(\"disabled\", ctx.computedDisabled)(\"textMask\", i0.ɵɵpipeBindV(1, 13, i0.ɵɵpureFunction5(21, _c1, ctx.isNegativeAllowed, ctx.mask, ctx.decimal, ctx.precision, ctx.nativeFocusableElement)))(\"value\", ctx.computedValue)(\"prefix\", ctx.prefix)(\"postfix\", ctx.postfix)(\"focusable\", ctx.focusable);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", ctx.polymorpheusValueContent.length);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 19, ctx.polymorpheusValueContent.changes));\n    }\n  },\n  dependencies: [i1.TuiPrimitiveTextfieldComponent, i1.TuiPrimitiveTextfieldDirective, i2.TuiValueAccessorDirective, i2.MaskedInputDirective, i3.NgIf, i4.PolymorpheusOutletDirective, i5.TuiMapperPipe, i3.AsyncPipe],\n  styles: [\"[_nghost-%COMP%]{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-textfield[_ngcontent-%COMP%]{border-radius:inherit;text-align:inherit}.t-value-content[_ngcontent-%COMP%]{width:100%}\"],\n  changeDetection: 0\n});\n__decorate([tuiDefaultProp()], TuiInputNumberComponent.prototype, \"min\", void 0);\n__decorate([tuiDefaultProp()], TuiInputNumberComponent.prototype, \"max\", void 0);\n__decorate([tuiDefaultProp()], TuiInputNumberComponent.prototype, \"decimal\", void 0);\n__decorate([tuiDefaultProp()], TuiInputNumberComponent.prototype, \"precision\", void 0);\n__decorate([tuiDefaultProp()], TuiInputNumberComponent.prototype, \"prefix\", void 0);\n__decorate([tuiDefaultProp()], TuiInputNumberComponent.prototype, \"postfix\", void 0);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputNumberComponent, [{\n    type: Component,\n    args: [{\n      selector: 'tui-input-number',\n      templateUrl: './input-number.template.html',\n      styleUrls: ['./input-number.style.less'],\n      changeDetection: ChangeDetectionStrategy.OnPush,\n      providers: [tuiAsFocusableItemAccessor(TuiInputNumberComponent), tuiAsControl(TuiInputNumberComponent)]\n    }]\n  }], function () {\n    return [{\n      type: i6.NgControl,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Self\n      }, {\n        type: Inject,\n        args: [NgControl]\n      }]\n    }, {\n      type: i0.ChangeDetectorRef,\n      decorators: [{\n        type: Inject,\n        args: [ChangeDetectorRef]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TUI_NUMBER_FORMAT]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TUI_IS_IOS]\n      }]\n    }];\n  }, {\n    primitiveTextfield: [{\n      type: ViewChild,\n      args: [TuiPrimitiveTextfieldComponent]\n    }],\n    min: [{\n      type: Input\n    }],\n    max: [{\n      type: Input\n    }],\n    decimal: [{\n      type: Input\n    }],\n    precision: [{\n      type: Input\n    }],\n    prefix: [{\n      type: Input\n    }],\n    postfix: [{\n      type: Input\n    }],\n    polymorpheusValueContent: [{\n      type: ContentChildren,\n      args: [PolymorpheusOutletDirective, {\n        descendants: true\n      }]\n    }],\n    onZero: [{\n      type: HostListener,\n      args: ['keydown.0', ['$event']]\n    }]\n  });\n})();\nclass TuiInputNumberDirective extends AbstractTuiTextfieldHost {\n  get value() {\n    return this.host.computedValue;\n  }\n  onValueChange(value) {\n    this.host.onValueChange(value);\n  }\n  ngDoCheck() {\n    if (!this.host.nativeFocusableElement) {\n      return;\n    }\n    this.host.nativeFocusableElement.maxLength = this.host.calculatedMaxLength;\n    this.host.nativeFocusableElement.inputMode = this.host.inputMode;\n  }\n}\nTuiInputNumberDirective.ɵfac = /* @__PURE__ */function () {\n  let ɵTuiInputNumberDirective_BaseFactory;\n  return function TuiInputNumberDirective_Factory(t) {\n    return (ɵTuiInputNumberDirective_BaseFactory || (ɵTuiInputNumberDirective_BaseFactory = i0.ɵɵgetInheritedFactory(TuiInputNumberDirective)))(t || TuiInputNumberDirective);\n  };\n}();\nTuiInputNumberDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiInputNumberDirective,\n  selectors: [[\"tui-input-number\"]],\n  features: [i0.ɵɵProvidersFeature([tuiAsTextfieldHost(TuiInputNumberDirective)]), i0.ɵɵInheritDefinitionFeature]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputNumberDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'tui-input-number',\n      providers: [tuiAsTextfieldHost(TuiInputNumberDirective)]\n    }]\n  }], null, null);\n})();\nclass TuiInputNumberModule {}\nTuiInputNumberModule.ɵfac = function TuiInputNumberModule_Factory(t) {\n  return new (t || TuiInputNumberModule)();\n};\nTuiInputNumberModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TuiInputNumberModule\n});\nTuiInputNumberModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, TextMaskModule, TuiMapperPipeModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiInputNumberModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, TextMaskModule, TuiMapperPipeModule, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiValueAccessorModule, PolymorpheusModule],\n      declarations: [TuiInputNumberComponent, TuiInputNumberDirective],\n      exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiInputNumberComponent, TuiInputNumberDirective, TuiInputNumberModule };","map":{"version":3,"names":["__decorate","i0","ChangeDetectorRef","Component","ChangeDetectionStrategy","Optional","Self","Inject","ViewChild","Input","ContentChildren","HostListener","Directive","NgModule","i6","NgControl","i5","AbstractTuiNullableControl","EMPTY_QUERY","TUI_IS_IOS","tuiAsFocusableItemAccessor","tuiAsControl","tuiDefaultProp","TuiMapperPipeModule","i1","tuiCreateNumberMask","tuiEnableAutoCorrectDecimalSymbol","tuiCreateAutoCorrectedNumberPipe","tuiMaskedMoneyValueIsEmpty","tuiMaskedNumberStringToNumber","TUI_DECIMAL_SYMBOLS","tuiGetFractionPartPadded","tuiFormatNumber","TUI_NUMBER_FORMAT","TuiPrimitiveTextfieldComponent","AbstractTuiTextfieldHost","tuiAsTextfieldHost","TuiPrimitiveTextfieldModule","TuiTextfieldControllerModule","TuiTextfieldComponent","i4","PolymorpheusOutletDirective","PolymorpheusModule","i2","TextMaskModule","TuiValueAccessorModule","i3","CommonModule","DEFAULT_MAX_LENGTH","TuiInputNumberComponent","constructor","control","cdr","numberFormat","isIOS","unfinishedValue","min","Number","MIN_SAFE_INTEGER","max","MAX_SAFE_INTEGER","decimal","precision","prefix","postfix","polymorpheusValueContent","mask","allowNegative","decimalLimit","nativeFocusableElement","allowDecimal","requireDecimal","decimalSymbol","decimalSeparator","thousandSymbol","thousandSeparator","autoCorrectDecimalSymbol","pipe","guide","primitiveTextfield","computedDisabled","focused","isNegativeAllowed","inputMode","calculatedMaxLength","decimalPart","nativeValue","includes","Math","takeThousand","repeat","length","formattedValue","getFormattedValue","value","computedValue","onZero","event","split","selectionStart","preventDefault","onValueChange","isNativeValueNotFinished","capped","absoluteCapInputValue","isNaN","onKeyDown","key","setCaretAfterComma","onFocused","updateFocused","nativeNumberValue","clear","absValue","abs","hasFraction","fraction","Object","assign","inputValue","ineligibleValue","afterCommaPosition","setSelectionRange","ɵfac","ɵcmp","TuiPrimitiveTextfieldDirective","TuiValueAccessorDirective","MaskedInputDirective","NgIf","TuiMapperPipe","AsyncPipe","prototype","type","args","selector","templateUrl","styleUrls","changeDetection","OnPush","providers","decorators","undefined","descendants","TuiInputNumberDirective","host","ngDoCheck","maxLength","ɵdir","TuiInputNumberModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/kit/fesm2015/taiga-ui-kit-components-input-number.js"],"sourcesContent":["import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { ChangeDetectorRef, Component, ChangeDetectionStrategy, Optional, Self, Inject, ViewChild, Input, ContentChildren, HostListener, Directive, NgModule } from '@angular/core';\nimport * as i6 from '@angular/forms';\nimport { NgControl } from '@angular/forms';\nimport * as i5 from '@taiga-ui/cdk';\nimport { AbstractTuiNullableControl, EMPTY_QUERY, TUI_IS_IOS, tuiAsFocusableItemAccessor, tuiAsControl, tuiDefaultProp, TuiMapperPipeModule } from '@taiga-ui/cdk';\nimport * as i1 from '@taiga-ui/core';\nimport { tuiCreateNumberMask, tuiEnableAutoCorrectDecimalSymbol, tuiCreateAutoCorrectedNumberPipe, tuiMaskedMoneyValueIsEmpty, tuiMaskedNumberStringToNumber, TUI_DECIMAL_SYMBOLS, tuiGetFractionPartPadded, tuiFormatNumber, TUI_NUMBER_FORMAT, TuiPrimitiveTextfieldComponent, AbstractTuiTextfieldHost, tuiAsTextfieldHost, TuiPrimitiveTextfieldModule, TuiTextfieldControllerModule, TuiTextfieldComponent } from '@taiga-ui/core';\nimport * as i4 from '@tinkoff/ng-polymorpheus';\nimport { PolymorpheusOutletDirective, PolymorpheusModule } from '@tinkoff/ng-polymorpheus';\nimport * as i2 from '@taiga-ui/kit/directives';\nimport { TextMaskModule, TuiValueAccessorModule } from '@taiga-ui/kit/directives';\nimport * as i3 from '@angular/common';\nimport { CommonModule } from '@angular/common';\n\nconst DEFAULT_MAX_LENGTH = 18;\nclass TuiInputNumberComponent extends AbstractTuiNullableControl {\n    constructor(control, cdr, numberFormat, isIOS) {\n        super(control, cdr);\n        this.numberFormat = numberFormat;\n        this.isIOS = isIOS;\n        this.unfinishedValue = '';\n        this.min = Number.MIN_SAFE_INTEGER;\n        this.max = Number.MAX_SAFE_INTEGER;\n        this.decimal = 'not-zero';\n        this.precision = 2;\n        /** @deprecated use `tuiTextfieldPrefix` from {@link TuiTextfieldControllerModule} instead */\n        this.prefix = '';\n        /** @deprecated use `tuiTextfieldPostfix` from {@link TuiTextfieldControllerModule} instead */\n        this.postfix = '';\n        this.polymorpheusValueContent = EMPTY_QUERY;\n        this.mask = (allowNegative, decimal, decimalLimit, nativeFocusableElement) => ({\n            mask: tuiCreateNumberMask({\n                allowNegative,\n                decimalLimit,\n                allowDecimal: decimal !== 'never',\n                requireDecimal: decimal === 'always',\n                decimalSymbol: this.numberFormat.decimalSeparator,\n                thousandSymbol: this.numberFormat.thousandSeparator,\n                autoCorrectDecimalSymbol: tuiEnableAutoCorrectDecimalSymbol(this.numberFormat),\n            }),\n            pipe: tuiCreateAutoCorrectedNumberPipe(decimal === 'always' ? decimalLimit : 0, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator, nativeFocusableElement, allowNegative, this.isIOS),\n            guide: false,\n        });\n    }\n    get nativeFocusableElement() {\n        return !this.primitiveTextfield || this.computedDisabled\n            ? null\n            : this.primitiveTextfield.nativeFocusableElement;\n    }\n    get focused() {\n        return !!this.primitiveTextfield && this.primitiveTextfield.focused;\n    }\n    get isNegativeAllowed() {\n        return this.min < 0;\n    }\n    get inputMode() {\n        if (this.isIOS && this.isNegativeAllowed) {\n            // iPhone does not have minus sign if inputMode is equal to 'numeric' / 'decimal'\n            return 'text';\n        }\n        return this.decimal === 'never' ? 'numeric' : 'decimal';\n    }\n    get calculatedMaxLength() {\n        const decimalPart = this.decimal !== 'never' &&\n            this.nativeValue.includes(this.numberFormat.decimalSeparator);\n        const precision = decimalPart ? Math.min(this.precision + 1, 20) : 0;\n        const takeThousand = this.numberFormat.thousandSeparator.repeat(5).length;\n        return DEFAULT_MAX_LENGTH + precision + takeThousand;\n    }\n    get formattedValue() {\n        return this.getFormattedValue(this.value || 0);\n    }\n    get computedValue() {\n        if (this.focused) {\n            return this.nativeValue;\n        }\n        return this.value === null ? '' : this.formattedValue;\n    }\n    onZero(event) {\n        const decimal = this.nativeValue.split(this.numberFormat.decimalSeparator)[1] || '';\n        const { nativeFocusableElement } = this;\n        if (decimal.length < this.precision ||\n            !nativeFocusableElement ||\n            !nativeFocusableElement.selectionStart ||\n            this.nativeValue[nativeFocusableElement.selectionStart] !== '0') {\n            return;\n        }\n        event.preventDefault();\n        nativeFocusableElement.selectionStart++;\n    }\n    onValueChange(value) {\n        if (tuiMaskedMoneyValueIsEmpty(value)) {\n            this.value = null;\n            return;\n        }\n        if (this.isNativeValueNotFinished) {\n            this.unfinishedValue = value;\n            return;\n        }\n        this.unfinishedValue = null;\n        const capped = this.absoluteCapInputValue(value);\n        if (capped === null || Number.isNaN(capped)) {\n            return;\n        }\n        this.value = capped;\n        if (capped !==\n            tuiMaskedNumberStringToNumber(value, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)) {\n            this.nativeValue = this.formattedValue;\n        }\n    }\n    onKeyDown(event) {\n        if (!TUI_DECIMAL_SYMBOLS.includes(event.key)) {\n            return;\n        }\n        if (this.decimal === 'never') {\n            event.preventDefault();\n            return;\n        }\n        if (this.nativeValue.includes(this.numberFormat.decimalSeparator)) {\n            event.preventDefault();\n            this.setCaretAfterComma();\n        }\n    }\n    onFocused(focused) {\n        this.updateFocused(focused);\n        if (focused) {\n            return;\n        }\n        const nativeNumberValue = this.unfinishedValue\n            ? tuiMaskedNumberStringToNumber(this.unfinishedValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator)\n            : this.nativeNumberValue;\n        this.unfinishedValue = null;\n        if (Number.isNaN(nativeNumberValue)) {\n            this.clear();\n            return;\n        }\n        this.value = Math.min(this.max, Math.max(this.min, nativeNumberValue));\n        this.nativeValue = this.formattedValue;\n    }\n    getFormattedValue(value) {\n        const absValue = Math.abs(value);\n        const hasFraction = absValue % 1 > 0;\n        let decimalLimit = this.decimal === 'always' || (hasFraction && this.decimal !== 'never')\n            ? this.precision\n            : 0;\n        const fraction = hasFraction\n            ? tuiGetFractionPartPadded(value, this.precision)\n            : '';\n        if (this.focused && this.decimal !== 'always') {\n            decimalLimit = fraction.length;\n        }\n        return tuiFormatNumber(value, Object.assign(Object.assign({}, this.numberFormat), { decimalLimit }));\n    }\n    get isNativeValueNotFinished() {\n        const nativeNumberValue = this.nativeNumberValue;\n        return nativeNumberValue < 0\n            ? nativeNumberValue > this.max\n            : nativeNumberValue < this.min;\n    }\n    get nativeValue() {\n        return this.nativeFocusableElement ? this.nativeFocusableElement.value : '';\n    }\n    set nativeValue(value) {\n        if (!this.primitiveTextfield || !this.nativeFocusableElement) {\n            return;\n        }\n        this.primitiveTextfield.value = value;\n        this.nativeFocusableElement.value = value;\n    }\n    get nativeNumberValue() {\n        return tuiMaskedNumberStringToNumber(this.nativeValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n    }\n    clear() {\n        this.nativeValue = '';\n        this.value = null;\n    }\n    absoluteCapInputValue(inputValue) {\n        const value = tuiMaskedNumberStringToNumber(inputValue, this.numberFormat.decimalSeparator, this.numberFormat.thousandSeparator);\n        const capped = value < 0\n            ? Math.max(Math.max(this.min, Number.MIN_SAFE_INTEGER), value)\n            : Math.min(value, Math.min(this.max, Number.MAX_SAFE_INTEGER));\n        const ineligibleValue = Number.isNaN(capped) || capped < this.min || capped > this.max;\n        return ineligibleValue ? null : capped;\n    }\n    setCaretAfterComma() {\n        if (!this.nativeFocusableElement) {\n            return;\n        }\n        const afterCommaPosition = this.nativeValue.length - this.precision;\n        this.nativeFocusableElement.setSelectionRange(afterCommaPosition, afterCommaPosition);\n    }\n}\nTuiInputNumberComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberComponent, deps: [{ token: NgControl, optional: true, self: true }, { token: ChangeDetectorRef }, { token: TUI_NUMBER_FORMAT }, { token: TUI_IS_IOS }], target: i0.ɵɵFactoryTarget.Component });\nTuiInputNumberComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiInputNumberComponent, selector: \"tui-input-number\", inputs: { min: \"min\", max: \"max\", decimal: \"decimal\", precision: \"precision\", prefix: \"prefix\", postfix: \"postfix\" }, host: { listeners: { \"keydown.0\": \"onZero($event)\" } }, providers: [\n        tuiAsFocusableItemAccessor(TuiInputNumberComponent),\n        tuiAsControl(TuiInputNumberComponent),\n    ], queries: [{ propertyName: \"polymorpheusValueContent\", predicate: PolymorpheusOutletDirective, descendants: true }], viewQueries: [{ propertyName: \"primitiveTextfield\", first: true, predicate: TuiPrimitiveTextfieldComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: \"<tui-primitive-textfield\\n    tuiValueAccessor\\n    class=\\\"t-textfield\\\"\\n    [pseudoHover]=\\\"pseudoHover\\\"\\n    [pseudoFocus]=\\\"computedFocused\\\"\\n    [pseudoActive]=\\\"pseudoActive\\\"\\n    [invalid]=\\\"computedInvalid\\\"\\n    [readOnly]=\\\"readOnly\\\"\\n    [disabled]=\\\"computedDisabled\\\"\\n    [textMask]=\\\"isNegativeAllowed | tuiMapper : mask : decimal : precision : nativeFocusableElement\\\"\\n    [value]=\\\"computedValue\\\"\\n    [prefix]=\\\"prefix\\\"\\n    [postfix]=\\\"postfix\\\"\\n    [focusable]=\\\"focusable\\\"\\n    (valueChange)=\\\"onValueChange($event)\\\"\\n    (focusedChange)=\\\"onFocused($event)\\\"\\n    (keydown)=\\\"onKeyDown($event)\\\"\\n>\\n    <ng-content></ng-content>\\n    <ng-content\\n        select=\\\"input\\\"\\n        ngProjectAs=\\\"input\\\"\\n    ></ng-content>\\n    <div\\n        *ngIf=\\\"polymorpheusValueContent.length\\\"\\n        ngProjectAs=\\\"tuiContent\\\"\\n        class=\\\"t-value-content\\\"\\n    >\\n        <ng-container *polymorpheusOutlet=\\\"valueContent as text\\\">\\n            {{ text }}\\n        </ng-container>\\n    </div>\\n</tui-primitive-textfield>\\n\\n<ng-container *ngIf=\\\"polymorpheusValueContent.changes | async\\\"></ng-container>\\n\\n<ng-template #valueContent>\\n    <ng-content select=\\\"tuiContent\\\"></ng-content>\\n</ng-template>\\n\", styles: [\":host{display:block;border-radius:var(--tui-radius-m);text-align:left}.t-textfield{border-radius:inherit;text-align:inherit}.t-value-content{width:100%}\\n\"], components: [{ type: i1.TuiPrimitiveTextfieldComponent, selector: \"tui-primitive-textfield\", inputs: [\"editable\", \"filler\", \"iconCleaner\", \"readOnly\", \"invalid\", \"disabled\", \"prefix\", \"postfix\", \"value\"], outputs: [\"valueChange\"] }], directives: [{ type: i1.TuiPrimitiveTextfieldDirective, selector: \"tui-primitive-textfield\" }, { type: i2.TuiValueAccessorDirective, selector: \"[tuiValueAccessor]\" }, { type: i2.MaskedInputDirective, selector: \"[textMask]\", inputs: [\"textMask\"], exportAs: [\"textMask\"] }, { type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i4.PolymorpheusOutletDirective, selector: \"[polymorpheusOutlet]\", inputs: [\"polymorpheusOutlet\", \"polymorpheusOutletContext\"] }], pipes: { \"tuiMapper\": i5.TuiMapperPipe, \"async\": i3.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush });\n__decorate([\n    tuiDefaultProp()\n], TuiInputNumberComponent.prototype, \"min\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputNumberComponent.prototype, \"max\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputNumberComponent.prototype, \"decimal\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputNumberComponent.prototype, \"precision\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputNumberComponent.prototype, \"prefix\", void 0);\n__decorate([\n    tuiDefaultProp()\n], TuiInputNumberComponent.prototype, \"postfix\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'tui-input-number',\n                    templateUrl: './input-number.template.html',\n                    styleUrls: ['./input-number.style.less'],\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    providers: [\n                        tuiAsFocusableItemAccessor(TuiInputNumberComponent),\n                        tuiAsControl(TuiInputNumberComponent),\n                    ],\n                }]\n        }], ctorParameters: function () { return [{ type: i6.NgControl, decorators: [{\n                    type: Optional\n                }, {\n                    type: Self\n                }, {\n                    type: Inject,\n                    args: [NgControl]\n                }] }, { type: i0.ChangeDetectorRef, decorators: [{\n                    type: Inject,\n                    args: [ChangeDetectorRef]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TUI_NUMBER_FORMAT]\n                }] }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TUI_IS_IOS]\n                }] }]; }, propDecorators: { primitiveTextfield: [{\n                type: ViewChild,\n                args: [TuiPrimitiveTextfieldComponent]\n            }], min: [{\n                type: Input\n            }], max: [{\n                type: Input\n            }], decimal: [{\n                type: Input\n            }], precision: [{\n                type: Input\n            }], prefix: [{\n                type: Input\n            }], postfix: [{\n                type: Input\n            }], polymorpheusValueContent: [{\n                type: ContentChildren,\n                args: [PolymorpheusOutletDirective, { descendants: true }]\n            }], onZero: [{\n                type: HostListener,\n                args: ['keydown.0', ['$event']]\n            }] } });\n\nclass TuiInputNumberDirective extends AbstractTuiTextfieldHost {\n    get value() {\n        return this.host.computedValue;\n    }\n    onValueChange(value) {\n        this.host.onValueChange(value);\n    }\n    ngDoCheck() {\n        if (!this.host.nativeFocusableElement) {\n            return;\n        }\n        this.host.nativeFocusableElement.maxLength = this.host.calculatedMaxLength;\n        this.host.nativeFocusableElement.inputMode = this.host.inputMode;\n    }\n}\nTuiInputNumberDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive });\nTuiInputNumberDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiInputNumberDirective, selector: \"tui-input-number\", providers: [tuiAsTextfieldHost(TuiInputNumberDirective)], usesInheritance: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'tui-input-number',\n                    providers: [tuiAsTextfieldHost(TuiInputNumberDirective)],\n                }]\n        }] });\n\nclass TuiInputNumberModule {\n}\nTuiInputNumberModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTuiInputNumberModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberModule, declarations: [TuiInputNumberComponent, TuiInputNumberDirective], imports: [CommonModule,\n        TextMaskModule,\n        TuiMapperPipeModule,\n        TuiPrimitiveTextfieldModule,\n        TuiTextfieldControllerModule,\n        TuiValueAccessorModule,\n        PolymorpheusModule], exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent] });\nTuiInputNumberModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberModule, imports: [[\n            CommonModule,\n            TextMaskModule,\n            TuiMapperPipeModule,\n            TuiPrimitiveTextfieldModule,\n            TuiTextfieldControllerModule,\n            TuiValueAccessorModule,\n            PolymorpheusModule,\n        ]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiInputNumberModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        CommonModule,\n                        TextMaskModule,\n                        TuiMapperPipeModule,\n                        TuiPrimitiveTextfieldModule,\n                        TuiTextfieldControllerModule,\n                        TuiValueAccessorModule,\n                        PolymorpheusModule,\n                    ],\n                    declarations: [TuiInputNumberComponent, TuiInputNumberDirective],\n                    exports: [TuiInputNumberComponent, TuiInputNumberDirective, TuiTextfieldComponent],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiInputNumberComponent, TuiInputNumberDirective, TuiInputNumberModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}