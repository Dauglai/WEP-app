{"ast":null,"code":"import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ElementRef, Directive, Inject, Input, HostBinding, Output, HostListener, NgModule } from '@angular/core';\nimport { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';\nclass TuiMediaDirective {\n  constructor(el) {\n    this.el = el;\n    this.playbackRate = 1;\n    this.volume = 1;\n    this.currentTimeChange = new EventEmitter();\n    this.pausedChange = new EventEmitter();\n    this.volumeChange = new EventEmitter();\n  }\n  set playbackRateSetter(playbackRate) {\n    this.updatePlaybackRate(playbackRate);\n  }\n  set currentTime(currentTime) {\n    if (Math.abs(currentTime - this.currentTime) > 0.05) {\n      this.el.nativeElement.currentTime = currentTime;\n    }\n  }\n  get currentTime() {\n    return this.el.nativeElement.currentTime;\n  }\n  set paused(paused) {\n    if (paused) {\n      this.el.nativeElement.pause();\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.el.nativeElement.play();\n      this.updatePlaybackRate(this.playbackRate);\n    }\n  }\n  get paused() {\n    return this.el.nativeElement.paused;\n  }\n  // @bad TODO: Make sure no other events can affect this like network issues etc.\n  onPausedChange(paused) {\n    this.pausedChange.emit(paused);\n    this.updatePlaybackRate(this.playbackRate);\n  }\n  onVolumeChange() {\n    this.volume = this.el.nativeElement.volume;\n    this.volumeChange.emit(this.volume);\n  }\n  onCurrentTimeChange() {\n    this.currentTimeChange.emit(this.currentTime);\n  }\n  changeDetectionTrigger() {\n    // @bad TODO: consider if other events need to trigger CD\n  }\n  updatePlaybackRate(playbackRate) {\n    this.playbackRate = playbackRate;\n    this.el.nativeElement.playbackRate = this.playbackRate;\n  }\n}\nTuiMediaDirective.ɵfac = function TuiMediaDirective_Factory(t) {\n  return new (t || TuiMediaDirective)(i0.ɵɵdirectiveInject(ElementRef));\n};\nTuiMediaDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TuiMediaDirective,\n  selectors: [[\"video\", \"tuiMedia\", \"\"], [\"audio\", \"tuiMedia\", \"\"]],\n  hostVars: 1,\n  hostBindings: function TuiMediaDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"ended\", function TuiMediaDirective_ended_HostBindingHandler() {\n        return ctx.onPausedChange(true);\n      })(\"pause\", function TuiMediaDirective_pause_HostBindingHandler() {\n        return ctx.onPausedChange(true);\n      })(\"play\", function TuiMediaDirective_play_HostBindingHandler() {\n        return ctx.onPausedChange(false);\n      })(\"volumechange\", function TuiMediaDirective_volumechange_HostBindingHandler() {\n        return ctx.onVolumeChange();\n      })(\"timeupdate\", function TuiMediaDirective_timeupdate_HostBindingHandler() {\n        return ctx.onCurrentTimeChange();\n      })(\"seeking\", function TuiMediaDirective_seeking_HostBindingHandler() {\n        return ctx.onCurrentTimeChange();\n      })(\"seeked\", function TuiMediaDirective_seeked_HostBindingHandler() {\n        return ctx.onCurrentTimeChange();\n      })(\"durationchange\", function TuiMediaDirective_durationchange_HostBindingHandler() {\n        return ctx.changeDetectionTrigger();\n      });\n    }\n    if (rf & 2) {\n      i0.ɵɵhostProperty(\"volume\", ctx.volume);\n    }\n  },\n  inputs: {\n    volume: \"volume\",\n    playbackRateSetter: [\"playbackRate\", \"playbackRateSetter\"],\n    currentTime: \"currentTime\",\n    paused: \"paused\"\n  },\n  outputs: {\n    currentTimeChange: \"currentTimeChange\",\n    pausedChange: \"pausedChange\",\n    volumeChange: \"volumeChange\"\n  },\n  exportAs: [\"tuiMedia\"]\n});\n__decorate([tuiDefaultProp(volume => Number.isFinite(volume) && volume >= 0 && volume <= 1)], TuiMediaDirective.prototype, \"volume\", void 0);\n__decorate([tuiRequiredSetter(nonNegativeFiniteAssertion)], TuiMediaDirective.prototype, \"playbackRateSetter\", null);\n__decorate([tuiRequiredSetter(nonNegativeFiniteAssertion)], TuiMediaDirective.prototype, \"currentTime\", null);\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiMediaDirective, [{\n    type: Directive,\n    args: [{\n      selector: 'video[tuiMedia], audio[tuiMedia]',\n      exportAs: 'tuiMedia'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef,\n      decorators: [{\n        type: Inject,\n        args: [ElementRef]\n      }]\n    }];\n  }, {\n    volume: [{\n      type: Input\n    }, {\n      type: HostBinding,\n      args: ['volume']\n    }],\n    playbackRateSetter: [{\n      type: Input,\n      args: ['playbackRate']\n    }],\n    currentTimeChange: [{\n      type: Output\n    }],\n    pausedChange: [{\n      type: Output\n    }],\n    volumeChange: [{\n      type: Output\n    }],\n    currentTime: [{\n      type: Input\n    }],\n    paused: [{\n      type: Input\n    }],\n    onPausedChange: [{\n      type: HostListener,\n      args: ['ended', ['true']]\n    }, {\n      type: HostListener,\n      args: ['pause', ['true']]\n    }, {\n      type: HostListener,\n      args: ['play', ['false']]\n    }],\n    onVolumeChange: [{\n      type: HostListener,\n      args: ['volumechange']\n    }],\n    onCurrentTimeChange: [{\n      type: HostListener,\n      args: ['timeupdate']\n    }, {\n      type: HostListener,\n      args: ['seeking']\n    }, {\n      type: HostListener,\n      args: ['seeked']\n    }],\n    changeDetectionTrigger: [{\n      type: HostListener,\n      args: ['durationchange']\n    }]\n  });\n})();\nfunction nonNegativeFiniteAssertion(value) {\n  return Number.isFinite(value) && value >= 0;\n}\nclass TuiMediaModule {}\nTuiMediaModule.ɵfac = function TuiMediaModule_Factory(t) {\n  return new (t || TuiMediaModule)();\n};\nTuiMediaModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TuiMediaModule\n});\nTuiMediaModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TuiMediaModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TuiMediaDirective],\n      exports: [TuiMediaDirective]\n    }]\n  }], null, null);\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiMediaDirective, TuiMediaModule };","map":{"version":3,"names":["__decorate","i0","EventEmitter","ElementRef","Directive","Inject","Input","HostBinding","Output","HostListener","NgModule","tuiDefaultProp","tuiRequiredSetter","TuiMediaDirective","constructor","el","playbackRate","volume","currentTimeChange","pausedChange","volumeChange","playbackRateSetter","updatePlaybackRate","currentTime","Math","abs","nativeElement","paused","pause","play","onPausedChange","emit","onVolumeChange","onCurrentTimeChange","changeDetectionTrigger","ɵfac","ɵdir","Number","isFinite","prototype","nonNegativeFiniteAssertion","type","args","selector","exportAs","decorators","value","TuiMediaModule","ɵmod","ɵinj","declarations","exports"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/@taiga-ui/cdk/fesm2015/taiga-ui-cdk-directives-media.js"],"sourcesContent":["import { __decorate } from 'tslib';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, ElementRef, Directive, Inject, Input, HostBinding, Output, HostListener, NgModule } from '@angular/core';\nimport { tuiDefaultProp, tuiRequiredSetter } from '@taiga-ui/cdk/decorators';\n\nclass TuiMediaDirective {\n    constructor(el) {\n        this.el = el;\n        this.playbackRate = 1;\n        this.volume = 1;\n        this.currentTimeChange = new EventEmitter();\n        this.pausedChange = new EventEmitter();\n        this.volumeChange = new EventEmitter();\n    }\n    set playbackRateSetter(playbackRate) {\n        this.updatePlaybackRate(playbackRate);\n    }\n    set currentTime(currentTime) {\n        if (Math.abs(currentTime - this.currentTime) > 0.05) {\n            this.el.nativeElement.currentTime = currentTime;\n        }\n    }\n    get currentTime() {\n        return this.el.nativeElement.currentTime;\n    }\n    set paused(paused) {\n        if (paused) {\n            this.el.nativeElement.pause();\n        }\n        else {\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.el.nativeElement.play();\n            this.updatePlaybackRate(this.playbackRate);\n        }\n    }\n    get paused() {\n        return this.el.nativeElement.paused;\n    }\n    // @bad TODO: Make sure no other events can affect this like network issues etc.\n    onPausedChange(paused) {\n        this.pausedChange.emit(paused);\n        this.updatePlaybackRate(this.playbackRate);\n    }\n    onVolumeChange() {\n        this.volume = this.el.nativeElement.volume;\n        this.volumeChange.emit(this.volume);\n    }\n    onCurrentTimeChange() {\n        this.currentTimeChange.emit(this.currentTime);\n    }\n    changeDetectionTrigger() {\n        // @bad TODO: consider if other events need to trigger CD\n    }\n    updatePlaybackRate(playbackRate) {\n        this.playbackRate = playbackRate;\n        this.el.nativeElement.playbackRate = this.playbackRate;\n    }\n}\nTuiMediaDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiMediaDirective, deps: [{ token: ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nTuiMediaDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"12.2.17\", type: TuiMediaDirective, selector: \"video[tuiMedia], audio[tuiMedia]\", inputs: { volume: \"volume\", playbackRateSetter: [\"playbackRate\", \"playbackRateSetter\"], currentTime: \"currentTime\", paused: \"paused\" }, outputs: { currentTimeChange: \"currentTimeChange\", pausedChange: \"pausedChange\", volumeChange: \"volumeChange\" }, host: { listeners: { \"ended\": \"onPausedChange(true)\", \"pause\": \"onPausedChange(true)\", \"play\": \"onPausedChange(false)\", \"volumechange\": \"onVolumeChange()\", \"timeupdate\": \"onCurrentTimeChange()\", \"seeking\": \"onCurrentTimeChange()\", \"seeked\": \"onCurrentTimeChange()\", \"durationchange\": \"changeDetectionTrigger()\" }, properties: { \"volume\": \"this.volume\" } }, exportAs: [\"tuiMedia\"], ngImport: i0 });\n__decorate([\n    tuiDefaultProp((volume) => Number.isFinite(volume) && volume >= 0 && volume <= 1)\n], TuiMediaDirective.prototype, \"volume\", void 0);\n__decorate([\n    tuiRequiredSetter(nonNegativeFiniteAssertion)\n], TuiMediaDirective.prototype, \"playbackRateSetter\", null);\n__decorate([\n    tuiRequiredSetter(nonNegativeFiniteAssertion)\n], TuiMediaDirective.prototype, \"currentTime\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiMediaDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'video[tuiMedia], audio[tuiMedia]',\n                    exportAs: 'tuiMedia',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef, decorators: [{\n                    type: Inject,\n                    args: [ElementRef]\n                }] }]; }, propDecorators: { volume: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: ['volume']\n            }], playbackRateSetter: [{\n                type: Input,\n                args: ['playbackRate']\n            }], currentTimeChange: [{\n                type: Output\n            }], pausedChange: [{\n                type: Output\n            }], volumeChange: [{\n                type: Output\n            }], currentTime: [{\n                type: Input\n            }], paused: [{\n                type: Input\n            }], onPausedChange: [{\n                type: HostListener,\n                args: ['ended', ['true']]\n            }, {\n                type: HostListener,\n                args: ['pause', ['true']]\n            }, {\n                type: HostListener,\n                args: ['play', ['false']]\n            }], onVolumeChange: [{\n                type: HostListener,\n                args: ['volumechange']\n            }], onCurrentTimeChange: [{\n                type: HostListener,\n                args: ['timeupdate']\n            }, {\n                type: HostListener,\n                args: ['seeking']\n            }, {\n                type: HostListener,\n                args: ['seeked']\n            }], changeDetectionTrigger: [{\n                type: HostListener,\n                args: ['durationchange']\n            }] } });\nfunction nonNegativeFiniteAssertion(value) {\n    return Number.isFinite(value) && value >= 0;\n}\n\nclass TuiMediaModule {\n}\nTuiMediaModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiMediaModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nTuiMediaModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiMediaModule, declarations: [TuiMediaDirective], exports: [TuiMediaDirective] });\nTuiMediaModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiMediaModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"12.2.17\", ngImport: i0, type: TuiMediaModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [TuiMediaDirective],\n                    exports: [TuiMediaDirective],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { TuiMediaDirective, TuiMediaModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}