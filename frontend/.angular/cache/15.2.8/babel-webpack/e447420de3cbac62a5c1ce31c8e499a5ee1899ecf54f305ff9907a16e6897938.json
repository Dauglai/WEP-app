{"ast":null,"code":"import { HttpHeaders, HttpParams } from \"@angular/common/http\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class GroupService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8000/api/groups/';\n    this.apiGroupCreate = 'http://localhost:8000/api/teacher/create_group/';\n    this.apiGetGroup = 'http://localhost:8000/api/teacher/get_group/<>';\n    this.headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      Authorization: 'Token ' + localStorage.getItem('my-token')\n    });\n  }\n  getGroups() {\n    const body = {};\n    return this.http.get(this.apiUrl, {\n      headers: {\n        Authorization: 'Token ' + localStorage.getItem('my-token')\n      }\n    });\n  }\n  getGroup(id) {\n    let params = new HttpParams().set(\"id\", id);\n    const groupData = this.http.get(this.apiUrl, {\n      headers: {\n        Authorization: 'Token ' + localStorage.getItem('my-token')\n      },\n      params: params\n    });\n    return;\n  }\n  createGroup(nameGroup, login, password) {\n    const group = {\n      group_name: nameGroup,\n      login: login,\n      password: password\n    };\n    return this.http.post(this.apiGroupCreate, group, {\n      headers: this.headers\n    });\n  }\n}\nGroupService.ɵfac = function GroupService_Factory(t) {\n  return new (t || GroupService)(i0.ɵɵinject(i1.HttpClient));\n};\nGroupService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupService,\n  factory: GroupService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AACA,SAAoBA,WAAW,EAAEC,UAAU,QAAO,sBAAsB;;;AAQxE,OAAM,MAAOC,YAAY;EACzBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IACd,WAAM,GAAG,mCAAmC;IAC5C,mBAAc,GAAG,iDAAiD;IAClE,gBAAW,GAAG,gDAAgD;IAE9D,YAAO,GAAG,IAAIJ,WAAW,CAC7B;MAAC,cAAc,EAAE,kBAAkB;MACjCK,aAAa,EAAE,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU;IAAC,CAAC,CAC9D;EARmC;EAUtCC,SAAS;IACP,MAAMC,IAAI,GAAG,EAAE;IACf,OAAO,IAAI,CAACL,IAAI,CAACM,GAAG,CAAW,IAAI,CAACC,MAAM,EAAC;MAACC,OAAO,EAC/C;QAACP,aAAa,EAAE,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU;MAAC;KAC9D,CAAC;EACJ;EAEAM,QAAQ,CAACC,EAAU;IACjB,IAAIC,MAAM,GAAG,IAAId,UAAU,EAAE,CAACe,GAAG,CAAC,IAAI,EAAEF,EAAE,CAAC;IAC3C,MAAMG,SAAS,GAAG,IAAI,CAACb,IAAI,CAACM,GAAG,CAAM,IAAI,CAACC,MAAM,EAAE;MAC9CC,OAAO,EAAE;QAACP,aAAa,EAAE,QAAQ,GAAGC,YAAY,CAACC,OAAO,CAAC,UAAU;MAAC,CAAC;MACrEQ,MAAM,EAAEA;KAAQ,CAAC;IACrB;EACF;EAEAG,WAAW,CAACC,SAAiB,EAAEC,KAAa,EAAEC,QAAgB;IAC5D,MAAMC,KAAK,GAAG;MAACC,UAAU,EAAGJ,SAAS;MAAEC,KAAK,EAAEA,KAAK;MAAEC,QAAQ,EAAEA;IAAQ,CAAC;IACxE,OAAO,IAAI,CAACjB,IAAI,CAACoB,IAAI,CAAC,IAAI,CAACC,cAAc,EAAEH,KAAK,EAAE;MAACV,OAAO,EAAE,IAAI,CAACA;IAAO,CAAC,CAAC;EAC5E;;AA7BWV,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;SAAZA,YAAY;EAAAwB,SAAZxB,YAAY;EAAAyB,YAFX;AAAM","names":["HttpHeaders","HttpParams","GroupService","constructor","http","Authorization","localStorage","getItem","getGroups","body","get","apiUrl","headers","getGroup","id","params","set","groupData","createGroup","nameGroup","login","password","group","group_name","post","apiGroupCreate","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\denis\\PycharmProjects\\example_project\\frontend\\src\\app\\servicies\\group.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {HttpClient, HttpHeaders, HttpParams} from \"@angular/common/http\";\nimport {Observable} from \"rxjs\";\nimport {IGroup} from \"../interfaces/interface.group\";\nimport {AccountService} from \"./account.service\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupService {\nconstructor(private http: HttpClient) { }\n  private apiUrl = 'http://localhost:8000/api/groups/';\n  private apiGroupCreate = 'http://localhost:8000/api/teacher/create_group/';\n  private apiGetGroup = 'http://localhost:8000/api/teacher/get_group/<>';\n\n  private headers = new HttpHeaders(\n      {'Content-Type': 'application/json',\n        Authorization: 'Token ' + localStorage.getItem('my-token')}\n    );\n\n  getGroups(): Observable<IGroup[]> {\n    const body = {}\n    return this.http.get<IGroup[]>(this.apiUrl,{headers:\n        {Authorization: 'Token ' + localStorage.getItem('my-token')}\n    });\n  }\n\n  getGroup(id: number): any {\n    let params = new HttpParams().set(\"id\", id)\n    const groupData = this.http.get<any>(this.apiUrl, {\n        headers: {Authorization: 'Token ' + localStorage.getItem('my-token')},\n        params: params });\n    return\n  }\n\n  createGroup(nameGroup: string, login: string, password: string): Observable<any> {\n    const group = {group_name:  nameGroup, login: login, password: password};\n    return this.http.post(this.apiGroupCreate, group, {headers: this.headers});\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}