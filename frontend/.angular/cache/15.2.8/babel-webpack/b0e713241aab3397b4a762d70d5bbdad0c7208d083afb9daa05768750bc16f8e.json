{"ast":null,"code":"import { __rest } from \"tslib\";\nimport { createOperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nexport function fromFetch(input, initWithSelector = {}) {\n  const {\n      selector\n    } = initWithSelector,\n    init = __rest(initWithSelector, [\"selector\"]);\n  return new Observable(subscriber => {\n    const controller = new AbortController();\n    const {\n      signal\n    } = controller;\n    let abortable = true;\n    const {\n      signal: outerSignal\n    } = init;\n    if (outerSignal) {\n      if (outerSignal.aborted) {\n        controller.abort();\n      } else {\n        const outerSignalHandler = () => {\n          if (!signal.aborted) {\n            controller.abort();\n          }\n        };\n        outerSignal.addEventListener('abort', outerSignalHandler);\n        subscriber.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));\n      }\n    }\n    const perSubscriberInit = Object.assign(Object.assign({}, init), {\n      signal\n    });\n    const handleError = err => {\n      abortable = false;\n      subscriber.error(err);\n    };\n    fetch(input, perSubscriberInit).then(response => {\n      if (selector) {\n        innerFrom(selector(response)).subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n          abortable = false;\n          subscriber.complete();\n        }, handleError));\n      } else {\n        abortable = false;\n        subscriber.next(response);\n        subscriber.complete();\n      }\n    }).catch(handleError);\n    return () => {\n      if (abortable) {\n        controller.abort();\n      }\n    };\n  });\n}","map":{"version":3,"names":["__rest","createOperatorSubscriber","Observable","innerFrom","fromFetch","input","initWithSelector","selector","init","subscriber","controller","AbortController","signal","abortable","outerSignal","aborted","abort","outerSignalHandler","addEventListener","add","removeEventListener","perSubscriberInit","Object","assign","handleError","err","error","fetch","then","response","subscribe","undefined","complete","next","catch"],"sources":["C:/Users/denis/PycharmProjects/example_project/frontend/node_modules/rxjs/dist/esm/internal/observable/dom/fetch.js"],"sourcesContent":["import { __rest } from \"tslib\";\nimport { createOperatorSubscriber } from '../../operators/OperatorSubscriber';\nimport { Observable } from '../../Observable';\nimport { innerFrom } from '../../observable/innerFrom';\nexport function fromFetch(input, initWithSelector = {}) {\n    const { selector } = initWithSelector, init = __rest(initWithSelector, [\"selector\"]);\n    return new Observable((subscriber) => {\n        const controller = new AbortController();\n        const { signal } = controller;\n        let abortable = true;\n        const { signal: outerSignal } = init;\n        if (outerSignal) {\n            if (outerSignal.aborted) {\n                controller.abort();\n            }\n            else {\n                const outerSignalHandler = () => {\n                    if (!signal.aborted) {\n                        controller.abort();\n                    }\n                };\n                outerSignal.addEventListener('abort', outerSignalHandler);\n                subscriber.add(() => outerSignal.removeEventListener('abort', outerSignalHandler));\n            }\n        }\n        const perSubscriberInit = Object.assign(Object.assign({}, init), { signal });\n        const handleError = (err) => {\n            abortable = false;\n            subscriber.error(err);\n        };\n        fetch(input, perSubscriberInit)\n            .then((response) => {\n            if (selector) {\n                innerFrom(selector(response)).subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n                    abortable = false;\n                    subscriber.complete();\n                }, handleError));\n            }\n            else {\n                abortable = false;\n                subscriber.next(response);\n                subscriber.complete();\n            }\n        })\n            .catch(handleError);\n        return () => {\n            if (abortable) {\n                controller.abort();\n            }\n        };\n    });\n}\n"],"mappings":"AAAA,SAASA,MAAM,QAAQ,OAAO;AAC9B,SAASC,wBAAwB,QAAQ,oCAAoC;AAC7E,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,SAASC,SAAS,QAAQ,4BAA4B;AACtD,OAAO,SAASC,SAAS,CAACC,KAAK,EAAEC,gBAAgB,GAAG,CAAC,CAAC,EAAE;EACpD,MAAM;MAAEC;IAAS,CAAC,GAAGD,gBAAgB;IAAEE,IAAI,GAAGR,MAAM,CAACM,gBAAgB,EAAE,CAAC,UAAU,CAAC,CAAC;EACpF,OAAO,IAAIJ,UAAU,CAAEO,UAAU,IAAK;IAClC,MAAMC,UAAU,GAAG,IAAIC,eAAe,EAAE;IACxC,MAAM;MAAEC;IAAO,CAAC,GAAGF,UAAU;IAC7B,IAAIG,SAAS,GAAG,IAAI;IACpB,MAAM;MAAED,MAAM,EAAEE;IAAY,CAAC,GAAGN,IAAI;IACpC,IAAIM,WAAW,EAAE;MACb,IAAIA,WAAW,CAACC,OAAO,EAAE;QACrBL,UAAU,CAACM,KAAK,EAAE;MACtB,CAAC,MACI;QACD,MAAMC,kBAAkB,GAAG,MAAM;UAC7B,IAAI,CAACL,MAAM,CAACG,OAAO,EAAE;YACjBL,UAAU,CAACM,KAAK,EAAE;UACtB;QACJ,CAAC;QACDF,WAAW,CAACI,gBAAgB,CAAC,OAAO,EAAED,kBAAkB,CAAC;QACzDR,UAAU,CAACU,GAAG,CAAC,MAAML,WAAW,CAACM,mBAAmB,CAAC,OAAO,EAAEH,kBAAkB,CAAC,CAAC;MACtF;IACJ;IACA,MAAMI,iBAAiB,GAAGC,MAAM,CAACC,MAAM,CAACD,MAAM,CAACC,MAAM,CAAC,CAAC,CAAC,EAAEf,IAAI,CAAC,EAAE;MAAEI;IAAO,CAAC,CAAC;IAC5E,MAAMY,WAAW,GAAIC,GAAG,IAAK;MACzBZ,SAAS,GAAG,KAAK;MACjBJ,UAAU,CAACiB,KAAK,CAACD,GAAG,CAAC;IACzB,CAAC;IACDE,KAAK,CAACtB,KAAK,EAAEgB,iBAAiB,CAAC,CAC1BO,IAAI,CAAEC,QAAQ,IAAK;MACpB,IAAItB,QAAQ,EAAE;QACVJ,SAAS,CAACI,QAAQ,CAACsB,QAAQ,CAAC,CAAC,CAACC,SAAS,CAAC7B,wBAAwB,CAACQ,UAAU,EAAEsB,SAAS,EAAE,MAAM;UAC1FlB,SAAS,GAAG,KAAK;UACjBJ,UAAU,CAACuB,QAAQ,EAAE;QACzB,CAAC,EAAER,WAAW,CAAC,CAAC;MACpB,CAAC,MACI;QACDX,SAAS,GAAG,KAAK;QACjBJ,UAAU,CAACwB,IAAI,CAACJ,QAAQ,CAAC;QACzBpB,UAAU,CAACuB,QAAQ,EAAE;MACzB;IACJ,CAAC,CAAC,CACGE,KAAK,CAACV,WAAW,CAAC;IACvB,OAAO,MAAM;MACT,IAAIX,SAAS,EAAE;QACXH,UAAU,CAACM,KAAK,EAAE;MACtB;IACJ,CAAC;EACL,CAAC,CAAC;AACN"},"metadata":{},"sourceType":"module","externalDependencies":[]}